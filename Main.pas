unit Main;

interface

uses
  Windows, Messages, System.SysUtils, Variants, Classes, Graphics, Controls,
  Forms, Dialogs, StdCtrls, ComCtrls, ExtCtrls, Grids, DB, ADODB, ComObj,
  WinProcs, ShellAPI, Menus, Buttons, ZColorStringGrid, ActnList, Math,
  DateUtils, WinSock, Clipbrd, AdvProgressBar, ShlObj, FileCtrl, AdvObj,
  BaseGrid, AdvGrid, JvLabel, JvExControls, JvGradient, AdvCombo, ColCombo,
  IdBaseComponent, IdComponent, IdIPWatch, JvPatchFile, JvTimeLimit,
  JvComponentBase, JvEasterEgg, asgcheck, AsgLinks, UConnCeh, UConnKlap, UOsnova,
  ExcelXP, IdMessage, IdTCPConnection, IdTCPClient,
  IdExplicitTLSClientServerBase, IdMessageClient, IdSMTPBase, Masks, IdSMTP,
  System.Actions, System.ImageList, Vcl.ImgList, IBX.IBDatabase, IdIMAP4,
  IdIOHandler, IdIOHandlerSocket, IdIOHandlerStack, IdSSL, IdSSLOpenSSL,
  mmsystem, IdAttachment, IdAttachmentFile, idText, idMessageParts,XLSFile, XLSWorkbook, XLSFormat, XLSHyperlink
  , Vcl.MPlayer,
  IWVCLBaseControl, IWBaseControl, IWBaseHTMLControl, IWControl, IWCompFile,
  IWDBStdCtrls;

const                   //gulyakova-ei
  FN_DAT = 'Дата';
  FN_ZAK = 'Заказ';
  FN_KOL = 'Кол во';
  FN_KOL_ZAP = 'Кол во запущенных';
  FN_NAM = 'Изделие';
  FN_A = 'A';
  FN_B = 'B';
  FN_MOD_PRIVOD = 'МодПривода';
  FN_PLAN_DATA = 'план Дата';
  FN_PLAN_NED = 'план Неделя';
  FN_ZAKAZCHIK = 'Заказчик';
  FN_PR = 'пр';
  FN_SGP = 'ПДО';
  FN_NOM = 'Номер';
  FN_RAS_DATA_GOTOVN = 'Расчетная дата готовности';
  FN_BRIKET = 'Брикет';
  FN_TEHNOLOG = 'Технолог Обраб';
  FN_TEHNOLOG_GOTOV = 'Технолог Готов';
  FN_TEHNOLOG_PRIM = 'Технолог Прим';
  FN_PLAN = 'Диспетчер';
  FN_PLAN_PRIM = 'Диспетчер Прим';
        //=================================
  FN_ZAG = 'Заготовка';
  FN_ZAG_ZAP = 'Заготовка Запуск';
  FN_ZAG_GOT = 'Заготовка Готовность';
  FN_SBOR = 'Сборка';
  FN_SBOR_ZAP = 'Сборка Запуск';
  FN_SBOR_GOT = 'Сборка Готовность';
  FN_SBOR_PRIM = 'Сборка Примечание';
        {FN_PROIZV='Производство Зап';
        FN_PROIZV_GOTOV='Производство Готов';
        FN_PROIZV_PRIM='Производство Прим'; }
  FN_PR_OTK = 'ОТК';
  FN_KOL_OTK = 'Кол принятых';
  FN_PR_OTK_PRIM = 'ОТК Прим';
  FN_DAT_OTGRUZ = 'Упаковка';
  FN_OSOBEN = 'Заводской номер';
  FN_SBOR_KLAP_NC = 'Н\ч Сборка Клапана';
  FN_SVARKA_NC = 'Н\ч Сварка';
  FN_NAZV = 'Название';
  FN_IDGP = 'IdГП';
  FN_IDKO = 'IdКО';
  FN_TYP = 'Тип';
  FN_STAT = 'Статус';
  FN_NAZNACH = 'Назначение';
  FN_ISPOL = 'Исполнение';
  FN_D = 'D';
  FN_L = 'L';
  FN_FLAN = 'Фланец';
  FN_PRIVOD = 'Привод';
  FN_TYP_PRIVOD = 'ТипПривода';
  FN_RAS_PRIVOD = 'РаспПривода';
  FN_VSTAVKA = 'Вставка';
  FN_OGRAD = 'Ограждение';
  FN_LUK = 'Лючок';
  FN_PEREHOD = 'Переходник';
  FN_D_PEREHOD = 'DПерех';
  FN_RUK = 'Рукоятка';
  FN_RAMA = 'Рама';
  FN_KL_BEZ = 'КлассБезопасн';
  FN_KLIMAT = 'КлиматичИсполн';
  FN_MATER = 'Материал';
  FN_RASKR_LOP = 'РаскрЛопаток';
  FN_PRIMEN = 'Применяемость';
  FN_DOPOLN = 'Дополнительно';
  FN_NACH_NOMER = 'НачЗавНомер';
  FN_DAT_VNESEN = 'Внесен';
  FN_NOV = 'Новый';
  FN_POZ_JUR = '№ПозЖурнала';
  FN_POS = 'КТО';
  FN_ID = 'ID';
  FN_GIB_NC = 'Н\ч Гибка';
  FN_SBOR_NC = 'Н\ч Сборка';
  FN_REZ_NC = 'Н\ч Резка';
  FN_SETKA_NC = 'Н\ч Сетка';
  FN_KOL_RAZ = 'Кол раз';
  FN_NOMER_RAZ = 'Номер раз';
  FN_FILE = 'Файл';
  FN_MASH_VREM = 'Машинное время';
  FN_RAZ_PROG = 'Программист';
  FN_MAT = 'Мат';
  FN_X = 'Х';
  FN_Y = 'У';
  FN_OTMENA = 'Отмена';
        //===============================
  I_FN_DAT = 1;
  I_FN_ZAK = 2;
  I_FN_KOL = 3;
  I_FN_KOL_ZAP = 4;
  I_FN_NAM = 5;
  I_FN_A = 6;
  I_FN_B = 7;
  I_FN_MOD_PRIVOD = 8;
  I_FN_PLAN_DATA = 9;
  I_FN_PLAN_NED = 10;
  I_FN_ZAKAZCHIK = 11;
  I_FN_PR = 12;
  I_FN_SGP = 13;
  I_FN_NOM = 0;
  I_FN_RAS_DATA_GOTOVN = 1;
  I_FN_BRIKET = 2;
  I_FN_TEHNOLOG = 3;
  I_FN_TEHNOLOG_GOTOV = 4;
  I_FN_TEHNOLOG_PRIM = 5;
  I_FN_ZAG_ZAP = 6;
  I_FN_ZAG = 7;
  I_FN_ZAG_GOT = 8;
  I_FN_SBOR_ZAP = 9;
  I_FN_SBOR = 10;
  I_FN_SBOR_GOT = 11;
  I_FN_SBOR_PRIM = 12;
  I_FN_PR_OTK = 13;
  I_FN_PR_OTK_PRIM = 14;
  I_FN_DAT_OTGRUZ = 15;
  I_FN_OSOBEN = 16;
  I_FN_SBOR_KLAP_NC = 17; //'Н\ч Сборка Клапана';
  I_FN_SVARKA_NC = 18;
  I_FN_KOL_RAZ = 19;
  I_FN_NOMER_RAZ = 20;
        //----------------------------------Программист
  I_FN_FILE = 21;
  I_FN_OTMENA = 22;

        //+++++++++++++++++++++++++++++++СпецифиЗаказов
  FN_ZAK1 = 'Заказ';
  I_FN_ZAK1 = 1;
  FN_POS_KOMP = '№ПозКомпл';
  I_FN_POS_KOMP = 2;
  FN_POSS = '№Поз';
  I_FN_POSS = 3;
  FN_OBOZN = 'Обозначение';
  I_FN_OBOZN = 4;
  FN_TYP_S = 'Тип';
  I_FN_TYP_S = 5;
  FN_NOM_NOM = '№№';
  I_FN_NOM_NOM = 6;
  FN_ZBOR_ED = 'СборЕдиница';
  I_FN_ZBOR_ED = 7;
  FN_MODEL = 'Модель';
  I_FN_MODEL = 8;
  FN_KATEG = 'Категория';
  I_FN_KATEG = 9;
  FN_KOL_S = 'Кол-во';
  I_FN_KOL_S = 10;
  FN_SPRAM = 'СбКПУпрям';
  I_FN_SPRAM = 11;
  FN_UKRUG = 'СбКПУкруг';
  I_FN_UKRUG = 12;
  FN_KPD = 'СбКПД';
  I_FN_KPD = 13;
  FN_KOMPL_W = 'КомплВед';
  I_FN_KOMPL_W = 14;
  FN_NOM_GUR = '№ПозКомплЖурнала';
  I_FN_NOM_GUR = 15;
  FN_NOM1 = 'Номер';
  I_FN_NOM1 = 16;
  FN_NCH_REZ = 'Н\ч Резка';
  I_FN_NCH_REZ = 17;
  FN_NCH_GIB = 'Н\ч Гибка';
  I_FN_NCH_GIB = 18;
        //+++++++++++++++++++++++++++++++СпецифПараметрыДеталей
  FN_POS_KOMP1 = '№ПозКомпл';
  I_FN_POS_KOMP1 = 1;
  FN_MATERIAL = 'Материал';
  I_FN_MATERIAL = 2;
  FN_MASSA = 'Масса';
  I_FN_MASSA = 3;
  FN_OBYM = 'Объем';
  I_FN_OBYM = 4;
  FN_DLINA = 'Длина';
  I_FN_DLINA = 5;
  FN_SHIR = 'Ширина';
  I_FN_SHIR = 6;
  FN_DIAM = 'Диаметр';
  I_FN_DIAM = 7;
  FN_DLIN_RAZV = 'ДлинаРазв';
  I_FN_DLIN_RAZV = 8;
  FN_SHIR_RAZV = 'ШиринаРазв';
  I_FN_SHIR_RAZV = 9;
  FN_KOL_GIB = 'КолГибов';
  I_FN_KOL_GIB = 10;
  FN_KOL_RES = 'КолРезов';
  I_FN_KOL_RES = 11;
  FN_STAND = 'Стандарт';
  I_FN_STAND = 12;
  FN_Trumpf = 'Trumpf';
  I_FN_Trumpf = 13;
  FN_NOG = 'Ножницы';
  I_FN_NOG = 14;
  FN_GIBKA = 'Гибка';
  I_FN_GIBKA = 15;
  FN_PROKAT = 'Прокатка';
  I_FN_PROKAT = 16;
  FN_ZAK2 = 'Заказ';
  I_FN_ZAK2 = 17;
  FN_NOM2 = 'Номер';
  I_FN_NOM2 = 18;
        //+++++++++++++++++++++++++++++++СпецифПокупСМК
  FN_POS_KOMP2 = '№ПозКомпл';
  I_FN_POS_KOMP2 = 1;
  FN_POS2 = '№Поз';
  I_FN_POS2 = 2;
  FN_ESOSTAV = 'ЭлСостава';
  I_FN_ESOSTAV = 3;
  FN_NAME2 = 'Наименование';
  I_FN_NAME2 = 4;
  FN_TYP2 = 'Тип';
  I_FN_TYP2 = 5;
  FN_NOM_NOM2 = '№№';
  I_FN_NOM_NOM2 = 6;
  FN_KOL2 = 'Кол-во';
  I_FN_KOL2 = 7;
  FN_ED_IZM = 'ЕдИзм';
  I_FN_ED_IZM = 8;
  FN_KOMPL = 'КомплВед';
  I_FN_KOMPL = 9;
  FN_POZ_GUR2 = '№ПозКомплЖурнала';
  I_FN_POZ_GUR2 = 10;
        //++++++++++++++++++++++++++
  XL_DETAL_KPU = 1;
  XL_REZ = 2;
  XL_GIB = 3;
  XL_SBOR_LOP = 4;
  XL_5 = 5;
  XL_REZ_2 = 6;
  XL_GIB_2 = 7;
  XL_DETAL_KPD = 8;
  XL_REZ_3 = 9;
  XL_GIB_3 = 10;
  XL_REZ_4 = 11;
  XL_GIB_4 = 12;
  XL_KORP = 13;
  XL_SBOR_KORP = 14;
  XL_KOMP_KORP = 15;
  XL_STAND = 16;
  XL_KON_KOMPL = 17;
  XL_18 = 18;
  XL_SBOR_KLAP = 19;
  XL_OTK = 20;
  XL_PRIEM = 21;
  XL_UPAKOV = 22;
  XL_PROKAT = 23;
  XL_STANOK = 24;

type
  TMyGrid = class(TCustomGrid); //Для удаления строки из грида

type
  TForm1 = class(TForm)
    StatusBar1: TStatusBar;
    PageControl1: TPageControl;
    ADOQuery1: TADOQuery;
    ADOConnection1: TADOConnection;
    Memo1: TMemo;
    Panel2: TPanel;
    Splitter1: TSplitter;
    Memo2: TMemo;
    OpenDialog1: TOpenDialog;
    Con: TADOConnection;
    MainMenu1: TMainMenu;
    N1: TMenuItem;
    Access1: TMenuItem;
    Qry1: TADOQuery;
    ADOQuery2: TADOQuery;
    N2: TMenuItem;
    N3: TMenuItem;
    N4: TMenuItem;
    ADOQuery3: TADOQuery;
    ADOConnection2: TADOConnection;
    TabSheet0: TTabSheet;
    TabSheet2: TTabSheet;
    Panel10: TPanel;
    StringGrid10: TStringGrid;
    Panel12: TPanel;
    StringGrid9: TStringGrid;
    Panel11: TPanel;
    Button16: TButton;
    Panel13: TPanel;
    StringGrid11: TStringGrid;
    CheckBox3: TCheckBox;
    Button13: TButton;
    Button17: TButton;
    Button18: TButton;
    Button20: TButton;
    SKPU: TStringGrid;
    SRez: TStringGrid;
    SSborka: TStringGrid;
    Button21: TButton;
    ADOConnection3: TADOConnection;
    ADOQuery4: TADOQuery;
    ComboBox4: TComboBox;
    Button2: TButton;
    Button22: TButton;
    Button23: TButton;
    Edit1: TEdit;
    ComboBox5: TComboBox;
    BitBtn3: TBitBtn;
    BitBtn4: TBitBtn;
    Edit2: TEdit;
    Label2: TLabel;
    Splitter2: TSplitter;
    SG6: TStringGrid;
    PopupKPU_L: TPopupMenu;
    Del: TMenuItem;
    BitBtn5: TBitBtn;
    BitBtn6: TBitBtn;
    Button14: TButton;
    Button19: TButton;
    Memo3: TMemo;
    Button24: TButton;
    SG1: TStringGrid;
    ActionList1: TActionList;
    Action1: TAction;
    Timer1: TTimer;
    Label7: TLabel;
    Image1: TImage;
    Image2: TImage;
    Image3: TImage;
    Image4: TImage;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    Button25: TButton;
    PopupKPU_R: TPopupMenu;
    N5: TMenuItem;
    Button26: TButton;
    TabSheet6: TTabSheet;
    Panel8: TPanel;
    Splitter3: TSplitter;
    Panel9: TPanel;
    SGL: TStringGrid;
    Panel14: TPanel;
    Button27: TButton;
    Button28: TButton;
    StringGrid6: TStringGrid;
    ComboBox7: TComboBox;
    PopupMenu2: TPopupMenu;
    MenuItem1: TMenuItem;
    Button29: TButton;
    Label27: TLabel;
    Label28: TLabel;
    Button30: TButton;
    Button31: TButton;
    Button32: TButton;
    Button33: TButton;
    BitBtn7: TBitBtn;
    BitBtn8: TBitBtn;
    BitBtn9: TBitBtn;
    BitBtn10: TBitBtn;
    Button35: TButton;
    Edit3: TEdit;
    Label17: TLabel;
    ZSG: TZColorStringGrid;
    Memo4: TMemo;
    Label18: TLabel;
    Memo5: TMemo;
    N8: TMenuItem;
    ComboBox6: TComboBox;
    Edit4: TEdit;
    Label33: TLabel;
    Button36: TButton;
    ComboBox8: TComboBox;
    Label35: TLabel;
    Button37: TButton;
    Button39: TButton;
    Label36: TLabel;
    Label37: TLabel;
    Label38: TLabel;
    Label39: TLabel;
    Label40: TLabel;
    Label41: TLabel;
    Label42: TLabel;
    Label43: TLabel;
    Label44: TLabel;
    Label45: TLabel;
    Label46: TLabel;
    Label47: TLabel;
    Image11: TImage;
    Label48: TLabel;
    Image12: TImage;
    Label49: TLabel;
    Label50: TLabel;
    Edit5: TEdit;
    Label52: TLabel;
    Image14: TImage;
    Image15: TImage;
    Image16: TImage;
    Image17: TImage;
    Image18: TImage;
    Image19: TImage;
    Image20: TImage;
    Image21: TImage;
    Label53: TLabel;
    Label54: TLabel;
    Button40: TButton;
    KPU_PR: TPopupMenu;
    N9: TMenuItem;
    ComboBox9: TComboBox;
    ComboBox10: TComboBox;
    Label34: TLabel;
    Label55: TLabel;
    Label56: TLabel;
    DateTimePicker1: TDateTimePicker;
    DateTimePicker2: TDateTimePicker;
    Label57: TLabel;
    Label58: TLabel;
    Label59: TLabel;
    ComboBox11: TComboBox;
    Label60: TLabel;
    Image5: TImage;
    Label61: TLabel;
    Panel15: TPanel;
    Label11: TLabel;
    Label22: TLabel;
    Label24: TLabel;
    Label32: TLabel;
    Label13: TLabel;
    Label23: TLabel;
    Label3: TLabel;
    Panel16: TPanel;
    Label12: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    Label16: TLabel;
    Label25: TLabel;
    Label5: TLabel;
    Panel17: TPanel;
    Label19: TLabel;
    Label21: TLabel;
    Label20: TLabel;
    Label4: TLabel;
    Label29: TLabel;
    Label31: TLabel;
    SpeedButton5: TSpeedButton;
    ComboBox12: TComboBox;
    Label26: TLabel;
    Button41: TButton;
    SpeedButton6: TSpeedButton;
    Label30: TLabel;
    Label62: TLabel;
    Button43: TButton;
    StatusBar2: TStatusBar;
    N10: TMenuItem;
    N11: TMenuItem;
    N12: TMenuItem;
    N13: TMenuItem;
    N14: TMenuItem;
    Label1: TLabel;
    ComboBox13: TComboBox;
    Label63: TLabel;
    ComboBox14: TComboBox;
    Action2: TAction;
    Label64: TLabel;
    Label65: TLabel;
    Label66: TLabel;
    Memo7: TMemo;
    Memo9: TMemo;
    Button1: TButton;
    N15: TMenuItem;
    DateTimePicker3: TDateTimePicker;
    Label67: TLabel;
    Memo10: TMemo;
    N16: TMenuItem;
    Memo11: TMemo;
    N17: TMenuItem;
    N18: TMenuItem;
    Button8: TButton;
    N20: TMenuItem;
    ADOConn1S: TADOConnection;
    ADOQ1S: TADOQuery;
    Button11: TButton;
    Edit7: TEdit;
    Edit8: TEdit;
    Button44: TButton;
    ComboBox15: TComboBox;
    ComboBox16: TComboBox;
    ComboBox17: TComboBox;
    Button45: TButton;
    TabSheet1: TTabSheet;
    ZCV: TZColorStringGrid;
    Button47: TButton;
    N22: TMenuItem;
    Memo13: TMemo;
    Memo14: TMemo;
    Edit10: TEdit;
    Edit14: TEdit;
    Edit15: TEdit;
    ADOConnection4: TADOConnection;
    N23: TMenuItem;
    Panel6: TPanel;
    Panel7: TPanel;
    Label72: TLabel;
    Label73: TLabel;
    Label74: TLabel;
    Label75: TLabel;
    Label76: TLabel;
    Label77: TLabel;
    Label78: TLabel;
    Label79: TLabel;
    Label80: TLabel;
    Label81: TLabel;
    Label82: TLabel;
    Label83: TLabel;
    Label84: TLabel;
    Label85: TLabel;
    Label87: TLabel;
    Image6: TImage;
    Image7: TImage;
    Image8: TImage;
    Image9: TImage;
    Image10: TImage;
    Image13: TImage;
    Image22: TImage;
    Image23: TImage;
    Label88: TLabel;
    Label89: TLabel;
    Label90: TLabel;
    Label91: TLabel;
    Label92: TLabel;
    Label93: TLabel;
    Label94: TLabel;
    Label95: TLabel;
    SpeedButton1: TSpeedButton;
    Label96: TLabel;
    Label97: TLabel;
    Label98: TLabel;
    Label99: TLabel;
    Label100: TLabel;
    Label101: TLabel;
    Button46: TButton;
    Edit9: TEdit;
    ComboBox18: TComboBox;
    BitBtn11: TBitBtn;
    BitBtn12: TBitBtn;
    ComboBox19: TComboBox;
    Edit12: TEdit;
    ComboBox20: TComboBox;
    ComboBox21: TComboBox;
    DateTimePicker4: TDateTimePicker;
    DateTimePicker5: TDateTimePicker;
    ComboBox23: TComboBox;
    Button49: TButton;
    Memo12: TMemo;
    DateTimePicker6: TDateTimePicker;
    Edit13: TEdit;
    Button50: TButton;
    Button51: TButton;
    CheckBox1: TCheckBox;
    Button53: TButton;
    Button54: TButton;
    PopupVOZD_L: TPopupMenu;
    N25: TMenuItem;
    Button52: TButton;
    N26: TMenuItem;
    Label103: TLabel;
    Label104: TLabel;
    APB1: TAdvProgressBar;
    Label105: TLabel;
    Label106: TLabel;
    N6: TMenuItem;
    Panel1: TPanel;
    Label111: TLabel;
    Label110: TLabel;
    Image26: TImage;
    Image27: TImage;
    Label109: TLabel;
    Label108: TLabel;
    Image24: TImage;
    Image25: TImage;
    Label107: TLabel;
    Label112: TLabel;
    Label113: TLabel;
    Label114: TLabel;
    Button3: TButton;
    Memo8: TMemo;
    Memo15: TMemo;
    Memo16: TMemo;
    N7: TMenuItem;
    N24: TMenuItem;
    N27: TMenuItem;
    N28: TMenuItem;
    N29: TMenuItem;
    N30: TMenuItem;
    N31: TMenuItem;
    Alarm1: TMenuItem;
    N32: TMenuItem;
    Button4: TButton;
    Edit16: TEdit;
    Button6: TButton;
    Button10: TButton;
    Label70: TLabel;
    Edit17: TEdit;
    Label102: TLabel;
    Label115: TLabel;
    Button12: TButton;
    btn1: TButton;
    edt1: TEdit;
    edt2: TEdit;
    edt3: TEdit;
    ClearSbor: TButton;
    btn2: TButton;
    Import: TButton;
    OpenDialog2: TOpenDialog;
    Vozd_PR: TPopupMenu;
    N33: TMenuItem;
    mmoDGP1: TMemo;
    N34: TMenuItem;
    N35: TMenuItem;
    edt4: TEdit;
    lbl1: TLabel;
    rg1: TRadioGroup;
    OpenDialog3: TOpenDialog;
    OpenDialog4: TOpenDialog;
    ts1: TTabSheet;
    pnl1: TPanel;
    pnl2: TPanel;
    SG: TAdvStringGrid;
    btn3: TButton;
    btn4: TSpeedButton;
    SG211: TAdvStringGrid;
    SG212: TAdvStringGrid;
    SG213: TAdvStringGrid;
    SG214: TAdvStringGrid;
    N19: TMenuItem;
    ts2: TTabSheet;
    pnl3: TPanel;
    pnl4: TPanel;
    SG215: TAdvStringGrid;
    btn5: TButton;
    btn6: TButton;
    N36: TMenuItem;
    act1: TAction;
    act2: TAction;
    btn7: TButton;
    mmo1: TMemo;
    LabKO1: TLabel;
    cbb1: TComboBox;
    LabKO2: TLabel;
    Label116: TLabel;
    Label117: TLabel;
    btn8: TSpeedButton;
    btn9: TButton;
    Label118: TLabel;
    Image28: TImage;
    Image29: TImage;
    Label119: TLabel;
    Label120: TLabel;
    Image30: TImage;
    Image31: TImage;
    Label121: TLabel;
    Label122: TLabel;
    Image32: TImage;
    Image33: TImage;
    Label123: TLabel;
    Label124: TLabel;
    Image34: TImage;
    Image35: TImage;
    Label125: TLabel;
    cbb2: TComboBox;
    cbb3: TComboBox;
    cbb4: TComboBox;
    Label126: TLabel;
    Label127: TLabel;
    cbb5: TComboBox;
    Label128: TLabel;
    ComboBox2: TComboBox;
    Label129: TLabel;
    ComboBox3: TComboBox;
    Label130: TLabel;
    ComboBox24: TComboBox;
    Label131: TLabel;
    btn10: TButton;
    N37: TMenuItem;
    pmSTAM1: TPopupMenu;
    N38: TMenuItem;
    N39: TMenuItem;
    Memo111: TMemo;
    btn11: TButton;
    btn12: TButton;
    Tehnolog1: TMenuItem;
    TehnologN40: TMenuItem;
    TehnologN41: TMenuItem;
    Edit: TEdit;
    Label132: TLabel;
    dtp1: TDateTimePicker;
    dtp2: TDateTimePicker;
    btn13: TButton;
    Label133: TLabel;
    Label134: TLabel;
    Label136: TLabel;
    DateTimePicker7: TDateTimePicker;
    DateTimePicker8: TDateTimePicker;
    Button5: TButton;
    Edit21: TEdit;
    Label137: TLabel;
    img1: TImage;
    Label138: TLabel;
    Label139: TLabel;
    Image37: TImage;
    Image38: TImage;
    Label140: TLabel;
    Image39: TImage;
    Label141: TLabel;
    Label142: TLabel;
    Image40: TImage;
    Image41: TImage;
    Label143: TLabel;
    btn14: TButton;
    btn15: TButton;
    img2: TImage;
    Label144: TLabel;
    Label145: TLabel;
    Edit18: TEdit;
    btn16: TBitBtn;
    btn17: TBitBtn;
    btn18: TBitBtn;
    btn19: TBitBtn;
    btn20: TButton;
    TehnologN42: TMenuItem;
    btn21: TButton;
    Edit22: TEdit;
    Label146: TLabel;
    pm1: TPopupMenu;
    SG216: TAdvStringGrid;
    cptlchck1: TCapitalCheck;
    LUComboEditLink1: TLUComboEditLink;
    Label147: TLabel;
    Label148: TLabel;
    Label149: TLabel;
    Label150: TLabel;
    Label151: TLabel;
    Label152: TLabel;
    btn22: TButton;
    btn23: TButton;
    pmSTAM_PR: TPopupMenu;
    TehnologN43: TMenuItem;
    btn24: TSpeedButton;
    btn26: TButton;
    popupVOZD_R: TPopupMenu;
    NNN40: TMenuItem;
    btn27: TButton;
    btn28: TButton;
    btn29: TButton;
    ADOConnection: TADOConnection;
    ts3: TTabSheet;
    pnl5: TPanel;
    btn30: TSpeedButton;
    Label69: TLabel;
    Image36: TImage;
    Image42: TImage;
    Label71: TLabel;
    Label86: TLabel;
    Image43: TImage;
    Image44: TImage;
    Label153: TLabel;
    Label154: TLabel;
    Image45: TImage;
    Image46: TImage;
    Label155: TLabel;
    Label156: TLabel;
    Image47: TImage;
    Image48: TImage;
    Label157: TLabel;
    Label158: TLabel;
    Label159: TLabel;
    Label160: TLabel;
    Label161: TLabel;
    Label162: TLabel;
    Label163: TLabel;
    Label164: TLabel;
    Label165: TLabel;
    Label166: TLabel;
    Label167: TLabel;
    Label168: TLabel;
    Label169: TLabel;
    Label170: TLabel;
    Label171: TLabel;
    Label172: TLabel;
    Button7: TButton;
    ComboBox1: TComboBox;
    ComboBox25: TComboBox;
    ComboBox26: TComboBox;
    ComboBox27: TComboBox;
    DateTimePicker9: TDateTimePicker;
    DateTimePicker10: TDateTimePicker;
    Button9: TButton;
    Edit11: TEdit;
    Edit19: TEdit;
    BitBtn13: TBitBtn;
    BitBtn14: TBitBtn;
    Button15: TButton;
    Button34: TButton;
    Edit20: TEdit;
    Button48: TButton;
    Button57: TButton;
    Button58: TButton;
    SG217: TAdvStringGrid;
    SG2: TAdvStringGrid;
    pm710: TPopupMenu;
    NNN41: TMenuItem;
    NNN42: TMenuItem;
    img3: TImage;
    Label173: TLabel;
    img4: TImage;
    Label174: TLabel;
    NNN45: TMenuItem;
    NNN46: TMenuItem;
    NNN210: TMenuItem;
    NNNTV: TMenuItem;
    NNN43: TMenuItem;
    btn31: TButton;
    btn32: TButton;
    sg3: TStringGrid;
    chk1: TCheckBox;
    NNN477: TMenuItem;
    NNN44: TMenuItem;
    btn33: TBitBtn;
    btn34: TBitBtn;
    btn35: TButton;
    Edit23: TEdit;
    Label175: TLabel;
    N40: TMenuItem;
    btn25: TButton;
    dtp3: TDateTimePicker;
    N41: TMenuItem;
    ts4: TTabSheet;
    ts5: TTabSheet;
    pnl6: TPanel;
    Label176: TLabel;
    Label177: TLabel;
    Label178: TLabel;
    Label179: TLabel;
    Label180: TLabel;
    Label181: TLabel;
    Label182: TLabel;
    img5: TImage;
    Label183: TLabel;
    Label184: TLabel;
    img6: TImage;
    img7: TImage;
    Label185: TLabel;
    img8: TImage;
    Label186: TLabel;
    Label187: TLabel;
    img9: TImage;
    img10: TImage;
    Label188: TLabel;
    img11: TImage;
    Label189: TLabel;
    btn36: TButton;
    btn37: TButton;
    btn38: TButton;
    ComboBox28: TComboBox;
    ComboBox29: TComboBox;
    ComboBox30: TComboBox;
    Edit24: TEdit;
    btn41: TButton;
    btn42: TButton;
    btn43: TBitBtn;
    btn44: TBitBtn;
    pnl7: TPanel;
    SG4: TAdvStringGrid;
    Memo17: TMemo;
    pnl8: TPanel;
    btn40: TSpeedButton;
    Label190: TLabel;
    img12: TImage;
    img13: TImage;
    Label191: TLabel;
    Label192: TLabel;
    img14: TImage;
    img15: TImage;
    Label193: TLabel;
    Label194: TLabel;
    img16: TImage;
    img17: TImage;
    Label195: TLabel;
    Label196: TLabel;
    img18: TImage;
    img19: TImage;
    Label197: TLabel;
    Label198: TLabel;
    Label199: TLabel;
    Label200: TLabel;
    Label201: TLabel;
    Label203: TLabel;
    Label204: TLabel;
    Label205: TLabel;
    Label206: TLabel;
    Label207: TLabel;
    Label208: TLabel;
    Label209: TLabel;
    Label210: TLabel;
    Label211: TLabel;
    Label212: TLabel;
    btn45: TButton;
    ComboBox31: TComboBox;
    ComboBox32: TComboBox;
    ComboBox33: TComboBox;
    ComboBox34: TComboBox;
    dtp4: TDateTimePicker;
    dtp5: TDateTimePicker;
    btn46: TButton;
    Edit25: TEdit;
    Edit26: TEdit;
    btn47: TBitBtn;
    btn48: TBitBtn;
    btn49: TButton;
    btn50: TButton;
    Edit27: TEdit;
    btn51: TButton;
    btn52: TButton;
    btn53: TButton;
    pnl9: TPanel;
    SG5: TAdvStringGrid;
    SG7: TAdvStringGrid;
    pmLUK: TPopupMenu;
    N42: TMenuItem;
    pmLUK_PR: TPopupMenu;
    N43: TMenuItem;
    N44: TMenuItem;
    N45: TMenuItem;
    N46: TMenuItem;
    SG8: TAdvStringGrid;
    Memommo1: TMemo;
    N47: TMenuItem;
    ADOConnectionTemp: TADOConnection;
    ADOQueryTemp: TADOQuery;
    SG9: TAdvStringGrid;
    Memo18: TMemo;
    Memo19: TMemo;
    N48: TMenuItem;
    ts6: TTabSheet;
    pnl10: TPanel;
    btn54: TSpeedButton;
    Label221: TLabel;
    Label222: TLabel;
    Label223: TLabel;
    Label224: TLabel;
    Label225: TLabel;
    Label226: TLabel;
    Label227: TLabel;
    Label228: TLabel;
    Label229: TLabel;
    Label230: TLabel;
    Label231: TLabel;
    Label232: TLabel;
    Label233: TLabel;
    Label234: TLabel;
    Label235: TLabel;
    btn55: TButton;
    ComboBox35: TComboBox;
    ComboBox36: TComboBox;
    ComboBox37: TComboBox;
    ComboBox38: TComboBox;
    dtp6: TDateTimePicker;
    dtp7: TDateTimePicker;
    btn56: TButton;
    Edit28: TEdit;
    Edit29: TEdit;
    btn57: TBitBtn;
    btn58: TBitBtn;
    btn59: TButton;
    btn60: TButton;
    Edit30: TEdit;
    btn61: TButton;
    btn62: TButton;
    btn63: TButton;
    SG10: TAdvStringGrid;
    SG11: TAdvStringGrid;
    SG12: TAdvStringGrid;
    pm750: TPopupMenu;
    MenuItem2: TMenuItem;
    il1: TImageList;
    N49: TMenuItem;
    N50: TMenuItem;
    N51: TMenuItem;
    N52: TMenuItem;
    Button55: TButton;
    N53: TMenuItem;
    F2: TAction;
    StringGrid1: TStringGrid;
    N54: TMenuItem;
    N55: TMenuItem;
    ADOConnection5: TADOConnection;
    ADOConnection6: TADOConnection;
    chk2: TCheckBox;
    N56: TMenuItem;
    N57: TMenuItem;
    N58: TMenuItem;
    N59: TMenuItem;
    IdIMAP41: TIdIMAP4;
    IdSSLIOHandlerSocketOpenSSL: TIdSSLIOHandlerSocketOpenSSL;
    Button59: TButton;
    il2: TImageList;
    img28: TImage;
    tmr1: TTimer;
    img29: TImage;
    img30: TImage;
    Label51: TLabel;
    tmr2: TTimer;
    mp1: TMediaPlayer;
    pm7: TPopupMenu;
    N60: TMenuItem;
    N61: TMenuItem;
    chk3: TCheckBox;
    Edit31: TEdit;
    Label135: TLabel;
    Edit32: TEdit;
    Label236: TLabel;
    N62: TMenuItem;
    N63: TMenuItem;
    N64: TMenuItem;
    N65: TMenuItem;
    N66: TMenuItem;
    N67: TMenuItem;
    chk4: TCheckBox;
    N68: TMenuItem;
    N69: TMenuItem;
    N70: TMenuItem;
    N71: TMenuItem;
    img31: TImage;
    Button60: TButton;
    tmr3: TTimer;
    btn39: TSpeedButton;
    chk5: TCheckBox;
    act3: TAction;
    chk6: TCheckBox;
    N72: TMenuItem;
    N73: TMenuItem;
    N74: TMenuItem;
    N75: TMenuItem;
    Label202: TLabel;
    Edit33: TEdit;
    Label237: TLabel;
    N76: TMenuItem;
    N77: TMenuItem;
    Button61: TButton;
    Button62: TButton;
    N78: TMenuItem;
    chk7: TCheckBox;
    chk8: TCheckBox;
    N79: TMenuItem;
    N80: TMenuItem;
    N81: TMenuItem;
    Memo20: TMemo;
    APB2: TAdvProgressBar;
    Button63: TButton;
    ADOConnection7: TADOConnection;
    ADOQuery5: TADOQuery;
    ts7: TTabSheet;
    pnl11: TPanel;
    Button42: TButton;
    Button56: TButton;
    Edit34: TEdit;
    StringGrid2: TStringGrid;
    Memo21: TMemo;
    SQLConnection1: TADOConnection;
    SQLQuery: TADOQuery;
    Memo22: TMemo;
    Image49: TImage;
    Label238: TLabel;
    Image50: TImage;
    Label239: TLabel;
    N21: TMenuItem;
    N82: TMenuItem;
    Button64: TButton;
    pb1: TProgressBar;
    pb2: TProgressBar;
    ts8: TTabSheet;
    pnl12: TPanel;
    Label240: TLabel;
    Label242: TLabel;
    Label243: TLabel;
    Label244: TLabel;
    Label245: TLabel;
    Label246: TLabel;
    Label247: TLabel;
    Label248: TLabel;
    Label249: TLabel;
    Label250: TLabel;
    Label251: TLabel;
    Label252: TLabel;
    Label253: TLabel;
    Label254: TLabel;
    Label255: TLabel;
    Label256: TLabel;
    Label257: TLabel;
    img32: TImage;
    img33: TImage;
    img34: TImage;
    img35: TImage;
    img36: TImage;
    img37: TImage;
    img38: TImage;
    img39: TImage;
    Label258: TLabel;
    Label259: TLabel;
    Label260: TLabel;
    Label261: TLabel;
    img40: TImage;
    Label272: TLabel;
    Label273: TLabel;
    img41: TImage;
    Label274: TLabel;
    Button65: TButton;
    Button66: TButton;
    Edit35: TEdit;
    ComboBox39: TComboBox;
    btn66: TBitBtn;
    btn67: TBitBtn;
    Button67: TButton;
    Edit37: TEdit;
    Button68: TButton;
    ComboBox40: TComboBox;
    Button69: TButton;
    Button70: TButton;
    Edit38: TEdit;
    ComboBox41: TComboBox;
    ComboBox42: TComboBox;
    Button76: TButton;
    Button78: TButton;
    Edit40: TEdit;
    zclrstrngrd1: TZColorStringGrid;
    StringGrid3: TStringGrid;
    StringGrid4: TStringGrid;
    KANAL_PR: TPopupMenu;
    MenuItem5: TMenuItem;
    MenuItem7: TMenuItem;
    MenuItem8: TMenuItem;
    MenuItem11: TMenuItem;
    MenuItem15: TMenuItem;
    MenuItem16: TMenuItem;
    MenuItem17: TMenuItem;
    Button71: TButton;
    Button72: TButton;
    img42: TImage;
    Label241: TLabel;
    img43: TImage;
    Label262: TLabel;
    img44: TImage;
    Label263: TLabel;
    img45: TImage;
    Label264: TLabel;
    img46: TImage;
    Label265: TLabel;
    img47: TImage;
    Label266: TLabel;
    img48: TImage;
    Label267: TLabel;
    N83: TMenuItem;
    N84: TMenuItem;
    N85: TMenuItem;
    dtp8: TDateTimePicker;
    Label213: TLabel;
    N86: TMenuItem;
    N87: TMenuItem;
    dtp9: TDateTimePicker;
    N88: TMenuItem;
    N89: TMenuItem;
    Button73: TButton;
    Button74: TButton;
    pb3: TProgressBar;
    pb4: TProgressBar;
    Button75: TButton;
    pb5: TProgressBar;
    Button77: TButton;
    pb6: TProgressBar;
    Button79: TButton;
    pb7: TProgressBar;
    Button80: TButton;
    pb8: TProgressBar;
    Memo23: TMemo;
    Memo24: TMemo;
    Memo25: TMemo;
    Memo26: TMemo;
    N90: TMenuItem;
    N91: TMenuItem;
    Button81: TButton;
    pm2: TPopupMenu;
    Copy1: TMenuItem;
    N92: TMenuItem;
    Memo27: TMemo;
    btn64: TSpeedButton;
    btn65: TSpeedButton;
    btn68: TSpeedButton;
    btn69: TSpeedButton;
    btn70: TSpeedButton;
    btn71: TSpeedButton;
    N93: TMenuItem;
    Edit36: TEdit;
    Label214: TLabel;
    Label215: TLabel;
    Edit39: TEdit;
    Button82: TButton;
    Label216: TLabel;
    dtp10: TDateTimePicker;
    Label217: TLabel;
    Label218: TLabel;
    dtp11: TDateTimePicker;
    ComboBox43: TComboBox;
    Button83: TButton;
    Label219: TLabel;
    Button84: TButton;
    Edit41: TEdit;
    Memo28: TMemo;
    N94: TMenuItem;
    N95: TMenuItem;
    N96: TMenuItem;
    N97: TMenuItem;
    N98: TMenuItem;
    N99: TMenuItem;
    N100: TMenuItem;
    img20: TImage;
    Label220: TLabel;
    N110: TMenuItem;
    N101: TMenuItem;
    ADOConnection8: TADOConnection;
    ADOQuery6: TADOQuery;
    Label268: TLabel;
    N102: TMenuItem;
    N103: TMenuItem;
    N104: TMenuItem;
    Button85: TButton;
    Memo29: TMemo;
    Memo30: TMemo;
    Memo31: TMemo;
    Button86: TButton;
    N106: TMenuItem;
    N105: TMenuItem;
    N107: TMenuItem;
    Button87: TButton;
    dtp12: TDateTimePicker;
    dtp13: TDateTimePicker;
    Button88: TButton;
    Memo6: TMemo;
    Label6: TLabel;
    Label68: TLabel;
    Label269: TLabel;
    Label270: TLabel;
    Label271: TLabel;
    Label275: TLabel;
    Label276: TLabel;
    Label277: TLabel;
    Label278: TLabel;
    Label279: TLabel;
    Label280: TLabel;
    Label281: TLabel;
    Edit6: TEdit;
    Button38: TButton;
    Button89: TButton;
    Memo32: TMemo;
    BLF1: TMenuItem;
    BLF2: TMenuItem;
    Button90: TButton;
    Button91: TButton;
    ComboBox22: TComboBox;
    procedure FormShow(Sender: TObject);
    procedure WMDropFiles(var Msg: TMessage); message wm_DropFiles;
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function SetConnTemp(var AQ: TADOQuery; var AC: TADOConnection): Boolean; overload;
    function SetConnectTemp(var AQ: TADOQuery): Boolean; overload;
    function SetConnect1(var AQ: TADOQuery): Boolean; overload;
    function SetConnect(var AQ: TADOQuery; var AC: TADOConnection): Boolean; overload;
    function SetConn(var AQ: TADOQuery; var AC: TADOConnection): Boolean; overload;
    function SetConn1(var AQ: TADOQuery): Boolean; overload;
    function SetConnect2(var AQ: TADOQuery; var AC: TADOConnection): Boolean; overload;
    function SetConn2(var AQ: TADOQuery): Boolean; overload;
    procedure Check(Module: string; Str: variant; Col: Integer);
    function WeekNum(const ADate: TDateTime): word;
    procedure Button1Click(Sender: TObject);
    function Briket(Nedel: string; Denn: string): string;
    function Xls_To_StringGrid(AGrid: TStringGrid; AXLSFile: string; List: string): Boolean;
    function mkQueryInsert(var AAQ: TADOQuery; const sQ: WideString; Args: array of const): boolean;
    function mkQueryUpdate(var AAQ: TADOQuery; const sQ: WideString; Args: array of const): boolean;
    function mkQueryUpdate2(var AAQ: TADOQuery; const sQ: WideString; Args: array of const): boolean;
    function mkQuerySelect(var AAQ: TADOQuery; const sQ: WideString; Args: array of const): boolean;
    function mkQuerySelect1(var AAQ: TADOQuery; const sQ: WideString; Args: array of const): boolean;
    function mkQuerySelect66(var AAQ: TADOQuery; const sQ: WideString; Args: array of const): boolean;

                //========================================================
    procedure FSelectRow(StringGrid: TStringGrid; RowNumber: integer);
                //Выделение Строки
    procedure Clear_StringGrid(StringGrid: TStringGrid);
                // function WinExecAndWait32(FileName: string; Visibility: integer): integer;
    procedure ExportGridtoExcel1(Sender: TStringGrid);
    procedure ExportGridATMtoExcel(Sender: TAdvStringGrid);
                // function Xls_To_StringGrid( AXLSFile: string): Boolean;
    procedure ExportGridtoExcel_LIST(Sender, S1, S2, S3: TStringGrid; List: Integer);
    procedure DeleteARow(Grid: TStringGrid; ARow: Integer);
                //Для удаления строки из грида
    procedure Find_StringGrid(StringGrid: TStringGrid; FindStr: string; ACol: Integer; FindStr1: string; ACol1: Integer);
    procedure Find_StringGrid1(StringGrid: TStringGrid; FindStr: string; ACol: Integer; FindStr1: string; ACol1: Integer);
    procedure Find_StringGrid2(StringGrid: TStringGrid; FindStr: string; ACol: Integer; FindStr1: string; ACol1: Integer);
    function mkQueryDelete(var AAQ: TADOQuery; const sQ: WideString; Args: array of const): boolean;
    function ZNumber(AStr: string): string;
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    procedure Button2Click(Sender: TObject);
    procedure Access1Click(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure N4Click(Sender: TObject);
    procedure Button16Click(Sender: TObject);
    procedure TabSheet0Show(Sender: TObject);
    procedure CheckBox3Click(Sender: TObject);
    procedure CheckBox3Exit(Sender: TObject);
    procedure StringGrid9SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
    procedure StringGrid10TopLeftChanged(Sender: TObject);
    procedure StringGrid9TopLeftChanged(Sender: TObject);
    procedure StringGrid10DblClick(Sender: TObject);
    procedure StringGrid10DrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
    procedure Button17Click(Sender: TObject);
    procedure Button18Click(Sender: TObject);
    procedure Button21Click(Sender: TObject);
    procedure StringGrid10MouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure StringGrid10MouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure StringGrid10MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure StringGrid9MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure StringGrid9MouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure StringGrid9MouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure btn33Click(Sender: TObject);
    procedure btn34Click(Sender: TObject);
    procedure StringGrid10Click(Sender: TObject);
    procedure Button22Click(Sender: TObject);
    procedure Button23Click(Sender: TObject);
    procedure ZSGDblClick(Sender: TObject);
    procedure BitBtn4Click(Sender: TObject);
    procedure BitBtn3Click(Sender: TObject);
    procedure Edit2Click(Sender: TObject);
    procedure SG6DrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
    procedure SG6DblClick(Sender: TObject);
    procedure SG6TopLeftChanged(Sender: TObject);
    procedure SG6MouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure SG6MouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure StringGrid10SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
    procedure SG6SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
    procedure ZSGMouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure ZSGMouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure DelClick(Sender: TObject);
    procedure PopupKPU_LPopup(Sender: TObject);
    procedure BitBtn5Click(Sender: TObject);
    procedure BitBtn6Click(Sender: TObject);
    procedure Button14Click(Sender: TObject);
    procedure Button20Click(Sender: TObject);
    procedure Button25Click(Sender: TObject);
    procedure Action1Execute(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure Button24Click(Sender: TObject);
    procedure Button26Click(Sender: TObject);
    procedure Button27Click(Sender: TObject);
    procedure Button28Click(Sender: TObject);
    procedure SGLSelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
    procedure ComboBox7Click(Sender: TObject);
    procedure MenuItem1Click(Sender: TObject);
    procedure StringGrid6SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
    procedure SGLTopLeftChanged(Sender: TObject);
    procedure StringGrid6TopLeftChanged(Sender: TObject);
    procedure SGLMouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure StringGrid6MouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure SGLMouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure StringGrid6MouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure StringGrid6DblClick(Sender: TObject);
    procedure Button29Click(Sender: TObject);
    procedure BitBtn7Click(Sender: TObject);
    procedure BitBtn8Click(Sender: TObject);
    procedure BitBtn9Click(Sender: TObject);
    procedure BitBtn10Click(Sender: TObject);
    procedure Button30Click(Sender: TObject);
    procedure Button31Click(Sender: TObject);
    procedure Button35Click(Sender: TObject);
    procedure Edit2Change(Sender: TObject);
    procedure Edit3Change(Sender: TObject);
    procedure Edit3Click(Sender: TObject);
    function Prim(AStr: string): string;
    function Zvezda(AStr: string): string;
    function ZvezdaObratno(AStr: string): string;
    procedure GetAllFiles(Path: string);
    function Stenki(AStr, Oboz1, Oboz2, Oboz3, Oboz4, Oboz5, Dat1, dat2, Tab1, Tab2: string; List: Integer; XL: Variant): string;
    function Stenki_KED(AStr, Oboz1, Oboz2, Oboz2_1, Oboz3, Oboz4, Oboz5, Oboz6, Tab1, Tab2: string; List: Integer; XL: Variant): string;
    function Stenki_KED06(AStr, Oboz1, Oboz2, Oboz2_1, Oboz3, Oboz4, Oboz5, Oboz6, Tab1, Tab2: string; List: Integer; XL: Variant): string;
    function Lopatka(AStr, Oboz1, Oboz2, Dat1, dat2, Tab1, Tab2: string; List: Integer; XL: Variant): string;
    function Lenta(AStr, Dat1, dat2, Tab1, Tab2: string; List: Integer; XL: Variant): string;
    function Stenki_Vozd(AStr, Oboz1, Oboz2, Oboz2_1, Oboz3, Oboz4, Dat1, dat2, Tab1, Tab2: string; List: Integer; XL: Variant): string;
    //
    function Korpus(XL: Variant): string;
    function Sborka(XL: Variant): string;
    //
    function Stenki_KED_Lin(AStr, Oboz1, Oboz2, Oboz2_1, Oboz3, Oboz4, Dat1, dat2, Tab1, Tab2: string; List: Integer; XL: Variant): string;
    function Stenki_VOZD_Lin(AStr, AStr1, AStr2, Dat1, dat2, Tab1, Tab2: string; List: Integer; XL: Variant): string;
   // function Stenki_Vozd(AStr,Oboz1,Oboz2,Dat1,dat2,Tab1,Tab2: string;List:Integer;XL:Variant): string;

    function Lopatka_LIN(AStr, AStr1, AStr2, AStr3: string; List: Integer; XL: Variant): string;
                //===============================================
                //стринг грид в эксель
    procedure ExportGridtoExcel2(Sender: TStringGrid);
    procedure N8Click(Sender: TObject);
    procedure ZSGSelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
    procedure ComboBox6Click(Sender: TObject);
    procedure Button36Click(Sender: TObject);
    procedure Edit4Click(Sender: TObject);
    procedure ComboBox8Click(Sender: TObject);
    procedure ComboBox8Select(Sender: TObject);
    procedure Button37Click(Sender: TObject);
    procedure Button39Click(Sender: TObject);
    procedure ExportGridtoExcel(Sender: TStringGrid; Sender1: TStringGrid);
    procedure Edit4KeyPress(Sender: TObject; var Key: Char);
    procedure ComboBox8KeyPress(Sender: TObject; var Key: Char);
    function ConvertDat1(StrDat: string): string;

    //function Sborka_KPU(izd: string; kol_kl,Kol:integer): string;

    procedure Edit5KeyPress(Sender: TObject; var Key: Char);
    procedure Edit5Click(Sender: TObject);
    procedure Button40Click(Sender: TObject);
    procedure N9Click(Sender: TObject);
    procedure ComboBox5DrawItem(Control: TWinControl; Index: Integer; Rect: TRect; State: TOwnerDrawState);
    procedure SpeedButton5Click(Sender: TObject);
    procedure SpeedButton6Click(Sender: TObject);
    procedure Button42Click(Sender: TObject);
    procedure Button43Click(Sender: TObject);
    procedure SG6MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure ZSGMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure N10Click(Sender: TObject);
    function GetLocalIPs: TStringList;
    procedure N11Click(Sender: TObject);
    procedure N12Click(Sender: TObject);
    procedure N13Click(Sender: TObject);
    procedure N14Click(Sender: TObject);
    procedure N15Click(Sender: TObject);
    procedure N16Click(Sender: TObject);
    procedure N17Click(Sender: TObject);
    procedure N18Click(Sender: TObject);
    procedure Button11Click(Sender: TObject);
    procedure N20Click(Sender: TObject);
    procedure Button44Click(Sender: TObject);
    procedure SGLDrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
    procedure StringGrid6DrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
    procedure SGLDblClick(Sender: TObject);
    procedure Button46Click(Sender: TObject);
    procedure Button47Click(Sender: TObject);
    procedure TabSheet6Show(Sender: TObject);
    procedure ZCVDblClick(Sender: TObject);
    procedure ZCVDrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
    procedure SpeedButton1Click(Sender: TObject);
    procedure ZCVMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure ZCVSelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
    procedure ComboBox22Click(Sender: TObject);
    procedure N22Click(Sender: TObject);
    procedure N23Click(Sender: TObject);
    procedure TabSheet1Show(Sender: TObject);
    procedure ComboBox18DrawItem(Control: TWinControl; Index: Integer; Rect: TRect; State: TOwnerDrawState);
    procedure N24Click(Sender: TObject);
    procedure StringGrid11MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure StringGrid11MouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure StringGrid11MouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure StringGrid11SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
    procedure StringGrid11TopLeftChanged(Sender: TObject);
    procedure CheckBox1Exit(Sender: TObject);
    procedure CheckBox1Click(Sender: TObject);
    procedure ZSGTopLeftChanged(Sender: TObject);
    procedure Button53Click(Sender: TObject);
    procedure Button54Click(Sender: TObject);
    procedure btn25Click(Sender: TObject);
    procedure N25Click(Sender: TObject);
    procedure Button52Click(Sender: TObject);
    procedure N26Click(Sender: TObject);
    procedure ScanFolder(dir: string);
    procedure Button56Click(Sender: TObject);
    procedure StringGrid10MouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure N6Click(Sender: TObject);
    procedure PageControl1Change(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure N7Click(Sender: TObject);
    procedure N27Click(Sender: TObject);
    procedure N30Click(Sender: TObject);
    procedure N31Click(Sender: TObject);
    procedure Alarm1Click(Sender: TObject);
    procedure N32Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Image24DblClick(Sender: TObject);
    procedure Edit16Change(Sender: TObject);
    procedure Edit16Click(Sender: TObject);
    procedure Edit17Change(Sender: TObject);
    procedure Edit17Click(Sender: TObject);
    procedure Edit13Change(Sender: TObject);
    procedure Edit12Change(Sender: TObject);
    procedure Edit9Change(Sender: TObject);
    procedure Edit13KeyPress(Sender: TObject; var Key: Char);
    procedure Edit12KeyPress(Sender: TObject; var Key: Char);
    procedure Edit9KeyPress(Sender: TObject; var Key: Char);
    procedure Button41Click(Sender: TObject);
    procedure Button45Click(Sender: TObject);
    procedure Button12Click(Sender: TObject);
    procedure btn1Click(Sender: TObject);
    function ConvertFloat(TrudStr: string): string;
    procedure ClearSborClick(Sender: TObject);
    procedure btn2Click(Sender: TObject);
    procedure ImportClick(Sender: TObject);
    procedure N33Click(Sender: TObject);
    procedure N35Click(Sender: TObject);
    procedure edt4Change(Sender: TObject);
    procedure Button19Click(Sender: TObject);
    procedure rg1Exit(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btn3Click(Sender: TObject);
    procedure btn4Click(Sender: TObject);
    procedure N19Click(Sender: TObject);
    procedure BitBtn11Click(Sender: TObject);
    procedure BitBtn12Click(Sender: TObject);
    procedure SGMouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure SGMouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure SG215MouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure SG215MouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure SGSelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
    procedure SGTopLeftChanged(Sender: TObject);
    procedure SGMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure btn6Click(Sender: TObject);
    procedure N36Click(Sender: TObject);
    procedure ComboBox18Click(Sender: TObject);
    procedure ComboBox19Click(Sender: TObject);
    procedure ComboBox19KeyPress(Sender: TObject; var Key: Char);
    procedure ComboBox19Select(Sender: TObject);
    procedure SGDblClickCell(Sender: TObject; ARow, ACol: Integer);
    procedure ts1Show(Sender: TObject);
    procedure ComboBox23Click(Sender: TObject);
    procedure act1Execute(Sender: TObject);
    procedure act2Execute(Sender: TObject);
    procedure btn7Click(Sender: TObject);
    procedure Edit13Click(Sender: TObject);
    procedure Edit12Click(Sender: TObject);
    procedure Edit9Click(Sender: TObject);
    procedure btn5Click(Sender: TObject);
    procedure btn8Click(Sender: TObject);
    procedure ts2Show(Sender: TObject);
    procedure btn9Click(Sender: TObject);
    procedure SG215DblClick(Sender: TObject);
    procedure SG215DrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
    procedure btn10Click(Sender: TObject);
    procedure N37Click(Sender: TObject);
    procedure SGLMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure StringGrid6MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure N38Click(Sender: TObject);
    procedure N39Click(Sender: TObject);
    procedure btn11Click(Sender: TObject);
    procedure btn12Click(Sender: TObject);
    procedure Tehnolog1Click(Sender: TObject);
    procedure TehnologN40Click(Sender: TObject);
    procedure TehnologN41Click(Sender: TObject);
    procedure EditChange(Sender: TObject);
    procedure btn13Click(Sender: TObject);
    procedure SG215SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
    procedure Edit21Change(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    function ConvertRus(S: string): string;
    procedure btn15Click(Sender: TObject);
    procedure SGGetCellColor(Sender: TObject; ARow, ACol: Integer; AState: TGridDrawState; ABrush: TBrush; AFont: TFont);
    procedure Edit18Change(Sender: TObject);
    procedure SGClickSort(Sender: TObject; ACol: Integer);
    procedure SGClickCell(Sender: TObject; ARow, ACol: Integer);
    procedure btn16Click(Sender: TObject);
    procedure btn17Click(Sender: TObject);
    procedure btn19Click(Sender: TObject);
    procedure btn18Click(Sender: TObject);
    procedure Edit21Click(Sender: TObject);
    procedure Edit18Click(Sender: TObject);
    procedure btn20Click(Sender: TObject);
    procedure Edit21KeyPress(Sender: TObject; var Key: Char);
    procedure Edit18KeyPress(Sender: TObject; var Key: Char);
    procedure TehnologN42Click(Sender: TObject);
    procedure SG215MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure btn21Click(Sender: TObject);
    procedure SG215RowChanging(Sender: TObject; OldRow, NewRow: Integer; var Allow: Boolean);
    procedure SG215TopLeftChanged(Sender: TObject);
    procedure SG216TopLeftChanged(Sender: TObject);
    procedure SG216SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
    procedure SG216DblClickCell(Sender: TObject; ARow, ACol: Integer);
    procedure btn22Click(Sender: TObject);
    procedure btn23Click(Sender: TObject);
    procedure TehnologN43Click(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure btn24Click(Sender: TObject);
    procedure btn26Click(Sender: TObject);
    procedure NNN40Click(Sender: TObject);
    procedure btn27Click(Sender: TObject);
    procedure btn28Click(Sender: TObject);
    procedure btn29Click(Sender: TObject);
    procedure btn14Click(Sender: TObject);
    procedure EditKeyPress(Sender: TObject; var Key: Char);
    procedure Button7Click(Sender: TObject);
    procedure ts3Show(Sender: TObject);
    procedure SG2DblClick(Sender: TObject);
    procedure NNN41Click(Sender: TObject);
    procedure NNN42Click(Sender: TObject);
    procedure NNNTVClick(Sender: TObject);
    procedure NNN477Click(Sender: TObject);
    procedure NNN45Click(Sender: TObject);
    procedure NNN46Click(Sender: TObject);
    procedure NNN210Click(Sender: TObject);
    procedure NNN43Click(Sender: TObject);
    procedure btn31Click(Sender: TObject);
    procedure btn32Click(Sender: TObject);
    procedure sg3MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure sg3MouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure sg3MouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure sg3SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
    procedure sg3TopLeftChanged(Sender: TObject);
    procedure ZCVTopLeftChanged(Sender: TObject);
    procedure chk1Click(Sender: TObject);
    procedure chk1Exit(Sender: TObject);
    procedure NNN44Click(Sender: TObject);
    procedure Edit11Click(Sender: TObject);
    procedure Edit19Click(Sender: TObject);
    procedure Button15Click(Sender: TObject);
    procedure btn35Click(Sender: TObject);
    procedure Edit17KeyPress(Sender: TObject; var Key: Char);
    procedure Edit16KeyPress(Sender: TObject; var Key: Char);
    procedure edt4KeyPress(Sender: TObject; var Key: Char);
    procedure edt4Click(Sender: TObject);
    procedure Edit23Click(Sender: TObject);
    procedure Edit23KeyPress(Sender: TObject; var Key: Char);
    procedure N40Click(Sender: TObject);
    procedure N3Click(Sender: TObject);
    procedure N41Click(Sender: TObject);
    procedure btn36Click(Sender: TObject);
    procedure btn43Click(Sender: TObject);
    procedure btn44Click(Sender: TObject);
    procedure btn41Click(Sender: TObject);
    procedure SG4DblClickCell(Sender: TObject; ARow, ACol: Integer);
    procedure btn45Click(Sender: TObject);
    procedure btn37Click(Sender: TObject);
    procedure SG5DblClick(Sender: TObject);
    procedure SG5EditingDone(Sender: TObject);
    procedure SG5DrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
    procedure SG5MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure SG5RowChanging(Sender: TObject; OldRow, NewRow: Integer; var Allow: Boolean);
    procedure SG5SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
    procedure btn51Click(Sender: TObject);
    procedure btn52Click(Sender: TObject);
    procedure btn40Click(Sender: TObject);
    procedure Edit24Change(Sender: TObject);
    procedure btn49Click(Sender: TObject);
    procedure btn48Click(Sender: TObject);
    procedure btn47Click(Sender: TObject);
    procedure SG5TopLeftChanged(Sender: TObject);
    procedure SG4GetCellColor(Sender: TObject; ARow, ACol: Integer; AState: TGridDrawState; ABrush: TBrush; AFont: TFont);
    procedure N42Click(Sender: TObject);
    procedure N43Click(Sender: TObject);
    procedure btn53Click(Sender: TObject);
    procedure SG7SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
    procedure SG7DblClickCell(Sender: TObject; ARow, ACol: Integer);
    procedure N44Click(Sender: TObject);
    procedure N46Click(Sender: TObject);
    procedure SG8DblClick(Sender: TObject);
    procedure N45Click(Sender: TObject);
    procedure N47Click(Sender: TObject); //Русские буквы в  латиницу
    function SUT(Dat3, Nom3, Dir1: string; QQ, Cvet: Integer; Prim: string): string;
    procedure N48Click(Sender: TObject);
    procedure btn55Click(Sender: TObject);
    procedure btn59Click(Sender: TObject);
    procedure btn54Click(Sender: TObject);
    procedure btn30Click(Sender: TObject);
    procedure SG10DblClick(Sender: TObject);
    procedure MenuItem2Click(Sender: TObject);
    procedure Edit28Click(Sender: TObject);
    procedure Edit29Click(Sender: TObject);
    procedure N49Click(Sender: TObject);
    procedure N50Click(Sender: TObject);
    procedure N51Click(Sender: TObject);
    procedure N52Click(Sender: TObject);
    procedure Button55Click(Sender: TObject);
    procedure N53Click(Sender: TObject);
    procedure BitBtn13Click(Sender: TObject);
    procedure BitBtn14Click(Sender: TObject);
    function Sborka_KPU(izd, Privod1: string; kol_kl, Kol_Pr, Kol, GP: integer): string;
    procedure F2Execute(Sender: TObject);
    procedure N54Click(Sender: TObject);
    procedure N55Click(Sender: TObject);
    procedure DateTimePicker1Change(Sender: TObject);
    procedure chk2Click(Sender: TObject);
    procedure ComboBox12Change(Sender: TObject);
    procedure N56Click(Sender: TObject);
    procedure N58Click(Sender: TObject);
    procedure N59Click(Sender: TObject);
    procedure Button59Click(Sender: TObject);
    procedure tmr1Timer(Sender: TObject);
    procedure img30Click(Sender: TObject);
    procedure img29Click(Sender: TObject);
    function Lenta1(AStr, Oboz1, Oboz2, Dat1, dat2, Tab1, Tab2: string; List: Integer; XL: Variant): string;
    procedure img28Click(Sender: TObject);
    procedure tmr2Timer(Sender: TObject);
    procedure img30DblClick(Sender: TObject);
    procedure N61Click(Sender: TObject);
    procedure Image27Click(Sender: TObject);
    procedure SG2MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure DateTimePicker4Change(Sender: TObject);
    procedure ComboBox23Change(Sender: TObject);
    procedure Panel15Click(Sender: TObject);
    procedure N60Click(Sender: TObject);
    procedure Edit31Click(Sender: TObject);
    procedure Edit31KeyPress(Sender: TObject; var Key: Char);
    procedure Edit32Change(Sender: TObject);
    procedure Edit32Click(Sender: TObject);
    procedure Edit32KeyPress(Sender: TObject; var Key: Char);
    procedure N62Click(Sender: TObject);
    procedure N63Click(Sender: TObject);
    procedure N64Click(Sender: TObject);
    procedure N65Click(Sender: TObject);
    procedure N66Click(Sender: TObject);
    procedure btn42Click(Sender: TObject);
    procedure N67Click(Sender: TObject);
    procedure btn50Click(Sender: TObject);
    procedure chk4Click(Sender: TObject);
    procedure btn46Click(Sender: TObject);
    procedure Edit25Click(Sender: TObject);
    procedure Edit26Click(Sender: TObject);
    procedure Edit25Change(Sender: TObject);
    procedure Edit26Change(Sender: TObject);
    procedure N68Click(Sender: TObject);
    procedure N69Click(Sender: TObject);
    procedure N70Click(Sender: TObject);
    procedure N71Click(Sender: TObject);
    procedure Button60Click(Sender: TObject);
    procedure tmr3Timer(Sender: TObject);
    procedure btn39Click(Sender: TObject);
    procedure act3Execute(Sender: TObject);
    procedure chk5Click(Sender: TObject);
    procedure chk6Click(Sender: TObject);
    procedure N72Click(Sender: TObject);
    procedure N73Click(Sender: TObject);
    procedure N74Click(Sender: TObject);
    procedure N75Click(Sender: TObject);
    procedure SG2SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
    procedure Button9Click(Sender: TObject);
    procedure SG2DrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
    function Xls_To_Grid(AGrid: TStringGrid; AXLSFile: string; List: string; C, R: Integer): Boolean;
    function Xls_To_DBO(AGrid: TStringGrid; AXLSFile: string; List: string; C, R: Integer): Boolean;
    procedure Edit3KeyPress(Sender: TObject; var Key: Char);
    procedure Edit24KeyPress(Sender: TObject; var Key: Char);
    procedure Edit33Change(Sender: TObject);
    procedure Edit33KeyPress(Sender: TObject; var Key: Char);
    procedure Edit24Click(Sender: TObject);
    procedure Edit33Click(Sender: TObject);
    procedure edt1KeyPress(Sender: TObject; var Key: Char);
    procedure N76Click(Sender: TObject);
    procedure N77Click(Sender: TObject);
    procedure Button61Click(Sender: TObject);
    procedure Button58Click(Sender: TObject);
    procedure Button62Click(Sender: TObject);
    procedure N78Click(Sender: TObject);
    procedure N79Click(Sender: TObject);
    procedure N80Click(Sender: TObject);
    procedure N81Click(Sender: TObject);
    procedure Specif(Izdel, GP, KO, Zak, BZ, Dat, Tab, Tab2: string; AA: Integer);
    procedure Specif_Shum(Izdel, GP, KO, Zak, BZ, Dat, Tab, Tab2: string; AA: Integer);
    procedure Specif_GKV(Izdel, GP, KO, Zak, BZ, Dat, Tab, Tab2: string; AA: Integer);
    procedure Specif_Shum_K(Izdel, GP, KO, Zak, BZ, Dat, Tab, Tab2: string; AA: Integer);
    procedure Specif_Shum_D(Izdel, GP, KO, Zak, BZ, Dat, Tab, Tab2: string; AA: Integer);
    procedure Specif_Klap_KOL_K(Izdel, GP, KO, Zak, BZ, Dat, Tab, Tab2: string; AA: Integer);
    procedure METALL(Dat1, Dat2, Str, Tab1, Tab2: string; XL: Variant);
    procedure Specif_F(Izdel, GP, KO, Zak, BZ, Dat, Tab, Tab2: string; AA: Integer);
    procedure PopupVOZD_LPopup(Sender: TObject);
    procedure Button63Click(Sender: TObject);
    procedure SG10GetCellColor(Sender: TObject; ARow, ACol: Integer; AState: TGridDrawState; ABrush: TBrush; AFont: TFont);
    procedure SG10MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure Edit34KeyPress(Sender: TObject; var Key: Char);
    procedure Memo21DblClick(Sender: TObject);
    procedure N21Click(Sender: TObject);
    procedure btn63Click(Sender: TObject);
    procedure N82Click(Sender: TObject);
    procedure Button64Click(Sender: TObject);
    procedure SG10Click(Sender: TObject);
    procedure Button65Click(Sender: TObject);
    procedure Button76Click(Sender: TObject);
    procedure Button68Click(Sender: TObject);
    procedure zclrstrngrd1DblClick(Sender: TObject);
    procedure zclrstrngrd1MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure zclrstrngrd1MouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure zclrstrngrd1MouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
    procedure zclrstrngrd1TopLeftChanged(Sender: TObject);
    procedure Edit37Click(Sender: TObject);
    procedure Edit38Click(Sender: TObject);
    procedure Edit40Click(Sender: TObject);
    procedure btn67Click(Sender: TObject);
    procedure btn66Click(Sender: TObject);
    procedure Button71Click(Sender: TObject);
    procedure ComboBox39DrawItem(Control: TWinControl; Index: Integer; Rect: TRect; State: TOwnerDrawState);
    procedure ComboBox39Change(Sender: TObject);
    procedure ComboBox5Change(Sender: TObject);
    procedure ComboBox4Change(Sender: TObject);
    procedure ComboBox15Change(Sender: TObject);
    procedure ComboBox18Change(Sender: TObject);
    procedure cbb4Change(Sender: TObject);
    procedure ComboBox3Change(Sender: TObject);
    procedure ComboBox30Change(Sender: TObject);
    procedure ComboBox33Change(Sender: TObject);
    procedure ComboBox37Change(Sender: TObject);
    procedure MenuItem8Click(Sender: TObject);
    procedure MenuItem11Click(Sender: TObject);
    procedure MenuItem16Click(Sender: TObject);
    procedure MenuItem17Click(Sender: TObject);
    procedure MenuItem15Click(Sender: TObject);
    procedure MenuItem7Click(Sender: TObject);
    procedure MenuItem5Click(Sender: TObject);
    procedure btn58Click(Sender: TObject);
    procedure btn57Click(Sender: TObject);
    procedure Specif_EKV(Izdel, GP, KO, Zak, BZ, Dat, Tab, Tab2: string; AA: Integer);
    procedure Specif_Homut(Izdel, GP, KO, Zak, BZ, Dat, Tab, Tab2: string; AA: Integer);
    procedure N83Click(Sender: TObject);
    procedure Button78Click(Sender: TObject);
    procedure N84Click(Sender: TObject);
    procedure N85Click(Sender: TObject);
    procedure Button49Click(Sender: TObject);
    procedure N86Click(Sender: TObject);
    procedure N87Click(Sender: TObject);
    procedure SG5MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure StringGrid10MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure SG6MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure ZSGMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure SGLMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure StringGrid6MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure ZCVMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure SGMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure SG215MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure SG4MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure SG2MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure SG10MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure zclrstrngrd1MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure N88Click(Sender: TObject);
    procedure N89Click(Sender: TObject);
    procedure Button73Click(Sender: TObject);
    procedure Button74Click(Sender: TObject);
    procedure Button75Click(Sender: TObject);
    procedure Button77Click(Sender: TObject);
    procedure Button80Click(Sender: TObject);
    procedure Button79Click(Sender: TObject);
    function Xls_To_StringGrid22(AGrid: TStringGrid; AXLSFile: string; List: string): Boolean;
    procedure N90Click(Sender: TObject);
    function OSI(AStr, Dat1, dat2, Tab1, Tab2: string; List: Integer; XL: Variant): string;
    procedure N91Click(Sender: TObject);
    procedure Button81Click(Sender: TObject);
    function EJZ(Upak, Dat1, dat2, Tab1, KolPr: string; AGrid: TStringGrid): string;
    procedure Copy1Click(Sender: TObject);
    procedure N92Click(Sender: TObject);
    procedure FindWithLevel(path, FileName: string);
    function SUT_Kanal(Dat3, Nom3, Dir1: string; qq, Cvet: Integer; Prim: string): string;
    function SUT_Kanal_GKV(Dat3, Nom3, Dir1: string; qq, Cvet: Integer; Prim: string): string;
    procedure StringGrid4DblClick(Sender: TObject);
    procedure btn64Click(Sender: TObject);
    procedure btn65Click(Sender: TObject);
    procedure btn68Click(Sender: TObject);
    procedure btn69Click(Sender: TObject);
    procedure btn70Click(Sender: TObject);
    procedure btn71Click(Sender: TObject);
    procedure N93Click(Sender: TObject);
    procedure Edit36Click(Sender: TObject);
    procedure Edit36KeyPress(Sender: TObject; var Key: Char);
    procedure Edit39Click(Sender: TObject);
    procedure Button82Click(Sender: TObject);
    procedure dtp10Change(Sender: TObject);
    procedure ComboBox43Change(Sender: TObject);
    procedure Button83Click(Sender: TObject);
    procedure Button84Click(Sender: TObject);
    procedure Specif_EKV_K(Izdel, GP, KO, Zak, BZ, Dat, Tab, Tab2: string; AA: Integer);
    function Vsriv(Naim:String):String;
    procedure N94Click(Sender: TObject);
    procedure N95Click(Sender: TObject);
    procedure N97Click(Sender: TObject);
    procedure N96Click(Sender: TObject);
    procedure N98Click(Sender: TObject);
    procedure btn60Click(Sender: TObject);
    procedure N99Click(Sender: TObject);
    procedure N100Click(Sender: TObject);
    procedure N110Click(Sender: TObject);
    procedure N101Click(Sender: TObject);
    procedure N102Click(Sender: TObject);
    procedure N103Click(Sender: TObject);
    procedure N104Click(Sender: TObject);
    procedure Edit28KeyPress(Sender: TObject; var Key: Char);
    procedure Edit29KeyPress(Sender: TObject; var Key: Char);
    procedure Edit37KeyPress(Sender: TObject; var Key: Char);
    procedure Edit38KeyPress(Sender: TObject; var Key: Char);
    procedure Edit40KeyPress(Sender: TObject; var Key: Char);
    procedure Button85Click(Sender: TObject);
    procedure CC1(Dat1, Dat2, Str, Tab1, Tab2: string;P:Integer);
    procedure CC_STAM(Dat1, Dat2, Str, Tab1, Tab2: string);
    procedure Button86Click(Sender: TObject);
    procedure N106Click(Sender: TObject);
    procedure N105Click(Sender: TObject);
    procedure N107Click(Sender: TObject);
    procedure Button87Click(Sender: TObject);
    procedure Button88Click(Sender: TObject);
    procedure Button89Click(Sender: TObject);
    procedure Button38Click(Sender: TObject);
    procedure BLF1Click(Sender: TObject);
    procedure BLF2Click(Sender: TObject);
    function SUT1(Dat3, Nom3, Dir1: string; qq, Cvet: Integer; Prim: string): string;
    procedure Button90Click(Sender: TObject);
    procedure Button91Click(Sender: TObject);
  // function Germik_DU(Izdel,IDGP:string; Svarka1:Double ;Ii:Integer):MyRec;
  private
                { Private declarations }

  private
  public
       { Public declarations }
    ResultStr, ResultPatch: string;
    FlagDolg, CheckACol, CheckARow, Vozduh, F7: Integer; //1 воздушный ,0 Пожарный
    CheckACol9, CheckARow9: Integer; //Для Grid9
    CheckACol7, CheckARow7: Integer; //Для Grid9
    DEF_CatalogName, MSSQL_CONN_STR: string;
    SQLText, SQLText1, SQLText2, SQLText3, UserName1, UserName_Eng, Mail, Pass, Departament, Manager, Title, Division: string;
    Poz_Progress, Zapusk2: Integer;
                        //Повторный запуск Заготовка Запуск не пусто 1
    Voz_Brik, //0 Все  1- Продажные 2-С Б\З 3-С Брикетом
    Order, Order1, Order2, Order3, Order4, Order8, Order_L_P, Nam_NC: string; //Сортировка
    RowG, TmpCol, tmpRow,
                //Spec 0-из табл Специф Дв клик по названию клапана   1- из табл Шаблон  По кнопке Технолог
    Spec, Poisk, Flag_Briket, //Наличе Б\З=0 Покупные =1
    TmpColVoz, tmpRowVoz, F, Poisk_Stam, Poisk_LUK, Flag_Poisk, Luk,OTK_Prim ,Poisk_Vosd: Integer;
    Str_SQL_Poisk: string;
    Conn_Ceh: Connect_Miass_Ceh;
    Conn_Klap: Connect_Miass_Klap;
    UOsnova_Main: Osnova_Main;
    MSSQL_CONN_STR_Glob, Put_KTO, //Путь к рабочему каталогу
    Put_Avto//Путь к EXE дистрибутиву
      : string;
    Column_ALL: array[0..550, 0..4] of string;
    F750, FF710, DIP,STAM_Er: Integer;
    XL_Global: Variant;
    Zagolov, Telo, Betwe710, Betwe_G: string;
  end;

var
  Form1: TForm1;

type
  TResult = record
    Svarka, Sborka, Sborka1, Sborka2,Sborka_RON,Obvarka_G_R,El: Double;
    Sborka_lop, Sborka_tyag: string;
    TIP_IN1, TIP_IN2, TIP_IN3, TIP_IN4, MAT_IN1, MAT_IN2, MAT_IN3: integer;
    TIP_SL1, TIP_SL2, TIP_SL3, MAT_SL1, MAT_SL2, MAT_SL3: string;
    TIP_Do1, TIP_Do2, TIP_Do3, MAT_Do1, MAT_Do2, MAT_Do3,Sborka_Zas: Double;
    MAT_G_Do1, MAT_G_Do2, MAT_G_Do3: Double;
    Gib1, Gib2, Gib3, Gib_Nal: Double;
    MAT_Pila_Do1, MAT_Pila_Do2, MAT_Pila_Do3: Double;
  end;

  MyThread = class(TThread)
  private
    results: integer;
    S_G: string;
  protected
    procedure ShowResult;
    procedure Execute; override;
  end;

implementation

uses
  Reg, UNomer, UBriket, USpec, UPrim, UNomerProizv, Unit3, UZapusk, UV, URasform,
  UNew, UF1, UZapuskVozd, UNorm, UNewSbor, USborAll, UOtk, UNewNakl, UDetal,
  UTSP, UServer, UPrivod, UNewNaklVoz, UProgres, US, USpecSTAM, UKolLop, UKolZap,
  Unit1, UNewNaklSTAM, USTAMTime, UPDO, UProgrammist, Unit2, UNorma1, UNormaVoz,
  U710, USpecOb, UIzv, UFile, mainBRAK, UnewBRAK, UGibka, UNCH, USborkaNCH,
  UPochta, UPolsov, UShtrih, UBrigada, URabota, USborKan;

{$R *.dfm}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.ConvertFloat(TrudStr: string): string;
var
  G, M, D: string;
  PosM, PosTrud: integer;
begin
  PosTrud := Pos(',', TrudStr);
  if PosTrud <> 0 then
  begin
    Delete(TrudStr, PosTrud, 1);
    Insert('.', TrudStr, PosTrud);
  end;
  Result := TrudStr;
end;

function TForm1.GetLocalIPs: TStringList;
type
  TaPInAddr = array[0..10] of PInAddr;

  PaPInAddr = ^TaPInAddr;
var
  phe: PHostEnt;
  pptr: PaPInAddr;
  Buffer: array[0..63] of Char;
  I: Integer;
  GInitData: TWSAData;
  IPs: TStringList;
begin
{        IPs := TStringList.Create;
        WSAStartup($101, GInitData);
        GetHostName(PAnsiChar(Buffer), SizeOf(Buffer));
        phe := GetHostByName(buffer);
        if phe = nil then
                IPs.Add('No IP found')
        else
        begin
                pPtr := PaPInAddr(phe^.h_addr_list);
                I := 0;
                while pPtr^[I] <> nil do
                begin
                        IPs.Add(inet_ntoa(pptr^[I]^));
                        Memo6.Lines.Add(inet_ntoa(pptr^[I]^));
                        Inc(I);
                end;
        end;
        WSACleanup;

        Result := IPs;  }
end;

function TForm1.ConvertDat1(StrDat: string): string;
var
  G, M, D: string;
  PosM, PosD: integer;
begin
  if StrDat <> '' then
  begin
    PosD := AnsiPos('.', StrDat);
    D := Copy(StrDat, 1, PosD - 1);
    Delete(StrDat, 1, PosD);
    PosM := AnsiPos('.', StrDat);
    M := Copy(StrDat, 1, PosM - 1);
    Delete(StrDat, 1, PosM);
    G := M + '.' + D + '.' + StrDat;
    Result := G;
  end
  else
    Result := '';
end;

procedure TForm1.GetAllFiles(Path: string);
var
  SR: TSearchRec;
  FindRes: Integer;
begin
  Memo5.Lines.Clear;
  FindRes := FindFirst(Path + '*.*', faAnyFile, SR);
  while FindRes = 0 do
  begin
    if ((SR.Attr and faDirectory) = faDirectory) and ((SR.Name = '.') or (SR.Name = '..')) then
    begin
      FindRes := FindNext(SR);
      Continue;
    end;

    if ((SR.Attr and faDirectory) = faDirectory) then
                        {если найден каталог, то}
    begin
      GetAllFiles(Path + SR.Name + '*.xls');
                        {входим в процедуру поиска с параметрами текущего каталога + каталог, что мы нашли}
      FindRes := FindNext(SR);
                        {после осмотра вложенного каталога мы продолжаем поиск в этом каталоге}
      Continue;
    end;

    Memo5.Lines.Add(SR.Name);
    FindRes := FindNext(SR);
  end;
  FindClose(SR);
end;

function TForm1.ZNumber(AStr: string): string; //Вытаскиваем  номер из Строки
var
  S, S1, Str: string;
  j, i, Res: integer;
  L: integer;
begin
  Result := '';
  Str := AStr;
  if Length(AStr) < 1 then
  begin
    exit;
  end;


        //S := AStr;
  L := Length(Str);
  j := 1;
  i := 0;
  while not (j > L) do
  begin
    if (Str[j] in ['0'..'9']) then
    begin
      S := S + Str[j];
      i := j;
      Break;
    end;
    inc(j);
  end;
  Delete(Str, 1, i - 1);
  Res := Pos('x', Str);
  Delete(Str, Res, 20);
  Res := Pos('х', Str);
  Delete(Str, Res, 20);
  S1 := Str;
  Result := S1;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.Prim(AStr: string): string; //Убираем переносы из примечаний
var
  S, S1, Str: string;
  j, i, Res: integer;
  L: integer;
begin
  Result := '';
  Str := AStr;
  if Length(AStr) < 1 then
  begin
    exit;
  end;
        //S := AStr;
  L := Length(Str);
  j := 1;
  i := 0;
  while not (j > L) do
  begin
    if (Str[j] <> #13) and (Str[j] <> #10) then
    begin
      S := S + Str[j];
      i := j;
    end
    else
    begin
      S := S + ' ';
      inc(j);
    end;
    inc(j);
  end;
  Result := S;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.Zvezda(AStr: string): string; //Вытаскиваем  * из Строки ставим Х
var
  S, S1, Str: string;
  j, i, Res: integer;
  L: integer;
begin
  Result := '';
  Str := AStr;
  if Length(AStr) < 1 then
  begin
    exit;
  end;
        //S := AStr;
  L := Length(Str);
  j := 1;
  i := 0;
  while not (j > L) do
  begin
    if (Str[j] <> '*') then
    begin
      S := S + Str[j];
      i := j;
    end
    else
    begin
      S := S + 'x';
                        //inc( j );
    end;
    inc(j);
  end;
  Result := S;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.ZvezdaObratno(AStr: string): string;
//Вытаскиваем  Х из Строки ставим *
var
  S, S1, Str: string;
  j, i, Res: integer;
  L: integer;
begin
  Result := '';
  Str := AStr;
  if Length(AStr) < 1 then
  begin
    exit;
  end;
        //S := AStr;
  L := Length(Str);
  j := 1;
  i := 0;
  while not (j > L) do
  begin
    if (Str[j] <> 'x') then
    begin
      S := S + Str[j];
      i := j;
    end
    else
    begin
      S := S + '*';
      inc(j);
    end;
    inc(j);
  end;
  Result := S;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    //стринг грид в эксель

procedure TForm1.ExportGridtoExcel(Sender: TStringGrid; Sender1: TStringGrid);
var
  XL: Variant;
  i, j, y, PosTrud: integer;
  Color1: TColor;
        //trud:Float;
  SB, SV: string;
begin
  XL := CreateOleObject('Excel.Application');
  XL.Application.EnableEvents := false;
  XL.WorkBooks.Add;

  for j := 0 to Sender.RowCount - 1 do
  begin
    for i := 0 to (Sender.ColCount) - 1 do
    begin
      if j = 0 then
      begin
        XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1].Interior.ColorIndex := 15;
        XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1].Font.Bold := True;
      end;
      XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1] := Sender.Cells[i, j];
      XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1].HorizontalAlignment := 3;
    end;
    y := 0;
    for i := Sender.ColCount to (Sender1.ColCount + Sender.ColCount) - 1 do
    begin
      Color1 := SG6.canvas.brush.Color;
      if j = 0 then
      begin
        XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1].Interior.ColorIndex := 15;
        XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1].Font.Bold := True;
      end;
      if (j <> 0) and (y = I_FN_SBOR_KLAP_NC) then
      begin
        SB := Sender1.Cells[y, j];
        PosTrud := Pos(',', SB); //Трудоемкость FLOAT
        if PosTrud <> 0 then
        begin
          Delete(SB, PosTrud, 1);
          Insert('.', SB, PosTrud);
        end;
        XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1] := SB;
        Inc(y);
        Continue;
      end;
      if (j <> 0) and (y = I_FN_SVARKA_NC) then
      begin
        SV := Sender1.Cells[y, j];
        PosTrud := Pos(',', SV); //Трудоемкость FLOAT
        if PosTrud <> 0 then
        begin
          Delete(SV, PosTrud, 1);
          Insert('.', SV, PosTrud);
        end;
        XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1] := SV;
        Inc(y);
        Continue;
      end;
       //--------------------------------------------------------------
      XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1] := Sender1.Cells[y, j];

      if (Sender1.Cells[I_FN_OTMENA, j] <> '') and (j <> 0) then
        XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1].Interior.ColorIndex := 37;
      XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1].HorizontalAlignment := 3;

      Inc(y);
    end;
  end;
  XL.ActiveWorkBook.WorkSheets[1].Range['A1', 'AB' + IntToStr(1)].Borders.LineStyle := 2;
  XL.ActiveWorkBook.WorkSheets[1].Range['A1', 'AB' + IntToStr(j)].Borders.LineStyle := 1;
  XL.ActiveWorkBook.WorkSheets[1].Range['A1', 'AB' + IntToStr(1)].Columns.AutoFit;
  XL.ActiveWorkBook.WorkSheets[1].Range['A1', 'AB' + IntToStr(1)].HorizontalAlignment := 3;
  XL.Visible := True;
  XL := UnAssigned;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

procedure TForm1.DeleteARow(Grid: TStringGrid; ARow: Integer);
begin
  TMyGrid(Grid).DeleteRow(ARow);
end;

procedure TForm1.dtp10Change(Sender: TObject);
begin
  dtp11.DateTime := dtp10.DateTime;

end;

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Поиск по Гриду (Выделить Колонку)

procedure TForm1.F2Execute(Sender: TObject);
begin
  Fnch.Show;
end;

procedure TForm1.Find_StringGrid(StringGrid: TStringGrid; FindStr: string; ACol: Integer; FindStr1: string; ACol1: Integer);
var
  i, Res, DlStr, Res1, DlStr1, Res2: Integer;
  StrGr, TmpStr, StrGr1, TmpStr1: string;
begin

  for i := 1 to StringGrid.RowCount - 2 do
  begin
    StrGr := StringGrid.Cells[ACol, i];
    DlStr := Length(FindStr);
    TmpStr := Copy(StrGr, 0, DlStr);
    Res := AnsiCompareStr(FindStr, TmpStr);
                //=================================
    StrGr1 := StringGrid.Cells[5, i];
    DlStr1 := Length(FindStr1);
    TmpStr1 := Copy(StrGr1, 0, DlStr1);
    Res1 := AnsiCompareStr(FindStr1, TmpStr1);
    Res2 := AnsiCompareStr(FindStr1, '0');
    if (Res = 0) {and (Res1 = 0) } then
    begin

      StringGrid.TopRow := i;
      StringGrid.Selection := TGridRect(Rect(2, i, 2, i));

      Break;
    end;
    if (Res = 0) and (Res2 = 0) then
    begin

      StringGrid.TopRow := i;
      StringGrid.Selection := TGridRect(Rect(2, i, 2, i));

      Break;
    end;
  end;
  Label2.Caption := '0';
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Поиск по Гриду (Выделить Колонку)

procedure TForm1.Find_StringGrid1(StringGrid: TStringGrid; FindStr: string; ACol: Integer; FindStr1: string; ACol1: Integer);
var
  i, Res, DlStr, Res1, DlStr1, Res2: Integer;
  StrGr, TmpStr, StrGr1, TmpStr1: string;
begin
        //Find_StringGrid1(STringGrid6, Edit17.Text, 23, Label17.Caption, 5);
  for i := 1 to StringGrid.RowCount - 2 do
  begin
    StrGr := StringGrid.Cells[0, i];
    DlStr := Length(FindStr);
    TmpStr := Copy(StrGr, 0, DlStr);
    Res := AnsiCompareStr(FindStr, TmpStr);
                //=================================
    StrGr1 := StringGrid.Cells[11, i];
    DlStr1 := Length(FindStr1);
    TmpStr1 := Copy(StrGr1, 0, DlStr1);
    Res1 := AnsiCompareStr(FindStr1, TmpStr1);
    Res2 := AnsiCompareStr(FindStr1, '0');
    if (Res = 0) and (Res1 = 0) then
    begin

      StringGrid.TopRow := i;
      StringGrid.Selection := TGridRect(Rect(2, i, 2, i));

      Break;
    end;
    if (Res = 0) and (Res2 = 0) then
    begin

      StringGrid.TopRow := i;
      StringGrid.Selection := TGridRect(Rect(2, i, 2, i));

      Break;
    end;
  end;
  Label2.Caption := '0';
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Поиск по Гриду (Выделить Колонку)

procedure TForm1.Find_StringGrid2(StringGrid: TStringGrid; FindStr: string; ACol: Integer; FindStr1: string; ACol1: Integer);
var
  i, Res, DlStr, Res1, DlStr1, Res2: Integer;
  StrGr, TmpStr, StrGr1, TmpStr1: string;
begin
        //Find_StringGrid1(STringGrid6, Edit17.Text, 23, Label17.Caption, 5);
  for i := 1 to StringGrid.RowCount - 2 do
  begin
    StrGr := StringGrid.Cells[ACol, i];
    DlStr := Length(FindStr);
    TmpStr := Copy(StrGr, 0, DlStr);
    Res := AnsiCompareStr(FindStr, TmpStr);
                //=================================
    StrGr1 := StringGrid.Cells[ACol, i];
    DlStr1 := Length(FindStr1);
    TmpStr1 := Copy(StrGr1, 0, DlStr1);
    Res1 := AnsiCompareStr(FindStr1, TmpStr1);
    Res2 := AnsiCompareStr(FindStr1, '0');
    if (Res = 0) and (Res1 = 0) then
    begin

      StringGrid.TopRow := i;
      StringGrid.Selection := TGridRect(Rect(2, i, 2, i));

      Break;
    end;
    if (Res = 0) and (Res2 = 0) then
    begin

      StringGrid.TopRow := i;
      StringGrid.Selection := TGridRect(Rect(2, i, 2, i));

      Break;
    end;
  end;
  Label2.Caption := '0';
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    //стринг грид в эксель

procedure TForm1.ExportGridtoExcel1(Sender: TStringGrid);
var
  XL: Variant;
  i, j: integer;
begin
  XL := CreateOleObject('Excel.Application');
  XL.Application.EnableEvents := false;
  XL.WorkBooks.Add;

  for j := 0 to Sender.RowCount - 1 do
  begin
    for i := 0 to (Sender.ColCount) - 1 do
    begin

      if Sender.ColWidths[i] <> 0 then
      begin
        XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1] := Sender.Cells[i, j];

        XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1].HorizontalAlignment := 3;

      end;
    end;
  end;
        {XL.ActiveWorkBook.WorkSheets[1].Range['A1', 'AB' +
                IntToStr(1)].Borders.LineStyle := 2;
        XL.ActiveWorkBook.WorkSheets[1].Range['A1', 'AB' +
                IntToStr(j)].Borders.LineStyle := 1;
        XL.ActiveWorkBook.WorkSheets[1].Range['A3', 'AB' +
                IntToStr(1)].Columns.AutoFit;
        XL.ActiveWorkBook.WorkSheets[1].Range['A1', 'AB' +
                IntToStr(1)].HorizontalAlignment := 3; }
  XL.Visible := True;
  XL := UnAssigned;
end;
    //стринг грид в эксель

procedure TForm1.ExportGridATMtoExcel(Sender: TADVStringGrid);
var
  XL: Variant;
  i, j, Y: integer;
  Dir, Dat, God, Mes, Str: string;
begin
  God := FormatDateTime('yyyy', Now);
  Mes := FormatDateTime('mmmm', Now);
  Dat := FormatDateTime('dd.mm.YYYY', Now);
  Dir := Put_KTO + '\CKlapana\Сборка СТАМ\' + God;
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\Сборка СТАМ\' + God + '\' + Mes + '\';
  CreateDir(Dir);

  XL := CreateOleObject('Excel.Application');
  CopyFile(PWideChar(Put_KTO + '\CKlapana\2013\Шаблон СТАМ.xlsx'), PWideChar(Dir + '\' + Dat + '.xlsx'), False);
  XL.Workbooks.Open(Dir + '\' + Dat + '.xlsx');
  XL.Application.EnableEvents := false;
  Y := 5;
  for j := 1 to Sender.RowCount do
  begin
    if Sender.RowEnabled[j] = True then
    begin
      for i := 0 to 22 do   // (Sender.ColCount) - 1
      begin
        if Sender.ColWidths[i] <> 0 then
        begin
          if (i = 11) or (i = 10) then
            XL.ActiveWorkBook.WorkSheets[1].Cells[Y + 1, i + 1] := ConvertFloat(Sender.Cells[i, j])
          else
            XL.ActiveWorkBook.WorkSheets[1].Cells[Y + 1, i + 1] := (Sender.Cells[i, j]);

          XL.ActiveWorkBook.WorkSheets[1].Cells[Y + 1, i + 1].HorizontalAlignment := 3;
        end;
      end;
      Inc(Y);
    end;
  end;
       { XL.ActiveWorkBook.WorkSheets[1].Range['A1', 'AB' +
                IntToStr(1)].Borders.LineStyle := 2;
        XL.ActiveWorkBook.WorkSheets[1].Range['A1', 'AB' +
                IntToStr(j)].Borders.LineStyle := 1;
        XL.ActiveWorkBook.WorkSheets[1].Range['A3', 'AB' +
                IntToStr(1)].Columns.AutoFit;
        XL.ActiveWorkBook.WorkSheets[1].Range['A1', 'AB' +
                IntToStr(1)].HorizontalAlignment := 3;  }
  XL.Visible := True;
  XL := UnAssigned;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

procedure TForm1.ExportGridtoExcel_LIST(Sender, S1, S2, S3: TStringGrid; List: Integer);
var
  XL, ActiveSheets, Sheets: Variant;
  i, j: integer;
begin
  XL := CreateOleObject('Excel.Application');
  XL.Application.EnableEvents := false;
  XL.WorkBooks.Add;
  for j := 0 to Sender.RowCount - 1 do
  begin
    for i := 0 to (Sender.ColCount) - 1 do
    begin

      if Sender.ColWidths[i] <> 0 then
      begin

        XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1] := Sender.Cells[i, j];
        XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1].HorizontalAlignment := 3;
      end;
    end;
  end;
  for j := 0 to S1.RowCount - 1 do
  begin
    for i := 0 to (S1.ColCount) - 1 do
    begin

      if S1.ColWidths[i] <> 0 then
      begin

        XL.ActiveWorkBook.WorkSheets[2].Cells[j + 1, i + 1] := S1.Cells[i, j];
        XL.ActiveWorkBook.WorkSheets[2].Cells[j + 1, i + 1].HorizontalAlignment := 3;
      end;
    end;
  end;
  for j := 0 to S2.RowCount - 1 do
  begin
    for i := 0 to (S2.ColCount) - 1 do
    begin

      if S2.ColWidths[i] <> 0 then
      begin

        XL.ActiveWorkBook.WorkSheets[3].Cells[j + 1, i + 1] := S2.Cells[i, j];
        XL.ActiveWorkBook.WorkSheets[3].Cells[j + 1, i + 1].HorizontalAlignment := 3;
      end;
    end;
  end;
  Sheets := XL.ActiveWorkBook.WorkSheets.Item[XL.ActiveWorkBook.WorkSheets.Count];
  ActiveSheets := XL.ActiveWorkBook.WorkSheets.Add(After := Sheets);
  ActiveSheets.Name := '23';
  for j := 0 to S3.RowCount - 1 do
  begin
    for i := 0 to (S1.ColCount) - 1 do
    begin

      if S3.ColWidths[i] <> 0 then
      begin

        XL.ActiveWorkBook.WorkSheets[4].Cells[j + 1, i + 1] := S3.Cells[i, j];
        XL.ActiveWorkBook.WorkSheets[4].Cells[j + 1, i + 1].HorizontalAlignment := 3;
      end;
    end;
  end;

  XL.ActiveWorkBook.WorkSheets[1].Range['A1', 'F' + IntToStr(1)].Borders.LineStyle := 2;
  XL.ActiveWorkBook.WorkSheets[1].Range['A1', 'F' + IntToStr(Sender.RowCount)].Borders.LineStyle := 1;
  XL.ActiveWorkBook.WorkSheets[1].Range['A3', 'F' + IntToStr(Sender.RowCount)].Columns.AutoFit;
  XL.ActiveWorkBook.WorkSheets[1].Range['A1', 'F' + IntToStr(Sender.RowCount)].HorizontalAlignment := 3;

  XL.ActiveWorkBook.WorkSheets[2].Range['A1', 'F' + IntToStr(1)].Borders.LineStyle := 2;
  XL.ActiveWorkBook.WorkSheets[2].Range['A1', 'F' + IntToStr(S1.RowCount)].Borders.LineStyle := 1;
  XL.ActiveWorkBook.WorkSheets[2].Range['A3', 'F' + IntToStr(S1.RowCount)].Columns.AutoFit;
  XL.ActiveWorkBook.WorkSheets[2].Range['A1', 'F' + IntToStr(S1.RowCount)].HorizontalAlignment := 3;

  XL.ActiveWorkBook.WorkSheets[3].Range['A1', 'F' + IntToStr(1)].Borders.LineStyle := 2;
  XL.ActiveWorkBook.WorkSheets[3].Range['A1', 'F' + IntToStr(S2.RowCount)].Borders.LineStyle := 1;
  XL.ActiveWorkBook.WorkSheets[3].Range['A3', 'F' + IntToStr(S2.RowCount)].Columns.AutoFit;
  XL.ActiveWorkBook.WorkSheets[3].Range['A1', 'F' + IntToStr(S2.RowCount)].HorizontalAlignment := 3;

  XL.ActiveWorkBook.WorkSheets[4].Range['A1', 'F' + IntToStr(1)].Borders.LineStyle := 2;
  XL.ActiveWorkBook.WorkSheets[4].Range['A1', 'F' + IntToStr(S3.RowCount)].Borders.LineStyle := 1;
  XL.ActiveWorkBook.WorkSheets[4].Range['A3', 'F' + IntToStr(S3.RowCount)].Columns.AutoFit;
  XL.ActiveWorkBook.WorkSheets[4].Range['A1', 'F' + IntToStr(S3.RowCount)].HorizontalAlignment := 3;
  XL.Visible := True;
  XL := UnAssigned;
end;
//Лог

procedure TForm1.Check(Module: string; Str: variant; Col: Integer);
var
  myFile: TextFile;
  S, Str1: string;
begin
  S := ExtractFileDir(ParamStr(0)) + '\Log.ini';
  AssignFile(myFile, S);
  Str1 := Module + '  ' + Str + '  ' + IntToStr(Col);
  try
    Append(myFile);
    WriteLn(myFile, Str1);
    CloseFile(myFile);
  except
    ReWrite(myFile);
  end;
  Form1.Memo2.Lines.Add(Module + '  ' + Str + '  ' + IntToStr(Col));
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.Briket(Nedel: string; Denn: string): string;
var
  StrNed: string;
  Ned, Den, Den1, Den2, Den3, Den4, Den5, Den6, Den7: Integer;
begin
  Ned := StrToInt(Nedel);
  Den := StrToInt(Denn);
  StrNed := IntToStr(Ned) + '(' + IntToStr(Den) + ')';
  if Den + 1 <= 7 then
  begin
    Den1 := Den + 1;
    StrNed := StrNed + '-' + IntToStr(Ned) + '(' + IntToStr(Den1) + ')';
  end
  else
  begin
    Den1 := 1;
    Ned := Ned + 1;
    StrNed := StrNed + '-' + IntToStr(Ned) + '(' + IntToStr(Den1) + ')';
  end;
        //========================
  if Den1 + 1 <= 7 then
  begin
    Den2 := Den1 + 1;
    StrNed := StrNed + '-' + IntToStr(Ned) + '(' + IntToStr(Den2) + ')';
  end
  else
  begin
    Den2 := 1;
    Ned := Ned + 1;
    StrNed := StrNed + '-' + IntToStr(Ned) + '(' + IntToStr(Den2) + ')';
  end;
        //========================
  if Den2 + 3 <= 7 then
  begin
    Den3 := Den2 + 3;
    StrNed := StrNed + '-' + IntToStr(Ned) + '(' + IntToStr(Den3) + ')';
  end
  else
  begin
    Den3 := 1;
    Ned := Ned + 1;
    StrNed := StrNed + '-' + IntToStr(Ned) + '(' + IntToStr(Den3) + ')';
  end;
        //========================
  if Den3 + 1 <= 7 then
  begin
    Den4 := Den3 + 1;
    StrNed := StrNed + '-' + IntToStr(Ned) + '(' + IntToStr(Den4) + ')';
  end
  else
  begin
    Den4 := 1;
    Ned := Ned + 1;
    StrNed := StrNed + '-' + IntToStr(Ned) + '(' + IntToStr(Den4) + ')';
  end;
        //========================
  if Den4 + 1 <= 7 then
  begin
    Den5 := Den4 + 1;
    StrNed := StrNed + '-' + IntToStr(Ned) + '(' + IntToStr(Den5) + ')';
  end
  else
  begin
    Den5 := 1;
    Ned := Ned + 1;
    StrNed := StrNed + '-' + IntToStr(Ned) + '(' + IntToStr(Den5) + ')';
  end;
  Result := StrNed;
end;

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.SetConnectTemp(var AQ: TADOQuery): Boolean;
begin
  Result := SetConnTemp(AQ, Form1.ADOConnectionTemp);
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.SetConnTemp(var AQ: TADOQuery; var AC: TAdoConnection): Boolean;
var
  MSSQL_CONN_STR, FileName_Server, S: string; //DEF_CatalogName ,
begin

  Result := false;
  S := ExtractFileDir(ParamStr(0));
  Memo1.Lines.Clear;
  Memo1.Lines.LoadFromFile(S + '\ConnKlap.ini');

  FileName_Server := Memo1.Lines.Strings[1]; //SQLEXPRESS
  Form1.Caption := FileName_Server + ' ' + Memo1.Lines.Strings[0] + '  001' + '   ' + Regist.Famili;
  ADOConnectionTemp.Connected := False;
  //DEF_CatalogName := Memo1.Lines[0]; //Klapan
  PUT_Avto := Memo1.Lines[2];
  PUT_KTO := Memo1.Lines[3];

        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if ADOConnectionTemp = nil then
    ADOConnectionTemp := TADOConnection.Create(Self);
  ADOConnectionTemp.LoginPrompt := False;
  ADOConnectionTemp.Connected := False;    //'C:\Users\kondratenkosa\Documents\MySQL32.dsn;';//
  //Provider=MSDASQL.1;Password=1Qaz2Wsx;Persist Security Info=True;User ID=root;Data Source=Mysql32;Initial Catalog=Klapan
  //Provider=SQLOLEDB.1;Packet Size = 4096;Password=111;Persist Security Info=True;User Id=testuser;Initial Catalog=Klapan  ;Data Source=MSS-APP1\SQL2014;
  ADOConnectionTemp.ConnectionString := MSSQL_CONN_STR_Glob;
  try
    ADOConnectionTemp.Connected := True;
    AQ.Connection := AC;
  except
    MessageDlg('Не удалось подключиться к базе данных1!', mtError, [mbOk], 0);
    Close;
  end;

  Result := true;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.SetConnect1(var AQ: TADOQuery): Boolean;
begin
  Result := SetConnect(AQ, Form1.ADOConnection1);
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.SetConnect(var AQ: TADOQuery; var AC: TAdoConnection): Boolean;
var
  MSSQL_CONN_STR, FileName_Server, S: string; //DEF_CatalogName ,
begin

  Result := false;
  S := ExtractFileDir(ParamStr(0));
  Memo1.Lines.Clear;
  Memo1.Lines.LoadFromFile(S + '\ConnKlap.ini');

  FileName_Server := Memo1.Lines.Strings[1]; //SQLEXPRESS
  Form1.Caption := FileName_Server + ' ' + Memo1.Lines.Strings[0] + '  001' + '   ' + Regist.Famili;
  ADOConnection1.Connected := False;
 // DEF_CatalogName := Memo1.Lines[0]; //Klapan
  PUT_Avto := Memo1.Lines[2];
  PUT_KTO := Memo1.Lines[3];
  MSSQL_CONN_STR_Glob:=Memo1.Lines[4];
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if ADOConnection1 = nil then
    ADOConnection1 := TADOConnection.Create(Self);
  ADOConnection1.LoginPrompt := False;
  ADOConnection1.Connected := False;    //'C:\Users\kondratenkosa\Documents\MySQL32.dsn;';//
  //Provider=MSDASQL.1;Password=1Qaz2Wsx;Persist Security Info=True;User ID=root;Data Source=Mysql32;Initial Catalog=Klapan
  //Provider=SQLOLEDB.1;Packet Size = 4096;Password=111;Persist Security Info=True;User Id=testuser;Initial Catalog=Klapan  ;Data Source=MSS-APP1\SQL2014;
  ADOConnection1.ConnectionString := MSSQL_CONN_STR_Glob;
  try
    ADOConnection1.Connected := True;
    AQ.Connection := AC;
  except
    MessageDlg('Не удалось подключиться к базе данных1!', mtError, [mbOk], 0);
    Close;
  end;

  Result := true;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.SetConn1(var AQ: TADOQuery): Boolean;
begin
  Result := SetConn(AQ, Form1.ADOConnection2);
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.SetConn(var AQ: TADOQuery; var AC: TAdoConnection): Boolean;
var
  MSSQL_CONN_STR, FileName_Server, S: string; //DEF_CatalogName ,
begin
  Result := false;

  S := ExtractFileDir(ParamStr(0));
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if ADOConnection2 = nil then
    ADOConnection2 := TADOConnection.Create(Self);
  ADOConnection2.LoginPrompt := False;
  ADOConnection2.Connected := False;
  ADOConnection2.ConnectionString := MSSQL_CONN_STR_Glob;
  try
    ADOConnection2.Connected := True;
    AQ.Connection := AC;
  except
    MessageDlg('Не удалось подключиться к базе данных2!', mtError, [mbOk], 0);
    Close;
  end;

  Result := true;
end;

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.SetConn2(var AQ: TADOQuery): Boolean;
var
  Nam: string;
begin
  Nam := AQ.Name;
  Result := SetConnect2(AQ, Form1.ADOConnection3);
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.SetConnect2(var AQ: TADOQuery; var AC: TAdoConnection): Boolean;
var
  MSSQL_CONN_STR, FileName_Server, S: string; //DEF_CatalogName ,
begin
  Result := false;
  S := ExtractFileDir(ParamStr(0));
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if ADOConnection3 = nil then
    ADOConnection3 := TADOConnection.Create(Self);
  ADOConnection3.LoginPrompt := False;
  ADOConnection3.Connected := False;
  ADOConnection3.ConnectionString := MSSQL_CONN_STR_Glob;
  try
    ADOConnection3.Connected := True;
    AQ.Connection := AC;
  except
    MessageDlg('Не удалось подключиться к базе данных3!', mtError, [mbOk], 0);
    Close;
  end;
  Result := true;
end;
//++++++++++++++++++++++++Номер недели

function TForm1.WeekNum(const ADate: TDateTime): word;
var
  Year: word;
  Month: word;
  Day: word;
begin
  DecodeDate(ADate + 4 - DayOfWeek(ADate + 6), Year, Month, Day);
  result := 1 + trunc((ADate - EncodeDate(Year, 1, 5) + DayOfWeek(EncodeDate(Year, 1, 3))) / 7);
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.mkQuerySelect(var AAQ: TADOQuery; const sQ: WideString; Args: array of const): boolean;
begin
  Result := false;
  if not SetConnect1(AAQ) then
    exit;
  try
    AAQ.Close;
    AAQ.SQL.Clear;
    AAQ.SQL.Text := Format(sQ, Args);
    AAQ.Active := true;
    check('query', AAQ.SQL.Text, AAQ.RecordCount);
  except
    Check('Error in Query', Format(sQ, Args), 0);
    AAQ.Close;
    exit;
  end;
  Result := true;
       // http://miass.rabotavgorode.ru/v380203
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.mkQuerySelect66(var AAQ: TADOQuery; const sQ: WideString; Args: array of const): boolean;
var
  Nam: string;
begin
  Result := false;
  if not SetConn2(AAQ) then
    exit;
  try
    Nam := AAQ.Name;
    AAQ.Close;
    AAQ.SQL.Clear;
    AAQ.SQL.Text := Format(sQ, Args);
    AAQ.Active := true;
    check('query', AAQ.SQL.Text, AAQ.RecordCount);
  except
    Check('Error in Query', Format(sQ, Args), 0);
    AAQ.Close;
    exit;
  end;
  Result := true;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.mkQuerySelect1(var AAQ: TADOQuery; const sQ: WideString; Args: array of const): boolean;
begin
  Result := false;
  if not SetConn1(AAQ) then
    exit;
  try
    AAQ.Close;
    AAQ.SQL.Clear;
    AAQ.SQL.Text := Format(sQ, Args);
    AAQ.Active := true;
    check('query', AAQ.SQL.Text, AAQ.RecordCount);
  except
    Check('Error in Query', Format(sQ, Args), 0);
    AAQ.Close;
    exit;
  end;
  Result := true;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.mkQueryInsert(var AAQ: TADOQuery; const sQ: WideString; Args: array of const): boolean;
var
  Str: string;
begin
  Result := false;
  if not SetConnect1(AAQ) then
    exit;
  ADOConnection1.BeginTrans;
  try
    AAQ.Close;
    AAQ.SQL.Clear;
    Str := Format(sQ, Args);
    AAQ.SQL.Text := Format(sQ, Args);
    AAQ.ExecSQL;
    ADOConnection1.CommitTrans();
    check('query', AAQ.SQL.Text, 1);
  except
    Check('Error in Query', Format(sQ, Args), 0);
    MessageDlg('Не удалось вставить запись!', mtError, [mbOk], 0);
    AAQ.Close;
    ADOConnection1.RollbackTrans();
    exit;
  end;
  Result := true;
end;

procedure TForm1.WMDropFiles(var Msg: TMessage);
var
  FileName: array[0..256] of char;
  F_Otk, F_Kud: string;
  FileOp: TSHFileOpStruct;
  res1: Integer;
  H: hwnd;
begin
  DragQueryFile(THandle(Msg.WParam), 0, FileName, SizeOf(FileName));
  Form1.Caption := FileName;
  if FlagDolg = 1 then
    Xls_To_Grid(SG1, FileName, '', 0, 0);
  DragFinish(THandle(Msg.WParam));
end;

procedure TForm1.FormShow(Sender: TObject);
var
  S, FileName_Server, FileName, NewFileName1, DatStr, File_KPU, NewFile_KPU, File_KPD, NewFile_KPD, Dir, Nam, SS: string;
  IndexDenFirst, I, Wi, fileDate, fileDate_Server, R: Integer;
  Rect: TRect;
  buffer: array[0..MAX_COMPUTERNAME_LENGTH + 1] of Char;
  Size: Cardinal;
begin
  S := ExtractFileDir(ParamStr(0));
  //Edit3.Text := S;
  R := Pos('V:', S);
  if R <> 0 then
    Close;

  F750 := 0;
  FF710 := 0;
  Dip := 0;
  dtp3.DateTime := Now;
  DTP8.DateTime := Now;
  dtp10.DateTime := Now;
  DTP11.DateTime := Now;
  DTP9.DateTime := Now;
  FOTK.DateTimePicker1.Date := Now;
  DragAcceptFiles(Handle, true);
 {if PageControl1.TabIndex=9 Then
 Begin
    PageControl1.Pages[9].ImageIndex:=5;//.Canvas.Brush.Color := clRed;
    PageControl1.Canvas.FillRect(Rect);
 End;  }

  btn22.Visible := True;
  Poisk := 0;
  DateTimePicker3.DateTime := Now;
  DateTimePicker7.DateTime := Now;
  DateTimePicker8.DateTime := Now;
  DateTimePicker9.DateTime := Now;
  DateTimePicker10.DateTime := Now;

  dtp4.DateTime := Now;
  dtp5.DateTime := Now;
  ComboBox4.DropDownCount := 20;
  ComboBox14.DropDownCount := 20;
  ComboBox13.DropDownCount := 20;

  ComboBox5.DropDownCount := 20;
  ComboBox9.DropDownCount := 20;
  ComboBox10.DropDownCount := 20;
  //--------------------------------------------------------------------
  ComboBox15.DropDownCount := 20;
  ComboBox16.DropDownCount := 20;
  ComboBox17.DropDownCount := 20;
  ComboBox18.DropDownCount := 20;
  ComboBox3.DropDownCount := 20;
  ComboBox18.ItemIndex := 10;
  ComboBox17.ItemIndex := 0;
  ComboBox20.ItemIndex := 0;
  FNormaVoz.dtp1.DateTime := Now;
  FNorma.dtp1.DateTime := Now;
  FStamTime.dtp1.DateTime := Now;
  //--------------------------------------------------------------------

  FileName := ExtractFileDir(ParamStr(0)) + '\Klapan.EXE';
  fileDate := FileAge(FileName);

  S := DateToStr(FileDateToDateTime(fileDate));

  StatusBar2.Panels[3].Text := 'Дата создания файла Klapan.exe : ' + DateTimeToStr(FileDateToDateTime(fileDate));
  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  //Лог в папку с IP
  {Dir:= '\\192.168.7.1\Avtomatika\CKlapana2\Log\'+IdIPWatch1.LocalIP+'\';
  CreateDir(Dir);
  FileName := ExtractFilePath(Application.ExeName) + '\Log.ini';
  NewFileName1 :=Dir + '\Log.ini';
  CopyFile(Pchar(FileName), Pchar(NewFileName1), false);
  Memo2.Lines.Add(form1.IdIPWatch1.LocalIP); //лановский IP  }
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  S := ExtractFileDir(ParamStr(0));
  Memo1.Lines.Clear;
  Memo1.Lines.LoadFromFile(S + '\ConnKlap.ini');

  FileName_Server := Memo1.Lines.Strings[1]; //SQLEXPRESS
  Form1.Caption := FileName_Server + ' ' + Memo1.Lines.Strings[0] + '  003' + '   ' + Regist.Famili;
  ADOConnection1.Connected := False;
  if chk5.Checked then
    DEF_CatalogName := 'KlapanArhiv'
  else
    DEF_CatalogName := Memo1.Lines[0]; //Klapan

  if chk6.Checked then
    DEF_CatalogName := 'KlapanArhiv'
  else
    DEF_CatalogName := Memo1.Lines[0]; //Klapan

  if chk5.Checked then
    MSSQL_CONN_STR_Glob := Memo1.Lines[6]
  else
    MSSQL_CONN_STR_Glob := Memo1.Lines[4];

  if chk6.Checked then
    MSSQL_CONN_STR_Glob := Memo1.Lines[6]
  else
    MSSQL_CONN_STR_Glob := Memo1.Lines[4];
  PUT_Avto := Memo1.Lines[2];
  PUT_KTO := Memo1.Lines[3];
               { 'Provider=SQLOLEDB.1;Packet Size = 4096;Password=111;' +
                'Persist Security Info=True;User Id=testuser;' +
                'Initial Catalog=' + DEF_CatalogName +
                ';Data Source=DINAMO\'+FileName_Server; }
  ADOConnection1.ConnectionString := MSSQL_CONN_STR_Glob;
  try
    ADOConnection1.Connected := True;
  except
    MessageDlg('Не удалось подключиться к базе данных4!', mtError, [mbOk], 0);
    Close;
  end;
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  FileName := ExtractFilePath(Application.ExeName) + '\2013\SUT.xlsx';
  NewFileName1 := Put_Avto + '\CKlapana2\2013\SUT.xlsx';
  CopyFile(Pchar(NewFileName1), Pchar(FileName), false);
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  File_KPU := ExtractFilePath(Application.ExeName) + '\2013\Воздушные.xlsx';
  NewFile_KPU := Put_Avto + '\CKlapana2\2013\Воздушные.xlsx';
  CopyFile(Pchar(NewFile_KPU), Pchar(File_KPU), false);
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  File_KPD := ExtractFilePath(Application.ExeName) + '\2013\Пожарные.xlsx';
  NewFile_KPD := Put_Avto + '\CKlapana2\2013\Пожарные.xlsx';
  CopyFile(Pchar(NewFile_KPD), Pchar(File_KPD), false);
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  File_KPD := ExtractFilePath(Application.ExeName) + '\2013\СтенкиОбраз.xls';
  NewFile_KPD := Put_Avto + '\CKlapana2\2013\СтенкиОбраз.xls';
  CopyFile(Pchar(NewFile_KPD), Pchar(File_KPD), false);

  FNomer.DateTimePicker1.DateTime := Now;
  DateTimePicker1.DateTime := Now;
  DateTimePicker2.DateTime := Now;
  DateTimePicker4.DateTime := Now;
  DateTimePicker5.DateTime := Now;
  DateTimePicker6.DateTime := Now;

  StatusBar1.Panels[1].Width := 150;
  StatusBar1.Panels[0].Width := 230;
  DatStr := FormatDateTime('dd.mm.yyyy', Date);
  IndexDenFirst := DayOfTheWeek(StrToDate(DatStr));
        //Индекс дня в неделе 1,2,3...7
  StatusBar1.Panels[0].Text := 'Сегодня ' + FormatDateTime('dd.mm.yyyy', Date) + '.   ' + IntToStr(WeekNum(Date)) + '(' + IntToStr(IndexDenFirst) + ')  неделя.';
  StatusBar1.Panels[1].Text := 'Количество записей:';

  Form2.DateTimePicker1.DateTime := Now;
  StatusBar2.Panels[2].Width := 230;
  StatusBar2.Panels[1].Width := 270;
  StatusBar2.Panels[0].Width := 230;
  StatusBar2.Panels[1].Text := 'Сумма значений выделенных ячеек: ';
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  S := ExtractFileDir(ParamStr(0));

  Memo1.Lines.Clear;
  Memo1.Lines.LoadFromFile(S + '\StringGrid10.ini');
  StringGrid10.ColCount := Memo1.Lines.Count;
        //StringGrid10.ColCount := 14;
  for I := 0 to Memo1.Lines.Count - 1 do
    StringGrid10.ColWidths[I] := StrToInt(Memo1.Lines.Strings[I]);

  Memo1.Lines.Clear;
  Memo1.Lines.LoadFromFile(S + '\SG.ini');
  SG.ColCount := Memo1.Lines.Count;
  for I := 0 to Memo1.Lines.Count - 1 do
    SG.ColWidths[I] := StrToInt(Memo1.Lines.Strings[I]);

  Memo1.Lines.Clear;
  Memo1.Lines.LoadFromFile(S + '\ZSG.ini');
  ZSG.ColCount := Memo1.Lines.Count;
  for I := 0 to Memo1.Lines.Count - 1 do
  begin
    Wi := StrToInt(Memo1.Lines.Strings[I]);
    ZSG.ColWidths[I] := StrToInt(Memo1.Lines.Strings[I]);
  end;

  Memo1.Lines.Clear;
  Memo1.Lines.LoadFromFile(S + '\StringGrid6.ini');
  StringGrid6.ColCount := Memo1.Lines.Count;
  for I := 0 to Memo1.Lines.Count - 1 do
    StringGrid6.ColWidths[I] := StrToInt(Memo1.Lines.Strings[I]);

  Memo1.Lines.Clear;
  Memo1.Lines.LoadFromFile(S + '\SGL.ini');
  SGL.ColCount := Memo1.Lines.Count;
  for I := 0 to Memo1.Lines.Count - 1 do
    SGL.ColWidths[I] := StrToInt(Memo1.Lines.Strings[I]);

  Memo1.Lines.Clear;
  Memo1.Lines.LoadFromFile(S + '\ZCV.ini');
  ZCV.ColCount := Memo1.Lines.Count;
  for I := 0 to Memo1.Lines.Count - 1 do
    ZCV.ColWidths[I] := StrToInt(Memo1.Lines.Strings[I]);

  Memo1.Lines.Clear;
  Memo1.Lines.LoadFromFile(S + '\SG6.ini');
  SG6.ColCount := Memo1.Lines.Count;
  for I := 0 to Memo1.Lines.Count - 1 do
    SG6.ColWidths[I] := StrToInt(Memo1.Lines.Strings[I]);

  Memo1.Lines.Clear;
  Memo1.Lines.LoadFromFile(S + '\SG215.ini');
  SG215.ColCount := Memo1.Lines.Count;
  for I := 0 to Memo1.Lines.Count - 1 do
    SG215.ColWidths[I] := StrToInt(Memo1.Lines.Strings[I]);

  Memo1.Lines.Clear;
  Memo1.Lines.LoadFromFile(S + '\SG2.ini');
  SG2.ColCount := Memo1.Lines.Count;
  for I := 0 to Memo1.Lines.Count - 1 do
    SG2.ColWidths[I] := StrToInt(Memo1.Lines.Strings[I]);

  Memo1.Lines.Clear;
  Memo1.Lines.LoadFromFile(S + '\SG4.ini');
  SG4.ColCount := Memo1.Lines.Count;
  for I := 0 to Memo1.Lines.Count - 1 do
    SG4.ColWidths[I] := StrToInt(Memo1.Lines.Strings[I]);

  Memo1.Lines.Clear;
  Memo1.Lines.LoadFromFile(S + '\SG5.ini');
  SG5.ColCount := Memo1.Lines.Count;
  for I := 0 to Memo1.Lines.Count - 1 do
    SG5.ColWidths[I] := StrToInt(Memo1.Lines.Strings[I]);

  Memo1.Lines.Clear;
  Memo1.Lines.LoadFromFile(S + '\SG10.ini');
  SG10.ColCount := Memo1.Lines.Count;
  for I := 0 to Memo1.Lines.Count - 1 do
    SG10.ColWidths[I] := StrToInt(Memo1.Lines.Strings[I]);

  Memo1.Lines.Clear;
  Memo1.Lines.LoadFromFile(S + '\zclrstrngrd1.ini');
  zclrstrngrd1.ColCount := Memo1.Lines.Count;
  for I := 0 to Memo1.Lines.Count - 1 do
    zclrstrngrd1.ColWidths[I] := StrToInt(Memo1.Lines.Strings[I]);

  Regist := TRegist.Create(Self);
  Regist.ShowModal;
 { if Regist.Button1.Enabled then
    Regist.Button1.Click; }

  Memo1.Lines.Clear;

        //Memo1.Lines.LoadFromFile(S + '\ConnKlap.ini');
        //Form1.Caption := Memo1.Lines.Strings[0] + '  002';
       // PageControl1.Pages[9].TabVisible := False;
       // PageControl1.Pages[3].TabVisible := False;
  FZapusk.DateTimePicker1.Date := Now;
  FV.DateTimePicker1.Date := Now;
       // Button22.Click;
  if not mkQuerySelect(ADOQuery2, 'Select Фамилия from %s Where МаркаАвто='+#39+'Клапана'+#39+
  ' Order by Фамилия', ['Сборщик']) then
    exit;
  ComboBox6.Items.Clear;
  ComboBox6.Items.Add('');
  ComboBox22.Items.Clear;
  ComboBox22.Items.Add('');
  ComboBox8.Items.Clear;
  ComboBox8.Items.Add('');
  ComboBox19.Items.Clear;
  ComboBox19.Items.Add('');
  for I := 0 to ADOQuery2.RecordCount - 1 do
  begin
    ComboBox6.Items.Add(ADOQuery2.FieldByName('Фамилия').AsString);
    ComboBox8.Items.Add(ADOQuery2.FieldByName('Фамилия').AsString);
    ComboBox22.Items.Add(ADOQuery2.FieldByName('Фамилия').AsString);
    ComboBox19.Items.Add(ADOQuery2.FieldByName('Фамилия').AsString);
    ADOQuery2.Next;
  end;
       // Button22.Click;
  if not mkQuerySelect(ADOQuery2, 'Select Фамилия from %s Where МаркаАвто='+#39+'Канал'+#39+
  ' Order by Фамилия', ['Сборщик']) then
    exit;
  ComboBox40.Items.Clear;
  ComboBox40.Items.Add('');

  for I := 0 to ADOQuery2.RecordCount - 1 do
  begin
    ComboBox40.Items.Add(ADOQuery2.FieldByName('Фамилия').AsString);
    ADOQuery2.Next;
  end;
{  Size := MAX_COMPUTERNAME_LENGTH + 1;
  Windows.GetUserName(@buffer, Size);
  nam := StrPas(buffer);
        ADOQuery1.Close;
      ADOQuery1.ConnectionString := 'Provider=ADsDSOObject;Encrypt Password=False;Data Source=192.168.7.7;Mode=Read;Bind Flags=0;ADSI Flag=-2147483648';
      ADOQuery1.SQL.Clear;
      ADOQuery1.SQL.Add('select name,CN,MAIL,Pager from ');
      ADOQuery1.SQL.Add(#39+'LDAP://192.168.7.7'+#39);
      ADOQuery1.SQL.Add(' WHERE objectcategory = '+#39+'User'+#39+' AND sAMAccountName  ='+#39+nam+#39 );
      ADOQuery1.SQL.Add(' order by CN');
      SS:=ADOQuery1.SQL.Text;
      ADOQuery1.open;
      if ADOQuery1.RecordCount=0 then
      Begin
           MessageDlg('Бред!'+#10#13, mtError, [mbOk], 0);
      end;
      else
      Begin
           UserName1:=ADOQuery1.FieldByName('CN').AsString;
           mail:=ADOQuery1.FieldByName('MAIL').AsString;
           if mail='' then
           MessageDlg('К вашей учетной записи не привязан адрес электоронной почты!'+#10#13+
           'Вы не сможете получать важные сообщения!'+#10#13+
           'Обратитесь к системному администратору!', mtError, [mbOk], 0);

           Pass:=ADOQuery1.FieldByName('Pager').AsString;
           if Pass='' then
           MessageDlg('К вашей учетной записи привязан адрес электоронной почты!'+#10#13+
           mail+#10#13+
           'Введите пожалуйста пароль вашей электронной почты!', mtError, [mbOk], 0);

      End; }

  FNewBRAK.UserName1 := UserName1;
      //MessageDlg('Бред!'+#10#13+UserName1, mtError, [mbOk], 0);
  FNewBRAK.mail := mail;
     // MessageDlg('Бред!'+#10#13+mail, mtError, [mbOk], 0);
  FNewBRAK.pass := pass;
      //MessageDlg('Бред!pass'+#10#13, mtError, [mbOk], 0);
  FNewBRAK.famili := Regist.Famili;
  //MessageDlg('Бред!'+#10#13+Regist.Famili, mtError, [mbOk], 0);
  ComboBox15.ItemIndex := 10;
  Form1.Caption := FileName_Server + ' ' + Memo1.Lines.Strings[0] + '  003' + '   ' + Regist.Famili;
  Button16.Click;
  Button29.Click;
  Button7.Click;
  Btn55.Click;
  Label202.Caption := IntToStr(FlagDolg);
 // if ((FlagDolg = 10) or (FlagDolg = 1)) then
  begin
    Button73.Enabled := True;
    Button74.Enabled := True;
    Button75.Enabled := True;
    Button77.Enabled := True;
    Button79.Enabled := True;
    Button80.Enabled := True;
  end;
 // Xls_To_StringGrid(SG1,'D:\Перечень деталей токарка  -  Веза-Миасс.xlsx', '1' );
end;

function GetComputerName: string;
var
  buffer: array[0..MAX_COMPUTERNAME_LENGTH + 1] of Char;
  Size: Cardinal;
begin
  Size := MAX_COMPUTERNAME_LENGTH + 1;
  Windows.GetUserName(@buffer, Size);
  Result := StrPas(buffer);
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Очистка Грида

procedure TForm1.Clear_StringGrid(StringGrid: TStringGrid);
var
  i, j: integer;
  Str: string;
  SG: TStringGrid;
begin
  SG := StringGrid;
  Str := SG.Name;
  i := 0;
  j := 0;
  for i := 0 to SG.ColCount - 1 do
    SG.Cols[i].Clear;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

procedure TForm1.Button1Click(Sender: TObject);
begin
  FRasform.ShowModal;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.mkQueryUpdate(var AAQ: TADOQuery; const sQ: WideString; Args: array of const): boolean;
var
  Str: string;
begin
  Result := false;
  if not SetConnect1(AAQ) then
    exit;
  try
    AAQ.Close;
    AAQ.SQL.Clear;
    Str := Format(sQ, Args);
    AAQ.SQL.Text := Format(sQ, Args);
    AAQ.ExecSQL;
    check('query', AAQ.SQL.Text, 1);
  except
    Check('Error in Query', Format(sQ, Args), 0);
    AAQ.Close;
    MessageDlg('Не удалось обновить запись!', mtError, [mbOk], 0);
    exit;
  end;
  AAQ.Close;
  Result := true;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.mkQueryUpdate2(var AAQ: TADOQuery; const sQ: WideString; Args: array of const): boolean;
var
  Str: string;
begin
  Result := false;
  if not SetConn2(AAQ) then
    exit;
  try
    AAQ.Close;
    AAQ.SQL.Clear;
    Str := Format(sQ, Args);
    AAQ.SQL.Text := Format(sQ, Args);
    AAQ.ExecSQL;
    check('query', AAQ.SQL.Text, 1);
  except
    Check('Error in Query', Format(sQ, Args), 0);
    AAQ.Close;
    MessageDlg('Не удалось обновить запись!', mtError, [mbOk], 0);
    exit;
  end;
  AAQ.Close;
  Result := true;
end;

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    //стринг грид в эксель
procedure TForm1.ExportGridtoExcel2(Sender: TStringGrid);
var
  XL: Variant;
  i, j, y, PosTrud, l: integer;
  Color1: TColor;
  p: TPoint;
        //trud:Float;
  TrudStr, S: string;
begin

  XL := CreateOleObject('Excel.Application');
  XL.Application.EnableEvents := false;
  XL.WorkBooks.Add;
 // XL.Visible := True;
  for j := 0 to Sender.RowCount - 1 do
  begin
    for i := 0 to (Sender.ColCount) - 1 do
    begin
      if (j = 0) or (j = 1) then
      begin
        //XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1].Interior.ColorIndex := 15;
        XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1].Font.Bold := True;
      end;
      TrudStr := Sender.Cells[i, j];

      //  ZSG.Cells[I_FN_KOL_ZAP + 31, 1] := 'Срочно';
      //ZCV.Cells[36, 1] := 'Срочно';
      if (i = I_FN_KOL_ZAP + 31) or (i = 36) then
      begin
        y := Pos('True', TrudStr);
        if y <> 0 then
          XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, 3].Interior.Color := clRed;

      end;

     // p:=Sender.CellRect(i,j).TopLeft;
      { Добавляем пиксел, иначе получим цвет границы ячейки. }
      //p.X:=p.X+1;
     // p.Y:=p.Y+1;
     // Color1:=Sender.Canvas.Pixels[P.X,P.Y];
      PosTrud := Pos(',', TrudStr); //Трудоемкость FLOAT
      if PosTrud <> 0 then
      begin
        Delete(TrudStr, PosTrud, 1);
        Insert('.', TrudStr, PosTrud);
      end;
      XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1] := TrudStr;
      XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1].HorizontalAlignment := 3;
      //XL.ActiveWorkBook.WorkSheets[1].Cells[j + 1, i + 1].Interior.Color :=Color1;
    end;
  end;
  XL.ActiveWorkBook.WorkSheets[1].Range['A1', 'AB' + IntToStr(1)].Borders.LineStyle := 2;
  XL.ActiveWorkBook.WorkSheets[1].Range['A1', 'AB' + IntToStr(j)].Borders.LineStyle := 1;
  XL.ActiveWorkBook.WorkSheets[1].Range['A3', 'AB' + IntToStr(1)].Columns.AutoFit;
  XL.ActiveWorkBook.WorkSheets[1].Range['A1', 'AB' + IntToStr(1)].HorizontalAlignment := 3;
  XL.Visible := True;
  XL := UnAssigned;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.Xls_To_StringGrid(AGrid: TStringGrid; AXLSFile: string; List: string): Boolean;
const
  xlCellTypeLastCell = $0000000B;
var
  XLApp, Sheet: OLEVariant;
  RangeMatrix: Variant;
  x, y, k, r, Col, Res, I, J, Posic, Kod, PosZ, F, Otmena, E: Integer;
  Nam, Str, Str1, StrDat, Dat: string;
begin
  Result := False;

  XLApp := CreateOleObject('Excel.Application');
  try

    XLApp.Visible := False;
    XLApp.Workbooks.Open(AXLSFile);

    for Col := 1 to XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets.Count do
    begin
      Nam := XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets[Col].Name;
      Res := AnsiCompareStr(Nam, List);
      if Res = 0 then
      begin
        XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets.Item[Col].Activate;
        Sheet := XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets[Col];
        Break;
      end;
    end;
    Nam := Sheet.Name;
    Sheet.Cells.SpecialCells(xlCellTypeLastCell, EmptyParam).Activate;
    x := XLApp.ActiveCell.Row;
    y := XLApp.ActiveCell.Column; //30;
    AGrid.RowCount := x;
    AGrid.ColCount := y + 2;
    RangeMatrix := XLApp.Range['A1', XLApp.Cells.Item[x, y]].Value;
    k := 1;
    repeat
      for r := 1 to y do
      begin
        Str := string(RangeMatrix[k, r]);
        Res := Pos('#', Str);
        if Res <> 0 then
          Delete(Str, 1, 1);
        if Str = '' then
          Continue;
        AGrid.RowCount := AGrid.RowCount + 1;
        AGrid.Cells[(r - 1), (k - 1)] := string(RangeMatrix[k, r]);
      end;
      Inc(k, 1);
      AGrid.RowCount := k + 1;
    until k > x;
    RangeMatrix := Unassigned;

  finally
                // Quit Excel
    if not VarIsEmpty(XLApp) then
    begin
      XLApp.Quit;
      XLApp := Unassigned;
      Sheet := Unassigned;
      Result := True;
    end;
  end;

 { AGrid.RowCount := AGrid.RowCount + 10;
  XLApp := CreateOleObject('Excel.Application');

  XLApp.Workbooks.Open(AXLSFile);
  XLApp.Application.EnableEvents := false;
  E := 5;
  XLApp.ActiveWorkBook.WorkSheets[1].Cells[3, 15] := 'Дата';
  XLApp.ActiveWorkBook.WorkSheets[1].Cells[3, 16] := 'Технолог';
  XLApp.ActiveWorkBook.WorkSheets[1].Cells[3, 17] := 'Токарный';
  XLApp.ActiveWorkBook.WorkSheets[1].Cells[3, 18] := 'Канбан';
  XLApp.ActiveWorkBook.WorkSheets[1].Cells[3, 19] := 'Сварка';
  XLApp.ActiveWorkBook.WorkSheets[1].Cells[3, 20] := 'Сварка2';
  XLApp.ActiveWorkBook.WorkSheets[1].Cells[3, 21] := 'Склад';
  XLApp.ActiveWorkBook.WorkSheets[1].Cells[3, 22] := 'Фрезерный';

  for I := 0 to SG1.RowCount - 1 do
  begin
    Str := SG1.Cells[2, I + 4];
    if Str = '' then
      Continue;
    Str1 := #39 + Str + '%' + #39;
    if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение Like %s)  ', ['СпецифОбщая', Str1]) then
      exit;
    SG1.Cells[15, I + 4] := ADOQuery4.FieldByName('Дата').AsString;
    SG1.Cells[16, I + 4] := ADOQuery4.FieldByName('Технолог').AsString;
    SG1.Cells[17, I + 4] := ADOQuery4.FieldByName('Токарный').AsString;
    SG1.Cells[18, I + 4] := ADOQuery4.FieldByName('Канбан').AsString;
    SG1.Cells[19, I + 4] := ADOQuery4.FieldByName('Сварка').AsString;
    SG1.Cells[20, I + 4] := ADOQuery4.FieldByName('Сварка2').AsString;
    SG1.Cells[21, I + 4] := ADOQuery4.FieldByName('Склад').AsString;
    SG1.Cells[22, I + 4] := ADOQuery4.FieldByName('Фрезерный').AsString;

    XLApp.ActiveWorkBook.WorkSheets[1].Cells[(E), 15] := SG1.Cells[15, I + 4]; //Zakaz
    XLApp.ActiveWorkBook.WorkSheets[1].Cells[(E), 16] := SG1.Cells[16, I + 4]; //Zakaz
    XLApp.ActiveWorkBook.WorkSheets[1].Cells[(E), 17] := SG1.Cells[17, I + 4];

    XLApp.ActiveWorkBook.WorkSheets[1].Cells[(E), 18] := SG1.Cells[18, I + 4];
    XLApp.ActiveWorkBook.WorkSheets[1].Cells[(E), 19] := SG1.Cells[19, I + 4];
    XLApp.ActiveWorkBook.WorkSheets[1].Cells[(E), 20] := SG1.Cells[20, I + 4];
    XLApp.ActiveWorkBook.WorkSheets[1].Cells[(E), 21] := SG1.Cells[21, I + 4];
    XLApp.ActiveWorkBook.WorkSheets[1].Cells[(E), 22] := SG1.Cells[22, I + 4];

    Inc(E);
  end;
  XLApp.ActiveWorkBook.save;
  XLApp.Quit;
  XLApp := Unassigned;  }
end;

procedure TForm1.zclrstrngrd1DblClick(Sender: TObject);
var
  kol, Kol_Zap, Kol_Prin, Flag_Zag,I: Integer;
begin
  Memo2.Lines.Add('DB');
  Vozduh := 2;
  if (zclrstrngrd1.Col = 1) then
  begin
    Spec := 0;
    FSpec.Label1.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 26, zclrstrngrd1.Row];
    FSpec.Caption := zclrstrngrd1.Cells[I_FN_NAM, zclrstrngrd1.Row]; //zclrstrngrd1.Cells[0, zclrstrngrd1.Row]; //Номер
    FSpec.GP.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 26, zclrstrngrd1.ROW];
    FSpec.KO.Caption := '0';
    FSpec.Label2.Caption := '3';
    FSpec.fl2 := 0;
    FSpec.ShowModal;

  end;           //  and (zclrstrngrd1.Cells[I_FN_KOL_ZAP + 5, zclrstrngrd1.Row] = '')
  if (zclrstrngrd1.Col = 0) and ((FlagDolg = 4) or (FlagDolg = 1) or (FlagDolg = 10)) then
  begin
    FSborAll.Label1.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.Row];
    FSborAll.ShowModal;
  end;
        ///++++++++++++++++++++++++++++
  Flag_Zag := Pos('rue', zclrstrngrd1.Cells[I_FN_KOL_ZAP + 27, zclrstrngrd1.Row]);


        //+++++++++++++++++++++++++++++++++++++Заготовка Запуск     Планирование не пусто
  if (zclrstrngrd1.Col = I_FN_KOL_ZAP + 1) and (zclrstrngrd1.Cells[I_FN_KOL_ZAP + 3, zclrstrngrd1.Row] <> '') and ((FlagDolg = 7) or (FlagDolg = 1) or (FlagDolg = 8)) then
  begin
    Form2.Label1.Caption := 'Заготовка';
    Form2.Label2.Caption := zclrstrngrd1.Cells[zclrstrngrd1.Col, 1];
    Form2.Label3.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, zclrstrngrd1.ROW];
                //Nam
    Form2.Label6.Caption := zclrstrngrd1.Cells[2, zclrstrngrd1.ROW]; //Zak
    Form2.Label7.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP, zclrstrngrd1.ROW]; //Kol
    Form2.Label8.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW]; //Nom
    Form2.Label4.Caption := IntToStr(zclrstrngrd1.Row);
    Form2.Label5.Caption := IntToStr(zclrstrngrd1.Col);
    Form2.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW];
    Form2.ShowModal;
  end;
  if (zclrstrngrd1.Col = I_FN_KOL_ZAP + 25) then //Подсборка
  begin
    Form2.Label1.Caption := 'Подсборка';
    Form2.Label2.Caption := zclrstrngrd1.Cells[zclrstrngrd1.Col, 1];
    Form2.Label3.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, zclrstrngrd1.ROW];
                //Nam
    Form2.Label6.Caption := zclrstrngrd1.Cells[2, zclrstrngrd1.ROW]; //Zak
    Form2.Label7.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP, zclrstrngrd1.ROW]; //Kol
    Form2.Label8.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW]; //Nom
    Form2.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW]; //Nom
    Form2.Label4.Caption := IntToStr(zclrstrngrd1.Row);
    Form2.Label5.Caption := IntToStr(zclrstrngrd1.Col);
    Form2.Button3.Visible := True;
    Form2.ShowModal;
  end;
        //++++++++++++++++++++++++++++++++++++++Заготовка Готова
  if (FlagDolg = 1) or (FlagDolg = 7) or (FlagDolg = 8) then
  begin
    if (zclrstrngrd1.Col = I_FN_KOL_ZAP + 2) and (zclrstrngrd1.Cells[I_FN_KOL_ZAP + 1, zclrstrngrd1.Row] //Заготовка Готова
      <> '') then
    begin
      Memo2.Lines.Add('Условие');
      Form2.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW];
      if zclrstrngrd1.Cells[I_FN_KOL_ZAP + 2, zclrstrngrd1.Row] <> '' then
        Form2.Label9.Caption := '1'
      else
        Form2.Label9.Caption := '0';
      Memo2.Lines.Add('1,0');
      Form2.Label1.Caption := 'Заготовка';
      Form2.Label2.Caption := zclrstrngrd1.Cells[zclrstrngrd1.Col, 1];
      Form2.Label3.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, zclrstrngrd1.ROW]; //Nam
      Form2.Label6.Caption := zclrstrngrd1.Cells[2, zclrstrngrd1.ROW]; //Zak
      Form2.Label7.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP, zclrstrngrd1.ROW];
                        //Kol
      Form2.Label8.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW]; //Nom
      Form2.Label10.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 2, zclrstrngrd1.ROW]; //Dat
      Form2.Label4.Caption := IntToStr(zclrstrngrd1.Row);
      Form2.Label5.Caption := IntToStr(zclrstrngrd1.Col);
      Memo2.Lines.Add('ShowModal');
      Form2.ShowModal;
    end;

  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Сборка запуск
  if (zclrstrngrd1.Col = I_FN_KOL_ZAP + 4) and (zclrstrngrd1.Cells[I_FN_KOL_ZAP + 2, zclrstrngrd1.Row] <> '') and ((FlagDolg = 10) or (FlagDolg = 1) or (FlagDolg = 7) or (FlagDolg = 4)) then
  begin
    if zclrstrngrd1.Cells[I_FN_KOL_ZAP + 4, zclrstrngrd1.Row] <> '' then
      Form2.Label9.Caption := '1'
    else
      Form2.Label9.Caption := '0';
    Form2.Label1.Caption := 'Сборка';
    Form2.Label2.Caption := zclrstrngrd1.Cells[zclrstrngrd1.Col, 1];
    Form2.Label3.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, zclrstrngrd1.ROW]; //Nam
    Form2.Label6.Caption := zclrstrngrd1.Cells[2, zclrstrngrd1.ROW]; //Zak
    Form2.Label7.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP, zclrstrngrd1.ROW];
                        //Kol
    Form2.Label8.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW]; //Nom
    Form2.Label10.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 4, zclrstrngrd1.ROW]; //Dat
    Form2.Label4.Caption := IntToStr(zclrstrngrd1.Row);
    Form2.Label5.Caption := IntToStr(zclrstrngrd1.Col);
    Form2.ShowModal;
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Сборка Готовность
  if (zclrstrngrd1.Col = I_FN_KOL_ZAP + 5) and (zclrstrngrd1.Cells[I_FN_KOL_ZAP + 4, zclrstrngrd1.Row] <> '') and ((FlagDolg = 10) or (FlagDolg = 4) or (FlagDolg = 1) or (FlagDolg = 7)) then //Трапезников
  begin

    if zclrstrngrd1.Cells[I_FN_KOL_ZAP + 5, zclrstrngrd1.Row] <> '' then
      Form2.Label9.Caption := '1'
    else
      Form2.Label9.Caption := '0';
    Form2.Label1.Caption := 'Сборка';
    Form2.Label2.Caption := zclrstrngrd1.Cells[zclrstrngrd1.Col, 1];
    Form2.Label3.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, zclrstrngrd1.ROW];
                //Nam
    Form2.Label6.Caption := zclrstrngrd1.Cells[2, zclrstrngrd1.ROW]; //Zak
    Form2.Label7.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP, zclrstrngrd1.ROW]; //Kol
    Form2.Label8.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW]; //Nom
    Form2.Label10.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 5, zclrstrngrd1.ROW];
                //Dat
    Form2.Label4.Caption := IntToStr(zclrstrngrd1.Row);
    Form2.Label5.Caption := IntToStr(zclrstrngrd1.Col);
    Form2.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW];
    Form2.ShowModal;
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Kol_Zap := StrToInt(zclrstrngrd1.Cells[I_FN_KOL_ZAP, zclrstrngrd1.ROW]);
  Kol_Prin := StrToInt(zclrstrngrd1.Cells[I_FN_KOL_ZAP + 9, zclrstrngrd1.ROW]);
  if (zclrstrngrd1.Col = I_FN_KOL_ZAP + 9) and (zclrstrngrd1.Cells[I_FN_KOL_ZAP + 5, zclrstrngrd1.Row] //Кол ОТК     and (Kol_Zap > Kol_Prin)
    <> '') and ((((FlagDolg = 10) or (FlagDolg = 7))) or (FlagDolg = 1)) then
  begin
    if (FlagDolg = 7) then
      FOTK.Button3.Visible := True;
    FOTK.Label2.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW]; //Nom
    FOTK.Label3.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, zclrstrngrd1.ROW];
                //Nam
    FOTK.Label4.Caption := zclrstrngrd1.Cells[2, zclrstrngrd1.ROW]; //Zak
    FOTK.Label5.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP, zclrstrngrd1.ROW]; //Kol
    FOTK.Label6.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 14, zclrstrngrd1.ROW];
                //ID
    FOTK.Label10.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 5, zclrstrngrd1.ROW];
    FOTK.LabGP.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 26, zclrstrngrd1.ROW];
    FOTK.Labko.Caption :=zclrstrngrd1.Cells[I_FN_KOL_ZAP + 34, zclrstrngrd1.ROW];
                //ОТК
    FOTK.Label7.Caption := IntToStr(zclrstrngrd1.Row);
    FOTK.Label8.Caption := IntToStr(zclrstrngrd1.Col);
    FOTK.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW];

    FOTK.Label13.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 23, zclrstrngrd1.ROW]; //Нач Номер
    FOTK.Label15.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 24, zclrstrngrd1.ROW]; //КонНомер
    FOTK.ShowModal;
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if (zclrstrngrd1.Col = I_FN_KOL_ZAP + 11) and (zclrstrngrd1.Cells[I_FN_KOL_ZAP + 8, zclrstrngrd1.Row] <> '') and ((FlagDolg = 10) or (FlagDolg = 7) or (FlagDolg = 1) //Отгрузка
    or (FlagDolg = 0) or (FlagDolg = 4)) then //Отгрузка
  begin
                //Проверить перед отгрузкой все ли приняло ОТК
                //Form2.Label1.Caption := 'Отгрузка';
    Form2.Label2.Caption := zclrstrngrd1.Cells[zclrstrngrd1.Col, 1];
    Form2.Label3.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, zclrstrngrd1.ROW];
                //Nam
    Form2.Label6.Caption := zclrstrngrd1.Cells[2, zclrstrngrd1.ROW]; //Zak
    Form2.Label7.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP, zclrstrngrd1.ROW]; //Kol
    Form2.Label8.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW]; //Nom
    Form2.Label4.Caption := IntToStr(zclrstrngrd1.Row);
    Form2.Label5.Caption := IntToStr(zclrstrngrd1.Col);
    Form2.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW];
    Form2.ShowModal;
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ OR (FlagDolg = 4)
  {if (zclrstrngrd1.Col = I_FN_KOL_ZAP + 3) and (Flag_Zag = 0) and ((FlagDolg = 7) or (FlagDolg = 1)) then //Планирование
  begin
    MessageDlg('Не все детали обработаны! Список в папке с накладной.', mtError, [mbOk], 0);
    Exit;
  end;  and (Flag_Zag <> 0)}
  if (zclrstrngrd1.Col = I_FN_KOL_ZAP + 3) and ((FlagDolg = 7) or (FlagDolg = 1)) then //Планирование
  begin
    Form2.Label2.Caption := zclrstrngrd1.Cells[zclrstrngrd1.Col, 1];
    Form2.Label3.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, zclrstrngrd1.ROW];
                //Nam
    Form2.Label6.Caption := zclrstrngrd1.Cells[2, zclrstrngrd1.ROW]; //Zak
    Form2.Label7.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP, zclrstrngrd1.ROW]; //Kol
    Form2.Label8.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW]; //Nom
    Form2.Label4.Caption := IntToStr(zclrstrngrd1.Row);
    Form2.Label5.Caption := IntToStr(zclrstrngrd1.Col);
    Form2.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW];
    Form2.LabCVET.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 28, zclrstrngrd1.ROW]; //Cvet
    Form2.ShowModal;
  end;

  if (zclrstrngrd1.Col = I_FN_KOL_ZAP + 6) and ((FlagDolg = 4) or (FlagDolg = 1) or (FlagDolg = 7)) //Примечание
    then
  begin

    if (zclrstrngrd1.Col = I_FN_KOL_ZAP + 3) then
    begin
      Form3.Label1.Caption := 'Заготовка';
      Form3.Label2.Caption := zclrstrngrd1.Cells[zclrstrngrd1.Col, 1];
    end
    else
    begin
      Form3.Label1.Caption := 'Сборка';
      Form3.Label2.Caption := zclrstrngrd1.Cells[zclrstrngrd1.Col, 1];
    end;
    Form3.Label3.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW];
    Form3.Label6.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, zclrstrngrd1.ROW];
    Form3.Label7.Caption := zclrstrngrd1.Cells[I_FN_ZAK, zclrstrngrd1.ROW];
    Form3.Label4.Caption := IntToStr(zclrstrngrd1.Row);
    Form3.Label5.Caption := IntToStr(zclrstrngrd1.Col);
    Form3.Memo1.Text := Form1.zclrstrngrd1.Cells[zclrstrngrd1.Col, zclrstrngrd1.Row];
    Form3.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW];
    Form3.LabKO.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 34, zclrstrngrd1.ROW]; //IdКО
    Form3.LabGP.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 26, zclrstrngrd1.ROW]; //IDGP
    Form3.Show;
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if (zclrstrngrd1.Col = I_FN_KOL_ZAP + 10) and ((FlagDolg = 10) or (FlagDolg = 1) or (FlagDolg = 7) or (FlagDolg = 4))//ОТК Примеч
    then //OTK
  begin
    Form3.Memo1.Text := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 10, zclrstrngrd1.ROW];
    Form3.Label1.Caption := zclrstrngrd1.Cells[zclrstrngrd1.Col, 1];
    Form3.Label2.Caption := '0';
    Form3.Label3.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW];
    Form3.Label6.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, zclrstrngrd1.ROW];
    Form3.Label7.Caption := zclrstrngrd1.Cells[I_FN_ZAK, zclrstrngrd1.ROW];
    Form3.Label4.Caption := IntToStr(zclrstrngrd1.Row);
    Form3.Label5.Caption := IntToStr(zclrstrngrd1.Col);
    Form3.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW];
    Form3.LabKO.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 34, zclrstrngrd1.ROW]; //ID
    Form3.LabGP.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 26, zclrstrngrd1.ROW]; //IDGP
    Form3.Show;
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if (zclrstrngrd1.Col = I_FN_KOL_ZAP + 21) and ((FlagDolg = 0) or (FlagDolg = 7) or (FlagDolg = 1)) then //Кол в наличии
  begin
    FBriket.Label4.Caption := 'Кол в наличии';
    FBriket.Label1.Caption := IntToStr(I_FN_KOL_ZAP + 21);
    FBriket.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW];
    FBriket.Show;
  end;
  if (zclrstrngrd1.Col = I_FN_KOL_ZAP + 22) and ((FlagDolg = 0) or (FlagDolg = 1) or (FlagDolg = 7) or (FlagDolg = 4)) then //Кол выданных
  begin
    FBriket.Label4.Caption := 'Кол выданных';
    FBriket.Label1.Caption := IntToStr(I_FN_KOL_ZAP + 22);
    FBriket.GradientLabel1.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW];
    FBriket.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW];
    FBriket.Show;
  end;
        //Программист
  if (zclrstrngrd1.Col = 11) and ((FlagDolg = 1) or (FlagDolg = 9)) then //Кол выданных
  begin
    FProgramm.Label1.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 26, zclrstrngrd1.Row];
    FProgramm.Label2.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, zclrstrngrd1.Row];
    FProgramm.Label3.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP, zclrstrngrd1.Row];
    FProgramm.Caption := zclrstrngrd1.Cells[0, zclrstrngrd1.ROW];
    FProgramm.Show;
  end;

  if (zclrstrngrd1.Col = I_FN_KOL_ZAP + 12) then //and ((FlagDolg = 1) or (FlagDolg = 9)) Сборщик
  begin
      FSborKan.Label1.Caption:=zclrstrngrd1.Cells[I_FN_KOL_ZAP + 26, zclrstrngrd1.Row];
      FSborKan.Label2.Caption:=zclrstrngrd1.Cells[I_FN_KOL_ZAP + 34, zclrstrngrd1.Row];

      FSborKan.ShowModal;
      //zclrstrngrd1.Cells[I_FN_KOL_ZAP + 12, 1] := 'Сборщик';

  end;
end;

procedure TForm1.zclrstrngrd1MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
// Эмуляция нажатия мыши
  if Button = mbRight then
    mouse_event(MOUSEEVENTF_LEFTDOWN or MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
end;

procedure TForm1.zclrstrngrd1MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  I, J, X1: Integer;
  myRect: TGridRect;
  Sum: Double;
begin
  if (zclrstrngrd1.Col = 3) or (zclrstrngrd1.Col = 4) or (zclrstrngrd1.Col = I_FN_KOL_ZAP + 9) or (zclrstrngrd1.Col = I_FN_KOL_ZAP + 17) or (zclrstrngrd1.Col = I_FN_KOL_ZAP + 18) or (zclrstrngrd1.Col = I_FN_KOL_ZAP + 32) or (zclrstrngrd1.Col = I_FN_KOL_ZAP + 33) then
  begin
    Sum := 0;
    myRect := zclrstrngrd1.Selection;
    for I := myRect.Left to myRect.Right do
      for J := myRect.Top to myRect.Bottom do
      begin
        try
          Sum := Sum + StrToFloat(zclrstrngrd1.Cells[I, J]);
        except
          Break;
        end;
      end;
    StatusBar2.Panels[2].Text := FloattOsTR(Sum);

  end;
 { Clear_StringGrid(SG212);
  X1 := 0;
  myRect := zclrstrngrd1.Selection;
  for I := myRect.Left to myRect.Right do
    for J := myRect.Top to myRect.Bottom do
    begin
      SG212.Cells[0, X1] := zclrstrngrd1.Cells[0, J]; //Nom
      SG212.Cells[1, X1] := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 26, J]; //IDGP
      SG212.RowCount := X1 + 1;
      Inc(X1);
    end; }
  for I := 0 to zclrstrngrd1.RowCount - 1 do
  begin
    StringGrid4.RowHeights[I] := zclrstrngrd1.RowHeights[I];
  end;
end;

procedure TForm1.zclrstrngrd1MouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin
  Handled := true;
  zclrstrngrd1.Perform(WM_VSCROLL, SB_LINEDOWN, 0);
end;

procedure TForm1.zclrstrngrd1MouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin
  Handled := true;
  zclrstrngrd1.Perform(WM_VSCROLL, SB_LINEUP, 0);
end;

procedure TForm1.zclrstrngrd1TopLeftChanged(Sender: TObject);
begin
  StringGrid4.TopRow := zclrstrngrd1.TopRow;
end;

function TForm1.Xls_To_Grid(AGrid: TStringGrid; AXLSFile: string; List: string; C, R: Integer): Boolean;
const
  xlCellTypeLastCell = $0000000B;
var
  XLApp, Sheet: OLEVariant;
  RangeMatrix: Variant;
  x, y, k, Col, Res, I, J, Posic, Kod, PosZ, F, Otmena: Integer;
  Nam, Str, Str1, StrDat, Dat, S1, S2, S3, S4, s5, s6, S7, S8, N, N1, N2, N3, N4, n5, n6, N7, N8: string;
begin
  Result := False;

  XLApp := CreateOleObject('Excel.Application');
  try
    XLApp.Visible := False;
    XLApp.Workbooks.Open(AXLSFile);
    for Col := 1 to XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets.Count - 1 do
    begin
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Nam := XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets[Col].Name;
      XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets.Item[Col].Activate;
      Sheet := XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets[Col];
      Clear_StringGrid(AGrid);
      Nam := Sheet.Name;
      Sheet.Cells.SpecialCells(xlCellTypeLastCell, EmptyParam).Activate;
      x := XLApp.ActiveCell.Row;
      y := XLApp.ActiveCell.Column; //30;
      AGrid.RowCount := x + 1;
      AGrid.ColCount := y;
      RangeMatrix := XLApp.Range['A1', XLApp.Cells.Item[x, y]].Value;
      for R := 1 to y do
      begin
        for k := 1 to x do
        begin
          Str := string(RangeMatrix[k, R]);
          AGrid.Cells[(R - 1), (k - 1)] := Str;

        end;
      end;
        //
      N := AGrid.Cells[0, 0];
      N1 := AGrid.Cells[1, 0];
      N2 := AGrid.Cells[2, 0];
      N3 := AGrid.Cells[3, 0];
      N4 := AGrid.Cells[4, 0];
      n5 := AGrid.Cells[5, 0];
      n6 := AGrid.Cells[6, 0];
      N7 := AGrid.Cells[7, 0];
      N8 := AGrid.Cells[8, 0];
      Nam := '[' + Nam + ']';
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'if exists (select * from sysobjects where id = OBJECT_ID(' + #39 + Nam + #39 + ') and sysstat & 0xf = 3)' + 'DROP table %s', [Nam]) then
        Exit;
        //if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'DROP TABLE %s', [Nam]) then
        //    Exit;
      if N2 = '' then
        N2 := '2';
      if N3 = '' then
        N3 := '3';
      if N4 = '' then
        N4 := '4';
      if n5 = '' then
        n5 := '5';
      if n6 = '' then
        n6 := '6';
      if N7 = '' then
        N7 := '7';
      if N8 = '' then
        N8 := '8';
        //
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'CREATE TABLE %s ([' + N +
      '] float not NULL,[' + N1 + '] float not NULL,[' + N2 + '] float not NULL,[' + N3 + '] float not NULL,[' + N4 +
      '] float not NULL,[' + n5 + '] float not NULL ,[' + n6 + '] float not NULL,[' + N7 +
      '] float not NULL ,[' + N8 + '] float not NULL ) ', [Nam]) then
        Continue;
      for R := 1 to x do
      begin
        Str := AGrid.Cells[0, R];
        S1 := AGrid.Cells[1, R];
        S2 := AGrid.Cells[2, R];
        S3 := AGrid.Cells[3, R];
        S4 := AGrid.Cells[4, R];
        s5 := AGrid.Cells[5, R];
        s6 := AGrid.Cells[6, R];
        S7 := AGrid.Cells[7, R];
        S8 := AGrid.Cells[8, R];
            //
        if Str = '' then
          Break;

        if not Form1.mkQueryInsert(Form1.ADOQuery1, 'Insert Into %s ' + '([' + N + '], [' + N1 + '], [' + N2 + '], [' + N3 + '], [' + N4 + '], [' + n5 + '], [' + n6 + '], [' + N7 + '], [' + N8 + ']) ' + 'Values (%s,%s,%s,%s,%s,%s,%s,%s,%s)', [Nam, #39 + Str + #39, #39 + S1 + #39, #39 + S2 + #39, #39 + S3 + #39, #39 + S4 + #39, #39 + s5 + #39, #39 + s6 + #39, #39 + S7 + #39, #39 + S8 + #39]) then
          exit;

           { if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET ['+n1+']=' + #39 +S1 + #39 +
            '['+n2+']=' + #39 +S2 + #39 +
            '['+n3+']=' + #39 +S3 + #39 +
            '['+n4+']=' + #39 +S4 + #39 +
            ' WHERE (['+n+']=' + #39 + Str+ #39 + ') ', [Nam]) then
            Exit;}
      end;
    end;

    RangeMatrix := Unassigned;

  finally
                // Quit Excel
    if not VarIsEmpty(XLApp) then
    begin
      XLApp.Quit;
      XLApp := Unassigned;
      Sheet := Unassigned;
      Result := True;
    end;
  end;

end;

function TForm1.Xls_To_DBO(AGrid: TStringGrid; AXLSFile: string; List: string; C, R: Integer): Boolean;
const
  xlCellTypeLastCell = $0000000B;
var
  XLApp, Sheet: OLEVariant;
  RangeMatrix: Variant;
  x, y, k, Col, Res, I, J, Posic, Kod, PosZ, F, Otmena: Integer;
  Nam, Str, Str1, StrDat, Dat, S1, S2, S3, S4, s5, s6, S7, S8, N, N1, N2, N3, N4, n5, n6, N7, N8: string;
begin
  Result := False;

  XLApp := CreateOleObject('Excel.Application');
  try
    XLApp.Visible := False;
    XLApp.Workbooks.Open(AXLSFile);
    //for Col := 1 to XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets.Count-1 do
    begin
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Nam := XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets[1].Name;
      XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets.Item[1].Activate;
      Sheet := XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets[1];
      Clear_StringGrid(AGrid);
      Nam := Sheet.Name;
      Sheet.Cells.SpecialCells(xlCellTypeLastCell, EmptyParam).Activate;
      x := XLApp.ActiveCell.Row;
      y := XLApp.ActiveCell.Column; //30;
      AGrid.RowCount := x + 1;
      AGrid.ColCount := y;
      RangeMatrix := XLApp.Range['A1', XLApp.Cells.Item[x, y]].Value;
      for R := 1 to y do
      begin
        for k := 1 to x do
        begin
          Str := string(RangeMatrix[k, R]);
          AGrid.Cells[(R - 1), (k - 1)] := Str;

        end;
      end;
        //
      N := AGrid.Cells[0, 0];
      N1 := AGrid.Cells[1, 0];
      N2 := AGrid.Cells[2, 0];
      N3 := AGrid.Cells[3, 0];
      N4 := AGrid.Cells[4, 0];
      n5 := AGrid.Cells[5, 0];
      n6 := AGrid.Cells[6, 0];
      N7 := AGrid.Cells[7, 0];
      N8 := AGrid.Cells[8, 0];
      Nam := '[' + Nam + ']';
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'if exists (select * from sysobjects where id = OBJECT_ID(' + #39 + Nam + #39 + ') and sysstat & 0xf = 3)' + 'DROP table %s', [Nam]) then
        Exit;
        //if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'DROP TABLE %s', [Nam]) then
        //    Exit;
      if N2 = '' then
        N2 := '2';
      if N3 = '' then
        N3 := '3';
      if N4 = '' then
        N4 := '4';
      if n5 = '' then
        n5 := '5';
      if n6 = '' then
        n6 := '6';
      if N7 = '' then
        N7 := '7';
      if N8 = '' then
        N8 := '8';
        //
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'CREATE TABLE %s ([' + N + '] nvarchar(250) ,[' + N1 + '] nvarchar(250),[' + N2 + '] nvarchar(250),[' + N3 + '] nvarchar(250),[' + N4 + '] nvarchar(250),[' + n5 + '] nvarchar(250) ,[' + n6 + '] nvarchar(250),[' + N7 + '] nvarchar(250) ,[' + N8 + '] nvarchar(250) ) ', [Nam]) then
        Exit;
      ;
      for R := 1 to x do
      begin
        Str := AGrid.Cells[0, R];
        S1 := AGrid.Cells[1, R];
        S2 := AGrid.Cells[2, R];
        S3 := AGrid.Cells[3, R];
        S4 := AGrid.Cells[4, R];
        s5 := AGrid.Cells[5, R];
        s6 := AGrid.Cells[6, R];
        S7 := AGrid.Cells[7, R];
        S8 := AGrid.Cells[8, R];
            //
        if Str = '' then
        begin
          XLApp.Quit;
          XLApp := Unassigned;
          Sheet := Unassigned;
          Result := True;
          Exit;
        end;

        if not Form1.mkQueryInsert(Form1.ADOQuery1, 'Insert Into %s ' + '([' + N + '], [' + N1 + '], [' + N2 + '], [' + N3 + '], [' + N4 + '], [' + n5 + '], [' + n6 + '], [' + N7 + '], [' + N8 + ']) ' + 'Values (%s,%s,%s,%s,%s,%s,%s,%s,%s)', [Nam, #39 + Str + #39, #39 + S1 + #39, #39 + S2 + #39, #39 + S3 + #39, #39 + S4 + #39, #39 + s5 + #39, #39 + s6 + #39, #39 + S7 + #39, #39 + S8 + #39]) then
          exit;

           { if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET ['+n1+']=' + #39 +S1 + #39 +
            '['+n2+']=' + #39 +S2 + #39 +
            '['+n3+']=' + #39 +S3 + #39 +
            '['+n4+']=' + #39 +S4 + #39 +
            ' WHERE (['+n+']=' + #39 + Str+ #39 + ') ', [Nam]) then
            Exit;}
      end;
    end;

    RangeMatrix := Unassigned;

  finally
                // Quit Excel
    if not VarIsEmpty(XLApp) then
    begin
      XLApp.Quit;
      XLApp := Unassigned;
      Sheet := Unassigned;
      Result := True;
    end;
  end;

end;

procedure TForm1.Button2Click(Sender: TObject);
var
  I, Res, Res1, Res2, Res3, Res4, Res5, PosZ, Kol, Kod, Pos_ZV, Pos_P, A_Int, Otmena, KPU, Izdelie_I, Regular_Krugl, Razmer, Proizv_Res: Integer;
  Mod_P, Pos1, Pos2, Pos3, Pos4, Pos5, Pos6, Pos7, Str, StrDat1, Dat1, StrDat2, StrDat3, Dat3, Dat2, Izdel, NC_Str, A, B, Pos11, Pos22, Pos_Isp, Pos_Flan, Pos_Privod, Pos_Sn, Pos_Dop, Pos_Ram, Nam, L, Isp, Tip, Zakazchik, PDO, Izdelie, Mat, Proizv: string;
  Date1, Date2, Date3: TDate;
  NC_Svar, NC_Sbor, God, Mes, IDKO, Nedel: string;
begin

  Izdelie_I := 0;
  Clear_StringGrid(SG1);
  KPU := 0;

  if OpenDialog1.Execute then
  begin
    Str := OpenDialog1.FileName;
    Xls_To_StringGrid(SG1, Str, 'Миасс');
  end;
  APB1.Min := 0;
  APB1.Max := SG1.RowCount - 2;
        {select [IdГП], [IdКО], [ДатаЗаказа], [Заказ], [БЗ], [Тип], [Группа], [Изделие],
 [ГруппаГП], [ИзделиеГП], [Кол-во], [Получатель], [ДатаГотОфис],
       [Отмена], [ДатаОтмены], [Особенности]
from dbo.[ИмпортЗаказовКП_05]('25.03.2014')}
  for I := 3 to SG1.RowCount do
  begin
    Proizv := SG1.Cells[10, I];
    if SG1.Cells[0, I] = '' then
      Continue
    else
      Kod := StrToInt(SG1.Cells[0, I]);

    StrDat1 := '20.07.2022';//SG1.Cells[19, I]; //Дата задания

    if StrDat1 = '' then
      Continue
    else
    begin
      Dat1 := #39 + StrDat1 + #39;
    end;
    if SG1.Cells[19, I] = '' then
      IDKO := '0'
    else
      IDKO := SG1.Cells[19, I];
                //======================================================
    Nedel := SG1.Cells[9, I];
    StrDat2 := SG1.Cells[8, I]; //Дата Готовн
    if StrDat2 = '' then
      Dat2 := 'NULL'
    else
    begin
      Dat2 := #39 + ConvertDat1(StrDat2) + #39;
    end;
                //======================================================
    StrDat3 := SG1.Cells[16, I]; //Дата Отeмны
    {Otmena := AnsiCompareStr('NULL', StrDat3);
    if (StrDat3 = '') or (Otmena = 0) then
      Dat3 := 'NULL'
    else
    begin
      Dat3 := #39 + StrDat3 + #39;
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Отмена]=' + #39 + StrDat3 + #39 + ' WHERE ([IdГП]=' + #39 + SG1.Cells[17, I] + #39 + ') ', ['Klapana']) then
        Exit;
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Отмена]=' + #39 + StrDat3 + #39 + ' WHERE ([IdГП]=' + #39 + SG1.Cells[17, I] + #39 + ') ', ['Запуск']) then
        Exit;

      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Отмена]=' + #39 + StrDat3 + #39 + ' WHERE ([IdГП]=' + #39 + SG1.Cells[17, I] + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') ', ['KlapanaZap']) then
        Exit;
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Отмена]=' + #39 + StrDat3 + #39 + ' WHERE ([IdГП]=' + #39 + SG1.Cells[17, I] + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') ', ['ЗапускВозд']) then
        Exit;
                       //++++++++++++STAM
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Отмена]=' + #39 + StrDat3 + #39 + ' WHERE ([IdГП]=' + #39 + SG1.Cells[17, I] + #39 + ') ', ['СТАМ']) then
        Exit;
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Отмена]=' + #39 + StrDat3 + #39 + ' WHERE ([IdГП]=' + #39 + SG1.Cells[17, I] + #39 + ') ', ['ЗапускСТАМ']) then
        Exit;
    end;}
    if SG1.Cells[19, I] = '' then
      IDKO := '0'
    else
      IDKO := SG1.Cells[19, I];
    Izdel := SG1.Cells[6, I];

    Regular_Krugl := 0; //Клапан РЕГУЛЯР-Л-1120-Н-1*NF230A-S2-У2
    if Kod = 310 then
    begin
      if not mkQuerySelect(ADOQuery1, 'Select Код from %s Where (IdГП=' + #39 + SG1.Cells[18, I] + #39 + ') AND (IdГП<>' + #39 + '0' + #39 + ')', ['Klapana']) then
        exit;
      if ADOQuery1.RecordCount = 0 then
      begin

                                //======================================================  ,%s ,#39+NC_Str+#39
        if not mkQueryInsert(ADOQuery1, 'Insert Into %s ' +
        '(Код,[Дата],Заказ,Изделие,БЗ,[Кол во],' +
        'Пол,пр,' +
        '[план Неделя],[план Дата],[Заводской номер],' +
        '[Н\ч Сварка],[Н\ч Сборка Клапана],[A],[B],' +
        'НачНомер,КонНомер,НачКод,КонКод,' +
        'IdГП,IdКО,КодГП,ИзделиеГП,Отмена,Заказчик,ПДО ) ' +
        'Values (%s,%s,%s,%s,%s,%s' +
        ',%s,%s,' +
        '%s,%s,%s,' +
        '%s,%s,%s,%s,' +
        '%s,%s,%s,%s,' +
        '%s,%s,%s,%s,%s,%s,%s)',
        ['Klapana', #39 + SG1.Cells[0, I] + #39, #39 +ConvertDat1(StrDat1)+ #39, #39 + SG1.Cells[2, I] + #39, #39 + SG1.Cells[6, I]
          + #39, #39 + SG1.Cells[3, I] + #39, #39 + SG1.Cells[7, I] + #39,
          #39 + SG1.Cells[11, I] + #39, #39 + 'МИ' + #39,
          #39 + SG1.Cells[9, I] + #39, (Dat2), #39 + SG1.Cells[21, I] + #39,
          #39 + NC_Svar + #39, #39 + NC_Sbor + #39, #39 + A + #39, #39 + B + #39,
          #39 + SG1.Cells[21, I] + #39, #39 + SG1.Cells[21, I] + #39, #39 + SG1.Cells[20, I] + #39, #39 + SG1.Cells[20, I] +
          #39, #39 + SG1.Cells[18, I] + #39, #39 + IDKO + #39, #39 + '' + #39, #39 +'' + #39, 'NULL', #39 + Zakazchik + #39, #39 + PDO + #39]) then
          exit;

      end;
    end
    else
    Continue;
                //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    Nam := '';
    A := '';
    B := '';
    Isp := '';
    L := '';
    Pos1 := '';
    Pos2 := '';
    Pos3 := '';
    Pos4 := '';
    Pos5 := '';
    Pos6 := '';
    NC_Svar := '0';
    NC_Sbor := '0';
    if (Kod = 520) or (Kod = 525) or (Kod = 530) or (Kod = 400) then
    begin
                        //520 Клапан РЕГУЛЯР-1200*1200-Н-M230-S_SM230A-S-П
                        //Клапан РЕГУЛЯР-0525-0575-Н-П-13-00-00-У2 для Кондиционер КЦКП-3,15
                        //525 Клапан УВК-0510-1050-12-00-У2 для Кондиционер КЦКП-Г2-6,3
                        //530 Клапан ГЕРМИК-П-315*1190-В-1*ЭПВ-LMC230A-1
                        //810 Электропривод ЭПВ-LMC230A для Клапан ГЕРМИК-П-595*1147-В-1*ЭПВ-LMC230A-1
                        //400 Клапан лепестковый ТЮЛЬПАН-2-355*355-Н-0
                        //400 Клапан обратный КЛАРА-1000*1000-Н
                        //Клапан РЕГУЛЯР-Л-1120-Н-1*NF230A-S2-У2
      if not mkQuerySelect(ADOQuery1, 'Select Код from %s Where (IdГП=' + #39 + SG1.Cells[17, I] + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (IdГП<>' + #39 + '0' + #39 + ')', ['KlapanaZap']) then
        exit;
      if ADOQuery1.RecordCount = 0 then
      begin

        if Kod = 520 then
        begin
                                        //Клапан РЕГУЛЯР-0525-0575-Н-П-12-00-00-У2 для Кондиционер КЦКП-3,15
                                        //Клапан РЕГУЛЯР-1075-1135-Н-П-04-00-00-У2

          Pos_ZV := Pos('*', Izdel);
          if Pos_ZV = 0 then
          begin
            Memo2.Lines.Add(Izdel);
            Res := Pos(' ', Izdel);
            Delete(Izdel, 1, Res);
                                                //======================================== РЕГУЛЯР
            Res := Pos('-', Izdel);
            Nam := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Res := Pos('-', Izdel);
            if Res = 2 then
            begin
              L := Copy(Izdel, 1, Res - 1);
              Delete(Izdel, 1, Res);
            end;
                                                //========================================
            Res := Pos('-', Izdel);
            A := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Res := Pos('-', Izdel);
            B := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Res := Pos('-', Izdel);
            Isp := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Res := Pos('-', Izdel);
            Tip := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Res := Pos('-', Izdel);
            Pos2 := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Res := Pos('-', Izdel);
            Pos3 := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Res := Pos('-', Izdel);
            Pos4 := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Res := Pos(' ', Izdel);
            Pos5 := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Memo2.Lines.Add(Nam + '   ' + A + '  ' + B + '  ' + L + '  ' + Isp + '  ' + Pos1 + '  ' + Pos2 + '  ' + Pos3 + '  ' + Pos4 + '  ' + Pos5 + '  ' + Pos6 + '  ' + Pos7);
          end;
                                        //Клапан РЕГУЛЯР-1000*1000-Н-M230-S_NM230A-S-П
                                        //Клапан РЕГУЛЯР-1000*1000-Н-M230-S_NM230A-S-П
                                        //Клапан РЕГУЛЯР-1000*820-Н-1*ручной-П
                                        //Клапан РЕГУЛЯР-Л-200*600-Н-1*ручной
          Memo2.Lines.Add(Izdel);
          Pos_ZV := Pos('*', Izdel);
          if Pos_ZV <> 0 then
          begin
            Res := Pos(' ', Izdel);
            Delete(Izdel, 1, Res);
                                                //======================================== РЕГУЛЯР
            Res := Pos('-', Izdel);
            Nam := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //======================================== L
            Res := Pos('-', Izdel);
            if Res = 2 then
            begin
              L := Copy(Izdel, 1, Res - 1);
              Delete(Izdel, 1, Res);
            end;
                                                //========================================
            Res1 := Pos('-', Izdel);
            Res := Pos('*', Izdel);
            if Res1 < Res then //Клапан РЕГУЛЯР-Л-1120-Н-1*NF230A-S2-У2
              Regular_Krugl := 1;
            if Regular_Krugl = 1 then
            begin
              A := Copy(Izdel, 1, Res1 - 1);
              Delete(Izdel, 1, Res1);
              B := '0';
            end;
            if Regular_Krugl = 0 then
            begin
              A := Copy(Izdel, 1, Res - 1);
              Delete(Izdel, 1, Res);
                                                        //========================================
              Res := Pos('-', Izdel);
              B := Copy(Izdel, 1, Res - 1);
              Delete(Izdel, 1, Res);
            end;

                                                //========================================
            Res := Pos('-', Izdel);
            Isp := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================

            Res := Pos('*', Izdel);
            Pos1 := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Res := Pos('-', Izdel);
            Pos2 := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Res := Pos('-', Izdel);
            Pos3 := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Pos4 := Izdel;
                                                //========================================
            Memo2.Lines.Add(Nam + '   ' + A + '  ' + B + '  ' + L + '  ' + Isp + '  ' + Pos1 + '  ' + Pos2 + '  ' + Pos3 + '  ' + Pos4 + '  ' + Pos5 + '  ' + Pos6 + '  ' + Pos7);
          end;

        end;
                                //Клапан лепестковый ТЮЛЬПАН-2-1090*1090-Н-0
                                //Клапан обратный КЛАРА-1000*1000-Н
        if Kod = 400 then
        begin
          Memo2.Lines.Add(Izdel);
          Res := Pos(' ', Izdel);
          Delete(Izdel, 1, Res);
                                        //========================================
          Res := Pos(' ', Izdel);
          Delete(Izdel, 1, Res);
                                        //========================================ТЮЛЬПАН
          Res := Pos('-', Izdel);
          Nam := Copy(Izdel, 1, Res - 1);
          Delete(Izdel, 1, Res);
          Memo3.Lines.Add(Nam);
                                        //======================================== 2
          Res := Pos('-', Izdel);
          if Res = 2 then
          begin
            L := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
          end;
                                        //========================================
          Res := Pos('*', Izdel);
          A := Copy(Izdel, 1, Res - 1);
          Delete(Izdel, 1, Res);
          Memo3.Lines.Add(A);
                                        //========================================
          Res := Pos('-', Izdel);
          B := Copy(Izdel, 1, Res - 1);
          Delete(Izdel, 1, Res);
          Memo3.Lines.Add(B);
                                        //========================================
          Res := Pos('-', Izdel);
          Isp := Copy(Izdel, 1, Res - 1);
          Delete(Izdel, 1, Res);
          Memo3.Lines.Add(Isp);
                                        //========================================
          Res := Pos('-', Izdel);
          Pos1 := Copy(Izdel, 1, Res - 1);
          Delete(Izdel, 1, Res);
          Memo3.Lines.Add(Pos_Sn);
                                        //========================================
          Res := Pos('-', Izdel);
          Pos2 := Copy(Izdel, 1, Res - 1);
          Delete(Izdel, 1, Res);
          Memo3.Lines.Add(Pos_Dop);
                                        //========================================
          Pos3 := Izdel;
                                        //========================================
          Memo2.Lines.Add(Nam + '   ' + A + '  ' + B + '  ' + L + '  ' + Isp + '  ' + Pos1 + '  ' + Pos2 + '  ' + Pos3 + '  ' + Pos4 + '  ' + Pos5 + '  ' + Pos6 + '  ' + Pos7);
        end;
                                //Клапан ГЕРМИК-П-475*1707-Н-F24-S_NF24A-S2-1

        if Kod = 530 then
        begin
          Pos_ZV := Pos('*', Izdel);
          if Pos_ZV <> 0 then
          begin
            Memo2.Lines.Add(Izdel);
                                                //Клапан ГЕРМИК-П-475*1707-Н-F24-S_NF24A-S2-1
            Res := Pos(' ', Izdel);
            Delete(Izdel, 1, Res);
                                                //========================================ГЕРМИК
            Res := Pos('-', Izdel);
            Nam := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //======================================== L
            Res := Pos('-', Izdel);
            if Res = 2 then
            begin
              L := Copy(Izdel, 1, Res - 1);
              Delete(Izdel, 1, Res);
            end;
                                                //========================================
            Res := Pos('*', Izdel);
            A := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Res := Pos('-', Izdel);
            B := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //======================================== H
            Res := Pos('-', Izdel);
            Isp := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //======================================== F24
            Res := Pos('-', Izdel);
            Tip := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //======================================== F24
            Res := Pos('-', Izdel);
            Pos2 := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //======================================== F24
            Res := Pos('-', Izdel);
            Pos3 := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Pos4 := Izdel;
                                                //========================================
            Memo2.Lines.Add(Nam + '   ' + A + '  ' + B + '  ' + L + '  ' + Isp + '  ' + Pos1 + '  ' + Pos2 + '  ' + Pos3 + '  ' + Pos4 + '  ' + Pos5 + '  ' + Pos6 + '  ' + Pos7);
          end
          else
          begin
            Memo2.Lines.Add(Izdel);
                                                //Клапан ГЕРМИК-С-0625-0875-Н-П-12-00-00-У2 для Кондиционер КЦКП-С1-5
            Res := Pos(' ', Izdel);
            Delete(Izdel, 1, Res);
                                                //========================================ГЕРМИК
            Res := Pos('-', Izdel);
            Nam := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //======================================== L
            Res := Pos('-', Izdel);
            if Res = 2 then
            begin
              L := Copy(Izdel, 1, Res - 1);
              Delete(Izdel, 1, Res);
            end;
                                                //========================================
            Res := Pos('-', Izdel);
            A := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Res := Pos('-', Izdel);
            B := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================H
            Res := Pos('-', Izdel);
            Isp := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Res := Pos('-', Izdel);
            Tip := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Res := Pos('-', Izdel);
            Pos2 := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Res := Pos('-', Izdel);
            Pos3 := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Res := Pos('-', Izdel);
            Pos4 := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Res := Pos(' ', Izdel);
            Pos5 := Copy(Izdel, 1, Res - 1);
            Delete(Izdel, 1, Res);
                                                //========================================
            Memo2.Lines.Add(Nam + '   ' + A + '  ' + B + '  ' + L + '  ' + Isp + '  ' + Pos1 + '  ' + Pos2 + '  ' + Pos3 + '  ' + Pos4 + '  ' + Pos5 + '  ' + Pos6 + '  ' + Pos7);
          end;
        end;
                                //Клапан УВК-0510-1050-12-00-У2 для Кондиционер КЦКП-Г2-6,3
        if Kod = 525 then
        begin
          Memo2.Lines.Add(Izdel);
          Res := Pos(' ', Izdel);
          Delete(Izdel, 1, Res);
                                        //======================================== УВК
          Res := Pos('-', Izdel);
          Nam := Copy(Izdel, 1, Res - 1);
          Delete(Izdel, 1, Res);
          Memo3.Lines.Add(Nam);
                                        //========================================
          Res := Pos('-', Izdel);
          A := Copy(Izdel, 1, Res - 1);
          Delete(Izdel, 1, Res);
          Memo3.Lines.Add(A);
                                        //========================================
          Res := Pos('-', Izdel);
          B := Copy(Izdel, 1, Res - 1);
          Delete(Izdel, 1, Res);
          Memo3.Lines.Add(B);
                                        //========================================
          Res := Pos('-', Izdel);
          Isp := Copy(Izdel, 1, Res - 1);
          Delete(Izdel, 1, Res);
          Memo3.Lines.Add(Isp);
                                        //========================================
          Res := Pos('-', Izdel);
          Pos1 := Copy(Izdel, 1, Res - 1);
          Delete(Izdel, 1, Res);
          Memo3.Lines.Add(Pos1);
                                        //========================================
          Res := Pos('-', Izdel);
          Pos2 := Copy(Izdel, 1, Res - 1);
          Delete(Izdel, 1, Res);
          Memo3.Lines.Add(Pos2);
                                        //========================================
          Pos3 := Izdel;
                                        //========================================
          Memo2.Lines.Add(Nam + '   ' + A + '  ' + B + '  ' + L + '  ' + Isp + '  ' + Pos1 + '  ' + Pos2 + '  ' + Pos3 + '  ' + Pos4 + '  ' + Pos5 + '  ' + Pos6 + '  ' + Pos7);
        end;

        if not mkQueryInsert(ADOQuery1, 'Insert Into %s ' + '(Код,[Дата],Заказ,Изделие,БЗ,[Кол во],' + 'Пол,СГП,пр,' + '[план Неделя],[план Дата],[Заводской номер],' + '[Н\ч Сварка],[Н\ч Сборка Клапана],[A],[B],' + 'НачНомер,КонНомер,НачКод,КонКод,' + 'IdГП,IdКО,КодГП,ИзделиеГП,Отмена ) ' + 'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,' + '%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s)', ['KlapanaZap', #39 + SG1.Cells[0, I] + #39, Dat1, #39 + SG1.Cells[2, I] + #39, #39 + SG1.Cells[4, I] + #39,
          #39 + SG1.Cells[3, I] + #39, #39 + SG1.Cells[5, I] + #39, #39 + SG1.Cells[8, I] + #39, #39 + '' + #39, #39 + 'МИ' + #39, #39 + SG1.Cells[7, I] + #39, Dat2, #39 + SG1.Cells[20, I] + #39, #39 + NC_Svar + #39, #39 + NC_Sbor + #39, #39 + A + #39, #39 + B + #39, #39 + SG1.Cells[11, I] + #39, #39 + SG1.Cells[12, I] + #39, #39 + SG1.Cells[13, I] + #39, #39 + SG1.Cells[14, I] + #39, #39 + SG1.Cells[17, I] + #39, #39 + IDKO + #39, #39 + SG1.Cells[10, I] + #39, #39 + SG1.Cells[9, I] + #39, Dat3]) then
          exit;

      end;
    end;
                //++++++++++++++++++++++++++++++++++++++++++++++++STAM
    if (Kod = 600) or (Kod = 610) then
    begin
      if not mkQuerySelect(ADOQuery1, 'Select Код from %s Where (IdГП=' + #39 + SG1.Cells[17, I] + #39 + ') AND (IdГП<>' + #39 + '0' + #39 + ')', ['СТАМ']) then
        exit;
      if ADOQuery1.RecordCount = 0 then
      begin
                        //Стакан монтажный СТАМ410-63-Н
                        //Поддон ПОД-50-Ц
        NC_Sbor := '0';
        Mat := '0';
        Izdel := SG1.Cells[4, I];
        Izdelie := SG1.Cells[4, I];
        Res3 := Pos('СТАМ', Izdel);
        if Res3 <> 0 then
        begin
          Res2 := Pos('-', Izdelie);
          Delete(Izdelie, 1, Res2);
                                //Стакан монтажный СТАМ502-2х88-Н
          Res2 := Pos('х', Izdelie);
          if Res2 <> 0 then
            Delete(Izdelie, Res2 - 1, 2);

          Res2 := Pos('-', Izdelie);
          Delete(Izdelie, Res2, 50);
          Razmer := StrToInt(Izdelie);
          if Razmer < 57 then
            Mat := '1.5';
          if Razmer > 57 then
            Mat := '3';
          Res1 := Pos('СТАМ710', Izdel);
          if Res1 <> 0 then
            Mat := '3';
          Res1 := Pos('СТАМ700', Izdel);
          if Res1 <> 0 then
            Mat := '3';
        end;
        if not mkQueryInsert(ADOQuery1, 'Insert Into %s ' + '(Код,[Дата],Заказ,Изделие,БЗ,[Кол во],' + 'Пол,пр,' + '[план Неделя],[план Дата],[Заводской номер],' + 'НачНомер,КонНомер,НачКод,КонКод,' + 'IdГП,IdКО,КодГП,ИзделиеГП,Отмена,Заказчик,ПДО,[Н\ч Сборка],Мат ) ' + 'Values (%s,%s,%s,%s,%s,%s' + ',%s,%s,' + '%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s ,%s)', ['СТАМ', #39 + SG1.Cells[0, I] + #39, Dat1, #39 + SG1.Cells[2, I] + #39, #39 + SG1.Cells[4, I] + #39, //Изделие
          #39 + SG1.Cells[3, I] + #39, #39 + SG1.Cells[5, I] + #39, #39 + SG1.Cells[8, I] + #39, #39 + 'МИ' + #39, #39 + SG1.Cells[7, I] + #39, Dat2, #39 + SG1.Cells[20, I] + #39, #39 + SG1.Cells[11, I] + #39, #39 + SG1.Cells[12, I] + #39, #39 + SG1.Cells[13, I] + #39, #39 + SG1.Cells[14, I] + #39, #39 + SG1.Cells[17, I] + #39, #39 + IDKO + #39, #39 + SG1.Cells[10, I] + #39, #39 + SG1.Cells[9, I] + #39, Dat3, #39 + Zakazchik + #39, #39 + PDO + #39, #39 + NC_Sbor + #39, #39 + Mat + #39]) then
          exit;
      end;
    end;
                //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    APB1.Position := I;
  end;
  FProgres.APB1.Position := 0;
  FProgres.Close;
  Btn25.Click;
        //Button39.Click;
  Button16.Click;
  APB1.Position := 0;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

procedure TForm1.Access1Click(Sender: TObject);
var
  S: string;
begin
  S := ExtractFileDir(ParamStr(0)) + '\connect.udl';
  ShellExecute(Form1.Handle, nil, PChar(S), nil, nil, SW_SHOWNORMAL);
end;

procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);
var
  I: Integer;
  S: string;
begin

  S := ExtractFileDir(ParamStr(0));
  Memo1.Lines.Clear;
  for I := 0 to StringGrid10.ColCount - 1 do
    Memo1.Lines.Add(IntToStr(StringGrid10.ColWidths[I]));
  Memo1.Lines.SaveToFile(S + '\StringGrid10.ini');
  Memo1.Lines.Clear;
  for I := 0 to StringGrid6.ColCount - 1 do
    Memo1.Lines.Add(IntToStr(StringGrid6.ColWidths[I]));
  Memo1.Lines.SaveToFile(S + '\StringGrid6.ini');

  Memo1.Lines.Clear;
  for I := 0 to ZSG.ColCount - 1 do
    Memo1.Lines.Add(IntToStr(ZSG.ColWidths[I]));
  Memo1.Lines.SaveToFile(S + '\ZSG.ini');

  Memo1.Lines.Clear;
  for I := 0 to SGL.ColCount - 1 do
    Memo1.Lines.Add(IntToStr(SGL.ColWidths[I]));
  Memo1.Lines.SaveToFile(S + '\SGL.ini');

  Memo1.Lines.Clear;
  for I := 0 to SG.ColCount - 1 do
    Memo1.Lines.Add(IntToStr(SG.ColWidths[I]));
  Memo1.Lines.SaveToFile(S + '\SG.ini');

  Memo1.Lines.Clear;
  for I := 0 to ZCV.ColCount - 1 do
    Memo1.Lines.Add(IntToStr(ZCV.ColWidths[I]));
  Memo1.Lines.SaveToFile(S + '\ZCV.ini');

  Memo1.Lines.Clear;
  for I := 0 to SG6.ColCount - 1 do
    Memo1.Lines.Add(IntToStr(SG6.ColWidths[I]));
  Memo1.Lines.SaveToFile(S + '\SG6.ini');

  Memo1.Lines.Clear;
  for I := 0 to SG215.ColCount - 1 do
    Memo1.Lines.Add(IntToStr(SG215.ColWidths[I]));
  Memo1.Lines.SaveToFile(S + '\SG215.ini');

  Memo1.Lines.Clear;
  for I := 0 to SG2.ColCount - 1 do
    Memo1.Lines.Add(IntToStr(SG2.ColWidths[I]));
  Memo1.Lines.SaveToFile(S + '\SG2.ini');

  Memo1.Lines.Clear;
  for I := 0 to SG4.ColCount - 1 do
    Memo1.Lines.Add(IntToStr(SG4.ColWidths[I]));
  Memo1.Lines.SaveToFile(S + '\SG4.ini');

  Memo1.Lines.Clear;
  for I := 0 to SG5.ColCount - 1 do
    Memo1.Lines.Add(IntToStr(SG5.ColWidths[I]));
  Memo1.Lines.SaveToFile(S + '\SG5.ini');

  Memo1.Lines.Clear;
  for I := 0 to SG10.ColCount - 1 do
    Memo1.Lines.Add(IntToStr(SG10.ColWidths[I]));
  Memo1.Lines.SaveToFile(S + '\SG10.ini');

  Memo1.Lines.Clear;
  for I := 0 to zclrstrngrd1.ColCount - 1 do
    Memo1.Lines.Add(IntToStr(zclrstrngrd1.ColWidths[I]));
  Memo1.Lines.SaveToFile(S + '\zclrstrngrd1.ini');
end;

procedure TForm1.N40Click(Sender: TObject);
var
  E, i, J, X, X1, Res, Priv, Kol_Zap, Kount, DlinaI, Res_KPU, Sten_G, Sten_V, Res_Detal, hh, F2: Integer;
  Vn_DAt, Dir, God, mes, Nom, Priv_Str, IDGP, OboznSh, Obozn, Dlina, Elem, k: string;
  ar: array[0..50, 0..7] of string;
  Ar1: array[0..500, 0..13] of string;
  Ar2: array of array of string;
  SR: TSearchRec; // поисковая переменная
  FindRes: Integer; // переменная для записи результата поиска
  Str, Dir_Ser, Str1, Str2, Str3, fileName, fullFilePath, Put, ko: string;
  h: hwnd;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
  for X1 := 0 to SG212.RowCount - 1 do
  begin
    Nom := StringGrid10.Cells[I_FN_SGP + 2, X1 + 1];
    ko := StringGrid10.Cells[I_FN_SGP + 3, X1 + 1];
  // Nom='' then
  //       Continue;
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + Nom + #39 + ') AND (IdКО=' + #39 + ko + #39 + ') AND  (Отмена IS NULL) Order By Заказ ', ['Klapana']) then
      exit;
    Kount := ADOQuery2.RecordCount;
    if Form1.ADOQuery2.RecordCount <> 0 then
    begin

      for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
      begin
        ar[i, 0] := Form1.ADOQuery2.FieldByName('Заказ').AsString;
        ar[i, 1] := Form1.ADOQuery2.FieldByName('Кол во запущенных').AsString;
        ar[i, 2] := Nom;
        ar[i, 3] := Form1.ADOQuery2.FieldByName('Изделие').AsString;
        ar[i, 4] := Form1.ADOQuery2.FieldByName('МодПривода').AsString;
        ar[i, 5] := Form1.ADOQuery2.FieldByName('IdГП').AsString;
        ar[i, 6] := Form1.ADOQuery2.FieldByName('IdКО').AsString;
        Form1.ADOQuery2.Next;
      end;
    end;
    for i := 0 to Kount do
    begin                                   //  AND (Trumph='+#39+'True'+#39+')
      if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + ar[i, 5] + #39 + ')  AND (IdКО=' + #39 + ko + #39 + ') AND (ВидЭлемента=' + #39 + 'Детали' + #39 + ')  Order By Обозначение ', ['Специф']) then
        exit;
      if ar[i, 1] = '' then
        Break;
      Kol_Zap := StrToInt(ar[i, 1]);
      Res_KPU := Pos('КПУ', ar[i, 3]);
      F2 := Pos('2*ф', ar[i, 3]);
                //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

      for J := 0 to ADOQuery2.RecordCount - 1 do
      begin
        Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
        OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
        if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение=' + #39 + OboznSh + #39 + ') AND ((Trumph=' + #39 + 'True' + #39 + ') ) AND (Технолог=' + #39 + 'True' + #39 + ')  ', ['СпецифОбщая']) then
          exit;
        if ADOQuery4.RecordCount <> 0 then
        begin
          k := ADOQuery2.FieldByName('Количество').AsString;
          Ar1[X, 0] := IntToStr(Kol_Zap * StrToInt(k));
          Obozn := ADOQuery4.FieldByName('Обозначение').AsString;
          Ar1[X, 1] := ADOQuery4.FieldByName('Обозначение').AsString;
          Ar1[X, 11] := ADOQuery2.FieldByName('Обозначение').AsString;
          Ar1[X, 2] := ADOQuery2.FieldByName('Элемент').AsString;
          Ar1[X, 3] := ar[i, 3]; //ADOQuery4.FieldByName('Изделие').AsString;
          Ar1[X, 4] := ADOQuery2.FieldByName('Длина').AsString;
          Ar1[X, 5] := ADOQuery2.FieldByName('Ширина').AsString;
          Ar1[X, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
          Ar1[X, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
          Ar1[X, 8] := ADOQuery2.FieldByName('Заказ').AsString;
          Ar1[X, 9] := ADOQuery2.FieldByName('IDГП').AsString;
          Ar1[X, 10] := ADOQuery2.FieldByName('Материал').AsString;
          Ar1[X, 12] := ADOQuery2.FieldByName('idКО').AsString;
          Inc(X);
          Form1.ADOQuery4.Next;
        end;
        Form1.ADOQuery2.Next;
      end;
    end;
  end;
  Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God;
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\';
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\' + Nom + '\';
  CreateDir(Dir);

  //XL2 := CreateOleObject('Excel.Application');
  CopyFile(PWideChar(Put_KTO + '\CKlapana\2013\Programm_Pogar.xlsx'), PWideChar(Dir + '\' + Nom + '.xlsx'), False);

  //-----------------------------------------------
  Memo7.Lines.Clear;
  Memo15.Lines.Clear;
  for i := 0 to High(Ar1) do
  begin
    if Ar1[E, 3] = '' then
      Break;

      //+++++++++++++++++++
    Str := Ar1[E, 11]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 5);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
    Str := ConvertRus(Str);
                //+++++++++++++++++++
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo7.Lines.Add(Str3);
    Memo15.Lines.Add(Ar1[E, 8] + '  ' + Ar1[E, 3]);
    Inc(E);
  end;

  Memo9.Clear;
  Memo8.Clear;
  for i := 0 to Memo7.Lines.Count - 0 do
  begin
    F := 0;
    //Dir_Ser := Put_KTO + '\Мингалиев\Вите\Programm1\Pogar';
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Клапаны\Воздушные';
    if Memo7.Lines.Strings[i] <> '' then
      fileName := Memo7.Lines.Strings[i] + '.dxf';
    fullFilePath := FileSearch(fileName, Dir_Ser);
    if fullFilePath <> '' then
    begin
      Memo9.Lines.Add(fullFilePath);
      CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
    end
    else
    begin
      Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
    end;
  end;
  if Memo8.Lines.Strings[0] <> '' then
  begin
    Memo8.Lines.SaveToFile('123.txt');
    Str := ExtractFileDir(ParamStr(0)) + '\123.txt';
    ShellExecute(Form1.Handle, nil, PChar(Str), nil, nil, SW_SHOWNORMAL);
  end;
  ShellExecute(h, 'open', PWideChar(Dir), nil, nil, SW_SHOW);
end;

procedure TForm1.N41Click(Sender: TObject);
begin
  Fizv.Show;
end;

procedure TForm1.N42Click(Sender: TObject);
begin
  Clipboard.AsText := SG4.Cells[SG4.Col, SG4.Row];
end;

procedure TForm1.N43Click(Sender: TObject);
begin
  Clipboard.AsText := SG5.Cells[SG5.Col, SG5.Row];
end;

procedure TForm1.N44Click(Sender: TObject);
var
  E, i, J, X, X1, Res, Priv, Kol_Zap, Kount, Res1, Res2: Integer;
  Vn_DAt, Dir, God, mes, Nom, Priv_Str, IDGP, Idko, Izd, Izdel, OboznSh, Obozn, Err, Elem, Dat_S: string;
  ar: array[0..7750, 0..6] of string;
  Ar1: array[0..10500, 0..12] of string;
  Ar2: array of array of string;
  SR: TSearchRec; // поисковая переменная
  FindRes: Integer; // переменная для записи результата поиска
  Str, Dir_Ser, Str1, Str2, Str3, A, B, fileName, fullFilePath, Put: string;
  h: hwnd;
  Dat: TDate;
  XL2: Variant;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
//for X1 := 0 to SG5.RowCount-1 do
//Begin
  Nom := SG5.Cells[0, SG5.Row]; //ZSG.Cells[0, ZSG.Row];
  //if Nom='' then
  //       Continue;
  Dat_S := SG5.Cells[8, SG5.Row];
  Dat := StrToDate(Dat_S);
  Dat_S := FormatDateTime('mm.dd.yyyy', Dat);
  //Nom := ZCV.Cells[0, ZCV.Row];
  Conn_Klap := Connect_Miass_Klap.Create();
  Memo25.Lines.Clear;
    //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  SetConnectTemp(ADOQueryTemp);
    //Создание временной таблицы
  ADOQueryTemp := TADOQuery.Create(nil);
  ADOQueryTemp.Connection := ADOConnectionTemp;
  //(Элемент,Обозначение,Изделие,Длина,Ширина,ДлинаРазв,ШиринаРазв,Заказ,IDГП,Материал,IDКО)
  ADOQueryTemp.SQL.Text := 'CREATE TABLE #ClientToDBFL (Элемент nvarchar(350),Kol float ,' +
  'Обозначение nvarchar(350),Изделие nvarchar(350),Длина nvarchar(350),Ширина nvarchar(350),' +
  'ДлинаРазв nvarchar(350),ШиринаРазв nvarchar(350),Заказ nvarchar(350),IDГП nvarchar(350),Материал nvarchar(350),IDКО nvarchar(350))';

  ADOQueryTemp.ExecSQL;
  if not mkQuerySelect(Form1.ADOQuery2, 'Select Номер,Станок,Обозначение, Элемент,Изделие,Sum(Количество) As c ,' + 'Sum(КолКлап) as KK   From %s Where (' + 'Планирование' + '=' + #39 + '%s' + #39 + ') AND (Номер=' + #39 + '%s' + #39 + ') AND (Станок=' + #39 + 'Trumph' + #39 + ')   Group BY Номер,Станок,Обозначение, Элемент,Изделие', ['Заготовка', Dat_S, Nom]) then //Заготовка
    exit;
  for J := 0 to ADOQuery2.RecordCount - 1 do
  begin
    Memo25.Lines.Add(ADOQuery2.FieldByName('Изделие').AsString);
  end;                                                                       //   ,Изделие
  if not mkQuerySelect(Form1.ADOQuery2, 'Select Обозначение, Элемент,Sum(Количество) As c ,' +
  'Sum(КолКлап) as KK   From %s Where (' + 'Планирование' + '=' + #39 + '%s' + #39 + ') AND (Номер=' + #39 + '%s' + #39 +                                                     //  ,Изделие
    ') AND (Станок=' + #39 + 'Trumph' + #39 + ') Group BY Обозначение, Элемент ', ['Заготовка', Dat_S, Nom]) then //Заготовка
    exit;
  for J := 0 to ADOQuery2.RecordCount - 1 do
  begin

    Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
    OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
    if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение=' + #39 + OboznSh + #39 +
    ') ORDER BY Дата ', ['СпецифЛЮК']) then
      exit;
    if ADOQuery4.RecordCount <> 0 then
    begin
      ADOQuery4.Last;
        //SetConnectTemp(ADOQueryTemp);
      ADOQueryTemp.SQL.Text := 'INSERT INTO #ClientToDBFL ' + '(Элемент,Обозначение,Изделие,Длина,Ширина,ДлинаРазв,ШиринаРазв,Заказ,IDГП,Материал,IDКО,Kol) Values (' + #39 + ADOQuery2.FieldByName('Элемент').AsString + #39 + ',' + #39 + ADOQuery2.FieldByName('Обозначение').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('Изделие').AsString + #39 +       // ','+#39+Memo25.Lines[0]+#39+
        ',' + #39 + ADOQuery4.FieldByName('Длина').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('Ширина').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('ДлинаРазв').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('ШиринаРазв').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('Заказ').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('IDГП').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('Материал').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('IDКО').AsString + #39 + ',' + #39 + ADOQuery2.FieldByName('c').AsString + #39 + ')';
      try
        ADOQueryTemp.ExecSQL;
      except
        Err := '1222';
      end;
      Form1.ADOQuery4.Next;
    end;
    Form1.ADOQuery2.Next;
  end;
  ADOQueryTemp.SQL.Text := 'Select * from #ClientToDBFL ORDER BY Материал ';
  ADOQueryTemp.Open;
  for i := 0 to ADOQueryTemp.RecordCount - 1 do
  begin
    Ar1[X, 0] := ADOQueryTemp.FieldByName('Kol').AsString;
    Obozn := ADOQueryTemp.FieldByName('Обозначение').AsString;
    Ar1[X, 1] := ADOQueryTemp.FieldByName('Обозначение').AsString;
    Ar1[X, 11] := ADOQueryTemp.FieldByName('Обозначение').AsString;
    Ar1[X, 2] := ADOQueryTemp.FieldByName('Элемент').AsString;
    Ar1[X, 3] := ADOQueryTemp.FieldByName('Изделие').AsString;
    Ar1[X, 4] := ADOQueryTemp.FieldByName('Длина').AsString;
    Ar1[X, 5] := ADOQueryTemp.FieldByName('Ширина').AsString;
    Ar1[X, 6] := ADOQueryTemp.FieldByName('ДлинаРазв').AsString;
    Ar1[X, 7] := ADOQueryTemp.FieldByName('ШиринаРазв').AsString;
    Ar1[X, 8] := ADOQueryTemp.FieldByName('Заказ').AsString;
    Ar1[X, 9] := ADOQueryTemp.FieldByName('IDГП').AsString;
    Ar1[X, 10] := ADOQueryTemp.FieldByName('Материал').AsString;
    Ar1[X, 12] := ADOQueryTemp.FieldByName('IDКО').AsString;
    Inc(X);
    ADOQueryTemp.Next;
  end;
 { if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (Номер=' +
  #39 + Nom + #39 + ') AND (Отмена IS NULL) Order By Заказ ', ['ЗапускЛЮК']) then
    exit;
  Kount := ADOQuery2.RecordCount;
  if Form1.ADOQuery2.RecordCount <> 0 then
  begin

    for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
    begin
      Izd:= Form1.ADOQuery2.FieldByName('Изделие').AsString;
      Izdel:= Form1.ADOQuery2.FieldByName('Изделие').AsString;
      ar[i, 0] := Form1.ADOQuery2.FieldByName('Заказ').AsString;
      ar[i, 1] := Form1.ADOQuery2.FieldByName('Кол во запущенных').AsString;
      ar[i, 2] := Nom;
      ar[i, 3] := Izdel;
      ar[i, 4] := Form1.ADOQuery2.FieldByName('МодПривода').AsString;
      ar[i, 5] := Form1.ADOQuery2.FieldByName('IdГП').AsString;
      ar[i, 6] := Form1.ADOQuery2.FieldByName('IdКО').AsString;
      Form1.ADOQuery2.Next;
    end;
  end;
  for i := 0 to Kount do
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + ar[i, 5] + #39 + ') AND (IDКО=' + #39 + ar[i, 6] + #39 + ') AND (ВидЭлемента=' + #39 + 'Детали' + #39 + ') Order By Обозначение ', ['СпецифЛЮК']) then
      exit;

    if ar[i, 1] = '' then
      Break;
    Kol_Zap := StrToInt(ar[i, 1]);
                //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    for J := 0 to ADOQuery2.RecordCount do
    begin

      OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
                        {Res:=Pos('-',OboznSh);
                        if Res<>0 Then
                        Delete(OboznSh,Res,30);
                        if not Form1.mkQuerySelect66(Form1.ADOQuery4,
                        'Select * from %s Where   (ОбозначениеШ=' + #39 +
                        OboznSh + #39 +') AND ((Trumph='+#39+'True'+#39+') or (Ножницы='+#39+'True'+#39+')) AND (Технолог='+#39+'True'+#39+')  ', ['ШаблонВоз']) then
                        exit; }                                     // or (Ножницы='+#39+'True'+#39+')
     { if not Form1.mkQuerySelect66(Form1.ADOQuery4,
      'Select * from %s Where   (Обозначение=' + #39 + OboznSh +
      #39 + ') AND ((Trumph=' + #39 + 'True' + #39 + ') ) AND (Технолог=' + #39 +
      'True' + #39 + ')  ', ['СпецифОбщая']) then
        exit;
      if ADOQuery4.RecordCount <> 0 then
      begin

        Ar1[X, 0] := IntToStr(Kol_Zap * StrToInt(ADOQuery2.FieldByName('Количество').AsString));
        Obozn :=     ADOQuery4.FieldByName('Обозначение').AsString;
        Ar1[X, 1] := ADOQuery2.FieldByName('Обозначение').AsString;
        Ar1[X, 2] := ADOQuery2.FieldByName('Элемент').AsString;
        Ar1[X, 3] := ADOQuery2.FieldByName('Изделие').AsString;
        Ar1[X, 4] := ADOQuery2.FieldByName('Длина').AsString;
        Ar1[X, 5] := ADOQuery2.FieldByName('Ширина').AsString;
        Ar1[X, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
        Ar1[X, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
        Ar1[X, 8] := ADOQuery2.FieldByName('Заказ').AsString;
        Ar1[X, 9] := ADOQuery2.FieldByName('IDГП').AsString;
        Ar1[X, 10] :=ADOQuery2.FieldByName('Материал').AsString;
        Ar1[X, 11] :=ADOQuery2.FieldByName('IDКО').AsString;
        Inc(X);
      end;
      Form1.ADOQuery2.Next;  }
   // end;
  //end;
//End;

  Nom := SG5.Cells[0, SG5.Row];
  Dir := Put_KTO + '\Кондратьев\Programm\LUK\' + God;
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\LUK\' + God + '\' + mes + '\';
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\LUK\' + God + '\' + mes + '\' + Nom + '\';
  CreateDir(Dir);

  XL2 := CreateOleObject('Excel.Application');
  CopyFile(PWideChar(Put_KTO + '\CKlapana\2013\Programm_Vozd.xlsx'), PWideChar(Dir + '\' + Nom + '.xlsx'), False);

  XL2.Workbooks.Open(Dir + '\' + Nom + '.xlsx');
  XL2.Application.EnableEvents := false;

        //-----------------------------------------------
  Memo7.Lines.Clear;
  Memo15.Lines.Clear;
  for i := 0 to High(Ar1) do
  begin
    if Ar1[E, 3] = '' then
      Break;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 4] := Ar1[E, 8]; //Zakaz
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 5] := IntToStr(E + 1);
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 6] := Ar1[E, 3]; //Klapan
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 7] := Ar1[E, 2]; //Element
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 8] := Ar1[E, 0]; //Kol-vo
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 9] := Ar1[E, 6]; //DlinRazv
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 10] := Ar1[E, 7]; //ShirRazv
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 12] := Ar1[E, 10]; //Mat
    //+++++++++++++++++++
    Str := Ar1[E, 1]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
                //+++++++++++++++++++
    Str := ConvertRus(Str);
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str1 := StringReplace(Str1, ' ', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo7.Lines.Add(Str3);
    Memo15.Lines.Add(Ar1[E, 8] + '  ' + Ar1[E, 3]);
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 13] := Str3 + '.GEO'; //Chert
    Inc(E);
  end;

  Memo9.Clear;
  Memo8.Clear;
  for i := 0 to Memo7.Lines.Count - 0 do
  begin
    F := 0;
    //Люк дымоудаления Л-К-02-1300*1300-C-2*PLS30-З
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);

    Res := Pos('ОЗОР', Memo15.Lines.Strings[i]);
    if Res <> 0 then
      Dir_Ser := Put + 'КТО\_Развертки new\ДЫМОЗОРЫ\'
    else
      Dir_Ser := Put + 'КТО\_Развертки new\Люки ДУ\';
    if Memo7.Lines.Strings[i] <> '' then
      fileName := Memo7.Lines.Strings[i] + '.dxf';
    fullFilePath := FileSearch(fileName, Dir_Ser);
    if fullFilePath <> '' then
    begin
      Memo9.Lines.Add(fullFilePath);
      CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
    end
    else
    begin
      Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
    end;
  end;

  if Memo8.Lines.Strings[0] <> '' then
  begin
    Memo8.Lines.SaveToFile('123.txt');
    Str := ExtractFileDir(ParamStr(0)) + '\123.txt';
    ShellExecute(Form1.Handle, nil, PChar(Str), nil, nil, SW_SHOWNORMAL);
  end;
        {if (FlagDolg=9) or (FlagDolg=1) then
        begin

        end;   }
  XL2.ActiveWorkBook.WorkSheets[1].Cells[12, 2] := Nom;
  XL2.ActiveWorkBook.Save; //As(Dir + '\' + nom + '.xlsx');
  //XL2.Visible := True;
  XL2.ActiveWorkBook.Close;
  XL2.Application.Quit;
  XL2 := UnAssigned;
  ShellExecute(h, 'open', PWideChar(Dir), nil, nil, SW_SHOW);
end;

function FindFiles(StartFolder, Mask, D: string; ii: Integer; List: TStrings; ScanSubFolders: Boolean = True): string;
var
  SearchRec: TSearchRec;
  FindResult: Integer;
  fullFilePath: string;
begin
  List.BeginUpdate;
  try
    StartFolder := IncludeTrailingBackslash(StartFolder);
    FindResult := FindFirst(StartFolder + '*.*', faAnyFile, SearchRec);
    try
      while FindResult = 0 do
        with SearchRec do
        begin
          if (Attr and faDirectory) <> 0 then
          begin
            if ScanSubFolders and (Name <> '.') and (Name <> '..') then
              FindFiles(StartFolder + Name, Mask, D, ii, List, ScanSubFolders);
          end
          else
          begin
            if MatchesMask(Name, Mask) then  //StartFolder +
            begin
              List.Add(Name);
              fullFilePath := StartFolder + Name;
              CopyFile(PWideChar(fullFilePath), PWideChar(D + Name), False);
              Form1.Memo8.Lines.Delete(ii);
              Form1.Memo8.Lines.Insert(ii, Name); //.Add(Name+'~');//.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
            end;
          end;
          FindResult := FindNext(SearchRec);
        end;
    finally
      FindClose(SearchRec);
    end;
  finally
    List.EndUpdate;
  end;
end;

procedure TForm1.N45Click(Sender: TObject);
var
  XL2: Variant;
  E, i, J, X, X1, Res, Priv, Kol_Zap, Kount: Integer;
  Vn_DAt, Dir, God, mes, Nom, Priv_Str, IDGP, Idko, OboznSh, Obozn, S1, S2: string;
  ar: array[0..7750, 0..6] of string;
  Ar1: array[0..10500, 0..12] of string;
  Ar2: array of array of string;
  SR: TSearchRec; // поисковая переменная
  FindRes: Integer; // переменная для записи результата поиска
  Str, Dir_Ser, Str1, Str2, Str3, fileName, fullFilePath, Put, Elem: string;
  h: hwnd;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
  for X1 := 0 to SG212.RowCount - 1 do
  begin
    Nom := SG212.Cells[0, X1];
    if Nom = '' then
      Continue;
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (Номер=' + #39 + Nom + #39 + ') AND (Отмена IS NULL) Order By Заказ ', ['ЗапускСТАМ']) then
      exit;
    Kount := ADOQuery2.RecordCount;
    if Form1.ADOQuery2.RecordCount <> 0 then
    begin

      for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
      begin
        ar[i, 0] := Form1.ADOQuery2.FieldByName('Заказ').AsString;
        ar[i, 1] := Form1.ADOQuery2.FieldByName('Кол во запущенных').AsString;
        ar[i, 2] := Nom;
        ar[i, 3] := Form1.ADOQuery2.FieldByName('Изделие').AsString;
        ar[i, 4] := Form1.ADOQuery2.FieldByName('МодПривода').AsString;
        ar[i, 5] := Form1.ADOQuery2.FieldByName('IdГП').AsString;

        Form1.ADOQuery2.Next;
      end;
    end;
    for i := 0 to Kount do
    begin                                   //  AND (Trumph='+#39+'True'+#39+')
      if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + ar[i, 5] + #39 +
      ') AND (ВидЭлемента=' + #39 + 'Детали' + #39 + ')  Order By Обозначение ', ['СпецифСТАМ']) then
        exit;
      if ar[i, 1] = '' then
        Break;
      Kol_Zap := StrToInt(ar[i, 1]);
    //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      for J := 0 to ADOQuery2.RecordCount - 1 do
      begin
        Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
        OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
        if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение=' + #39 + OboznSh + #39 + ') AND ((Trumph=' + #39 + 'True' + #39 + ') ) AND (Технолог=' + #39 + 'True' + #39 + ')  ', ['СпецифОбщая']) then
          exit;
        if ADOQuery4.RecordCount <> 0 then
        begin

          Ar1[X, 0] := IntToStr(Kol_Zap * StrToInt(ADOQuery2.FieldByName('Количество').AsString));
          Obozn := ADOQuery4.FieldByName('Обозначение').AsString;
          Ar1[X, 1] := ADOQuery4.FieldByName('Обозначение').AsString;
          Ar1[X, 11] := ADOQuery2.FieldByName('Обозначение').AsString;
          Ar1[X, 2] := ADOQuery2.FieldByName('Элемент').AsString;
          Ar1[X, 3] := ar[i, 3];
          Ar1[X, 4] := ADOQuery2.FieldByName('Длина').AsString;
          Ar1[X, 5] := ADOQuery2.FieldByName('Ширина').AsString;
          Ar1[X, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
          Ar1[X, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
          Ar1[X, 8] := ADOQuery2.FieldByName('Заказ').AsString;
          Ar1[X, 9] := ADOQuery2.FieldByName('IDГП').AsString;
          Ar1[X, 10] := ADOQuery2.FieldByName('Материал').AsString;
          Inc(X);
          Form1.ADOQuery4.Next;
        end;
        Form1.ADOQuery2.Next;
      end;
    end;
  end;
  Dir := Put_KTO + '\Кондратьев\Programm\STAM\' + God;
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\STAM\' + God + '\' + mes + '\';
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\STAM\' + God + '\' + mes + '\' + Nom + '\';
  CreateDir(Dir);

  XL2 := CreateOleObject('Excel.Application');
  CopyFile(PWideChar(Put_KTO + '\CKlapana\2013\Programm_Pogar.xlsx'), PWideChar(Dir + '\' + Nom + '.xlsx'), False);

  XL2.Workbooks.Open(Dir + '\' + Nom + '.xlsx');
  XL2.Application.EnableEvents := false;

        //-----------------------------------------------
  Memo7.Lines.Clear;
  Memo8.Clear;
  Memo15.Lines.Clear;
  for i := 0 to High(Ar1) - 1 do
  begin
    if Ar1[E, 3] = '' then
      Break;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 4] := Ar1[E, 8]; //Zakaz
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 5] := IntToStr(E + 1);
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 6] := Ar1[E, 3]; //Klapan
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 7] := Ar1[E, 2]; //Element
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 8] := Ar1[E, 0]; //Kol-vo
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 9] := Ar1[E, 6]; //DlinRazv
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 10] := Ar1[E, 7]; //ShirRazv
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 12] := Ar1[E, 10]; //Mat
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 13] := Ar1[E, 11]; //Chert
                //+++++++++++++++++++
    Str := Ar1[E, 11]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 5);
      Insert('TEKI', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI', Str, 1);
    end;
    Str := ConvertRus(Str);
                //+++++++++++++++++++
    //Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    //Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
   // Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo7.Lines.Add(Str);
    Memo8.Lines.Add(Str);
    //Memo15.Lines.Add(Ar1[E, 8] + '  ' + Ar1[E, 3]);
    Inc(E);
  end;

  Memo9.Clear;

  for i := 0 to Memo7.Lines.Count - 0 do
  begin
    F := 0;
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\СТАМ 18.05.2018';
    if Memo7.Lines.Strings[i] <> '' then
    begin
      fileName := Memo7.Lines.Strings[i] + '.GEO';
      fullFilePath := FindFiles(Dir_Ser, fileName, Dir, i, Memo9.Lines, True);
    end;
  end;
  Memo15.Clear;
  for i := 0 to Memo8.Lines.Count - 0 do
  begin
    if Memo8.Lines.Strings[i] <> '' then
    begin
      S2 := Memo8.Lines.Strings[i];
      Res := Pos('GEO', S2);
      if Res = 0 then
      begin
        Delete(S2, Res, 1);
        Memo15.Lines.Add(S2);
      end;
    end;
  end;

  if Memo15.Lines.Strings[0] <> '' then
  begin
    Memo15.Lines.SaveToFile('123.txt');
    Str := ExtractFileDir(ParamStr(0)) + '\123.txt';
    ShellExecute(Form1.Handle, nil, PChar(Str), nil, nil, SW_SHOWNORMAL);
  end;
  ShellExecute(h, 'open', PWideChar(Dir), nil, nil, SW_SHOW);
  XL2.ActiveWorkBook.WorkSheets[1].Cells[12, 2] := Nom;
  XL2.Visible := True;
  XL2 := UnAssigned;
end;

procedure TForm1.N46Click(Sender: TObject);
var
  Idgp: string;
begin
  Idgp := SG4.Cells[13, SG4.Row];
  if MessageDlg('Подумай! Удалить?', mtConfirmation, [mbYes, mbNo], 0) = mrNo then
    Exit
  else
  begin
    if not Form1.mkQueryDelete(Form1.ADOQuery1, 'DELETE FROM %s Where (IdГП= ' + #39 + Idgp + #39 + ') ', ['СпецифЛЮК']) then
      Exit;
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Статус]=' + #39 + '0' + #39 + ' WHERE ([IdГП]=' + #39 + Idgp + #39 + ')', ['ЛЮК']) then
      Exit;

  end;
end;

procedure TForm1.N47Click(Sender: TObject);
begin
  FFile.Show;
end;

procedure TForm1.N48Click(Sender: TObject);
begin
  FBRAK.LabZN.Caption := '1';
  FNewBRAK.Edit1.Text := ZSG.Cells[I_FN_ZAK, ZSG.Row]; //Zakaz
   // FNewBRAK.LabZak.Caption:=ZSG.Cells[I_FN_ZAK,ZSG.Row ];//Zakaz

  FNewBRAK.Edit2.Text := ZSG.Cells[I_FN_KOL_ZAP + 29, ZSG.Row]; //BZ
    //FNewBRAK.LabBZ.Caption:= ZSG.Cells[I_FN_KOL_ZAP + 29,ZSG.Row ]; //BZ

  FNewBRAK.LabGP.Caption := ZSG.Cells[I_FN_KOL_ZAP + 26, ZSG.Row]; //GP
  FNewBRAK.Labko.Caption := '0'; //ko
    //FNewBRAK.LabZN.Caption:=ZSG.Cells[I_FN_KOL_ZAP + 23, ZSG.Row]; //zavNom
  FNewBRAK.Edit3.Text := ZSG.Cells[I_FN_KOL_ZAP + 23, ZSG.Row]; //zavNom
  FNewBRAK.LabIndex.Caption := '1'; //Клапана
  FNewBRAK.Caption := ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.Row];
  FNewBRAK.Label16.Caption := Regist.Famili;
  FBRAK.IZD_G := 0;
  FNewBRAK.Doljn := FlagDolg;
   // MessageDlg('Бред!'+#10#13+IntToStr(FlagDolg), mtError, [mbOk], 0);
  FNewBRAK.Plan := ZSG.Cells[I_FN_KOL_ZAP + 3, ZSG.Row];
  FNewBRAK.Nom_G := ZSG.Cells[0, ZSG.Row];
  FNewBRAK.ShowModal;

{      FNewBRAK.Label13.Caption:=SG12.Cells[17,SG12.Row];

  FNewBRAK.Edit1.Text:= SG12.Cells[2,SG12.Row ];//Zakaz

  FNewBRAK.Edit2.Text:= SG12.Cells[3 ,SG12.Row ]; //BZ

  FNewBRAK.LabGP.Caption:=SG12.Cells[4, SG12.Row]; //GP
  FNewBRAK.Labko.Caption:='0'; //ko

  FNewBRAK.Edit3.Text:=SG12.Cells[16, SG12.Row]; //zavNom

  FNewBRAK.Caption:= SG12.Cells[6,SG12.Row ];
  FNewBRAK.Show;  }
end;

procedure TForm1.N49Click(Sender: TObject);
begin
  FNewBRAK.Edit1.Text := ZCV.Cells[2, ZCV.Row]; //Zakaz

  FNewBRAK.Edit2.Text := ZCV.Cells[3, ZCV.Row]; //BZ

  FNewBRAK.LabGP.Caption := ZCV.Cells[30, ZCV.Row]; //GP
  FNewBRAK.Labko.Caption := ZCV.Cells[31, ZCV.Row];
  ; //ko

  FNewBRAK.Edit3.Text := ZCV.Cells[27, ZCV.Row]; //zavNom
  FNewBRAK.LabIndex.Caption := '1';
  FNewBRAK.Caption := ZCV.Cells[12, ZCV.Row]; //Изделие
  FNewBRAK.Label16.Caption := Regist.Famili;
  FNewBRAK.Doljn := FlagDolg;
    //MessageDlg('Бред!'+#10#13+IntToStr(FlagDolg), mtError, [mbOk], 0);
  FNewBRAK.Plan := ZCV.Cells[8, ZCV.Row];
  FNewBRAK.Nom_G := ZCV.Cells[0, ZCV.Row];
  FBRAK.IZD_G := 1;
  FNewBRAK.ShowModal;

end;

procedure TForm1.N4Click(Sender: TObject);
begin
  FBriket.Show;
end;

procedure TForm1.N50Click(Sender: TObject);
begin
  FNewBRAK.Edit1.Text := SG215.Cells[2, SG215.Row]; //Zakaz

  FNewBRAK.Edit2.Text := SG215.Cells[3, SG215.Row]; //BZ

  FNewBRAK.LabGP.Caption := SG215.Cells[21, SG215.Row]; //GP
  FNewBRAK.Labko.Caption := '0'; //SG215.Cells[31, SG215.Row];; //ko

  FNewBRAK.Edit3.Text := SG215.Cells[22, SG215.Row]; //zavNom
  FNewBRAK.LabIndex.Caption := '3';
  FNewBRAK.Caption := SG215.Cells[4, SG215.Row]; //Изделие
  FNewBRAK.Label16.Caption := Regist.Famili;
  FBRAK.IZD_G := 2;
  FNewBRAK.Doljn := FlagDolg;
    //MessageDlg('Бред!'+#10#13+IntToStr(FlagDolg), mtError, [mbOk], 0);
  FNewBRAK.ShowModal;

end;

procedure TForm1.N51Click(Sender: TObject);
begin
  FNewBRAK.Edit1.Text := SG5.Cells[2, SG5.Row]; //Zakaz

  FNewBRAK.Edit2.Text := ''; //SG215.Cells[3,SG215.Row ]; //BZ

  FNewBRAK.LabGP.Caption := SG5.Cells[21, SG5.Row]; //GP
  FNewBRAK.Labko.Caption := '0'; //SG215.Cells[31, SG215.Row];; //ko

  FNewBRAK.Edit3.Text := SG5.Cells[22, SG5.Row]; //zavNom
  FNewBRAK.LabIndex.Caption := '5';
  FNewBRAK.Caption := SG5.Cells[3, SG5.Row]; //Изделие
  FNewBRAK.Label16.Caption := Regist.Famili;
  FBRAK.IZD_G := 3;
  FNewBRAK.Doljn := FlagDolg;
    //MessageDlg('Бред!'+#10#13+IntToStr(FlagDolg), mtError, [mbOk], 0);
  FNewBRAK.ShowModal;
end;

procedure TForm1.N52Click(Sender: TObject);
var
  I, J, Res, L, Res1, F: Integer;
  XL: Variant;
  Kol_Blok, nch, nch_o,KolGib,NC: Double;
  Kol_Det, Kol_I, x,B_i,A_I,Stv,K: Integer;
  God, mes, Dir, Nam, Nam_S,Kol_G, Zav_Nom, Briket, Tip,
  Naim1, S, S1, BZ, Zak, moch, Kol, A, B, H, Mat, Dat,
  Zav_Nom1, Zav_Nom2, GP, Obozn, Nam_Det, Dlin, N: string;
begin
  Nam := SG2.Cells[3, SG2.row];
        //Воздухоприемное устройство РОН 130-450x450-50-RAL 7035
        //Устройство воздухоприемное РОН 130-450*450-30-Ц
        //Решетка РОН-850-500-30-С RAL9003
       // res1:=Pos('Воздухоприемное',Nam);
  I := 0;
  Kol_G:='0';
  Stv:=0;
  nch:=0;
  NCh_O:=0;
  K:=0;
  S := AnsiUpperCase('Воздухоприемное');
  S1 := AnsiUpperCase(Nam);
  Res1 := Pos(S, S1);
  Nam := StringReplace(Nam, '*', 'x', [rfReplaceAll]);
  if Res1 <> 0 then
  begin
    S := 'Воздухоприемное устройство ';
    S1 := 'Устройство воздухоприемное ';
    Nam := StringReplace(Nam, S, '', [rfReplaceAll]);
    Nam := StringReplace(Nam, S1, '', [rfReplaceAll]);
    Nam := StringReplace(Nam, 'РОН ', 'РОН-', [rfReplaceAll]);
    Nam_S := Nam;
        //    Устройство воздухоприемное РОН 130-500*600-50-RAL7035
    Res1 := Pos('РОН', Nam_S);
    if Res1 <> 0 then
      Delete(Nam_S, 1, 4);
        //130-450x450-50-RAL 7035
        //
    Res1 := Pos('-', Nam_S);
    if Res1 <> 0 then
      Delete(Nam_S, 1, Res1);

        // 450x450-50-RAL 7035
    Res1 := Pos('x', Nam_S);
    if Res1 <> 0 then
    begin
      A := Copy(Nam_S, 1, Res1 - 1);
      Delete(Nam_S, 1, Res1);
    end;
        // 450-50-RAL 7035
    Res1 := Pos('-', Nam_S);
    if Res1 <> 0 then
    begin
      B := Copy(Nam_S, 1, Res1 - 1);
      Delete(Nam_S, 1, Res1);
    end;
       //50-RAL 7035
    Res1 := Pos('-', Nam_S);
    if Res1 <> 0 then
    begin
      H := Copy(Nam_S, 1, Res1 - 1);
      Delete(Nam_S, 1, Res1);
    end;

    Res1 := Pos('RAL', Nam_S);
    if Res1 <> 0 then
      I := 1;

    Res1 := Pos('Н', Nam_S);
    if Res1 <> 0 then
      I := 2;

    Res1 := Pos('Ц', Nam_S);
    if Res1 <> 0 then
      I := 3;

  end;

  Res1 := Pos('Решетка', Nam);
  if Res1 <> 0 then
  begin
       // Res1:=Pos('Решетка',Nam);
    Nam := StringReplace(Nam, 'Решетка ', '', [rfReplaceAll]);
       // Nam:=StringReplace(Nam,'*','x',[rfReplaceAll]);
        //
        //Delete(Nam,1,8);
    Nam_S := Nam;
        //
    Res1 := Pos('РОН', Nam_S);
    if Res1 <> 0 then
      Delete(Nam_S, 1, 4);
        // 800-1000-40-С
    Res1 := Pos('-', Nam_S);
    if Res1 <> 0 then
    begin
      A := Copy(Nam_S, 1, Res1 - 1);
      Delete(Nam_S, 1, Res1);
    end;
        // 1000-40-С
    Res1 := Pos('-', Nam_S);
    if Res1 <> 0 then
    begin
      B := Copy(Nam_S, 1, Res1 - 1);
      Delete(Nam_S, 1, Res1);
    end;
       //40-С
    Res1 := Pos('-', Nam_S);
    if Res1 <> 0 then
    begin
      H := Copy(Nam_S, 1, Res1 - 1);
      Delete(Nam_S, 1, Res1);
    end;
        //С
    Mat := Copy(Nam_S, 1, Res1);
    Res1 := Pos('С', Mat);
    if Res1 <> 0 then
      I := 1;

    Res1 := Pos('Н', Mat);
    if Res1 <> 0 then
      I := 2;

    Res1 := Pos('Ц', Mat);
    if Res1 <> 0 then
      I := 3;
  end;
  Zak := SG2.Cells[2, SG2.row];
  //Kol_Blok:=StrToFloat(Stringgrid7.Cells[23,Stringgrid6.row ]);
  Kol := (SG2.Cells[4, SG2.row]);
  Kol_I := StrToInt(Kol);
        //
  Zav_Nom1 := (SG2.Cells[12, SG2.row]);
  Zav_Nom2 := (SG2.Cells[13, SG2.row]);
  GP := (SG2.Cells[24, SG2.row]);

  Dat := FormatDateTime('dd.mm.yyyy', Now);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
  Dir := Form1.Put_KTO + '\CKlapana\Сопроводительные РОН\';
  CreateDir(Dir);

  Dir := Form1.Put_KTO + '\CKlapana\Сопроводительные РОН\' + God;
  CreateDir(Dir);

  Dir := Form1.Put_KTO + '\CKlapana\Сопроводительные РОН\' + God + '\' + mes + '\';
  CreateDir(Dir);

  XL := CreateOleObject('Excel.Application');
  if I <> 0 then
  begin
    XL.Workbooks.Open(Form1.Put_KTO + '\CKlapana2\2013\Сопроводительный РОН.xlsx');
    XL.ActiveWorkBook.WorkSheets[I].Select;
    XL.ActiveWorkBook.WorkSheets[I].Cells[4, 7] := Nam;
    XL.ActiveWorkBook.WorkSheets[I].Cells[2, 1] := A;
    XL.ActiveWorkBook.WorkSheets[I].Cells[2, 2] := B;
    XL.ActiveWorkBook.WorkSheets[I].Cells[2, 3] := H;
    XL.ActiveWorkBook.WorkSheets[I].Cells[2, 4] := Zak;
    XL.ActiveWorkBook.WorkSheets[I].Cells[2, 5] := Zav_Nom1 + '-' + Zav_Nom2;
    XL.ActiveWorkBook.WorkSheets[I].Cells[2, 6] := (Kol);
    //Stv:=StrToInt(XL.ActiveWorkBook.WorkSheets[I].Cells[2, 8]);

    XL.ActiveWorkBook.WorkSheets[I].Cells[19, 5] := 'Покраска__'+(Nam_s)+'_______(_____________/____________)';
    Kol_I:=StrToInt(Kol);
    B_I:= StrToInt(B);
    A_I:= StrToInt(A);
    //
    if (A_I<900) and (B_I<1600) then
      begin
        B:='1250';
        K:=1;
      end;
    //
    if (A_I<900) and ((B_I>1600) and (B_i<=2500)) then
      begin
        B:='1250';
        K:=2;
      end;
    //
    //
    if ((A_I>900) and (A_I<=1600)) and (B_I<=930)  then
      begin
        B:='2000';
        K:=2;
      end;
    //
    if ((A_I>900) and (A_I<=1600)) and ((B_I>930) and (B_i<=1600)) then
      begin
        B:='1250';
        K:=2;
      end;
    //
    if ((A_I>900) and (A_I<=1600)) and ((B_I>1600) and (B_i<=1920)) then
      begin
        B:='2000';
        K:=2;
      end;
    //
    if ((A_I>900) and (A_I<=1600)) and ((B_I>1920) and (B_i<=2500)) then
      begin
        B:='2000';
        K:=4;
      end;
    ////
    if ((A_I>1600) and (A_I<=1830)) and (B_I<=1600)  then
      begin
        B:='1250';
        K:=2;
      end;
    //
    if ((A_I>1600) and (A_I<=1830)) and ((B_I>1600) and (B_i<=2500)) then
      begin
        B:='1250';
        K:=4;
      end;
    ////
    if ((A_I>1830) and (A_I<=2500)) and (B_I<=930)  then
      begin
        B:='2000';
        K:=2;
      end;
    //
    if ((A_I>1830) and (A_I<=2500)) and ((B_I>930) and (B_i<=1920)) then
      begin
        B:='2000';
        K:=4;
      end;



   { if B_i<1250  then
      B:= '1250'
    else
      B:= '2000'; }
      Kol_G:=XL.ActiveWorkBook.WorkSheets[I].Cells[2, 8];
      KolGib:=StrToFloat(Kol_G);
     {     if (A_I<900) then
      begin
        NC:=(KolGib*0.006)*1.105;
      end;
    //
    if (A_I>=900) then
      begin
        NC:=((KolGib*0.006)+0.034)*1.105;
      end; }
     // Result.MAT_G_Do1 := NC ;
    Kol_G:=XL.ActiveWorkBook.WorkSheets[I].Cells[2, 8];
    if not Form1.mkQuerySelect(Form1.ADOQuery1,
        'Select * from [%s] Where ([Высота]=' + #39 + Kol_G + #39 +
        ') and (Длина=' + #39 + B + #39 + ') and ([№]=' + #39 + '777' + #39 + ') ', ['Резка Гибка']) then
    exit;
    K:=1;
    Nch := Form1.ADOQuery1.FieldByName('Норма').AsFloat;
    nch_o:=(Nch*K)*Kol_I;
    Kol:=FloatToStr(nch_o);
    Kol:=StringReplace(Kol, '.', ',', [rfReplaceAll]);
    XL.ActiveWorkBook.WorkSheets[I].Cells[29, 3] := '`'+(Kol);
    XL.ActiveWorkBook.WorkSheets[I].SaveAs(Dir + '\' + Dat + '-' + Nam + '.xlsx');
  end
  else
  begin
    XL.Workbooks.Open(Form1.Put_KTO + '\CKlapana2\2013\РОН_Пила.xlsx');
    XL.ActiveWorkBook.WorkSheets[1].Select;
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where ([IdГП]=' + #39 + GP + #39 + ') and (Пила=' + #39 + 'True' + #39 + ')  ', ['Специф710']) then
      exit;
    for x := 0 to Form1.ADOQuery1.RecordCount - 1 do
    begin
      Obozn := Form1.ADOQuery1.FieldByName('Обозначение').AsString;
      Nam_Det := Form1.ADOQuery1.FieldByName('Элемент').AsString;
      Mat := Form1.ADOQuery1.FieldByName('Материал').AsString;
      Dlin := Form1.ADOQuery1.FieldByName('Длина').AsString;
      Kol_Det := Form1.ADOQuery1.FieldByName('Количество').AsInteger;
                //НОРМЫ
      if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where ([Обозначение]=' + #39 + Obozn + #39 + ')', ['СпецифОбщая']) then
        exit;
      nch := Form1.ADOQuery4.FieldByName('Н\чПила').AsFloat;
      nch_o := nch * (Kol_Det * Kol_I);
      N := StringReplace(FloatToStr(nch_o), ',', '.', [rfReplaceAll]);
      XL.ActiveWorkBook.WorkSheets[1].Cells[5 + x, 2] := IntToStr(x + 1);
      XL.ActiveWorkBook.WorkSheets[1].Cells[5 + x, 3] := Nam;
      XL.ActiveWorkBook.WorkSheets[1].Cells[5 + x, 4] := Nam_Det;
      XL.ActiveWorkBook.WorkSheets[1].Cells[5 + x, 5] := Dlin;
      XL.ActiveWorkBook.WorkSheets[1].Cells[5 + x, 6] := N;
      XL.ActiveWorkBook.WorkSheets[1].Cells[5 + x, 7] := IntToStr(Kol_Det * Kol_I);
      XL.ActiveWorkBook.WorkSheets[1].Cells[5 + x, 8] := Mat;
      XL.ActiveWorkBook.WorkSheets[1].Cells[5 + x, 9] := Obozn;

      Form1.ADOQuery1.Next;
    end;
    XL.ActiveWorkBook.WorkSheets[1].Cells[2, 5] := GP;
    XL.ActiveWorkBook.WorkSheets[1].Cells[2, 9] := Zak;
    XL.ActiveWorkBook.WorkSheets[1].SaveAs(Dir + '\' + Dat + '-' + Nam + '.xlsx');
  end;

  XL.Visible := True;
  XL := UnAssigned;
end;

procedure TForm1.N53Click(Sender: TObject);
begin
  FGIBKA.ShowModal;
end;

procedure TForm1.N54Click(Sender: TObject);
begin
  FSborNCH.Show;
  FSborNCH.btndt1.Text := StringGrid10.Cells[I_FN_NAM, StringGrid10.Row];
  FSborNCH.btn7.Click;
end;

procedure TForm1.N55Click(Sender: TObject);
begin
  FSborNCH.Show;
  FSborNCH.btndt1.Text := SGL.Cells[I_FN_NAM, SGL.Row];
  FSborNCH.btn7.Click;
end;

procedure TForm1.N56Click(Sender: TObject);
var
  XL2: Variant;
  E, i, J, X, X1, X2, Res, Priv, Kol_Zap, Kount: Integer;
  Vn_DAt, Dir, God, mes, Nom, Priv_Str, IDGP, Idko, OboznSh, Obozn: string;
  ar: array[0..7750, 0..6] of string;
  Ar1: array[0..10500, 0..12] of string;
  Ar2: array of array of string;
  SR: TSearchRec; // поисковая переменная
  FindRes: Integer; // переменная для записи результата поиска
  Str, Dir_Ser, Str1, Str2, Str3, fileName, fullFilePath, Put: string;
  h: hwnd;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
  X2 := SGL.Row;
  IDGP := SGL.Cells[I_FN_SGP + 2, X2];
  Idko := SGL.Cells[I_FN_SGP + 8, X2];
  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + IDGP + #39 + ') AND (IdКО=' + #39 + Idko + #39 + ') AND  (Отмена IS NULL) Order By Заказ ', ['KlapanaZap']) then
    exit;
  Kount := ADOQuery2.RecordCount;
  if Form1.ADOQuery2.RecordCount <> 0 then
  begin

    for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
    begin
      ar[i, 0] := Form1.ADOQuery2.FieldByName('Заказ').AsString;
      ar[i, 1] := Form1.ADOQuery2.FieldByName('Кол во').AsString;
      ar[i, 2] := Nom;
      ar[i, 3] := Form1.ADOQuery2.FieldByName('Изделие').AsString;
      ar[i, 4] := Form1.ADOQuery2.FieldByName('МодПривода').AsString;
      ar[i, 5] := Form1.ADOQuery2.FieldByName('IdГП').AsString;
      ar[i, 6] := Form1.ADOQuery2.FieldByName('IdКО').AsString;
      Form1.ADOQuery2.Next;
    end;
  end;
  for i := 0 to Kount do
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + ar[i, 5] + #39 + ') AND (IDКО=' + #39 + ar[i, 6] + #39 + ') AND (ВидЭлемента=' + #39 + 'Детали' + #39 + ') Order By Обозначение ', ['СпецифВозд']) then
      exit;

    if ar[i, 1] = '' then
      Kol_Zap := 0
    else
      Kol_Zap := StrToInt(ar[i, 1]);
                //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    for J := 0 to ADOQuery2.RecordCount do
    begin

      OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
                                   // or (Ножницы='+#39+'True'+#39+')
      if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение=' + #39 + OboznSh + #39 + ') AND ((Trumph=' + #39 + 'True' + #39 + ') ) AND (Технолог=' + #39 + 'True' + #39 + ')  ', ['СпецифОбщая']) then
        exit;
      if ADOQuery4.RecordCount <> 0 then
      begin

        Ar1[X, 0] := ADOQuery2.FieldByName('Количество').AsString;
        Obozn := ADOQuery4.FieldByName('Обозначение').AsString;
        Ar1[X, 1] := ADOQuery2.FieldByName('Обозначение').AsString;
        Ar1[X, 2] := ADOQuery2.FieldByName('Элемент').AsString;
        Ar1[X, 3] := ADOQuery2.FieldByName('Изделие').AsString;
        Ar1[X, 4] := ADOQuery2.FieldByName('Длина').AsString;
        Ar1[X, 5] := ADOQuery2.FieldByName('Ширина').AsString;
        Ar1[X, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
        Ar1[X, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
        Ar1[X, 8] := ADOQuery2.FieldByName('Заказ').AsString;
        Ar1[X, 9] := ADOQuery2.FieldByName('IDГП').AsString;
        Ar1[X, 10] := ADOQuery2.FieldByName('Материал').AsString;
        Ar1[X, 11] := ADOQuery2.FieldByName('IDКО').AsString;
        Inc(X);
      end;
      Form1.ADOQuery2.Next;
    end;
  end;

        //-----------------------------------------------
  Memo7.Lines.Clear;
  Memo15.Lines.Clear;
  for i := 0 to High(Ar1) do
  begin
    if Ar1[E, 3] = '' then
      Break;

                //+++++++++++++++++++
    Str := Ar1[E, 1]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
                //+++++++++++++++++++
    Str := ConvertRus(Str);
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str1 := StringReplace(Str1, ' ', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo7.Lines.Add(Str3);
    Memo15.Lines.Add(Ar1[E, 8] + '  ' + Ar1[E, 3]);
    Inc(E);
  end;

  Memo9.Clear;
  Memo8.Clear;
  for i := 0 to Memo7.Lines.Count - 0 do
  begin
    F := 0;
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Клапаны\Воздушные';
    if Memo7.Lines.Strings[i] <> '' then
      fileName := Memo7.Lines.Strings[i] + '.dxf';
    fullFilePath := FileSearch(fileName, Dir_Ser);
    if fullFilePath <> '' then
    begin
      Memo9.Lines.Add(fullFilePath);
      CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
    end
    else
    begin
      Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
    end;
  end;
  if Memo8.Lines.Strings[0] <> '' then
  begin
    Memo8.Lines.SaveToFile('123.txt');
    Str := ExtractFileDir(ParamStr(0)) + '\123.txt';
    ShellExecute(Form1.Handle, nil, PChar(Str), nil, nil, SW_SHOWNORMAL);
  end;
end;

procedure TForm1.N58Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Легион]=' + #39 + 'True' + #39 + ' WHERE ([IDГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39 + ') And ([IDКО]=' + #39 + StringGrid10.Cells[I_FN_SGP + 3, StringGrid10.Row] + #39 + ')', ['Klapana']) then
    Exit;

  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Легион]=' + #39 + 'True' + #39 + ' WHERE ([IDГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39 + ') And ([IDКО]=' + #39 + StringGrid10.Cells[I_FN_SGP + 3, StringGrid10.Row] + #39 + ')', ['Запуск']) then
    Exit;
end;

procedure TForm1.N59Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Легион]=' + #39 + 'False' + #39 + ' WHERE ([IDГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39 + ') And ([IDКО]=' + #39 + StringGrid10.Cells[I_FN_SGP + 3, StringGrid10.Row] + #39 + ')', ['Klapana']) then
    Exit;
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Легион]=' + #39 + 'False' + #39 + ' WHERE ([IDГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39 + ') And ([IDКО]=' + #39 + StringGrid10.Cells[I_FN_SGP + 3, StringGrid10.Row] + #39 + ')', ['Запуск']) then
    Exit;
end;

function GetUserFromWindows: string;
var
  UserName: string;
  UserNameLen: Dword;
begin
  UserNameLen := 255;
  SetLength(UserName, UserNameLen);
  if GetUserName(PChar(UserName), UserNameLen) then
    Result := Copy(UserName, 1, UserNameLen - 1)
  else
    Result := 'Unknown';
end;

const
  xlPageBreakPreview = 2;

procedure TForm1.Button16Click(Sender: TObject);
var
  I, Col1, Col2, God, Mes: Integer;
  Date1: TDate;
  Dat, Dat1, S, DatTimS, Zag_got, Betwe1, EM, EM1: string;
  DatTim: TDateTime;
  pBytesReturned: Cardinal;
  ppBuffer: PChar;
  BarcodeWidth, BarcodeHeight, SymbolWidth, SymbolHeight: Integer;
  R1: Double;
begin
   { Randomize;
    R1:=( RandomRange(1,10));
       R1:=R1/100;
 Edit3.Text:=FloatToStr( R1);  }
  DatTim := NoW;
  DatTimS := DateTimeToStr(DatTim);
  Memo2.Lines.Add('List1  ' + DatTimS);

  if Order = '' then
    Order := ' AND (пр=' + #39 + 'МИ' + #39 + ')  ORDER BY Номер'
  else
    Order := ' AND (пр=' + #39 + 'МИ' + #39 + ')' + Order;
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  if ((ComboBox14.ItemIndex = 0) or (ComboBox14.ItemIndex = -1) or (ComboBox14.Text = '')) and (ComboBox13.ItemIndex <> 0) and (ComboBox13.Text <> '') then
  begin
    if ComboBox13.ItemIndex = -1 then
      God := StrToInt(ComboBox13.Text)
    else
      God := StrToInt(ComboBox13.Items[ComboBox13.ItemIndex]);
    Dat := '12.31.' + IntToStr(God - 1);
    Dat1 := '12.31.' + IntToStr(God);
    Betwe1 := ' AND (Дата BETWEEN ' + #39 + Dat + #39 + ' AND ' + #39 + Dat1 + #39 + ') ';
  end;
  if (ComboBox13.ItemIndex <> 0) and (ComboBox13.Text <> '') and (ComboBox14.ItemIndex <> 0) and (ComboBox14.ItemIndex <> -1) and (ComboBox14.Text <> '') then
  begin
    if ComboBox13.ItemIndex = -1 then
      God := StrToInt(ComboBox13.Text)
    else
      God := StrToInt(ComboBox13.Items[ComboBox13.ItemIndex]);
    Mes := ComboBox14.ItemIndex;
    Dat := IntToStr(Mes) + '.01' + '.' + IntToStr(God);
    if Mes = 12 then
      Dat1 := '01.01.' + IntToStr(God + 1)
    else
    begin
      if (Mes + 1) < 10 then
        Dat1 := '0' + IntToStr(Mes + 1) + '.01.' + IntToStr(God)
      else
        Dat1 := IntToStr(Mes + 1) + '.01.' + IntToStr(God);
    end;
    Betwe1 := ' AND (Дата>= ' + #39 + Dat + #39 + ' AND Дата<' + #39 + Dat1 + #39 + ') ';
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if (ComboBox4.ItemIndex = 0) or (ComboBox4.ItemIndex = -1) then
  begin
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where (Х IS NULL)  AND (Отмена IS NULL)' + Betwe1 + Order, ['Klapana']) then
      exit;
  end;
        //=============================================================================== Не обработанные технологом
  if (ComboBox4.ItemIndex = 1) then
  begin
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where ([' + FN_TEHNOLOG + '] IS NULL)  AND (Х IS NULL) AND (Отмена IS NULL) ' + Betwe1 + Order, ['Klapana']) then
      exit;
  end;
        //===============================================================================Не обработанные программистом
  if (ComboBox4.ItemIndex = 2) then
  begin
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where (NOT [' + FN_TEHNOLOG + '] IS NULL) AND ([' + FN_TEHNOLOG_GOTOV + '] IS NULL )  AND (Х IS NULL) AND (Отмена IS NULL)' + Order, ['Klapana']) then
      exit;
  end;

        //===============================================================================Сформированные
  if (ComboBox4.ItemIndex = 3) then
  begin
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where' + '([' + FN_ZAG_ZAP + '] IS NULL) AND ([' + FN_ZAG_GOT + '] IS NULL) AND  (Номер<>0) AND (Х IS NULL) AND (Отмена IS NULL) AND (пр=' + #39 + 'МИ' + #39 + ') AND (Отмена IS NULL)' + Order, ['Klapana']) then
      exit;
  end;
        //===============================================================================не Сформированные
  if (ComboBox4.ItemIndex = 4) then
  begin
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where (([' + FN_KOL_ZAP + ']=0) OR ([' + FN_KOL_ZAP + ']<[' + FN_KOL + '] )) AND (Х IS NULL) AND (Отмена IS NULL) ' + Order, ['Klapana']) then
      exit;
  end;
        //===============================================================================не Запущен
  if (ComboBox4.ItemIndex = 5) then
  begin
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where ([Запуск]=0) AND ([Кол во запущенных]<>0) AND (Х IS NULL) AND (Отмена IS NULL)  ' + Order, ['Klapana']) then
      exit;
  end;
        //=============================================================================== Запущен на заготовку
  if (ComboBox4.ItemIndex = 6) then
  begin
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where ( [Запуск] <>0) AND (Х IS NULL) AND ( [Заготовка] <>0) AND (Отмена IS NULL) AND (ОТК is NULL) ' + Order, ['Klapana']) then
      exit;
  end;
        //=============================================================================== Запущен на сборку
  if (ComboBox4.ItemIndex = 7) then
  begin

    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where ( [Запуск1] <>0) AND ([Сборка] <>0) AND (Х IS NULL) AND (Отмена IS NULL) AND (ОТК is NULL) ' + Order, ['Klapana']) then
      exit;
  end;
        {//=============================================================================== Обработ ПДМ

0Все
1Не обработанные технологом
2Не обработанные программистом
3Сформированные
4Не сформированные
5Не запущенные
6Запущенные
7Запущенные(часть)
8Готовые
9Отмененые
10Не готовые
11Собранные
12Все+Старые
 }
        //=============================================================================== Готовые
  if (ComboBox4.ItemIndex = 8) then
  begin
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where ( [' + FN_SBOR + '] =0) AND (Х IS NULL) AND (Запуск1<>0) AND (Отмена IS NULL) ' + Order, ['Klapana']) then
      exit;
  end;
        //===============================================================================
  if (ComboBox4.ItemIndex = 9) then
  begin
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where  (Х IS NULL) AND (not Отмена IS NULL) ' + Order, ['Klapana']) then
      exit;
  end;
  if (ComboBox4.ItemIndex = 10) then //AND (Х IS NULL)          FN_SBOR_GOT
  begin
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where (Х IS NULL) AND (' + FN_PR_OTK + ' IS NULL) AND (Отмена IS NULL) ' + Order, ['Klapana']) then
      exit;
  end;
  if (ComboBox4.ItemIndex = 11) then
  begin
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where (NOT [' + FN_SBOR_GOT + '] IS NULL) AND ( [' + FN_PR_OTK + '] IS NULL) AND (Х IS NULL) AND (Отмена IS NULL) ' + Order, ['Klapana']) then
      exit;
  end;
  if (ComboBox4.ItemIndex = 12) then
  begin
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where NOT [Х] IS NULL' + Order, ['Klapana']) then
      exit;
  end;
  Dat := FormatDateTime('mm.dd.yyyy', Now);
  if (ComboBox4.ItemIndex = 13) then
  begin
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where (Х IS NULL) AND (Отмена IS NULL) AND ([' + FN_PLAN_DATA + ']<' + #39 + Dat + #39 + ') AND (([Заготовка]<>' + #39 + '0' + #39 + ') OR ([Сборка]<>' + #39 + '0' + #39 + ')) ' + Order, ['Klapana']) then
      exit;
  end;

  if (ComboBox4.ItemIndex = 14) then //Новый клапан
  begin
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where (Х IS NULL) AND (Отмена IS NULL) AND ([' + FN_ZAKAZCHIK + ']<>' + #39 + #39 + ') ' + Order, ['Klapana']) then
      exit;
  end;
//+++++++++++++++++++++++++++++++++++++++++++++++++++
  if (ComboBox4.ItemIndex = 15) then //Первый прогон
  begin
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where (Х IS NULL) AND (Отмена IS NULL) AND ([' + FN_SGP + ']<>' + #39 + #39 + ') ' + Order, ['Klapana']) then
      exit;
  end;
//+++++++++++++++++++++++++++++++++++++++++++++++++++
  if (ComboBox4.ItemIndex = 16) then //Второй прогон
  begin
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where (Х IS NULL) AND (Отмена IS NULL) AND ([№Поз]<>' + #39 + #39 + ')' + 'AND ([' + FN_SGP + ']<>' + #39 + #39 + ')' + Order, ['Klapana']) then
      exit;
  end;
//+++++++++++++++++++++++++++++++++++++++++++++++++++
  if (ComboBox4.ItemIndex = 17) then //Второй прогон не прошел
  begin
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where (Х IS NULL) AND (Отмена IS NULL) AND ([№Поз]<>' + #39 + #39 + ')' + ' AND ([' + FN_SGP + ']=' + #39 + #39 + ')' + Order, ['Klapana']) then
      exit;
  end;
  //====================
  if chk3.Checked then
  begin
    EM := ' AND (МодПривода Like ' + #39 + 'Электромагнит%' + #39 + ') AND (Изделие Like ' + #39 + '%ГЕРМИК-ДУ%' + #39 + ')';
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where (Х IS NULL) %s AND (Отмена IS NULL)' + Betwe1 + Order, ['Klapana', EM]) then
      exit;
  end;
  //==========
  if chk7.Checked then
  begin
    EM1 := ' AND (Изделие Like ' + #39 + '%Канал%' + #39 + ')';
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where (Х IS NULL) %s AND (Отмена IS NULL)' + Betwe1 + Order, ['Klapana', EM1]) then
      exit;
  end;
  if Poisk_Vosd = 1 then
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where %s AND (Х IS NULL) ', ['Klapana', Str_SQL_Poisk]) then
      exit;
  Str_SQL_Poisk := '';
  Poisk_Vosd := 0;
  StringGrid10.ColCount := 20;
  StringGrid10.Cells[0, 0] := '№';
  StringGrid10.ColWidths[0] := 20;
  StringGrid10.Cells[I_FN_DAT, 0] := FN_DAT;
  StringGrid10.Cells[I_FN_ZAK, 0] := FN_ZAK;
  StringGrid10.Cells[I_FN_KOL, 0] := FN_KOL;
  StringGrid10.Cells[I_FN_KOL_ZAP, 0] := 'в пакете';
  StringGrid10.Cells[I_FN_NAM, 0] := FN_NAM;
  StringGrid10.Cells[I_FN_A, 0] := FN_A;
  StringGrid10.Cells[I_FN_B, 0] := FN_B;
  StringGrid10.ColWidths[I_FN_A] := 0;
  StringGrid10.ColWidths[I_FN_B] := 0;
  StringGrid10.Cells[I_FN_MOD_PRIVOD, 0] := FN_MOD_PRIVOD;
  StringGrid10.Cells[I_FN_PLAN_DATA, 0] := FN_PLAN_DATA;
  StringGrid10.Cells[I_FN_PLAN_NED, 0] := FN_PLAN_NED;
  StringGrid10.Cells[I_FN_ZAKAZCHIK, 0] := 'Б\З';
  StringGrid10.Cells[I_FN_PR, 0] := FN_PR;
  StringGrid10.Cells[I_FN_SGP, 0] := FN_SGP;
  StringGrid10.ColWidths[I_FN_SGP] := 0;
  StringGrid10.Cells[I_FN_SGP + 1, 0] := 'КТО';
  StringGrid10.ColWidths[I_FN_SGP + 1] := 0;
  StringGrid10.Cells[I_FN_SGP + 2, 0] := 'IdГП';
  StringGrid10.ColWidths[I_FN_SGP + 2] := 20;
  StringGrid10.Cells[I_FN_SGP + 3, 0] := 'IdКО';
  StringGrid10.ColWidths[I_FN_SGP + 3] := 20;
  StringGrid10.Cells[I_FN_SGP + 4, 0] := 'Легион';
  StringGrid10.Cells[I_FN_SGP + 5, 0] := 'bz';
  StringGrid10.Cells[I_FN_SGP + 6, 0] := 'СтатусФ';
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++SG6
            //
  SG6.ColCount := 33;
  SG6.Cells[I_FN_NOM, 0] := 'Номер раз';
  SG6.Cells[I_FN_RAS_DATA_GOTOVN, 0] := FN_RAS_DATA_GOTOVN;
  SG6.Cells[I_FN_BRIKET, 0] := 'Кол-во Приводов';
  SG6.Cells[I_FN_TEHNOLOG, 0] := FN_TEHNOLOG;
  SG6.Cells[I_FN_TEHNOLOG_GOTOV, 0] := FN_TEHNOLOG_GOTOV;
  SG6.Cells[I_FN_TEHNOLOG_PRIM, 0] := FN_TEHNOLOG_PRIM;
  SG6.Cells[I_FN_ZAG_ZAP, 0] := FN_ZAG_ZAP;
  SG6.Cells[I_FN_ZAG, 0] := FN_ZAG;
  SG6.Cells[I_FN_SBOR_ZAP, 0] := FN_SBOR_ZAP;
  SG6.Cells[I_FN_SBOR, 0] := FN_SBOR;
  SG6.Cells[I_FN_SBOR_PRIM, 0] := FN_SBOR_PRIM;
  SG6.Cells[I_FN_PR_OTK, 0] := FN_PR_OTK;
  SG6.Cells[I_FN_PR_OTK_PRIM, 0] := FN_PR_OTK_PRIM;
  SG6.Cells[I_FN_DAT_OTGRUZ, 0] := FN_DAT_OTGRUZ;
  SG6.Cells[I_FN_OSOBEN, 0] := FN_OSOBEN;
  SG6.ColWidths[I_FN_OSOBEN] := 0;
  SG6.Cells[I_FN_SBOR_KLAP_NC, 0] := 'Сборка1'; //FN_SBOR_KLAP_NC;
  SG6.Cells[I_FN_SVARKA_NC, 0] := 'Сборка2'; //FN_SVARKA_NC;

  SG6.Cells[I_FN_KOL_RAZ, 0] := FN_KOL_RAZ;
  SG6.Cells[I_FN_NOMER_RAZ, 0] := FN_NOM;
  SG6.Cells[I_FN_OTMENA, 0] := FN_OTMENA;
  SG6.Cells[I_FN_OTMENA + 1, 0] := 'Статус';
  SG6.Cells[I_FN_OTMENA + 2, 0] := FN_RASKR_LOP;
  SG6.Cells[I_FN_OTMENA + 3, 0] := 'СтатусНормы';
  SG6.Cells[I_FN_OTMENA + 4, 0] := 'Сборка лопаток';
  SG6.Cells[I_FN_OTMENA + 5, 0] := 'Сборка Корпуса';
  SG6.Cells[I_FN_OTMENA + 6, 0] := 'Гибка';
  SG6.Cells[I_FN_OTMENA + 7, 0] := 'Ножницы';
  SG6.Cells[I_FN_OTMENA + 8, 0] := 'Пила';
  SG6.Cells[I_FN_OTMENA + 9, 0] := 'СборкаРЕШ';
  SG6.Cells[I_FN_OTMENA + 10, 0] := 'Электро';
  SG6.ColWidths[6] := 0;
  SG6.ColWidths[8] := 0;
  SG6.ColWidths[9] := 0;
  SG6.ColWidths[11] := 0;
  SG6.ColWidths[21] := 0;
  SG6.ColWidths[19] := 0;
  SG6.ColWidths[20] := 0;
  SG6.ColWidths[23] := 0;
  SG6.ColWidths[22] := 0;
  SG6.ColWidths[25] := 0;
  SG6.ColWidths[26] := 0;
  SG6.ColWidths[27] := 0;
  SG6.ColWidths[28] := 0;
  SG6.ColWidths[29] := 0;
  SG6.ColWidths[30] := 0;
  SG6.ColWidths[I_FN_OTMENA + 2] := 0;
  SG6.ColWidths[I_FN_OTMENA + 4] := 40;
  SG6.ColWidths[I_FN_OTMENA + 5] := 40;
  if ADOQuery1.RecordCount = 0 then
  begin
    Clear_StringGrid(StringGrid10);
    StringGrid10.RowCount := 2;
    Clear_StringGrid(StringGrid9);
    StringGrid9.RowCount := 2;
    Clear_StringGrid(SG6);
    SG6.RowCount := 2;
    exit;
  end;

  StatusBar1.Panels[2].Text := IntToStr(ADOQuery1.RecordCount);
  StringGrid10.RowCount := ADOQuery1.RecordCount + 1;
  StringGrid9.RowCount := ADOQuery1.RecordCount + 1;
  SG6.RowCount := ADOQuery1.RecordCount + 1;
  StringGrid10.FixedRows := 1;
  StringGrid9.FixedRows := 1;
  SG6.FixedRows := 1;
        // Clear_StringGrid(StringGrid9);
  ADOQuery1.First;
  for I := 0 to ADOQuery1.RecordCount do
  begin
    StringGrid10.Cells[0, I + 1] := IntToStr(I + 1);

    StringGrid10.Cells[I_FN_DAT, I + 1] := ADOQuery1.FieldByName(FN_DAT).AsString;
    StringGrid10.Cells[I_FN_ZAK, I + 1] := ADOQuery1.FieldByName(FN_ZAK).AsString;
    StringGrid10.Cells[I_FN_KOL, I + 1] := ADOQuery1.FieldByName(FN_KOL).AsString;
    StringGrid10.Cells[I_FN_KOL_ZAP, I + 1] := ADOQuery1.FieldByName(FN_KOL_ZAP).AsString;
    StringGrid10.Cells[I_FN_NAM, I + 1] := ADOQuery1.FieldByName(FN_NAM).AsString;
    StringGrid10.Cells[I_FN_A, I + 1] := ADOQuery1.FieldByName(FN_A).AsString;
    StringGrid10.Cells[I_FN_B, I + 1] := ADOQuery1.FieldByName(FN_B).AsString;
    StringGrid10.Cells[I_FN_MOD_PRIVOD, I + 1] := ADOQuery1.FieldByName(FN_MOD_PRIVOD).AsString;
    StringGrid10.Cells[I_FN_PLAN_DATA, I + 1] := ADOQuery1.FieldByName(FN_PLAN_DATA).AsString;
    StringGrid10.Cells[I_FN_PLAN_NED, I + 1] := ADOQuery1.FieldByName(FN_PLAN_NED).AsString;
    StringGrid10.Cells[I_FN_ZAKAZCHIK, I + 1] := ADOQuery1.FieldByName('БЗ').AsString;
    StringGrid10.Cells[I_FN_PR, I + 1] := ADOQuery1.FieldByName(FN_PR).AsString;
    StringGrid10.Cells[I_FN_SGP, I + 1] := ADOQuery1.FieldByName(FN_SGP).AsString; //ПДО
    StringGrid10.Cells[I_FN_SGP + 1, I + 1] := ADOQuery1.FieldByName('№Поз').AsString; //KTO
    StringGrid10.Cells[I_FN_SGP + 2, I + 1] := ADOQuery1.FieldByName('IdГП').AsString;
    StringGrid10.Cells[I_FN_SGP + 3, I + 1] := ADOQuery1.FieldByName('IdКО').AsString;
    StringGrid10.Cells[I_FN_SGP + 4, I + 1] := ADOQuery1.FieldByName('Легион').AsString;
    StringGrid10.Cells[I_FN_SGP + 5, I + 1] := ADOQuery1.FieldByName('bz').AsString;
    StringGrid10.Cells[I_FN_SGP + 6, I + 1] := ADOQuery1.FieldByName('СтатусФ').AsString;
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++SG6
    SG6.Cells[I_FN_NOM, I + 1] := ADOQuery1.FieldByName(FN_NOMER_RAZ).AsString;
    SG6.Cells[I_FN_RAS_DATA_GOTOVN, I + 1] := ADOQuery1.FieldByName(FN_RAS_DATA_GOTOVN).AsString;
    SG6.Cells[I_FN_BRIKET, I + 1] := ADOQuery1.FieldByName('Привод').AsString;
    S := ADOQuery1.FieldByName(FN_TEHNOLOG).AsString;
    SG6.Cells[I_FN_TEHNOLOG, I + 1] := ADOQuery1.FieldByName(FN_TEHNOLOG).AsString;
    SG6.Cells[I_FN_TEHNOLOG_GOTOV, I + 1] := ADOQuery1.FieldByName(FN_TEHNOLOG_GOTOV).AsString;
    SG6.Cells[I_FN_TEHNOLOG_PRIM, I + 1] := ADOQuery1.FieldByName(FN_TEHNOLOG_PRIM).AsString;
    SG6.Cells[I_FN_ZAG_ZAP, I + 1] := ADOQuery1.FieldByName(FN_ZAG_ZAP).AsString;
    SG6.Cells[I_FN_ZAG, I + 1] := ADOQuery1.FieldByName('Запуск').AsString + '/' + ADOQuery1.FieldByName(FN_ZAG).AsString;
    SG6.Cells[I_FN_SBOR_ZAP, I + 1] := ADOQuery1.FieldByName(FN_SBOR_ZAP).AsString;
    SG6.Cells[I_FN_SBOR, I + 1] := ADOQuery1.FieldByName('Запуск1').AsString + '/' + ADOQuery1.FieldByName(FN_SBOR).AsString;
    SG6.Cells[I_FN_SBOR_PRIM, I + 1] := ADOQuery1.FieldByName(FN_SBOR_PRIM).AsString;
    SG6.Cells[I_FN_PR_OTK, I + 1] := ADOQuery1.FieldByName(FN_PR_OTK).AsString;
    SG6.Cells[I_FN_PR_OTK_PRIM, I + 1] := ADOQuery1.FieldByName(FN_PR_OTK_PRIM).AsString;
    SG6.Cells[I_FN_DAT_OTGRUZ, I + 1] := ADOQuery1.FieldByName('Упаковка').AsString;

    SG6.Cells[I_FN_OSOBEN, I + 1] := ADOQuery1.FieldByName(FN_OSOBEN).AsString;
    SG6.Cells[I_FN_SBOR_KLAP_NC, I + 1] := ADOQuery1.FieldByName(FN_SBOR_KLAP_NC).AsString;
    SG6.Cells[I_FN_SVARKA_NC, I + 1] := ADOQuery1.FieldByName(FN_SVARKA_NC).AsString;
    SG6.Cells[I_FN_KOL_RAZ, I + 1] := ADOQuery1.FieldByName(FN_KOL_RAZ).AsString;
    SG6.Cells[I_FN_NOMER_RAZ, I + 1] := ADOQuery1.FieldByName(FN_NOM).AsString;
    SG6.Cells[I_FN_OTMENA, I + 1] := ADOQuery1.FieldByName(FN_OTMENA).AsString;
    SG6.Cells[I_FN_OTMENA + 1, I + 1] := ADOQuery1.FieldByName('Статус').AsString;
    SG6.Cells[I_FN_OTMENA + 2, I + 1] := ADOQuery1.FieldByName(FN_RASKR_LOP).AsString;
    SG6.Cells[I_FN_OTMENA + 3, I + 1] := ADOQuery1.FieldByName('СтатусНормы').AsString;
    SG6.Cells[I_FN_OTMENA + 4, I + 1] := ADOQuery1.FieldByName('Сборка лопаток').AsString;
    SG6.Cells[I_FN_OTMENA + 5, I + 1] := ADOQuery1.FieldByName('Сборка тяг').AsString;
    SG6.Cells[I_FN_OTMENA + 6, I + 1] := ADOQuery1.FieldByName('Гибка').AsString;
    SG6.Cells[I_FN_OTMENA + 7, I + 1] := ADOQuery1.FieldByName('Ножницы').AsString;
    SG6.Cells[I_FN_OTMENA + 8, I + 1] := ADOQuery1.FieldByName('Пила').AsString;
    SG6.Cells[I_FN_OTMENA + 9, I + 1] := ADOQuery1.FieldByName('СборкаРеш').AsString;
    SG6.Cells[I_FN_OTMENA + 10, I + 1] := ADOQuery1.FieldByName('Электро').AsString;
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++SG6
    ADOQuery1.Next;
  end;

  if not mkQuerySelect(ADOQuery1, 'Select Х from %s Where (Х IS NULL) AND (Отмена IS NULL) AND ([' + FN_ZAKAZCHIK + ']<>' + #39 + #39 + ') ' + Order, ['Klapana']) then
    exit;
  Label106.Caption := IntToStr(ADOQuery1.RecordCount);
end;

procedure TForm1.TabSheet0Show(Sender: TObject);
begin
  Panel1.Visible := True;
  ComboBox4.ItemIndex := 10;
        //Button16.Click;
end;

procedure TForm1.CheckBox3Click(Sender: TObject);
var
  I, Res: integer;
  Nom_Pos, Str: string;
begin
  if CheckBox3.Checked = True then
  begin
    StringGrid9.Cells[0, CheckARow9] := 'V';

  end;
  if CheckBox3.Checked = False then
  begin
    StringGrid9.Cells[0, CheckARow9] := '';

  end;

end;

procedure TForm1.CheckBox3Exit(Sender: TObject);
var
  Sbor, Svar, Sbor_Sum, Svar_Sum, Sv0, Sb0: Double;
begin
  try
    if StringGrid9.Cells[0, CheckARow9] = 'V' then
    begin

                        {Svar:=StrToFloat(SG6.Cells[I_FN_SVARKA_NC-14,CheckARow9]);
                        Sbor:=StrToFloat(SG6.Cells[I_FN_SBOR_KLAP_NC-14,CheckARow9]);
                        //Svar_Sum:=StrToFloat(Label4.Caption);
                        //Sbor_Sum:=StrToFloat(Label6.Caption);
                        Svar_Sum:=Svar_Sum+ Svar;
                        Sbor_Sum:=Sbor_Sum+ Sbor;
                        //Label4.Caption:=FloatToStr(Svar_Sum);
                        //Label6.Caption:=FloatToStr(Sbor_Sum);

                     End;
                     if StringGrid9.Cells[0,CheckARow9]='' Then
                     Begin
                          StringGrid9.Cells[0,CheckARow9]:='';
                        Svar:=StrToFloat(SG6.Cells[I_FN_SVARKA_NC-14,CheckARow9]);
                        Sbor:=StrToFloat(SG6.Cells[I_FN_SBOR_KLAP_NC-14,CheckARow9]);
                        Svar_Sum:=StrToFloat(Label4.Caption);
                        Sbor_Sum:=StrToFloat(Label6.Caption);
                        //if Svar_Sum<>0 Then
                        //Begin
                             Svar_Sum:=Svar_Sum- Svar;
                             Sbor_Sum:=Sbor_Sum- Sbor;
                             Label4.Caption:=FloatToStr(Svar_Sum);
                             Label6.Caption:=FloatToStr(Sbor_Sum);
                       // End;  }
    end;
    CheckBox3.Visible := False;
  except
    MessageDlg('Не удалось подключиться к базе данных6!', mtError, [mbOk], 0);
  end;
end;

procedure TForm1.StringGrid9SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
var
  R: TRect;
  I, Res: Integer;
  Str: string;
begin
  try
    if ((ACol = 0) and (ARow > 0)) then
    begin
      CheckACol9 := ACol;
      CheckARow9 := ARow;
      R := StringGrid9.CellRect(ACol, ARow);
      R.Left := R.Left + StringGrid9.Left;
      R.Right := R.Right + StringGrid9.Left;
      R.Top := R.Top + StringGrid9.Top;
      R.Bottom := R.Bottom + StringGrid9.Top;
      CheckBox3.Left := R.Left + 1;
      CheckBox3.Top := R.Top + 1;
      CheckBox3.Width := (R.Right + 1) - R.Left;
      CheckBox3.Height := (R.Bottom + 1) - R.Top;
      CheckBox3.Visible := True;
      if StringGrid9.Cells[ACol, ARow] <> '' then
      begin
        CheckBox3.Checked := True;

      end
      else
      begin
        CheckBox3.Checked := False;

      end;
    end;
    FSelectRow(StringGrid10, ARow);
    FSelectRow(SG6, ARow);
  except
    MessageDlg('Не удалось подключиться к базе данных7!', mtError, [mbOk], 0);
  end;
end;

procedure TForm1.StringGrid10TopLeftChanged(Sender: TObject);
begin
  try
    StringGrid9.TopRow := StringGrid10.TopRow;
    SG6.TopRow := StringGrid10.TopRow;
  except
    MessageDlg('Не удалось подключиться к базе данных8!', mtError, [mbOk], 0);
  end;
end;

procedure TForm1.StringGrid9TopLeftChanged(Sender: TObject);
begin
  try
    StringGrid10.TopRow := StringGrid9.TopRow;
    SG6.TopRow := StringGrid9.TopRow;
  except
    MessageDlg('Не удалось подключиться к базе данных9!', mtError, [mbOk], 0);
  end;
end;

procedure TForm1.StringGrid10DblClick(Sender: TObject);
var
  Nom_pos, S, Nomer_Raz, Kol_Raz, God, Mes, Zakaz, Dat_s: string;
  kol_zap, kol, kol1, A, B, D, y, F_KPU, F_KPD, Kol_Dn, Pos1: Integer;
  XL, XL1, XL2: Variant;
  Dat: TDate;
begin
  if (StringGrid10.Col = I_FN_NAM) then
  begin
    Spec := 0;
    FSpec.Label1.Caption := '';
    FSpec.Caption := StringGrid10.Cells[I_FN_NAM, StringGrid10.Row];
    FSpec.Label1.Caption := StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row];
    FSpec.Lbl1.Caption := StringGrid10.Cells[I_FN_SGP + 3, StringGrid10.Row];
    Pos1 := AnsiCompareStr('0', StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row]);
    FSpec.Label2.Caption := '0';
    if Pos1 <> 0 then
      FSpec.ShowModal;
  end;
  if (StringGrid10.Col = I_FN_ZAK) then
  begin
    Memo13.Lines.Clear;
    Nam_NC := StringGrid10.Cells[I_FN_NAM, StringGrid10.Row];
    Button17.Click;
  end;
  Vozduh := 1;
  if (StringGrid10.Col = I_FN_PLAN_DATA) then
  begin
    Dat_s := (StringGrid10.Cells[I_FN_PLAN_DATA, StringGrid10.Row]);

    Dat := StrToDate(Dat_s);
    Kol_Dn := (Trunc(Now) - Trunc(Dat));
    Kol_Dn := (Trunc(Now) - Trunc(Dat));
  end;
        //------------------------------------------------------------------
  kol := StrToInt(StringGrid10.Cells[I_FN_KOL, StringGrid10.Row]);
  S := StringGrid10.Cells[I_FN_KOL_ZAP, StringGrid10.Row];
  if S = '' then
    S := '0';
  kol_zap := StrToInt(S);
        //------------------------------------------------------------------
  if ((StringGrid10.Col = I_FN_A) or (StringGrid10.Col = I_FN_B)) and ((Regist.Doljnost = 1)
  or (Regist.Doljnost = 2) or (Regist.Doljnost = 3)) then
  begin

    FNomer.Caption := StringGrid10.Cells[I_FN_NAM, StringGrid10.Row];
    FNomer.Label2.Caption := StringGrid10.Cells[I_FN_ZAK, StringGrid10.Row];
    FNomer.Label3.Caption := StringGrid10.Cells[StringGrid10.Col, 0];
    FNomer.DateTimePicker1.Visible := False;
    FNomer.Label6.Visible := False;

    FNomer.ComboBox1.Visible := False;
    FNomer.ComboBox2.Visible := False;
    FNomer.Show;
  end;
        //------------------------------------------------------------------
  if (StringGrid10.Col = I_FN_MOD_PRIVOD) and ((Regist.Doljnost = 1) or (Regist.Doljnost = 2) or (Regist.Doljnost = 3)) then
  begin
    FNomer.Caption := StringGrid10.Cells[I_FN_NAM, StringGrid10.Row];
    FNomer.Label2.Caption := StringGrid10.Cells[I_FN_ZAK, StringGrid10.Row];
    FNomer.Label3.Caption := FN_MOD_PRIVOD;
    FNomer.DateTimePicker1.Visible := False;
    //
    FNomer.Label6.Visible := True;
    FNomer.Edit1.Visible := False;
    FNomer.ComboBox1.Visible := True;
    FNomer.ComboBox2.Visible := True;
    FNomer.Label4.Caption := IntToStr(StringGrid10.Row);
    FNomer.Label5.Caption := IntToStr(StringGrid10.Col);
    FNomer.Show;
  end;
  FNomer.Edit1.Text := StringGrid10.Cells[StringGrid10.Col, StringGrid10.Row];
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        //Диспетчер считает клапан не новым, снимает или Ставит галку
  if (StringGrid10.Col = I_FN_ZAKAZCHIK) and ((Regist.Doljnost = 1) or (Regist.Doljnost = 2) or (Regist.Doljnost = 4)) then
  begin

    if (StringGrid10.Cells[I_FN_ZAKAZCHIK, StringGrid10.Row] = '') then
    begin
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [' + FN_ZAKAZCHIK + ']=' + #39 + 'V' + #39 + ',[ПДО]=' + #39 + 'V' + #39 + ' WHERE [IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39, ['Klapana']) then
        Exit;
      StringGrid10.Cells[I_FN_ZAKAZCHIK, StringGrid10.Row] := 'V';
      StringGrid10.Cells[I_FN_SGP, StringGrid10.Row] := 'V';
    end;
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Мастер Снимает запрет на остальные Клап
        //Если же Мастер поставил в КТО "V" , То снятие ПДО Значит сборка 2Го клап прошла с косяками (Тревога)
  if (StringGrid10.Col = I_FN_SGP) and ((Regist.Doljnost = 1) or (Regist.Doljnost = 4)) then
  begin
    if (StringGrid10.Cells[I_FN_SGP, StringGrid10.Row] = 'V') and (SG6.Cells[I_FN_NOM, SG6.Row] <> '') then
    begin
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [ПДО]=' + #39 + '' + #39 + ' WHERE [IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39, ['Klapana']) then
        Exit;
               //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [ПДО]=' + #39 + '' + #39 + ' WHERE [IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39, ['Запуск']) then
        Exit;
      StringGrid10.Cells[I_FN_SGP, StringGrid10.Row] := '';
    end;
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        //Мастер ставит для запуска
        //2Го клапана(2йПрогон) (1Й не прошел)
  if (StringGrid10.Col = I_FN_SGP + 1) and ((Regist.Doljnost = 1) or (Regist.Doljnost = 4)) then
  begin
    if (StringGrid10.Cells[I_FN_SGP, StringGrid10.Row] <> '') and (StringGrid10.Cells[I_FN_SGP + 1, StringGrid10.Row] = '') and (SG6.Cells[I_FN_NOM, SG6.Row] <> '') then
    begin
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [№Поз]=' + #39 + 'V' + #39 + ' WHERE [IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39, ['Klapana']) then
        Exit;
                        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [КТО]=' + #39 + 'V' + #39 + ' WHERE [IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39, ['Запуск']) then
        Exit;
      StringGrid10.Cells[I_FN_SGP + 1, StringGrid10.Row] := 'V';
    end;
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Все ОК
  if (StringGrid10.Col = I_FN_SGP + 1) and ((Regist.Doljnost = 1) or (Regist.Doljnost = 4)) then
  begin
    if (StringGrid10.Cells[I_FN_SGP, StringGrid10.Row] = '') and (StringGrid10.Cells[I_FN_SGP + 1, StringGrid10.Row] <> '') then
    begin
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [№Поз]=' + #39 + '' + #39 + ' WHERE [IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39, ['Klapana']) then
        Exit;
                        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [КТО]=' + #39 + '' + #39 + ' WHERE [IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39, ['Запуск']) then
        Exit;
      StringGrid10.Cells[I_FN_SGP + 1, StringGrid10.Row] := '';
    end;
  end;
end;

procedure TForm1.StringGrid10DrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
var
  H, Kol, Kol1, Res,Res1,Res2, Zag, Zap, Sbor, Zap1, Kol_Dn, Stat, StatF: Integer;
  Format: Word;
  C: array[0..255] of Char;
  Str: string;
  Dat, Dat_Plan: TDate;
  Nam:string;
begin
  StatF := 0;
  try
    Rect.Left := Rect.Left - 4;
    if ARow = 0 then
    begin
      H := DrawText(StringGrid10.Canvas.Handle, PChar(StringGrid10.Cells[ACol, ARow]), length(StringGrid10.Cells[ACol, ARow]), Rect, DT_WORDBREAK);
      if H > StringGrid10.RowHeights[ARow] then
      begin
        StringGrid10.RowHeights[ARow] := H;  //увеличиваем
        StringGrid9.RowHeights[ARow] := H;  //увеличиваем
        SG6.RowHeights[ARow] := H;  //увеличиваем
      end;
      Nam:=StringGrid10.Cells[I_FN_NAM, ARow];
      StringGrid10.Canvas.Brush.Color := clLtGray;
      StringGrid10.Canvas.FillRect(Rect);
      Inc(Rect.Top, 2);
      Dec(Rect.Bottom, 2);
      Inc(Rect.Left, 2);
      Dec(Rect.Right, 2);
      DrawText(StringGrid10.Canvas.Handle, pChar(StringGrid10.Cells[ACol, ARow]), Length(StringGrid10.Cells[ACol, ARow]), Rect, DT_LEFT or DT_WORDBREAK);
      if Sender = ActiveControl then
        Exit;
      if not (gdSelected in State) then
        Exit;
      with Sender as TStringGrid do
      begin
        Canvas.Brush.Color := clYellow;
        Canvas.Font.Color := Font.Color;
        Canvas.TextRect(Rect, Rect.Left + 2, Rect.Top + 2, Cells[ACol, ARow]);
      end;
    end;
    if (ACol = 0) then
    begin
      StringGrid10.canvas.brush.Color := RGB(255, 255, 255); //Белый
      StringGrid10.Canvas.FillRect(Rect);
      StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
    end;
    if (ARow > 0) and (ACol > 0) then
    begin
      if StringGrid10.Cells[I_FN_KOL, ARow] = '' then
        Kol := 0
      else
        Kol := StrToInt(StringGrid10.Cells[I_FN_KOL, ARow]);
      if StringGrid10.Cells[I_FN_KOL_ZAP, ARow] = '' then
        Kol1 := 0
      else
        Kol1 := StrToInt(StringGrid10.Cells[I_FN_KOL_ZAP, ARow]);

      if (Kol <> 0) then
      begin
        StringGrid10.canvas.brush.Color := RGB(247, 247, 26);
      //Желтый (Запущены не все)
        StringGrid10.Canvas.FillRect(Rect);
        StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
      end;
      if (Kol1 = 0) then
      begin
        StringGrid10.canvas.brush.Color := RGB(255, 255, 255); //Белый
        StringGrid10.Canvas.FillRect(Rect);
        StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
      end;
      Str := SG6.Cells[I_FN_ZAG, ARow];
      Res := Pos('/', Str);
      if Res <> 0 then
      begin
        Zag := StrToInt(Copy(Str, Res + 1, 4));
        Zap := StrToInt(Copy(Str, 1, Res - 1));
      end;
      if (Zag < Zap) or (Zag = Zap) and (Zag <> 0) then
      begin
        StringGrid10.canvas.brush.Color := RGB(183, 251, 132);
      //Салатовый (Запущены все)Заготовка Запуск
        StringGrid10.Canvas.Font.Color := clBlack;
        StringGrid10.Canvas.FillRect(Rect);
        StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
      end;
      Str := SG6.Cells[I_FN_SBOR, ARow];
      Res := Pos('/', Str);
      if Res <> 0 then
      begin
        Sbor := StrToInt(Copy(Str, Res + 1, 4));
        Zap1 := StrToInt(Copy(Str, 1, Res - 1));
      end;

      if (Zap1 <> 0) and ((Sbor = 0)) then
      begin
        StringGrid10.canvas.brush.Color := RGB(0, 255, 0); //Готовые
        StringGrid10.Canvas.Font.Color := clBlack;
        StringGrid10.Canvas.FillRect(Rect);
        StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
      end;
      if (SG6.Cells[I_FN_PR_OTK, ARow] <> '') and (Zap1 <> 0) and (Sbor = 0) then //Темно зеленый
      begin
        StringGrid10.canvas.brush.Color := RGB(0, 100, 0);
        StringGrid10.Canvas.Font.Color := clBlack;
        StringGrid10.Canvas.FillRect(Rect);
        StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
      end;
      if SG6.Cells[I_FN_DAT_OTGRUZ, ARow] <> '' then
      begin
        StringGrid10.canvas.brush.Color := RGB(100, 149, 237); //Отгруженные
        StringGrid10.Canvas.Font.Color := clBlack;
        StringGrid10.Canvas.FillRect(Rect);
        StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
      end;
      Res := Pos('МИ', StringGrid10.Cells[I_FN_PR, ARow]);
      if Res = 0 then
      begin
        StringGrid10.canvas.brush.Color := RGB(248, 82, 111); //Розовый
        StringGrid10.Canvas.FillRect(Rect);
        StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
      end;
      if StringGrid10.Cells[I_FN_PLAN_DATA, ARow] <> '' then
      begin
        Dat := StrToDate(StringGrid10.Cells[I_FN_PLAN_DATA, ARow]);
        Kol_Dn := (Trunc(Now) - Trunc(Dat));
                        // Плановая дата истекла

        if (Kol_Dn > 1) and ((Zag <> 0) or (Sbor <> 0)) and (ACol = 9) then
        begin
          StringGrid10.canvas.brush.Color := RGB(242, 12, 20); //Красный
          StringGrid10.Canvas.Font.Color := RGB(255, 255, 255); //Белый
          StringGrid10.Canvas.FillRect(Rect);
          StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
        end;

      end;
    end;
    Nam:=AnsiUpperCase(StringGrid10.Cells[I_FN_NAM, ARow]);
     Res:=Pos('-ВК-',Nam);
     Res1:=Pos('-В-',Nam);
     Res2:=Pos('-КК-',Nam);
    if (Res2 <> 0) and ((Res1 <> 0) or (Res <> 0)) and (ACol = I_FN_NAM) then
        begin
          StringGrid10.canvas.brush.Color := RGB(242, 12, 20); //Красный
          StringGrid10.Canvas.Font.Color := RGB(255, 255, 255); //Белый
          StringGrid10.Canvas.FillRect(Rect);
          StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
        end;
    if SG6.Cells[I_FN_OTMENA, ARow] <> '' then
    begin
      StringGrid10.canvas.brush.Color := RGB(128, 128, 128);
                        //Серый
      StringGrid10.Canvas.FillRect(Rect);
      StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
    end;
    if (SG6.Cells[I_FN_OTMENA + 1, ARow] = '') and (ARow > 0) then
      Stat := 0
    else if (ARow > 0) then
      Stat := StrToInt(SG6.Cells[I_FN_OTMENA + 1, ARow]);
    if (Stat = 1) then
    begin
                        //Серый
      StringGrid10.Canvas.Font.Style := [fsBold];
      StringGrid10.Canvas.FillRect(Rect);
      StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
    end;
    if StringGrid10.Cells[I_FN_SGP + 6, ARow] <> '' then
      StatF := StrToInt(StringGrid10.Cells[I_FN_SGP + 6, ARow]);
    if (StatF = 1) then
    begin
      StringGrid10.Canvas.Font.Style := [fsItalic] + [fsBold];
      StringGrid10.Canvas.FillRect(Rect);
      StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
    end;
    if (StatF = 2) and (ACol = 5) then
    begin
      StringGrid10.Canvas.Font.Style := [fsItalic] + [fsBold];
      StringGrid10.Canvas.brush.Color := RGB(64, 249, 254);
      StringGrid10.Canvas.FillRect(Rect);
      StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
    end;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    if (StringGrid10.Cells[I_FN_ZAKAZCHIK, ARow] <> '') and (StringGrid10.Cells[I_FN_SGP, ARow] <> '') and (ACol = I_FN_NAM) then
                //Новый клапан   Фиолетовый
    begin
      StringGrid10.Canvas.brush.Color := RGB(155, 5, 171);
      StringGrid10.Canvas.FillRect(Rect);
      StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
    end;
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    if (StringGrid10.Cells[I_FN_ZAKAZCHIK, ARow] = '') and (StringGrid10.Cells[I_FN_SGP + 1, ARow] = '') and (StringGrid10.Cells[I_FN_SGP, ARow] <> '') and (ACol = I_FN_NAM) then
                //Первый прогон Голубой
    begin

      StringGrid10.Canvas.brush.Color := RGB(64, 249, 254);
      StringGrid10.Canvas.FillRect(Rect);
      StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
    end;
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    if (StringGrid10.Cells[I_FN_SGP + 1, ARow] <> '') and (StringGrid10.Cells[I_FN_SGP, ARow] <> '') and (ACol = I_FN_NAM) then
                //Второй прогон Оранж
    begin

      StringGrid10.Canvas.brush.Color := RGB(230, 167, 8);
      StringGrid10.Canvas.FillRect(Rect);
      StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
    end;
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    if (StringGrid10.Cells[I_FN_SGP + 1, ARow] <> '') and (StringGrid10.Cells[I_FN_SGP, ARow] = '') and (ACol = I_FN_NAM) then
                //Второй прогон прошел с косяком Красный
    begin

      StringGrid10.Canvas.brush.Color := RGB(200, 10, 15);
      StringGrid10.Canvas.FillRect(Rect);
      StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
    end;
    if (gdSelected in State) then
    begin
      StringGrid10.Canvas.Brush.Color := clBlack;
      StringGrid10.Canvas.Font.Color := clWhite;
      StringGrid10.Canvas.FillRect(Rect);
      StringGrid10.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid10.Cells[ACol, ARow]);
    end;
    //
    with Sender as TStringGrid do
    begin
      Canvas.Pen.Color := clBlue;

      Canvas.MoveTo(0, Rect.Top);
      Canvas.LineTo(Rect.Right, Rect.Top);

      if ARow = RowCount - 1 then
      begin
        Canvas.MoveTo(0, Rect.Bottom);
        Canvas.LineTo(Rect.Right, Rect.Bottom);
      end;

      Canvas.MoveTo(Rect.Right, Rect.Top);
      Canvas.LineTo(Rect.Right, Rect.Bottom);

      if ACol = 0 then
      begin
        Canvas.MoveTo(Rect.Left, Rect.Top);
        Canvas.LineTo(Rect.Left, Rect.Bottom);
      end;
    end;
  except
    MessageDlg('Не удалось подключиться к базе данных10!', mtError, [mbOk], 0);
  end;
end;
//

function TForm1.Sborka_KPU(izd, Privod1: string; kol_kl, Kol_Pr, Kol, GP: integer): string;
var
  I, j, ilengy, Kpu, Kpd, a, A1, A2, b, B1, B2, Perim, Perim1, Res, Kol_F, Res_T, Res_SN, Kol_lop, Kol_Priv, Pos_F1, Pos_F2, KPD_4_03, Res_Isp, Klap: Integer;
  Res_Nazn, ResN1, Res_Ispol, Res_Priv, Res_Klem, Res_Pereh, Res_Ruk, Res_Ram, Res_Term, Res_Resh, Res_Resh_R, Res_Resh_S, Flag_Razb_Klapana: Integer;
  KPu_S, Izdel, Nam, N1, Nazn, Ispol, F, Priv, Term, Razmesh, Klem, Resh, luk, Pereh, Ruk, Rama, A_S, B_S, Perim_S, Lop, Lopatka, Privod, SB, Privod_Nam, IDGP, A_S1, B_S1, Pos_Flan, Pos_Privod, Pos_Sn, Pos_Dop, Pos_Ram, Elem, Kol_Ed_Str, Podsbor: string;
  NC_Sbor, HK, pod, Kol_Ed: Double;
begin
  Izdel := izd;
  Nam := izd;
  IDGP := IntToStr(GP);
  Kpu := Pos('КПУ', Izdel);
  if Kpu <> 0 then
  begin
    Flag_Razb_Klapana := 0;
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + IDGP + #39 + ') ', ['Специф']) then
      exit;
    Flag_Razb_Klapana := 0;
    for j := 0 to Form1.ADOQuery2.RecordCount - 1 do  //Проверка на Клапан разбитый на 2
    begin
      Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
      Kol_Ed_Str := StringReplace(Form1.ADOQuery2.FieldByName('Количество').AsString, '.', ',', [rfReplaceAll]);
      Kol_Ed := StrToFloat(Kol_Ed_Str);
      Klap := AnsiCompareStr('Клапан', Elem);
      if (Klap = 0) and (Kol_Ed > 1) then
      begin
        Flag_Razb_Klapana := 1; //Клапан разбит на 2
        Izdel := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
        Nam := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
        Break;
      end;
      Form1.ADOQuery2.Next;                                                                    // (Тип=' + #39 + 'Лопатка' + #39 + ')
    end;                 //Лопатка-заготовка
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ') AND (Элемент=' + #39 + 'Лопатка' + #39 + ')', ['Специф']) then
      exit;

    if Form1.ADOQuery1.RecordCount <> 0 then
      Lop := Form1.ADOQuery1.FieldByName('Количество').AsString;

    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ') AND (Элемент=' + #39 + 'Лопатка-заготовка' + #39 + ')', ['Специф']) then
      exit;

    if Form1.ADOQuery1.RecordCount <> 0 then
      Lop := Form1.ADOQuery1.FieldByName('Количество').AsString;

    Privod := IntToStr(Kol_Pr);
    if Kol_Pr = 0 then
    begin
      MessageDlg('Необходимо поставить кол-во приводов!', mtError, [mbOk], 0);
          //Continue;
    end;
    Privod_Nam := Privod;
                                        //ADOQuery1.FieldByName('Количество').AsString;
    NC_Sbor := 0;
    Res := Pos(' ', Izdel);
    Delete(Izdel, 1, Res);
                                //======================================== KPU
    Res := Pos('-', Izdel);
    KPu_S := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                                //======================================== 1 H
    Res := Pos('-', Izdel);
    N1 := Copy(Izdel, 1, Res - 1);
                                //Pos3 := Copy(Izdel, 2, 1);
    Delete(Izdel, 1, Res);
                                //========================================
                                //Клапан КПУ-1Н-О-Н-600*400-2*ф-MB220-сн-0-0-0-0-0-0
                                //========================================
    Res := Pos('-', Izdel);
    Nazn := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                                //========================================
    Res := Pos('-', Izdel);
    Ispol := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                                //========================================
                                //Клапан КПУ-1Н-О-Н-100-2*ф-MB220-сн-0-0-0-0-0-0
    Res := Pos('*', Izdel);
        //if Res > 5 then
        //  Continue;
    a := StrToInt(Copy(Izdel, 1, Res - 1));
    Delete(Izdel, 1, Res);
                                //========================================
    Res := Pos('-', Izdel);
    b := StrToInt(Copy(Izdel, 1, Res - 1));
    Delete(Izdel, 1, Res);
                                //========================================
    Res := Pos('-', Izdel);
    F := Copy(Izdel, 1, 1);
    Delete(Izdel, 1, Res);
    if F <> '' then
      Kol_F := StrToInt(F);
                                //========================================
    Term := '';                                                            // T ?
                                //Клапан КПУ-1Н-О-Н-700*250-2*ф-MV220-сн-0-0-0-0-0-0
    Res := Pos('-', Izdel);
    Priv := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);

                                //========================================
    Res := Pos('T', Izdel);
    if Res <> 0 then
    begin
      Term := Copy(Izdel, 1, Res);
      Delete(Izdel, 1, Res + 1);

    end;
                                //========================================
    Res := Pos('-', Izdel);
    Razmesh := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                                //======================================== Klem,Resh,luk,Pereh,Ruk,Rama
    Res := Pos('-', Izdel);
    Klem := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                                //========================================
    Res := Pos('-', Izdel);
    Resh := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                                //========================================
    Res := Pos('-', Izdel);
    luk := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                                //========================================
    Res := Pos('-', Izdel);
    Pereh := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                                //========================================
                                //Клапан КПУ-1Н-О-Н-700*250-2*ф-MV220-сн-0-0-0-0-0-0
    Res := Pos('-', Izdel);
    Ruk := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                                //========================================
                                //Клапан КПУ-1Н-О-Н-200*200-2*ф-MB220-сн-0-р-0-0-0-мрп
    Rama := Izdel;
                                //-----------------------------------------------------

    if Privod = '' then
      Kol_Priv := 0
    else
      Kol_Priv := StrToInt(Privod);
                                //-----------------------------------------------------

    if Lop = '' then
      Kol_lop := 0
    else
      Kol_lop := StrToInt(Lop);

    if Kol_lop = 0 then
      Lopatka := 'Лопатка1';
    if Kol_lop = 1 then
      Lopatka := 'Лопатка1';
    if (Kol_lop = 0) or (Kol_lop = 1) then
    begin
      Lopatka := 'Лопатка1';
      Podsbor := 'Подсборка';
    end;

    if Kol_lop = 2 then
    begin
      Lopatka := 'Лопатка2';
      Podsbor := 'Лопатка3';
    end;

        {if Kol_lop = 3 then
          Lopatka := 'Лопатка3'; }

    if Kol_lop = 4 then
    begin
      Lopatka := 'Лопатка4';
      Podsbor := 'Подсборка';
    end;
        //------------------------------------------------------
    Perim := a + b;
    if Perim <= 600 then
      Perim1 := 600;

    if (Perim > 600) and (Perim <= 850) then
      Perim1 := 850;

    if (Perim > 850) and (Perim <= 1200) then
      Perim1 := 1200;

    if (Perim > 1200) and (Perim <= 1800) then
      Perim1 := 1800;

    if (Perim > 1800) and (Perim <= 2500) then
      Perim1 := 2500;

    if (Perim > 2500) then
      Perim1 := 2600;
        //-----------------------------------------------------
    if (a = 100) or (b = 100) then
      Perim1 := 100;

        //-----------------------------------------------------
    Form1.Memo13.Lines.Add(KPu_S + '+' + N1 + '+' + Nazn + '+' + Ispol + '+' + F + '+' + Priv + '+' + Term + '+' + Razmesh + '+' + Klem + '+' + Resh + '+' + luk + '+' + Pereh + '+' + Ruk + '+' + Rama);
        //Res_Nazn,ResN1,Res_Ispol,Res_Priv,Res_Klem,Res_Pereh,Res_Ruk,Res_Ram

    Form1.Memo13.Lines.Add(' A  ' + IntToStr(a) + ' A2  ' + IntToStr(A2) + ' B  ' + IntToStr(b));
                                //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    Res_Ispol := AnsiCompareStr('МС', Ispol);
    if Res_Ispol = 0 then
    begin
      Form1.Memo13.Lines.Add('Исполнение МС 0.077');
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select [Лопатка1] from [%s] Where (Конст=' + #39 + 'МС' + #39 + ')', ['Сборка']) then
        exit;
      HK := Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat * Kol_Priv;
      Form1.Memo13.Lines.Add('MC  ' + FloatToStr(HK));
      NC_Sbor := NC_Sbor + Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat * Kol_Priv;
    end;
                                //============================================
    Res_Ispol := AnsiCompareStr('МСК', Ispol);
    if Res_Ispol = 0 then
    begin
                                        //NC_Sbor:=0.278;
      Form1.Memo13.Lines.Add('Исполнение МСК 0.278');
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select [Лопатка1] from [%s] Where (Конст=' + #39 + 'МСК' + #39 + ')', ['Сборка']) then
        exit;
      HK := Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat * Kol_Priv;
      Form1.Memo13.Lines.Add('MCK  ' + FloatToStr(HK));
      NC_Sbor := NC_Sbor + Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat * Kol_Priv;
    end;

        //if (Kol_F = 2) then
        //begin

    Res_Priv := Pos('ЭМП', Priv);
    if (Res_Priv <> 0) then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select [Лопатка1] from [%s] Where (Конст=' + #39 + 'ЭМП' + #39 + ')', ['Сборка']) then
        exit;
      HK := Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat * Kol_Priv;
      Form1.Memo13.Lines.Add('ЭПВ  ' + FloatToStr(HK) + '*' + IntToStr(Kol_Priv));
      NC_Sbor := NC_Sbor + (Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat * Kol_Priv);
    end;
          //============================================
    Res_Priv := Pos('ЭПВ', Priv);
    if (Res_Priv <> 0) then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select [Лопатка1] from [%s] Where (Конст=' + #39 + 'ЭПВ' + #39 + ')', ['Сборка']) then
        exit;
      HK := Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat * Kol_Priv;
      Form1.Memo13.Lines.Add('ЭПВ  ' + FloatToStr(HK));
      NC_Sbor := NC_Sbor + Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat * Kol_Priv;
    end;
          //============================================
    Res_Priv := Pos('MB', Priv);
    if (Res_Priv <> 0) then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select [Лопатка1] from [%s] Where (Конст=' + #39 + 'MB' + #39 + ')', ['Сборка']) then
        exit;
      HK := Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat * Kol_Priv;
      Form1.Memo13.Lines.Add('MB  ' + FloatToStr(HK));
      NC_Sbor := NC_Sbor + Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat * Kol_Priv;
    end;
          //============================================
    Res_Priv := Pos('MS', Priv);
    if (Res_Priv <> 0) then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select [Лопатка1] from [%s] Where (Конст=' + #39 + 'MS' + #39 + ')', ['Сборка']) then
        exit;
      HK := Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat * Kol_Priv;
      Form1.Memo13.Lines.Add('MS  ' + FloatToStr(HK));
      NC_Sbor := NC_Sbor + Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat * Kol_Priv;
    end;
          //============================================
    Res_Priv := Pos('MV', Priv);
    if (Res_Priv <> 0) then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select [Лопатка1] from [%s] Where (Конст=' + #39 + 'MV' + #39 + ')', ['Сборка']) then
        exit;
      HK := Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat * Kol_Priv;
      Form1.Memo13.Lines.Add('MV  ' + FloatToStr(HK));
      NC_Sbor := NC_Sbor + Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat * Kol_Priv;
    end;
          //if Kol_lop <> 0 then
           // NC_Sbor := NC_Sbor + (0.014 * Kol_lop); //Якушев Тютева 09,03,2017
       //end;
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    Res_Term := Pos('T', Term);
    if (Res_Term <> 0) and (Term <> '') then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select [Лопатка1] from [%s] Where (Конст=' + #39 + 'Т' + #39 + ')', ['Сборка']) then
        exit;
      HK := Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat;
      Form1.Memo13.Lines.Add('T  ' + FloatToStr(HK));
      NC_Sbor := NC_Sbor + Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat;
    end;

        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    Res_Klem := AnsiCompareStr('0', Klem);
    if (Res_Klem <> 0) then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select [Лопатка1] from [%s] Where (Конст=' + #39 + 'К' + #39 + ')', ['Сборка']) then
        exit;
      HK := Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat;
      Form1.Memo13.Lines.Add('Клемник  ' + FloatToStr(HK));
      NC_Sbor := NC_Sbor + Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat;
    end;
                                //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    Res_Ram := Pos('мр', Rama);
    if (Res_Ram <> 0) then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select [Лопатка1] from [%s] Where (Конст=' + #39 + Rama + #39 + ')', ['Сборка']) then
        exit;
      HK := Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat;
      Form1.Memo13.Lines.Add('Рама  ' + FloatToStr(HK));
      NC_Sbor := NC_Sbor + Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat;
    end;
                                //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    Res_Ruk := Pos('ру', Ruk);
    if (Res_Ruk <> 0) then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select [Лопатка1] from [%s] Where (Конст=' + #39 + 'РУ' + #39 + ')', ['Сборка']) then
        exit;
      HK := Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat;
      Form1.Memo13.Lines.Add('Рукоятка  ' + FloatToStr(HK));
      NC_Sbor := NC_Sbor + Form1.ADOQuery1.FieldByName('Лопатка1').AsFloat;
    end;
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  1H
    ResN1 := AnsiCompareStr('1Н', N1);
    Res_Nazn := AnsiCompareStr('Д', Nazn);
        //============================================ О,З
    if (Res_Nazn <> 0) then
    begin

      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Периметр]=' + #39 + IntToStr(Perim1) + #39 + ')  AND ([КолЛопаток]=' + #39 + IntToStr(Kol_lop) + #39 + ')', ['КПУ']) then
        exit;
      HK := Form1.ADOQuery1.FieldByName(Lopatka).AsFloat;
      Form1.Memo13.Lines.Add('Tab1   ' + FloatToStr(HK));
      NC_Sbor := NC_Sbor + Form1.ADOQuery1.FieldByName(Lopatka).AsFloat;
    end;
        //=+=============================================== ДЫМ
    if (Res_Nazn = 0) and (Kol_F = 2) then
    begin

      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Периметр]=' + #39 + IntToStr(Perim1) + #39 + ')  AND ([КолЛопаток]=' + #39 + IntToStr(Kol_lop) + #39 + ')', ['КПУ']) then
        exit;
      HK := Form1.ADOQuery1.FieldByName(Lopatka).AsFloat;
      Form1.Memo13.Lines.Add('Tab2 D  ' + FloatToStr(HK));
      NC_Sbor := NC_Sbor + Form1.ADOQuery1.FieldByName(Lopatka).AsFloat;
    end;

    SB := FloatToStr(NC_Sbor);
    Res := Pos(',', SB);
    Delete(SB, Res, 1);
    if Res <> 0 then
      Insert('.', SB, Res);
  end;

  Kpd := Pos('КПД', Nam);
  if Kpd <> 0 then
  begin
                             //Pos_F1,Pos_F2,KPD_4_03    -2000*400-2*ф-MS220-сн-0-0
    Res := Pos(' ', Izdel);
    Delete(Izdel, 1, Res);
                               //========================================
    Res := Pos('-', Izdel);
    Delete(Izdel, 1, Res);
                               //========================================
    Res := Pos('-', Izdel);
    Delete(Izdel, 1, Res);
                               //========================================
    Res := Pos('-', Izdel);
    Delete(Izdel, 1, Res);
                               //========================================
    Res := Pos('*', Izdel);
    A_S1 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                               //========================================
    Res := Pos('-', Izdel);
    B_S1 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                               //========================================
    Res := Pos('*', Izdel);
    Pos_Flan := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res + 2);
                               //========================================
    Res := Pos('-', Izdel);
    Pos_Privod := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                               //========================================
    Res := Pos('-', Izdel);
    Pos_Sn := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                               //========================================
    Res := Pos('-', Izdel);
    Pos_Dop := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                               //========================================
    Pos_Ram := Izdel;
                               //-----------------------------------------------
    a := StrToInt(A_S1);
    b := StrToInt(B_S1);
    KPD_4_03 := Pos('КПД-4-03', Nam);
    Pos_F1 := Pos('1*ф', Nam);
    Pos_F2 := Pos('2*ф', Nam);
    if (Pos_F1 <> 0) and (KPD_4_03 <> 0) then
    begin
      if b < 321 then
        B_S := '300';
            //---------------------------
      if (b > 300) and (b < 501) then
        B_S := '500';
            //---------------------------
      if (b > 500) and (b < 601) then
        B_S := '600';
            //---------------------------
      if (b > 600) and (b < 800) then
        B_S := '700';
            //---------------------------
      if (b = 800) then
        B_S := '800';
      if (b > 800) then
        B_S := '1000';

      if not mkQuerySelect(ADOQuery1, 'Select [' + B_S + '] from [%s] Where ([Тип]=' + #39 + '4' + #39 + ')', ['КПД4-03-1ф']) then
        exit;
      HK := ADOQuery1.FieldByName(B_S).AsFloat
    end;
        ///-----------------------
    if (Pos_F2 <> 0) and (KPD_4_03 <> 0) then
    begin
      b := StrToInt(B_S1);
      if b < 321 then
        B_S := '300';
          //---------------------------
      if (b > 300) and (b < 501) then
        B_S := '500';
          //---------------------------
      if (b > 500) and (b < 601) then
        B_S := '600';
          //---------------------------
      if (b > 600) then
        B_S := '800';

      if not mkQuerySelect(ADOQuery1, 'Select * from [%s] Where ([Тип]=' + #39 + '4' + #39 + ')', ['КПД4-03-2ф']) then
        exit;
      HK := ADOQuery1.FieldByName(B_S).AsFloat
    end;
                               ///-----------------------
    if (KPD_4_03 = 0) then
    begin
      b := StrToInt(B_S1);
      if b <= 500 then
        B_S := '300';
      if (b > 500) and (b < 801) then
        B_S := '500';
      if (b > 800) then
        B_S := '800';
      if not mkQuerySelect(ADOQuery1, 'Select * from [%s] Where ([Тип]=' + #39 + '4' + #39 + ')', ['КПД4-01-02']) then
        exit;
      HK := ADOQuery1.FieldByName(B_S).AsFloat
    end;
    NC_Sbor := HK;
                               //------------------------------------------------------
    Perim := a + b;
    if Perim <= 600 then
      Perim1 := 600;

    if (Perim > 600) and (Perim <= 850) then
      Perim1 := 850;

    if (Perim > 850) and (Perim <= 1200) then
      Perim1 := 1200;

    if (Perim > 1200) and (Perim <= 1800) then
      Perim1 := 1800;

    if (Perim > 1800) and (Perim <= 2500) then
      Perim1 := 2500;

    if (Perim > 2500) then
      Perim1 := 2600;
                               //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    Res_Ram := Pos('мр', Pos_Ram);
    if (Res_Ram <> 0) then
    begin
      if not mkQuerySelect(ADOQuery1, 'Select [Лопатка1] from [%s] Where (Конст=' + #39 + Rama + #39 + ')', ['Сборка корпуса']) then
        exit;
                                        //HK :=ADOQuery1.FieldByName('Лопатка1').AsFloat;
                                        //Memo13.Lines.Add('Рама  '+FloatToStr(HK));
      NC_Sbor := NC_Sbor + ADOQuery1.FieldByName('Лопатка1').AsFloat;
    end;
                                //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Решетка
    Res_Resh_R := AnsiCompareStr('р', Pos_Dop);
    Res_Resh_S := AnsiCompareStr('с', Pos_Dop);
    if (Res_Resh_R = 0) or (Res_Resh_S = 0) then
    begin
      if not mkQuerySelect(ADOQuery1, 'Select * from [%s] Where ([Размер_Клапана]=' + #39 + IntToStr(Perim1) + #39 + ')  AND ([№]=' + #39 + '3' + #39 + ') ', ['Сборка корпуса']) then
        exit;
                                        //HK :=ADOQuery1.FieldByName('Лопатка4').AsFloat;
                                       // Memo13.Lines.Add('Tab3 (5 ) +  Resh  ' +
                                       //         FloatToStr(HK));
      NC_Sbor := NC_Sbor + ADOQuery1.FieldByName('Лопатка4').AsFloat;
    end;
                                //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  P25
    Res_Resh := AnsiCompareStr('р25', Pos_Dop);
    if (Res_Resh = 0) then
    begin
                                        //NC_Sbor:=NC_SBOR +0.01;

      if not mkQuerySelect(ADOQuery1, 'Select [Лопатка1] from [%s] Where (Конст=' + #39 + 'Р25' + #39 + ')', ['Сборка корпуса']) then
        exit;
      NC_Sbor := NC_Sbor + ADOQuery1.FieldByName('Лопатка1').AsFloat;
                                        //----------------------------------------------
      if a <= 300 then
        A1 := 300;
      if (a > 300) and (a <= 600) then
        A1 := 600;
      if a > 600 then
        A1 := 700;
                                        //----------------------------------------------
      if b <= 100 then
        B1 := 100;
      if (b > 100) and (b <= 150) then
        B1 := 150;

      if (b > 150) and (b <= 200) then
        B1 := 200;

      if (b > 200) and (b <= 250) then
        B1 := 250;

      if (b > 250) and (b <= 300) then
        B1 := 300;

      if (b > 300) and (b <= 450) then
        B1 := 450;

      if (b > 450) and (b <= 500) then
        B1 := 500;

      if (b > 500) and (b <= 600) then
        B1 := 600;

      if (b > 600) and (b <= 650) then
        B1 := 650;

      if (b > 650) and (b <= 700) then
        B1 := 700;

      if (b > 700) and (b <= 750) then
        B1 := 750;

      if (b > 750) and (b <= 800) then
        B1 := 800;

      if (b > 800) and (b <= 850) then
        B1 := 850;

      if (b > 850) and (b <= 900) then
        B1 := 900;

      if (b > 900) and (b <= 950) then
        B1 := 950;

      if (b > 950) and (b <= 1000) then
        B1 := 1000;

      if (b > 1000) and (b <= 1500) then
        B1 := 1500;
      Memo13.Lines.Add(' B  ' + IntToStr(b) + ' B1  ' + IntToStr(B1));
                                        //----------------------------------------------
      if not mkQuerySelect(ADOQuery1, 'Select [Лопатка2] from [%s] Where ([Размер_Клапана]=' + #39 + IntToStr(A1) + #39 + ') AND ([Лопатка1]=' + #39 + IntToStr(B1) + #39 + ')  AND ([№]=' + #39 + '4' + #39 + ')', ['Сборка корпуса']) then
        exit;

      NC_Sbor := NC_Sbor + ADOQuery1.FieldByName('Лопатка2').AsFloat;
    end;
                        //-------------------------------------------------------------------
    SB := FloatToStr(NC_Sbor);
    Res := Pos(',', SB);
    Delete(SB, Res, 1);
    if Res <> 0 then
      Insert('.', SB, Res);
  end;

  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Н\ч Сборка Клапана]=' + #39 + SB + #39 + ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ') ', ['Klapana']) then
    Exit;

  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Н\ч Сборка Клапана]=' + #39 + SB + #39 + ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ')', ['Запуск']) then
    Exit;
  Form1.SG6.Cells[I_FN_SBOR_KLAP_NC, Form1.SG6.Row] := SB;

end;

function Homut(Izdel, IDGP: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, ked05, j, Flag_Razb_Klapana, Klap, Res, a, b, Kol_Priv, Kol_Lop, Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram,F, Res_Ruk, Kol_F, Res_Resh, Perim: Integer;
  Kol_Ed_Str, Nam, Elem, Lop, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama,  luk, NAM_LIST, USLOVie, S: string;
  Kol_Ed, NC_RON, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, Str,Naim: string;
begin

  D := 0;
  NAM_LIST := '';
  Naim := Izdel;

  Result.SVarka := 0;
  NC_MRP := 0;
  NC_RON := 0;
  SB_TYAG_S:='0';
    Lop := '0';

      // Хомут Канал-МК-160
    F := Pos('-', Naim);
    if F <> 0 then
      Delete(Naim, 1, F); // МК-160
    F := Pos('-', Naim);

    if F <> 0 then
      Delete(Naim, 1, F); // 160

    F := Pos('_', Naim);   // 160 //Хомут Канал-МК-315_216000069-КРС
    if F <> 0 then
    begin
      A := StrToInt(Copy(Naim, 1, F-1));
      Delete(Naim, 1, F); //160
    end
    Else
    A := StrToInt(Copy(Naim,1,40));

        //========================================
      if A <= 250 then
        USLOVie := '250';
          //+++++++++++++++++++++
      if (A > 250) and (Perim <= 400) then
        USLOVie := '400';
          //+++++++++++++++++++++
      if (A > 400) then
        USLOVie := '500';

      NAM_LIST := 'КаналХомутМК';
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([диаметр]=' + #39 + (USLOVie) + #39 + ')', [NAM_LIST]) then
      exit;

    SB_LOP_S := Form1.ADOQuery1.FieldByName('установка заклепки вытяжной').AsString;
    SB_2_S := Form1.ADOQuery1.FieldByName('контактная сварка').AsString;
    SB_1_S := Form1.ADOQuery1.FieldByName('итого').AsString;

    SB_1 := StrToFloat(SB_1_S);
    SB_2 := StrToFloat(SB_2_S);
          //Form1.Memo13.Lines.Add(Form1.ADOQuery1.FieldByName('сборка лопатки').AsString);
    Form1.Memo13.Lines.Add(SB_1_S);
    Form1.Memo13.Lines.Add(SB_2_S);


  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
  Result.Sborka_lop := SB_LOP_S;
  Result.Sborka_tyag := SB_TYAG_S;
end;

function EKV_K(Izdel, IDGP: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, ked05, j, Flag_Razb_Klapana, Klap, Res, a, b, Kol_Priv, Kol_Lop, Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram,F, Res_Ruk, Kol_F, Res_Resh, Perim: Integer;
  Kol_Ed_Str, Nam, Elem, Lop, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama,  luk, NAM_LIST, USLOVie, S: string;
  Kol_Ed, Mosh, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, Str,Naim,Mosh_S: string;
begin
      //Воздухонагреватель Канал-ЭКВ-К-125-2,4
  D := 0;
  NAM_LIST := '';
  Naim := Izdel;

  Result.SVarka := 0;
  NC_MRP := 0;
  Mosh := 0;
  SB_TYAG_S:='0';
  Mosh_S:='0';
  Lop := '0';

      //Воздухонагреватель Канал-ЭКВ-40-20-12
    F := Pos('-', Naim);
    if F <> 0 then
      Delete(Naim, 1, F); // ЭКВ-40-20-12

    F := Pos('-', Naim);
    if F <> 0 then
      Delete(Naim, 1, F); // 40-20-12

    F := Pos('-', Naim);   //
    if F <> 0 then
    begin
      A := StrToInt(Copy(Naim, 1, F-1));
      Delete(Naim, 1, F); //20-12
    end ;

    F := Pos('-', Naim);   //
    if F <> 0 then
    begin
      B := StrToInt(Copy(Naim, 1, F-1));
      Delete(Naim, 1, F); //12
    end ;

    F := Pos('_', Naim);   // Воздухонагреватель Канал-ЭКВ-40-20-6_216100002-КРС
    if F <> 0 then
    begin
      Mosh_S := (Copy(Naim, 1, F-1));
      Delete(Naim, 1, F); //216100002-КРС
    end
    Else
    Mosh_S := (Copy(Naim,1,40));
    Mosh_S := StringReplace(Mosh_S,',','.', [rfReplaceAll]);
      NAM_LIST := 'КаналЭКВ';
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([A]=' + #39 + IntToStr(A) + #39 +
    ') AND (B=' + #39 + IntToStr(B) + #39 +
    ') AND ([Мощность ЭКО]=' + #39 + Mosh_S + #39 +
    ')', [NAM_LIST]) then
      exit;

    SB_LOP_S := '0';
    SB_2_S := '0';
    SB_1_S := Form1.ADOQuery1.FieldByName('норма на сборку').AsString;

    SB_1 := StrToFloat(SB_1_S);
    SB_2 := StrToFloat(SB_2_S);
    Form1.Memo13.Lines.Add(SB_1_S);
    Form1.Memo13.Lines.Add(SB_2_S);

  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
  Result.Sborka_lop := SB_LOP_S;
  Result.Sborka_tyag := SB_TYAG_S;
end;


function EKV_KRUG(Izdel, IDGP: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, ked05, j, Flag_Razb_Klapana, Klap, Res, a, b, Kol_Priv, Kol_Lop, Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram,F, Res_Ruk, Kol_F, Res_Resh, Perim: Integer;
  Kol_Ed_Str, Nam, Elem, Lop, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama,  luk, NAM_LIST, USLOVie, S: string;
  Kol_Ed, Mosh, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, Str,Naim,Mosh_S: string;
begin
      //Воздухонагреватель Канал-ЭКВ-К-125-2,4
  D := 0;
  NAM_LIST := '';
  Naim := Izdel;

  Result.SVarka := 0;
  NC_MRP := 0;
  Mosh := 0;
  SB_TYAG_S:='0';
  Mosh_S:='0';
  Lop := '0';

      //Воздухонагреватель Канал-ЭКВ-К-125-2,4
    F := Pos('-', Naim);
    if F <> 0 then
      Delete(Naim, 1, F); // ЭКВ-К-125-2,4

    F := Pos('-', Naim);
    if F <> 0 then
      Delete(Naim, 1, F); // К-125-2,4

    F := Pos('-', Naim);
    if F <> 0 then
      Delete(Naim, 1, F); // 125-2,4

    F := Pos('-', Naim);   //
    if F <> 0 then
    begin
      A := StrToInt(Copy(Naim, 1, F-1));
      Delete(Naim, 1, F); //125-2,4
    end ;

      Mosh_S := Naim;


   { F := Pos('_', Naim);   // Воздухонагреватель Канал-ЭКВ-К-125-2,4_216100002-КРС
    if F <> 0 then
    begin
      Mosh_S := (Copy(Naim, 1, F-1));
      Delete(Naim, 1, F); //216100002-КРС
    end
    Else
    Mosh_S := (Copy(Naim,1,40));  }
    Mosh_S := StringReplace(Mosh_S,',','.', [rfReplaceAll]);
      NAM_LIST := 'ЭКВ-К';
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Диам]=' + #39 + IntToStr(A) + #39 +
    ') AND ([Мощ]=' + #39 + Mosh_S + #39 +
    ')', [NAM_LIST]) then
      exit;

    SB_LOP_S := '0';
    SB_2_S := '0';
    SB_1_S := Form1.ADOQuery1.FieldByName('Н\Ч').AsString;

    SB_1 := StrToFloat(SB_1_S);
    SB_2 := StrToFloat(SB_2_S);
    Form1.Memo13.Lines.Add(SB_1_S);
    Form1.Memo13.Lines.Add(SB_2_S);

  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
  Result.Sborka_lop := SB_LOP_S;
  Result.Sborka_tyag := SB_TYAG_S;
end;

function FKK(Izdel, IDGP: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, ked05, j, Flag_Razb_Klapana, Klap, Res, a, b, Kol_Priv, Kol_Lop, Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram,F, Res_Ruk, Kol_F, Res_Resh, Perim: Integer;
  Kol_Ed_Str, Nam, Elem, Lop, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama,  luk, NAM_LIST, USLOVie, S: string;
  Kol_Ed, NC_RON, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, Str,Naim: string;
begin
      //Клапан КЭД-03-950*350-1*ф-МV220-вн-с-мрз
  D := 0;
  NAM_LIST := '';
  Naim := Izdel;

  Result.SVarka := 0;
  NC_MRP := 0;
  NC_RON := 0;
  SB_TYAG_S:='0';

    Lop := '0';
       //Фильтр Канал-ФКК-125
    F := Pos('-', Naim);
    if F <> 0 then
      Delete(Naim, 1, F); // ФКК-125

    F := Pos('-', Naim);
    if F <> 0 then
      Delete(Naim, 1, F); // 125

      A := StrToInt(Naim);

      NAM_LIST := 'КаналФКК';
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([типоразмер]='
    + #39 + IntToStr(A) + #39 + ')', [NAM_LIST]) then
      exit;

   // SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка').AsString;
    SB_2_S := '0';//Form1.ADOQuery1.FieldByName('сборка').AsString;
    SB_1_S := Form1.ADOQuery1.FieldByName('сборка').AsString;

    SB_1 := StrToFloat(SB_1_S);
    SB_2 := StrToFloat(SB_2_S);
          //Form1.Memo13.Lines.Add(Form1.ADOQuery1.FieldByName('сборка лопатки').AsString);
    Form1.Memo13.Lines.Add(SB_1_S);
    Form1.Memo13.Lines.Add(SB_2_S);


  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
 // Result.Sborka_lop := SB_LOP_S;
 // Result.Sborka_tyag := SB_TYAG_S;
end;


function FKP(Izdel, IDGP: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, ked05, j, Flag_Razb_Klapana, Klap, Res, a, b, Kol_Priv, Kol_Lop, Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram,F, Res_Ruk, Kol_F, Res_Resh, Perim: Integer;
  Kol_Ed_Str, Nam, Elem, Lop, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama,  luk, NAM_LIST, USLOVie, S: string;
  Kol_Ed, NC_RON, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, Str,Naim: string;
begin
      //Клапан КЭД-03-950*350-1*ф-МV220-вн-с-мрз
  D := 0;
  NAM_LIST := '';
  Naim := Izdel;

  Result.SVarka := 0;
  NC_MRP := 0;
  NC_RON := 0;
  SB_TYAG_S:='0';

    Lop := '0';

      // Фильтр Канал-ФКП-100-50-F5
          // Фильтр Канал-ФКП-100-50-G4/карманный
    F := Pos('-', Naim);
    if F <> 0 then
      Delete(Naim, 1, F); // ФКП-20-60

    F := Pos('-', Naim);
    if F <> 0 then
      Delete(Naim, 1, F); // 20-60

    F := Pos('-', Naim);   // 200
    if F <> 0 then
    begin
      A := StrToInt(Copy(Naim, 1, F-1)+'0');
      Delete(Naim, 1, F); // 50-G4/карманный
    end;
      //
    F := Pos('-', Naim);      //100-50-G4/карманный
    if F <> 0 then
    begin
      B := StrToInt(Copy(Naim, 1, F-1)+'0');
      Delete(Naim, 1, F); // 50-G4/карманный
    end;

        //========================================

      if A <= 300 then
        USLOVie := '300';
          //+++++++++++++++++++++
      if (A > 300) and (Perim <= 600) then
        USLOVie := '600';
          //+++++++++++++++++++++
      if (A > 600) then
        USLOVie := '1000';

      NAM_LIST := 'КаналФКП';
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([B]=' + #39 + (USLOVie) + #39 + ')', [NAM_LIST]) then
      exit;

    SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка крышки').AsString;
    SB_2_S := Form1.ADOQuery1.FieldByName('сборка корпуса').AsString;
    SB_1_S := Form1.ADOQuery1.FieldByName('итого').AsString;

    SB_1 := StrToFloat(SB_1_S);
    SB_2 := StrToFloat(SB_2_S);
          //Form1.Memo13.Lines.Add(Form1.ADOQuery1.FieldByName('сборка лопатки').AsString);
    Form1.Memo13.Lines.Add(SB_1_S);
    Form1.Memo13.Lines.Add(SB_2_S);


  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
  Result.Sborka_lop := SB_LOP_S;
  Result.Sborka_tyag := SB_TYAG_S;
end;

function KPD_New(Izdel, IDGP: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, ked05, j, Flag_Razb_Klapana, Klap, Res, a, b, Kol_Priv, Kol_Lop,
  Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram, Res_Ruk, Kol_F, Res_Resh, Perim,Z: Integer;
  Kol_Ed_Str, Nam, Elem, Lop, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term,
   Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama, F, luk, NAM_LIST, USLOVie, S: string;
  Kol_Ed, NC_RON, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2,SB_ZAS: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, Str,SB_ZAS_S: string;
begin
      //Клапан КЭД-03-950*350-1*ф-МV220-вн-с-мрз
  D := 0;
  NAM_LIST := '';
  Nam := Izdel;
  Kpu := Pos('КЭД', Izdel);
  ked05 := Pos('КЭД-05', Izdel);
  Result.SVarka := 0;
  NC_MRP := 0;
  NC_RON := 0;
  if Kpu <> 0 then
  begin
    Lop := '0';
    Z:=0;
    Flag_Razb_Klapana := 0;
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + IDGP + #39 + ') ', ['Специф']) then
      exit;
    Flag_Razb_Klapana := 0;
    for j := 0 to Form1.ADOQuery2.RecordCount - 1 do  //Проверка на Клапан разбитый на 2
    begin
      Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
      Kol_Ed_Str := StringReplace(Form1.ADOQuery2.FieldByName('Количество').AsString, '.', ',', [rfReplaceAll]);
      System.SysUtils.FormatSettings.DecimalSeparator := (',');
      Kol_Ed := StrToFloat(Kol_Ed_Str);
      Klap := AnsiCompareStr('Клапан', Elem);
      if (Klap = 0) and (Kol_Ed > 1) then
      begin
        Flag_Razb_Klapana := 1; //Клапан разбит на 2
        Izdel := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
            //Nam := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
        Break;
      end;
      Form1.ADOQuery2.Next;
    end;
    if not Form1.mkQuerySelect(Form1.ADOQuery2,
    'Select * from %s Where   (IdГП=' + #39 + IDGP + #39 + ') AND ((ВидЭлемента='+#39+'Сборочные единицы'+#39+') AND (Элемент='+#39+'Засов'+#39+') ) ', ['Специф']) then
      exit;
    if Form1.ADOQuery2.RecordCount<>0 then
      Z:=Form1.ADOQuery2.FieldByName('Количество').AsInteger;

    Privod := Form1.SG6.Cells[I_FN_BRIKET, Ii + 1];
    if Privod = '0' then
    begin
      MessageDlg('Необходимо поставить кол-во приводов!', mtError, [mbOk], 0);
      Exit;
    end;

    Privod_Nam := Form1.StringGrid10.Cells[I_FN_MOD_PRIVOD, Ii + 1];
    Res := Pos(' ', Izdel);  //Клапан КЭД-03-950*350-1*ф-МV220-вн-с-мрз
    Delete(Izdel, 1, Res);   //Клапан КЭД-05-750*750-1*ф-ЭМП220-ВН-0-0-0-0
        //======================================== КЭД
    Res := Pos('-', Izdel);
        //KPu_S := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
        //======================================== 03
    Res := Pos('-', Izdel);
    KPu_S := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
        //========================================

    Res := Pos('*', Izdel);
    if Res > 5 then
      Exit;
    a := StrToInt(Copy(Izdel, 1, Res - 1));
    Delete(Izdel, 1, Res);
        //========================================
    Res := Pos('-', Izdel);
    b := StrToInt(Copy(Izdel, 1, Res - 1));
    Delete(Izdel, 1, Res);
        //========================================
    Res := Pos('-', Izdel);
    F := Copy(Izdel, 1, 1);
    Delete(Izdel, 1, Res);
    if F <> '' then
      Kol_F := StrToInt(F);
        //========================================
       //Клапан КЭД-03-700*350-1*ф-МВ220-вн-0-РОН130-мрз-0
    Res := Pos('-', Izdel);
    Priv := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
        //======================================== -вн
    Res := Pos('-', Izdel);
    Razmesh := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
        //======================================== Klem,Resh,luk,Pereh,Ruk,Rama
        //======================================== -0
    Res := Pos('-', Izdel);
    luk := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
        //======================================== -РОН130
    Res := Pos('-', Izdel);
    Rama := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
        //======================================== -мрз
    Res := Pos('-', Izdel);
    Resh := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);

    if Privod = '' then
      Kol_Priv := 0
    else
      Kol_Priv := StrToInt(Privod);
        //-----------------------------------------------------
//SB_Lop,SB_Tyag,SB_1,SB_2:Double;
//SB_LOP_S,SB_TYAG_S,SB_1_S,SB_2_S:string;
        //========================================
    Perim := a + b;
    if ked05 <> 0 then
    begin
      if Perim <= 600 then
        USLOVie := '600';
          //+++++++++++++++++++++
      if (Perim > 600) and (Perim <= 850) then
        USLOVie := '850';
          //+++++++++++++++++++++
      if (Perim > 850) and (Perim <= 1200) then
        USLOVie := '1200';
          //+++++++++++++++++++++
      if (Perim > 1200) and (Perim <= 1800) then
        USLOVie := '1800';
          //+++++++++++++++++++++
      if (Perim > 1800) then
        USLOVie := '2000';
    end;
        //
    if ked05 = 0 then
    begin
      if b <= 500 then
        USLOVie := '500';
          //+++++++++++++++++++++
      if (b > 500) and (b <= 800) then
        USLOVie := '800';
          //+++++++++++++++++++++
      if (b > 800) then
        USLOVie := '1000';
    end;
    if ked05 <> 0 then
      NAM_LIST := 'КЭД05'
    else
      NAM_LIST := 'КЭД';
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([B]=' + #39 + (USLOVie) + #39 + ')', [NAM_LIST]) then
      exit;
    if ked05 <> 0 then
      SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка корпуса').AsString
    else
    Begin
      SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопатки').AsString;
      SB_ZAS_S := Form1.ADOQuery1.FieldByName('сборка Засова').AsString;
      if Z=0 then
        SB_ZAS_S :='0';
    End;
    SB_1_S := Form1.ADOQuery1.FieldByName('1-я сборка').AsString;
    SB_2_S := Form1.ADOQuery1.FieldByName('2-я сборка').AsString;

    SB_1 := StrToFloat(SB_1_S);
    SB_2 := StrToFloat(SB_2_S);
    SB_ZAS:= StrToFloat(SB_ZAS_S);
          //Form1.Memo13.Lines.Add(Form1.ADOQuery1.FieldByName('сборка лопатки').AsString);
    Form1.Memo13.Lines.Add(SB_1_S);
    Form1.Memo13.Lines.Add(SB_2_S);
    //\\\\\\\\\\\\\\\\\\\\\\\\\
      if Perim <= 600 then
        USLOVie := '600';
          //+++++++++++++++++++++
      if (Perim > 600) and (Perim <= 850) then
        USLOVie := '850';
          //+++++++++++++++++++++
      if (Perim > 850) and (Perim <= 1200) then
        USLOVie := '1200';
          //+++++++++++++++++++++
      if (Perim > 1200) and (Perim <= 1800) then
        USLOVie := '1800';
          //+++++++++++++++++++++
      if (Perim > 1800) then
        USLOVie := '2000';
    NAM_LIST := 'КЭД-Тяги';
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([периметр]=' + #39 + USLOVie + #39 + ')', [NAM_LIST]) then
      exit;
    SB_TYAG_S := Form1.ADOQuery1.FieldByName('сборка тяг').AsString;
    Form1.Memo13.Lines.Add(Form1.ADOQuery1.FieldByName('сборка тяг').AsString);
        //-----------------------------------------------------
    Perim := a + b;
    Res_Resh := Pos(AnsiUpperCase('мрЗ'), AnsiUpperCase(Nam));
    Res_Ram := Pos(AnsiUpperCase('мрП'), AnsiUpperCase(Nam));
    if (Res_Ram <> 0) or (Res_Resh <> 0) then
    begin
      if Perim <= 600 then
        USLOVie := '600';
          //+++++++++++++++++++++
      if (Perim > 600) and (Perim <= 850) then
        USLOVie := '850';
          //+++++++++++++++++++++
      if (Perim > 850) and (Perim <= 1200) then
        USLOVie := '1200';
          //+++++++++++++++++++++
      if (Perim > 1200) and (Perim <= 1800) then
        USLOVie := '1800';
          //+++++++++++++++++++++
      if (Perim > 1800) then
        USLOVie := '2000';
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + (USLOVie) + #39 + ')', ['МРЗ']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('Норма').AsString;
      NC_RON := StrToFloat(S);
      Form1.Memo13.Lines.Add(S);
    end;

    //-----------------------------------------------------
    Perim := a + b;
    S := AnsiUpperCase('рон');
    S1 := AnsiUpperCase(Nam);
    Res_Resh := Pos(S, S1);
    if (Res_Resh <> 0) then
    begin
      if Perim <= 1000 then
        USLOVie := '1000';
          //+++++++++++++++++++++
      if (Perim > 1000) and (Perim <= 1300) then
        USLOVie := '1300';
          //+++++++++++++++++++++
      if (Perim > 1300) and (Perim <= 1800) then
        USLOVie := '1800';
          //+++++++++++++++++++++
      if (Perim > 1800) and (Perim <= 2500) then
        USLOVie := '2500';
          //+++++++++++++++++++++
      if (Perim > 2500) then
        USLOVie := '2501';
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + (USLOVie) + #39 + ')', ['Решетка']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('Норма').AsString;
      Form1.Memo13.Lines.Add(S);
      NC_RON := StrToFloat(S);
    end;
    D := 0;
        //--------------------------------------------------------КK
    S := AnsiUpperCase('-КК-');
    S1 := AnsiUpperCase(Nam);
    Res := Pos(S, S1); //Клемная коробка
    if Res <> 0 then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('КК').AsString;
      D := StrToFloat(S) * Kol_Priv;
    end;
    SB_2 := SB_2 + D;
    D := 0;
               //--------------------------------------------------------КK
    S := AnsiUpperCase('-КЛ-');
    S1 := AnsiUpperCase(Nam);
    Res := Pos(S, S1); //Клемная коробка
    if Res <> 0 then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('КК').AsString;
      D := StrToFloat(S) * Kol_Priv;
    end;
    SB_2 := SB_2 + D;
    D := 0;
  end;

  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
  Result.Sborka_lop := SB_LOP_S;
  Result.Sborka_tyag := SB_TYAG_S;
  Result.Sborka_RON:=NC_RON;
  Result.Sborka_Zas:=SB_ZAS;
end;

function Germik_DU_New(Izdel, IDGP: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, j, Flag_Razb_Klapana, Klap, Res, a, b, Kol_Priv, Kol_Lop, Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram, Res_Ruk, Kol_F, Res_Resh, Perim, F1: Integer;
  Kol_Ed_Str, Nam, Elem, Lop, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama, F, luk, NAM_LIST, USLOVie, S: string;
  Kol_Ed, NC_RON, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, Str: string;
begin
      //Клапан ГЕРМИК-ДУ-З-500*600-2*ф-ЭМП220-сн-0-0
  D := 0;
  NAM_LIST := '';
  Nam := Izdel;
  Kpu := Pos('ГЕРМИК', Izdel);
  Result.SVarka := 0;
  if Kpu <> 0 then
  begin
    Lop := '0';
    F1 := 0;
    Flag_Razb_Klapana := 0;
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + IDGP + #39 + ') ', ['Специф']) then
      exit;
    Flag_Razb_Klapana := 0;
    for j := 0 to Form1.ADOQuery2.RecordCount - 1 do  //Проверка на Клапан разбитый на 2
    begin
      Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
      Kol_Ed_Str := StringReplace(Form1.ADOQuery2.FieldByName('Количество').AsString, '.', ',', [rfReplaceAll]);
      System.SysUtils.FormatSettings.DecimalSeparator := (',');
      Kol_Ed := StrToFloat(Kol_Ed_Str);
      Klap := AnsiCompareStr('Клапан', Elem);
      if (Klap = 0) and (Kol_Ed > 1) then
      begin
        Flag_Razb_Klapana := 1; //Клапан разбит на 2
        Izdel := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
            //Nam := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
        Break;
      end;
      Form1.ADOQuery2.Next;
    end;                 //Лопатка-заготовка
    Str := 'Лопатка%';
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ') AND ((Элемент Like ' + #39 + '%s' + #39 + '))', ['Специф', Str]) then
      exit;
    for i := 0 to Form1.ADOQuery1.RecordCount - 1 do
    begin
      Kol_Lop := Kol_Lop + Form1.ADOQuery1.FieldByName('Количество').AsInteger;
      Form1.ADOQuery1.Next;
    end;

    Privod := Form1.SG6.Cells[I_FN_BRIKET, Ii + 1];
    if Privod = '0' then
    begin
     // MessageDlg('Необходимо поставить кол-во приводов!', mtError, [mbOk], 0);
     // Exit;
    end;

    Privod_Nam := Form1.StringGrid10.Cells[I_FN_MOD_PRIVOD, Ii + 1];
    Res := Pos(' ', Izdel);
    Delete(Izdel, 1, Res);
        //======================================== ГЕРМИК
    Res := Pos('-', Izdel);
    KPu_S := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
        //======================================== ДУ
    Res := Pos('-', Izdel);
    KPu_S := KPu_S + '-' + Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
        //========================================  З
    Res := Pos('-', Izdel);
    N1 := Copy(Izdel, 1, Res - 1);
    if Length(N1) = 1 then
      Delete(Izdel, 1, Res);
        //Delete(Izdel, 1, Res);
        //========================================
       //Клапан ГЕРМИК-ДУ-З-500*600-2*ф-ЭМП220-сн-0-0
       //Клапан ГЕРМИК-ДУ-З-900*900-2*ф-MB24-сн-0-0
       //Клапан ГЕРМИК-ДУ-З-750*800-1*ф-MV24-вн-РОН110-мрз
       //Клапан ГЕРМИК-ДУ-З-400*800-1*ф-MB220-вн-рон-мрз
       //Клапан ГЕРМИК-ДУ-Д-600*700-1*ф-MB24-вн-0-0-0-0
       //Клапан ГЕРМИК-ДУ-З-500*600-1*ф-MB220-вн-0-РОН120-мрз-0
       //Клапан ГЕРМИК-ДУ-З-400*800-1*ф-MB220-вн-рон-мрз
       //Клапан ГЕРМИК-ДУ-З-1000*500-2*ф-MB220-сн-0-мрп
       //Клапан ГЕРМИК-ДУ-1000*500-2*ф-MB220-сн-0-мрп
    Res := Pos('*', Izdel);
    if Res > 5 then
      Exit;
    a := StrToInt(Copy(Izdel, 1, Res - 1));
    Delete(Izdel, 1, Res);
        //========================================
    Res := Pos('-', Izdel);
    b := StrToInt(Copy(Izdel, 1, Res - 1));
    Delete(Izdel, 1, Res);
        //========================================
    Res := Pos('-', Izdel);
    F := Copy(Izdel, 1, 1);
    Delete(Izdel, 1, Res);
    if F <> '' then
      Kol_F := StrToInt(F);
        //========================================
       //Клапан ГЕРМИК-ДУ-З-500*600-2*ф-ЭМП220-сн-0-0
    Res := Pos('-', Izdel);
    Priv := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
        //======================================== -сн
    Res := Pos('-', Izdel);
    Razmesh := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
        //======================================== Klem,Resh,luk,Pereh,Ruk,Rama

    if Privod = '' then
      Kol_Priv := 0
    else
      Kol_Priv := StrToInt(Privod);
        //-----------------------------------------------------
        //========================================
    if a <= 1000 then
      USLOVie := '<1000'
    else
      USLOVie := '>1000';

    NAM_LIST := KPu_S + '-' + F + '-ф-' + N1 + USLOVie;
    if Kol_Lop <= 10 then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([кол-во лопаток]=' + #39 + IntToStr(Kol_Lop) + #39 + ')', [NAM_LIST]) then
        exit;
      SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопаток').AsString;
      SB_TYAG_S := Form1.ADOQuery1.FieldByName('сборка тяг').AsString;
      SB_1_S := Form1.ADOQuery1.FieldByName('1-я сборка').AsString;
      SB_2_S := Form1.ADOQuery1.FieldByName('2-я сборка').AsString;
      SB_1 := StrToFloat(SB_1_S);
      SB_2 := StrToFloat(SB_2_S);
    end
    else
    begin
      Kol_Lop := 10;
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([кол-во лопаток]=' + #39 + IntToStr(Kol_Lop) + #39 + ')', [NAM_LIST]) then
        exit;
      SB_LOP_S := FloatToStr(Form1.ADOQuery1.FieldByName('сборка лопаток').AsFloat * 2);
      SB_TYAG_S := FloatToStr(Form1.ADOQuery1.FieldByName('сборка тяг').AsFloat * 2);
      SB_1_S := Form1.ADOQuery1.FieldByName('1-я сборка').AsString;
      SB_2_S := Form1.ADOQuery1.FieldByName('2-я сборка').AsString;
      SB_1 := StrToFloat(SB_1_S) * 2;
      SB_2 := StrToFloat(SB_2_S) * 2;
    end;
          //Form1.Memo13.Lines.Add(Form1.ADOQuery1.FieldByName('сборка лопаток').AsString);
          //Form1.Memo13.Lines.Add(Form1.ADOQuery1.FieldByName('сборка тяг').AsString);
    Form1.Memo13.Lines.Add(SB_1_S);
    Form1.Memo13.Lines.Add(SB_2_S);

        //-----------------------------------------------------
    Perim := a + b;
    Res_Resh := Pos(AnsiUpperCase('мрЗ'), AnsiUpperCase(Nam));
    Res_Ram := Pos(AnsiUpperCase('мрП'), AnsiUpperCase(Nam));
    if (Res_Ram <> 0) or (Res_Resh <> 0) then
    begin
      if Perim <= 600 then
        USLOVie := '600';
          //+++++++++++++++++++++
      if (Perim > 600) and (Perim <= 850) then
        USLOVie := '850';
          //+++++++++++++++++++++
      if (Perim > 850) and (Perim <= 1200) then
        USLOVie := '1200';
          //+++++++++++++++++++++
      if (Perim > 1200) and (Perim <= 1800) then
        USLOVie := '1800';
          //+++++++++++++++++++++
      if (Perim > 1800) then
        USLOVie := '2000';
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + (USLOVie) + #39 + ')', ['МРЗ']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('Норма').AsString;
      NC_RON := StrToFloat(S);
      Form1.Memo13.Lines.Add(S);
    end;

        //-----------------------------------------------------
    Perim := a + b;
    S := AnsiUpperCase('рон');
    S1 := AnsiUpperCase(Nam);
    Res_Resh := Pos(S, S1);
    if (Res_Resh <> 0) then
    begin
      if Perim <= 1000 then
        USLOVie := '1000';
          //+++++++++++++++++++++
      if (Perim > 1000) and (Perim <= 1300) then
        USLOVie := '1300';
          //+++++++++++++++++++++
      if (Perim > 1300) and (Perim <= 1800) then
        USLOVie := '1800';
          //+++++++++++++++++++++
      if (Perim > 1800) and (Perim <= 2500) then
        USLOVie := '2500';
          //+++++++++++++++++++++
      if (Perim > 2500) then
        USLOVie := '2501';
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + (USLOVie) + #39 + ')', ['Решетка']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('Норма').AsString;
      Form1.Memo13.Lines.Add(S);
      NC_RON := StrToFloat(S);
    end;

        //Электромагнит
    Res_Resh := Pos(AnsiUpperCase('ЭМП'), AnsiUpperCase(Priv));
    if (Res_Resh <> 0) then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s]', ['Привод']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('Эл-магнит').AsString;
      Form1.Memo13.Lines.Add(S);
      D := StrToFloat(S) * Kol_Priv;
    end;
        //Эл-привод
    if (Res_Resh = 0) then
    begin

      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
        exit;
          {Res_Resh:=Pos(AnsiUpperCase('МС'),AnsiUpperCase(Priv));
          if  (Res_Resh<>0) then
            S:=  Form1.ADOQuery1.FieldByName('МС').AsString
          else }
      S := Form1.ADOQuery1.FieldByName('Эл-привод').AsString;
      Form1.Memo13.Lines.Add(S);
      D := StrToFloat(S) * Kol_Priv;
    end;
    SB_2 := SB_2 + D ;
    D := 0;
        //--------------------------------------------------------КK
    S := AnsiUpperCase('-КК-');
    S1 := AnsiUpperCase(Nam);
    Res := Pos(S, S1); //Клемная коробка
    if Res <> 0 then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('КК').AsString;
      D := StrToFloat(S) * Kol_Priv;
    end;
    SB_2 := SB_2 + D;
    D := 0;
               //--------------------------------------------------------КK
    S := AnsiUpperCase('-КЛ-');
    S1 := AnsiUpperCase(Nam);
    Res := Pos(S, S1); //Клемная коробка
    if Res <> 0 then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('КК').AsString;
      D := StrToFloat(S) * Kol_Priv;
    end;
    SB_2 := SB_2 + D;
    D := 0;
  end;
  if Flag_Razb_Klapana = 1 then//Клапан разбит на 2 then
    SB_2 := SB_2 + 0.213;
  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
  Result.Sborka_lop := SB_LOP_S;
  Result.Sborka_tyag := SB_TYAG_S;
  Result.Sborka_RON:=NC_RON;
end;

function OKSID_New(Izdel, IDGP: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, j, Flag_Razb_Klapana, Klap, Res, a, b, Kol_Priv, Kol_Lop, Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram, Res_Ruk, Kol_F, Res_Resh, Perim, F1: Integer;
  Kol_Ed_Str, Nam, Elem, Lop,iz, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama, F, luk, NAM_LIST, USLOVie, S: string;
  Kol_Ed, NC_RON, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, Str: string;
begin
  D := 0;
  NAM_LIST := '';
  Nam := Izdel;
  Kpu := Pos('ОКСИД', Izdel);
  Result.SVarka := 0;
  if Kpu <> 0 then
  begin
    Lop := '0';
    F1 := 0;
    Flag_Razb_Klapana := 0;
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + IDGP + #39 + ') ', ['Специф']) then
      exit;
    Flag_Razb_Klapana := 0;
    for j := 0 to Form1.ADOQuery2.RecordCount - 1 do  //Проверка на Клапан разбитый на 2
    begin
      Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
      Kol_Ed_Str := StringReplace(Form1.ADOQuery2.FieldByName('Количество').AsString, '.', ',', [rfReplaceAll]);
      System.SysUtils.FormatSettings.DecimalSeparator := (',');
      Kol_Ed := StrToFloat(Kol_Ed_Str);
      Klap := AnsiCompareStr('Клапан', Elem);
      if (Klap = 0) and (Kol_Ed > 1) then
      begin
        Flag_Razb_Klapana := 1; //Клапан разбит на 2
        Iz := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
            //Nam := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
        Break;
      end;
      Form1.ADOQuery2.Next;
    end;                 //Лопатка-заготовка
    Str := 'Лопатка%';
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ') AND ((Элемент Like ' + #39 + '%s' + #39 + '))', ['Специф', Str]) then
      exit;
    for i := 0 to Form1.ADOQuery1.RecordCount - 1 do
    begin
      Kol_Lop := Kol_Lop + Form1.ADOQuery1.FieldByName('Количество').AsInteger;
      Form1.ADOQuery1.Next;
    end;

    Privod := Form1.SG6.Cells[I_FN_BRIKET, Ii + 1];
    if Privod = '0' then
    begin
     // MessageDlg('Необходимо поставить кол-во приводов!', mtError, [mbOk], 0);
     // Exit;
    end;

    Privod_Nam := Form1.StringGrid10.Cells[I_FN_MOD_PRIVOD, Ii + 1];
    Res := Pos(' ', Izdel);
    Delete(Izdel, 1, Res);
        //Клапан ОКСИД-400*400-1*Ф-Н-0-МРЗ
    Res := Pos('-', Izdel);
    KPu_S := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
    //=======================================

    Res := Pos('*', Izdel);
    if Res > 5 then
      Exit;
    a := StrToInt(Copy(Izdel, 1, Res - 1));
    Delete(Izdel, 1, Res);
        //========================================
    Res := Pos('-', Izdel);
    b := StrToInt(Copy(Izdel, 1, Res - 1));
    Delete(Izdel, 1, Res);
        //========================================
    Res := Pos('-', Izdel);
    F := Copy(Izdel, 1, 1);
    Delete(Izdel, 1, Res);
    if F <> '' then
      Kol_F := StrToInt(F);
        //========================================
   //Клапан ОКСИД-400*400-1*Ф-Н-0-МРЗ
    Res := Pos('-', Izdel);
    Razmesh := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
        //======================================== -сн
    Res := Pos('-', Izdel);
    Ispol := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
        //======================================== Klem,Resh,luk,Pereh,Ruk,Rama

    if Privod = '' then
      Kol_Priv := 0
    else
      Kol_Priv := StrToInt(Privod);
        //-----------------------------------------------------
        //========================================
    if a <= 800 then
      USLOVie := '800'
    else
      USLOVie := '1000';
   Res := Pos('-Н-', Nam);
   if Res<>0 then
     NAM_LIST := 'ОКСИД-Н'
     Else
     NAM_LIST := 'ОКСИД-МС';

      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Лопатки]=' +
       #39 + IntToStr(Kol_Lop) + #39 + ') ', [NAM_LIST]) then
        exit;

      SB_1_S := '0,0001';
      SB_2_S := Form1.ADOQuery1.FieldByName(USLOVie).AsString;
      SB_1 := StrToFloat(SB_1_S);
      SB_2 := StrToFloat(SB_2_S);

    Form1.Memo13.Lines.Add(SB_1_S);
    Form1.Memo13.Lines.Add(SB_2_S);

        //-----------------------------------------------------
    Perim := a + b;
    Res_Resh := Pos(AnsiUpperCase('мрЗ'), AnsiUpperCase(Nam));
    Res_Ram := Pos(AnsiUpperCase('мрП'), AnsiUpperCase(Nam));
    if (Res_Ram <> 0) or (Res_Resh <> 0) then
    begin
      if Perim <= 600 then
        USLOVie := '600';
          //+++++++++++++++++++++
      if (Perim > 600) and (Perim <= 850) then
        USLOVie := '850';
          //+++++++++++++++++++++
      if (Perim > 850) and (Perim <= 1200) then
        USLOVie := '1200';
          //+++++++++++++++++++++
      if (Perim > 1200) and (Perim <= 1800) then
        USLOVie := '1800';
          //+++++++++++++++++++++
      if (Perim > 1800) then
        USLOVie := '2000';
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + (USLOVie) + #39 + ')', ['МРЗ']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('Норма').AsString;
      NC_RON := StrToFloat(S);
      Form1.Memo13.Lines.Add(S);
    end;

        //-----------------------------------------------------
    Perim := a + b;
    S := AnsiUpperCase('рон');
    S1 := AnsiUpperCase(Nam);
    Res_Resh := Pos(S, S1);
    if (Res_Resh <> 0) then
    begin
      if Perim <= 1000 then
        USLOVie := '1000';
          //+++++++++++++++++++++
      if (Perim > 1000) and (Perim <= 1300) then
        USLOVie := '1300';
          //+++++++++++++++++++++
      if (Perim > 1300) and (Perim <= 1800) then
        USLOVie := '1800';
          //+++++++++++++++++++++
      if (Perim > 1800) and (Perim <= 2500) then
        USLOVie := '2500';
          //+++++++++++++++++++++
      if (Perim > 2500) then
        USLOVie := '2501';
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + (USLOVie) + #39 + ')', ['Решетка']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('Норма').AsString;
      Form1.Memo13.Lines.Add(S);
      NC_RON :=NC_RON+ StrToFloat(S);
    end;
        //Электромагнит
    Res_Resh := Pos(AnsiUpperCase('ЭМП'), AnsiUpperCase(Priv));
    if (Res_Resh <> 0) then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s]', ['Привод']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('Эл-магнит').AsString;
      Form1.Memo13.Lines.Add(S);
      D := StrToFloat(S) * Kol_Priv;
    end;
        //Эл-привод
    if (Res_Resh = 0) then
    begin

      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
        exit;

      S := Form1.ADOQuery1.FieldByName('Эл-привод').AsString;
      Form1.Memo13.Lines.Add(S);
      D := StrToFloat(S) * Kol_Priv;
    end;
    SB_2 := SB_2 + D ;
    D := 0;
        //--------------------------------------------------------КK
    S := AnsiUpperCase('-КК-');
    S1 := AnsiUpperCase(Nam);
    Res := Pos(S, S1); //Клемная коробка
    if Res <> 0 then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('КК').AsString;
      D := StrToFloat(S) * Kol_Priv;
    end;
    SB_2 := SB_2 + D;
    D := 0;
               //--------------------------------------------------------КK
    S := AnsiUpperCase('-КЛ-');
    S1 := AnsiUpperCase(Nam);
    Res := Pos(S, S1); //Клемная коробка
    if Res <> 0 then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('КК').AsString;
      D := StrToFloat(S) * Kol_Priv;
    end;
    SB_2 := SB_2 + D;
    D := 0;
  end;
  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
  Result.Sborka_RON:=NC_RON;
end;

function PROK_New(Izdel, IDGP: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, j, Flag_Razb_Klapana, Klap, Res, a, b, Kol_Priv, Kol_Lop, Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram, Res_Ruk, Kol_F, Res_Resh, Perim, F1: Integer;
  Kol_Ed_Str, Nam, Elem, Lop,iz, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama, F, luk, NAM_LIST, USLOVie, S: string;
  Kol_Ed, NC_RON, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, Str: string;
begin
//Клапан ПРОК-1-Н-700*700-0
//Клапан ПРОК-1-Н-500-0
//Клапан ПРОК-1-Н-1000*300-1*000*V1
  D := 0;
  NAM_LIST := '';
  Nam := Izdel;
  Kpu := Pos('*', Izdel);
  if Kpu=0 then
  Exit;
  Kpu := Pos('ПРОК-1-Н-', Izdel);
  Result.SVarka := 0;
  if Kpu <> 0 then
  begin
    Lop := '0';
    F1 := 0;
    Flag_Razb_Klapana := 0;
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + IDGP + #39 + ') ', ['Специф']) then
      exit;
    Flag_Razb_Klapana := 0;
    for j := 0 to Form1.ADOQuery2.RecordCount - 1 do  //Проверка на Клапан разбитый на 2
    begin
      Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
      Kol_Ed_Str := StringReplace(Form1.ADOQuery2.FieldByName('Количество').AsString, '.', ',', [rfReplaceAll]);
      System.SysUtils.FormatSettings.DecimalSeparator := (',');
      Kol_Ed := StrToFloat(Kol_Ed_Str);
      Klap := AnsiCompareStr('Клапан', Elem);
      if (Klap = 0) and (Kol_Ed > 1) then
      begin
        Flag_Razb_Klapana := 1; //Клапан разбит на 2
        Iz := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
            //Nam := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
        Break;
      end;
      Form1.ADOQuery2.Next;
    end;                 //Лопатка-заготовка
    Str := 'Лопатка%';
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ') AND ((Элемент Like ' + #39 + '%s' + #39 + '))', ['Специф', Str]) then
      exit;
    for i := 0 to Form1.ADOQuery1.RecordCount - 1 do
    begin
      Kol_Lop := Kol_Lop + Form1.ADOQuery1.FieldByName('Количество').AsInteger;
      Form1.ADOQuery1.Next;
    end;

    Privod := Form1.SG6.Cells[I_FN_BRIKET, Ii + 1];
    if Privod = '0' then
    begin
     // MessageDlg('Необходимо поставить кол-во приводов!', mtError, [mbOk], 0);
     // Exit;
    end;

    Privod_Nam := Form1.StringGrid10.Cells[I_FN_MOD_PRIVOD, Ii + 1];
    Res := Pos(' ', Izdel);
    Delete(Izdel, 1, Res);
   //Клапан ПРОК-1-Н-700*700-0
    Res := Pos('-', Izdel);
    KPu_S := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
    //=======================================
  //Клапан ПРОК-1-Н-700*700-0
    Res := Pos('-', Izdel);
    KPu_S := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
    //=======================================
  //Клапан ПРОК-1-Н-700*700-0
    Res := Pos('-', Izdel);
    KPu_S := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
    //=======================================
    Res := Pos('*', Izdel);
    if Res > 5 then
      Exit;
    a := StrToInt(Copy(Izdel, 1, Res - 1));
    Delete(Izdel, 1, Res);
        //========================================
    Res := Pos('-', Izdel);
    b := StrToInt(Copy(Izdel, 1, Res - 1));
    Delete(Izdel, 1, Res);
        //========================================
    Res := Pos('-', Izdel);
    F := Copy(Izdel, 1, 1);
    Delete(Izdel, 1, Res);
    if F <> '' then
      Kol_F := StrToInt(F);
        //========================================
    Res := Pos('-', Izdel);
    Razmesh := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
        //======================================== -сн
    Res := Pos('-', Izdel);
    Ispol := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
        //======================================== Klem,Resh,luk,Pereh,Ruk,Rama

    if Privod = '' then
      Kol_Priv := 0
    else
      Kol_Priv := StrToInt(Privod);
    //-----------------------------------------------------

    if a <= 600 then
      USLOVie := '600';
    if (a > 600) AND (a<=1000) then
      USLOVie := '800';
    if a > 1000 then
      USLOVie := '1000';

     NAM_LIST := 'ПРОК';

      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Лопатки]=' +
       #39 + IntToStr(Kol_Lop) + #39 + ') ', [NAM_LIST]) then
        exit;

      SB_1_S := '0,0001';
      SB_2_S := Form1.ADOQuery1.FieldByName(USLOVie).AsString;
      SB_1 := StrToFloat(SB_1_S);
      SB_2 := StrToFloat(SB_2_S);

    Form1.Memo13.Lines.Add(SB_1_S);
    Form1.Memo13.Lines.Add(SB_2_S);

        //-----------------------------------------------------
    Perim := a + b;
    Res_Resh := Pos(AnsiUpperCase('мрЗ'), AnsiUpperCase(Nam));
    Res_Ram := Pos(AnsiUpperCase('мрП'), AnsiUpperCase(Nam));
    if (Res_Ram <> 0) or (Res_Resh <> 0) then
    begin
      if Perim <= 600 then
        USLOVie := '600';
          //+++++++++++++++++++++
      if (Perim > 600) and (Perim <= 850) then
        USLOVie := '850';
          //+++++++++++++++++++++
      if (Perim > 850) and (Perim <= 1200) then
        USLOVie := '1200';
          //+++++++++++++++++++++
      if (Perim > 1200) and (Perim <= 1800) then
        USLOVie := '1800';
          //+++++++++++++++++++++
      if (Perim > 1800) then
        USLOVie := '2000';
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + (USLOVie) + #39 + ')', ['МРЗ']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('Норма').AsString;
      NC_RON := StrToFloat(S);
      Form1.Memo13.Lines.Add(S);
    end;

        //-----------------------------------------------------
    Perim := a + b;
    S := AnsiUpperCase('рон');
    S1 := AnsiUpperCase(Nam);
    Res_Resh := Pos(S, S1);
    if (Res_Resh <> 0) then
    begin
      if Perim <= 1000 then
        USLOVie := '1000';
          //+++++++++++++++++++++
      if (Perim > 1000) and (Perim <= 1300) then
        USLOVie := '1300';
          //+++++++++++++++++++++
      if (Perim > 1300) and (Perim <= 1800) then
        USLOVie := '1800';
          //+++++++++++++++++++++
      if (Perim > 1800) and (Perim <= 2500) then
        USLOVie := '2500';
          //+++++++++++++++++++++
      if (Perim > 2500) then
        USLOVie := '2501';
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + (USLOVie) + #39 + ')', ['Решетка']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('Норма').AsString;
      Form1.Memo13.Lines.Add(S);
      NC_RON := StrToFloat(S);
    end;
        //Электромагнит
    Res_Resh := Pos(AnsiUpperCase('ЭМП'), AnsiUpperCase(Priv));
    if (Res_Resh <> 0) then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s]', ['Привод']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('Эл-магнит').AsString;
      Form1.Memo13.Lines.Add(S);
      D := StrToFloat(S) * Kol_Priv;
    end;
        //Эл-привод
    if (Res_Resh = 0) then
    begin

      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
        exit;

      S := Form1.ADOQuery1.FieldByName('Эл-привод').AsString;
      Form1.Memo13.Lines.Add(S);
      D := StrToFloat(S) * Kol_Priv;
    end;
    SB_2 := SB_2 + D ;
    D := 0;
        //--------------------------------------------------------КK
    S := AnsiUpperCase('-КК-');
    S1 := AnsiUpperCase(Nam);
    Res := Pos(S, S1); //Клемная коробка
    if Res <> 0 then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('КК').AsString;
      D := StrToFloat(S) * Kol_Priv;
    end;
    SB_2 := SB_2 + D;
    D := 0;
               //--------------------------------------------------------КK
    S := AnsiUpperCase('-КЛ-');
    S1 := AnsiUpperCase(Nam);
    Res := Pos(S, S1); //Клемная коробка
    if Res <> 0 then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('КК').AsString;
      D := StrToFloat(S) * Kol_Priv;
    end;
    SB_2 := SB_2 + D;
    D := 0;
  end;
  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
  Result.Sborka_RON:=NC_RON;
end;


function KPU_New(Izdel, IDGP: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, j, Klap, Res, Res1, a, b, Kol_Priv, Kol_Lop, Res_Ispol, Res_Priv, Res_Term, Res_Klem,
  Res_Ram, Res_Ruk, Kol_F, Res_Resh, Perim, P, Res_MS, Res_EPV, MS_I,
  Hol_Kor_2N, Hol_kor, Perehod, Perehod2, DD: Integer;
  Kol_Ed_Str, Nam, Elem, Lop, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh,
   N1, Pereh, Ruk, Rama, F, luk, NAM_LIST, USLOVie, S, Str: string;
  Kol_Ed, NC_RON, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2, NC_Kor, Flag_Razb_Klapana: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, MS, SS, SS1,Str1: string;
begin
  D := 0;
  NAM_LIST := '';
  Nam := Izdel;
  DD := 0; //КПУ-ДД
  Result.SVarka := 0;
  Result.Sborka1 := 0;
  Result.Sborka2 := 0;
  Result.Sborka_lop := '0';
  Result.Sborka_tyag := '0';
  Kol_Lop := 0;
  Lop := '0';
  Res_Priv:=0;
  Flag_Razb_Klapana := 0;
  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + IDGP + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ') ', ['Специф']) then
    exit;
  Flag_Razb_Klapana := 0;
  for j := 0 to Form1.ADOQuery2.RecordCount - 1 do  //Проверка на Клапан разбитый на 2
  begin
    Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
    Kol_Ed_Str := StringReplace(Form1.ADOQuery2.FieldByName('Количество').AsString, '.', ',', [rfReplaceAll]);
    System.SysUtils.FormatSettings.DecimalSeparator := (',');
    Kol_Ed := StrToFloat(Kol_Ed_Str);
    Klap := Pos('Клапан', Elem);
    if (Klap <> 0) then
    begin
      Flag_Razb_Klapana := Flag_Razb_Klapana + Kol_Ed; //Клапан разбит на 2

      //Izdel := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
            //Nam := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
    end;
    Form1.ADOQuery2.Next;
  end;                 //Лопатка-заготовка
  Str := 'Лопатка%';
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ') AND ((Элемент Like ' + #39 + '%s' + #39 + '))', ['Специф', Str]) then
    exit;
  for i := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    Kol_Lop := Kol_Lop + Form1.ADOQuery1.FieldByName('Количество').AsInteger;
    Form1.ADOQuery1.Next;
  end;
                                                                                                           // ВГ 1106.01.00.001-800*500


  Privod := Form1.SG6.Cells[I_FN_BRIKET, Ii + 1];
  Str := '%ЭМВ%';
  Str1 := '%Электропривод%';
  if (Privod = '0') then
  begin
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 +
  ') AND (Элемент Like ' + #39 + '%s' + #39 + ') OR ((Элемент Like ' + #39 + '%s' + #39 + '))', ['Специф', Str,Str1]) then
    exit;

    Privod :=  Form1.ADOQuery1.FieldByName('Количество').AsString;

  end;
  Privod_Nam := Form1.StringGrid10.Cells[I_FN_MOD_PRIVOD, Ii + 1];
        //Клапан КПУ-3-ДД-Р-Н-250*250-2*ф-MB220-сн-0-0-0-1*160-0-0
        //Клапан КПУ-1Н-О-Н-100-2*ф-MV220-СН-КК-0-0-0-0-0
  Res1 := Pos('Миасс ', Izdel);
  if Res1<>0 then
  Delete(Izdel, 1, 6);
  Izdel := Trim(Izdel);
  Res1 := Pos('-ДД', Izdel);
  if Res1 <> 0 then
    DD := 1;
 { Res := Pos('-3-ДД', Izdel);
  Delete(Izdel, Res, 5);
  if Res <> 0 then
    Insert('-1Н', Izdel, Res);

  Res1 := Pos('-ДД', Izdel);
  Delete(Izdel, Res1, 3);
  if Res1 <> 0 then
    Insert('-1Н', Izdel, Res1);  }

  Res := Pos(' ', Izdel);
  Delete(Izdel, 1, Res);
        //======================================== KPU
  Res := Pos('-', Izdel);
  KPu_S := Copy(Izdel, 1, Res - 1);
  Delete(Izdel, 1, Res);
        //======================================== 1 H
  Res := Pos('-', Izdel);
  N1 := Copy(Izdel, 1, Res - 1);
        //Pos3 := Copy(Izdel, 2, 1);
  Delete(Izdel, 1, Res);
        //========================================
        //Клапан КПУ-1Н-О-Н-600*400-2*ф-MB220-сн-0-0-0-0-0-0
 //Клапан КПУ-1Н-О-МС-720*400-2*ф-MV220-СН-0-0-0-0-0-0 (КОМПЛЕКТ 1500*400)
 //Клапан КПУ-1Н-З-МС-720*400-2*ф-MV220-СН-0-0-0-0-0-0 (КОМПЛЕКТ 1500*400)
        //========================================
  Res := Pos('-', Izdel);
  Nazn := Copy(Izdel, 1, Res - 1);
  Delete(Izdel, 1, Res);
        //========================================
  Res := Pos('-', Izdel);
  Ispol := Copy(Izdel, 1, Res - 1);
  Delete(Izdel, 1, Res);
        //========================================
        //Клапан КПУ-2Н-О-Н-200-2*ф-MB220-T-сн-0-0-0-2*100-0-0
        //Клапан КПУ-1Н-О-Н-200*200-2*ф-MB220-сн-0-с-0-0-0-0
  Res := Pos('-', Izdel); //Проверка на круглый если -
  if Res > 5 then //200*200- Квадрат
  begin
    Res := Pos('*', Izdel);
    a := StrToInt(Copy(Izdel, 1, Res - 1));
    Delete(Izdel, 1, Res);
            //========================================
    Res := Pos('-', Izdel);
    b := StrToInt(Copy(Izdel, 1, Res - 1));
    Delete(Izdel, 1, Res);
  end
  else
  begin
    Res := Pos('-', Izdel);
    a := StrToInt(Copy(Izdel, 1, Res - 1));
    Delete(Izdel, 1, Res);
    b := 0;
  end;
       { Res := Pos('*', Izdel);
        if Res > 5 then
        Begin
          B:=0;
          a := StrToInt(Copy(Izdel, 1, Res - 1));
          Delete(Izdel, 1, Res);
        //========================================
        Res := Pos('-', Izdel);
        b := StrToInt(Copy(Izdel, 1, Res - 1));
        Delete(Izdel, 1, Res); }
  Perim := a + b;
        //========================================
  Res := Pos('-', Izdel);
  F := Copy(Izdel, 1, 1);
  Delete(Izdel, 1, Res);
  if F <> '' then
    Kol_F := StrToInt(F);
          //========================================
       // if Kol_F =1 then
       // Exit;
  Term := '';
       //Клапан КПУ-1Н-О-Н-1150*1150-2*ф-MB220-сн-0-0-0-2*1120-0-0
       // T ?
       //Клапан КПУ-1Н-О-Н-700*250-2*ф-MV220-сн-0-0-0-0-0-0
  Res := Pos('-', Izdel);
  Priv := Copy(Izdel, 1, Res - 1);
  Delete(Izdel, 1, Res);

        //========================================
  Res := Pos('T', Izdel);
  if Res <> 0 then
  begin
    Term := Copy(Izdel, 1, Res);
    Delete(Izdel, 1, Res + 1);

  end;
        //========================================
  Res := Pos('-', Izdel);
  Razmesh := Copy(Izdel, 1, Res - 1);
  Delete(Izdel, 1, Res);
        //======================================== Klem,Resh,luk,Pereh,Ruk,Rama
  Res := Pos('-', Izdel);
  klem := Copy(Izdel, 1, Res - 1);
  Delete(Izdel, 1, Res);
        //========================================
  Res := Pos('-', Izdel);
  Resh := Copy(Izdel, 1, Res - 1);
  Delete(Izdel, 1, Res);
        //========================================
  Res := Pos('-', Izdel);  //Защита от кражи
  luk := Copy(Izdel, 1, Res - 1);
  Delete(Izdel, 1, Res);
        //========================================
  Res := Pos('-', Izdel);
  Pereh := Copy(Izdel, 1, Res - 1);  //2*1120
  Delete(Izdel, 1, Res);
        //
  Res := Pos('*', Pereh);
  Delete(Pereh, 1, Res);
        //========================================
        //Клапан КПУ-1Н-О-Н-700*250-2*ф-MV220-сн-0-0-0-0-0-0
  Res := Pos('-', Izdel);
  Ruk := Copy(Izdel, 1, Res - 1);
  Delete(Izdel, 1, Res);
        //========================================
        //Клапан КПУ-1Н-О-Н-200*200-2*ф-MB220-сн-0-р-0-0-0-мрп
  Rama := Izdel;
        //-----------------------------------------------------

  if Privod = '' then
    Kol_Priv := 0
  else
    Kol_Priv := StrToInt(Privod);
        //======================================== Klem,Resh,luk,Pereh,Ruk,Rama

  if Privod = '' then
    Kol_Priv := 0
  else
    Kol_Priv := StrToInt(Privod);
 { if B=0 then
  begin
      NAM_LIST := KPu_S+'-' +N1+ '-' + F + '-ф-Кр';
  end
  Else }

        //-------------------------------------------------------------------
  P := 0;
 if (Kol_F = 1) and (b <> 0) then
 Begin
  Res_Priv:=Pos('ЭМ',Nam);
  res:=Pos('-1Н-',Nam);
  if (Res<>0) then  //КПУ-1Н-1-ф
  begin
     NAM_LIST := KPu_S + '-1Н-' + F + '-фNow';
    if (b <= 700) then
      P := 700;

    if (b > 700) then
      P := 800;
    if Res_Priv <>0 then
       Res_Priv:=1;
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([кол-во лопаток]=' +
    #39 + IntToStr(Kol_Lop) + #39 + ') AND (Привод='+#39+IntToStr(Res_Priv)+#39+')', [NAM_LIST]) then
      exit;
    Res := Pos('О', Nazn);
    Res1 := Pos('З', Nazn);
    if (Res <> 0) or (Res1 <> 0) then
    begin
      if P = 700 then
        SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопаток  О,З-B<=700').AsString
      else
        SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопаток  О,З-B>700').AsString
    end;
          //
    //Res := Pos('Д', Nazn);
    //if Res <> 0 then
    if DD<>0 then

    begin
      if P = 700 then
        SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопаток Д-B<=700').AsString
      else
        SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопаток Д-B>700').AsString
    end;
          //
    if SB_LOP_S = '' then
      SB_LOP_S := '0';
    SB_TYAG_S := Form1.ADOQuery1.FieldByName('сборка корпуса').AsString;
    if SB_TYAG_S = '' then
      SB_TYAG_S := '0';
    SB_1_S := Form1.ADOQuery1.FieldByName('1-я сборка').AsString;
    if SB_1_S = '' then
      SB_1_S := '0';
    SB_2_S := Form1.ADOQuery1.FieldByName('2-я сборка').AsString;
    if SB_2_S = '' then
      SB_2_S := '0';
    SB_1 := StrToFloat(SB_1_S);
    SB_2 := StrToFloat(SB_2_S);
  end;
        //----------------------------------------------------- КПУ-2-ф
  P := 0;
  res:=Pos('-2Н-',Nam);
  if (Res<>0) then  //КПУ-2Н-1-ф
  begin
     NAM_LIST := KPu_S + '-2Н-' + F + '-фNow';
         if (b <= 700) then
      P := 700;

    if (b > 700) then
      P := 800;
    if Res_Priv <>0 then
       Res_Priv:=1;
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([кол-во лопаток]=' +
    #39 + IntToStr(Kol_Lop) + #39 + ') AND (Привод='+#39+IntToStr(Res_Priv)+#39+')', [NAM_LIST]) then
      exit;
    Res := Pos('О', Nazn);
    Res1 := Pos('З', Nazn);
    if (Res <> 0) or (Res1 <> 0) then
    begin
      if P = 700 then
        SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопаток  О,З-B<=700').AsString
      else
        SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопаток  О,З-B>700').AsString
    end;
          //
    //Res := Pos('Д', Nazn);
   // if Res <> 0 then
   if DD<>0 then

    begin
      if P = 700 then
        SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопаток Д-B<=700').AsString
      else
        SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопаток Д-B>700').AsString
    end;
          //
    if SB_LOP_S = '' then
      SB_LOP_S := '0';
    SB_TYAG_S := Form1.ADOQuery1.FieldByName('сборка корпуса').AsString;
    if SB_TYAG_S = '' then
      SB_TYAG_S := '0';
    SB_1_S := Form1.ADOQuery1.FieldByName('1-я сборка').AsString;
    if SB_1_S = '' then
      SB_1_S := '0';
    SB_2_S := Form1.ADOQuery1.FieldByName('2-я сборка').AsString;
    if SB_2_S = '' then
      SB_2_S := '0';
    SB_1 := StrToFloat(SB_1_S);
    SB_2 := StrToFloat(SB_2_S);

  end;
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Комплектация']) then
      exit;
  //--------------------------------------------------------КK
  D:=0;
  S := AnsiUpperCase('-КК-');
  S1 := AnsiUpperCase(Nam);
  Res := Pos(S, S1); //Клемная коробка
  if Res <> 0 then
  begin

    S := Form1.ADOQuery1.FieldByName('К').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;
               //--------------------------------------------------------КK
  S := AnsiUpperCase('-КЛ-');
  S1 := AnsiUpperCase(Nam);
  Res := Pos(S, S1); //Клемная коробка
  if Res <> 0 then
  begin
    S := Form1.ADOQuery1.FieldByName('К').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;
        //--------------------------------------------------------Т Клапан КПУ-1Н-О-Н-1000*650-2*ф-MB220-T-сн-0-0-0-0-0-0
      //Термодатчик
  S := AnsiUpperCase('-T-');
  S1 := AnsiUpperCase(Nam);
  Res := Pos(S, S1);
  if Res <> 0 then
  begin
    S := Form1.ADOQuery1.FieldByName('Т').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;
        //-----------------------------------------------------  МРЗ-МРП
  Perim := a + b;
  Res_Resh := Pos(AnsiUpperCase('мрЗ'), AnsiUpperCase(Nam));
  Res_Ram := Pos(AnsiUpperCase('мрП'), AnsiUpperCase(Nam));
  if (Res_Ram <> 0) or (Res_Resh <> 0) then
  begin
    S := Form1.ADOQuery1.FieldByName('РОН').AsString;
    D := StrToFloat(S) ;
  end;
  SB_2 := SB_2 + D;
  D := 0;
        //-----------------------------------------------------  РОН
  S := AnsiUpperCase('рон');
  S1 := AnsiUpperCase(Nam);
  Res_Resh := Pos(S, S1);
  if (Res_Resh <> 0) then
  begin
      S := Form1.ADOQuery1.FieldByName('РОН').AsString;
      D := StrToFloat(S) ;
  end;
  SB_2 := SB_2 + D;
  D := 0;
        //-----------------------------------------------------------ПРИВОД
        //Электромагнит
  Res_Resh := Pos(AnsiUpperCase('ЭМП'), AnsiUpperCase(Priv));
  if (Res_Resh <> 0) then
  begin
    S := Form1.ADOQuery1.FieldByName('магнит').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;
        //Эл-привод+++++++++++++++++++
  if (Res_Resh = 0) then
  begin
    S := Form1.ADOQuery1.FieldByName('привод').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;
  //
  {  luk := Copy(Izdel, 1, Res - 1);
  Delete(Izdel, 1, Res);  }
        //========================================
    Res:=Pos('0',Luk);
  if Res=0 then
  Begin
    S := Form1.ADOQuery1.FieldByName('Вандал').AsString;
    D := StrToFloat(S)* Kol_Priv ;
    SB_2 := SB_2 + D;
    D := 0;
  End;
  //
  S := Form1.ADOQuery1.FieldByName('Проверка').AsString;
  D := StrToFloat(S)* Kol_Priv;
  SB_2 := SB_2 + D;
  D := 0;
  //
  {Res := Pos('-', Izdel);
  Pereh := Copy(Izdel, 1, Res - 1);  //2*1120 }
  Res:=Pos('0',Pereh);
  if Res=0 then
  Begin
    Perim:=A;
    if Perim <= 350 then
      P := 150;
    if (Perim > 350) and (Perim <= 600) then
      P := 350;

    if (Perim > 600) and (Perim <= 700) then
      P := 600;

    if (Perim > 700) and (Perim <= 950) then
      P := 700;

    if (Perim > 950) and (Perim <= 1200) then
      P := 950;

    if (Perim > 1200) and (Perim <= 1300) then
      P := 1200;

    if (Perim > 1300) and (Perim <= 1400) then
      P := 1300;

      if (Perim > 1400) and (Perim <= 1700) then
      P := 1400;
    if (Perim > 1700) then
      P := 1700;
        if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where [Размер клапана]='+#39+IntToStr(P)+#39, ['Переходник1D']) then
      exit;
       S := Form1.ADOQuery1.FieldByName('н/ч').AsString;
    D := StrToFloat(S)* Kol_Priv;
    SB_2 := SB_2 + D;
    D := 0;
  End;
 end;
        //----------------------------------------------------- КПУ-2-ф
  P := 0;

  if (Kol_F = 2) AND (B<>0) then  //КПУ-2-ф
  begin
     NAM_LIST := KPu_S +'-'+ F + '-ф';
 {        if (b <= 700) then
      P := 700;

    if (b > 700) then
      P := 800;
    if Res_Priv <>0 then
       Res_Priv:=1;
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([кол-во лопаток]=' +
    #39 + IntToStr(Kol_Lop) + #39 + ') AND (Привод='+#39+IntToStr(Res_Priv)+#39+')', [NAM_LIST]) then
      exit;
    Res := Pos('О', Nazn);
    Res1 := Pos('З', Nazn);
    if (Res <> 0) or (Res1 <> 0) then
    begin
      if P = 700 then
        SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопаток  О,З-B<=700').AsString
      else
        SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопаток  О,З-B>700').AsString
    end;
          //
    Res := Pos('Д', Nazn);
    if Res <> 0 then
    begin
      if P = 700 then
        SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопаток Д-B<=700').AsString
      else
        SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопаток Д-B>700').AsString
    end;
          //
    if SB_LOP_S = '' then
      SB_LOP_S := '0';
    SB_TYAG_S := Form1.ADOQuery1.FieldByName('сборка корпуса').AsString;
    if SB_TYAG_S = '' then
      SB_TYAG_S := '0';
    SB_1_S := Form1.ADOQuery1.FieldByName('1-я сборка').AsString;
    if SB_1_S = '' then
      SB_1_S := '0';
    SB_2_S := Form1.ADOQuery1.FieldByName('2-я сборка').AsString;
    if SB_2_S = '' then
      SB_2_S := '0';
    SB_1 := StrToFloat(SB_1_S);
    SB_2 := StrToFloat(SB_2_S);}
    if Perim <= 100 then
      P := 100;
    if (Perim > 100) and (Perim <= 600) then
      P := 600;

    if (Perim > 600) and (Perim <= 850) then
      P := 850;

    if (Perim > 850) and (Perim <= 1200) then
      P := 1200;

    if (Perim > 1200) and (Perim <= 1800) then
      P := 1800;

    if (Perim > 1800) and (Perim <= 2500) then
      P := 2500;

    if (Perim > 2500) and (Perim <= 3000) then
      P := 2501;

    if (Perim > 3000) then
      P := 3000;
          //----------
    if (a = 100) or (b = 100) then
      P := 100;

    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([кол-во лопаток]=' + #39 +
    IntToStr(Kol_Lop) + #39 + ') AND (полупериметр=' + #39 + IntToStr(P) + #39 + ')', [NAM_LIST]) then
      exit;
    Res := Pos('Р', Nazn);
    if Res <> 0 then
      SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопаток О, З').AsString;

    Res := Pos('О', Nazn);
    if Res <> 0 then
      SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопаток О, З').AsString;
          //
    Res := Pos('З', Nazn);
    if Res <> 0 then
      SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопаток О, З').AsString;
          //
   // Res := Pos('Д', Nazn);
   //  if Res <> 0 then
   if DD<>0 then
      SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка лопаток Д').AsString;
          //
    if SB_LOP_S = '' then
      SB_LOP_S := '0';
    SB_TYAG_S := Form1.ADOQuery1.FieldByName('сборка тяг').AsString;
    if SB_TYAG_S = '' then
      SB_TYAG_S := '0';
    SB_1_S := Form1.ADOQuery1.FieldByName('1-я сборка').AsString;
    if SB_1_S = '' then
      SB_1_S := '0';
    SB_2_S := Form1.ADOQuery1.FieldByName('2-я сборка').AsString;

    if SB_2_S = '' then
      SB_2_S := '0';
    SB_1 := StrToFloat(SB_1_S);

    SB_2 := StrToFloat(SB_2_S);

    Res := Pos('Р', Nazn);
    if Res <> 0 then
      SB_2 := SB_2 + 0.03;
  end;
       { SS:='(Обозначение LIKE ' +
        #39 + 'ВГ 1106.01.00.001%' + #39 + ')';
        if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where  %s  AND  (IdГП=' + #39 + IDGP + #39 + ') AND (ВидЭлемента=' + #39 +
        'Детали' + #39 +
        ') ',
        ['Специф',SS]) then
          exit; }
 {  Res := Pos('-1Н-', Nam);
  if (Kol_F = 2) AND (B<>0) AND (Res<>0) then  //КПУ-1-ф
  Begin
  Str := 'Лопатка%';
  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 +
  ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ') AND ((Элемент Like ' + #39 + '%s' + #39 + '))', ['Специф', Str]) then
    exit;

   if Form1.ADOQuery2.recordCount <> 0 then
   begin

    if (b < 201) and (a <= 200) then
    begin
      SS := '(Б=' + #39 + '150' + #39 + ')';
      SS1 := '150-200';
    end;
          //
    if ((b < 201)) and ((a > 201) and (a < 351)) then
    begin
      SS := '(Б=' + #39 + '150' + #39 + ')';
      SS1 := '201-350';
    end;
          //
    if ((b < 201)) and ((a > 351) and (a < 401)) then
    begin
      SS := '(Б=' + #39 + '150' + #39 + ')';
      SS1 := '351-400';
    end;
          //
    if ((b < 201)) and ((a > 401) and (a < 801)) then
    begin
      SS := '(Б=' + #39 + '150' + #39 + ')';
      SS1 := '401-800';
    end;
          //
    if ((b < 201)) and ((a > 801)) then
    begin
      SS := '(Б=' + #39 + '150' + #39 + ')';
      SS1 := '801-1400';
    end;
          // =======================
    if ((b > 201) and (b < 251)) and ( (a < 201)) then
    begin
      SS := '(Б=' + #39 + '201' + #39 + ')';
      SS1 := '150-200';
    end;
          //=
    if ((b > 201) and (b < 251)) and ((a > 201) and (a < 351)) then
    begin
      SS := '(Б=' + #39 + '201' + #39 + ')';
      SS1 := '201-350';
    end;
          //=
    if ((b > 201) and (b < 251)) and ((a > 351) and (a < 401)) then
    begin
      SS := '(Б=' + #39 + '201' + #39 + ')';
      SS1 := '351-400';
    end;
          //=
    if ((b > 201) and (b < 251)) and ((a > 401) and (a < 801)) then
    begin
      SS := '(Б=' + #39 + '201' + #39 + ')';
      SS1 := '401-800';
    end;
          //=
    if ((b > 201) and (b < 251)) and ((a > 801)) then
    begin
      SS := '(Б=' + #39 + '201' + #39 + ')';
      SS1 := '801-1400';
    end;
          //=
//++++++++++
          //
    if ((b > 251) and (b < 351)) and ( (a < 201)) then
    begin
      SS := '(Б=' + #39 + '251' + #39 + ')';
      SS1 := '150-200';
    end;
          //=
    if ((b > 251) and (b < 351)) and ((a > 201) and (a < 351)) then
    begin
      SS := '(Б=' + #39 + '251' + #39 + ')';
      SS1 := '201-350';
    end;
          //=
    if ((b > 251) and (b < 351)) and ((a > 351) and (a < 401)) then
    begin
      SS := '(Б=' + #39 + '251' + #39 + ')';
      SS1 := '351-400';
    end;
          //=
    if ((b > 251) and (b < 351)) and ((a > 401) and (a < 801)) then
    begin
      SS := '(Б=' + #39 + '251' + #39 + ')';
      SS1 := '401-800';
    end;
          //=
    if ((b > 251) and (b < 351)) and ((a > 801)) then
    begin
      SS := '(Б=' + #39 + '251' + #39 + ')';
      SS1 := '801-1400';
    end;
          //=

//++++++++++  ==========
          //
    if ((b > 351) and (b < 401)) and ((a < 201)) then
    begin
      SS := '(Б=' + #39 + '351' + #39 + ')';
      SS1 := '150-200';
    end;
          //=
    if ((b > 351) and (b < 401)) and ((a > 201) and (a < 351)) then
    begin
      SS := '(Б=' + #39 + '351' + #39 + ')';
      SS1 := '201-350';
    end;
          //=
    if ((b > 351) and (b < 401)) and ((a > 351) and (a < 401)) then
    begin
      SS := '(Б=' + #39 + '351' + #39 + ')';
      SS1 := '351-400';
    end;
          //=
    if ((b > 351) and (b < 401)) and ((a > 401) and (a < 801)) then
    begin
      SS := '(Б=' + #39 + '351' + #39 + ')';
      SS1 := '401-800';
    end;
          //=
    if ((b > 351) and (b < 401)) and ((a > 801)) then
    begin
      SS := '(Б=' + #39 + '351' + #39 + ')';
      SS1 := '801-1400';
    end;
          //=
//++++++++++  ==========
          //
    if ((b > 401) and (b < 1001)) and ((a < 201)) then
    begin
      SS := '(Б=' + #39 + '401' + #39 + ')';
      SS1 := '150-200';
    end;
          //=
    if ((b > 401) and (b < 1001)) and ((a > 201) and (a < 351)) then
    begin
      SS := '(Б=' + #39 + '401' + #39 + ')';
      SS1 := '201-350';
    end;
          //=
    if ((b > 401) and (b < 1001)) and ((a > 351) and (a < 401)) then
    begin
      SS := '(Б=' + #39 + '401' + #39 + ')';
      SS1 := '351-400';
    end;
          //=
    if ((b > 401) and (b < 1001)) and ((a > 401) and (a < 801)) then
    begin
      SS := '(Б=' + #39 + '401' + #39 + ')';
      SS1 := '401-800';
    end;
          //=
    if ((b > 401) and (b < 1001)) and ((a > 801)) then
    begin
      SS := '(Б=' + #39 + '401' + #39 + ')';
      SS1 := '801-1400';
    end;
          //=
//++++++++++  ==========
          //
    if ((b > 1001)) and ((a > 151) and (a < 201)) then
    begin
      SS := '(Б=' + #39 + '1001' + #39 + ')';
      SS1 := '150-200';
    end;
          //=
    if ((b > 1001)) and ((a > 201) and (a < 351)) then
    begin
      SS := '(Б=' + #39 + '1001' + #39 + ')';
      SS1 := '201-350';
    end;
          //=
    if ((b > 1001)) and ((a > 351) and (a < 401)) then
    begin
      SS := '(Б=' + #39 + '1001' + #39 + ')';
      SS1 := '351-400';
    end;
          //=
    if ((b > 1001)) and ((a > 401) and (a < 801)) then
    begin
      SS := '(Б=' + #39 + '1001' + #39 + ')';
      SS1 := '401-800';
    end;
          //=
    if ((b > 1001)) and ((a > 801)) then
    begin
      SS := '(Б=' + #39 + '1001' + #39 + ')';
      SS1 := '801-1400';
    end;
          //=



    if not Form1.mkQuerySelect66(Form1.ADOQuery1, 'Select * from [%s] Where %s', ['ЛопаткаСМЛ', SS]) then
      exit;
    SB_LOP_S := Form1.ADOQuery1.FieldByName(SS1).AsString;
   End;      //
   end;
    if SB_LOP_S = '' then
      SB_LOP_S := '0';
    SB_Lop := StrToFloat(SB_LOP_S) ;
    SB_LOP_S := FloatToStr(SB_Lop);   }

  {if DD <> 0 then
  begin
    if Perim <= 100 then
      P := 100;
         // if (Perim > 100) and (Perim <= 350) then
          //  P := 350;

    if (Perim > 100) and (Perim <= 600) then
      P := 600;

    if (Perim > 600) and (Perim <= 800) then
      P := 800;

    if (Perim > 800) and (Perim <= 1000) then
      P := 1000;
    if (Perim >= 1000) then
      P := 1500;
    NAM_LIST := 'КПУ-ДД';
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where   (полупериметр=' + #39 + IntToStr(P) + #39 +
    ') AND ([кол-во лопаток]=' + #39 + IntToStr(Kol_Lop) + #39 + ')', [NAM_LIST]) then
      exit;

    SB_1_S := Form1.ADOQuery1.FieldByName('1-я сборка').AsString;
    if SB_1_S = '' then
      SB_1_S := '0';
    SB_2_S := Form1.ADOQuery1.FieldByName('2-я сборка').AsString;
    if SB_2_S = '' then
      SB_2_S := '0';
    SB_TYAG_S := Form1.ADOQuery1.FieldByName('сборка тяг').AsString;
    if SB_TYAG_S = '' then
      SB_TYAG_S := '0';
    SB_1 := StrToFloat(SB_1_S);
    SB_2 := StrToFloat(SB_2_S);
  end; }
        //----------------------------------------------------- КПУ-0-ф Круглые
  P := 0;
 if (Kol_F<>1) then
 Begin
  if (Kol_F = 0) and (b = 0) then
  begin
    if Perim <= 100 then
      P := 100;
    if (Perim > 100) and (Perim <= 160) then
      P := 160;

    if (Perim > 160) and (Perim <= 400) then
      P := 400;

    if (Perim > 400) and (Perim <= 790) then
      P := 560;

    if (Perim >= 800) then
      P := 800;
    NAM_LIST := KPu_S + '-' + N1 + '-' + F + '-ф' + '-Кр';
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where   (полупериметр=' + #39 + IntToStr(P) + #39 + ')', [NAM_LIST]) then
      exit;
    Res := Pos('О', Nazn);
    if Res <> 0 then
      SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка корпуса').AsString;
          //
    SB_TYAG_S := '0';
    SB_1_S := Form1.ADOQuery1.FieldByName('1-я сборка').AsString;
    if SB_1_S = '' then
      SB_1_S := '0';
    SB_2_S := Form1.ADOQuery1.FieldByName('2-я сборка').AsString;
    if SB_2_S = '' then
      SB_2_S := '0';
    SB_LOP_S := Form1.ADOQuery1.FieldByName('Лопатка').AsString;
      //
    if SB_LOP_S = '' then
      SB_LOP_S := '0';
    SB_Lop := StrToFloat(SB_LOP_S) * Kol_Lop;
    SB_LOP_S := FloatToStr(SB_Lop);
    SB_1 := StrToFloat(SB_1_S);
    SB_2 := StrToFloat(SB_2_S);
  end;
                //----------------------------------------------------- КПУ-2-ф Круглые
  P := 0;
  if (Kol_F = 2) and (b = 0) then
  begin
    if Perim <= 150 then
      P := 100;
    if (Perim > 150) and (Perim <= 400) then
      P := 160;

    if (Perim > 400) and (Perim <= 550) then
      P := 400;

    if (Perim > 550) and (Perim <= 710) then
      P := 560;

    if (Perim >= 710) then
      P := 800;

    Str := StringReplace(N1, '2Н', '1Н', [rfReplaceAll, rfIgnoreCase]);
    Str := StringReplace(N1, '1НА', '1Н', [rfReplaceAll, rfIgnoreCase]);
    NAM_LIST := KPu_S + '-' + Str + '-' + F + '-ф' + '-Кр';
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where   (полупериметр=' + #39 + IntToStr(P) + #39 + ')', [NAM_LIST]) then
      exit;
    Res := Pos('О', Nazn);
    if Res <> 0 then
      SB_LOP_S := Form1.ADOQuery1.FieldByName('сборка корпуса').AsString;
          //
    SB_TYAG_S := '0';
    SB_1_S := Form1.ADOQuery1.FieldByName('1-я сборка').AsString;
    if SB_1_S = '' then
      SB_1_S := '0';
    SB_2_S := Form1.ADOQuery1.FieldByName('2-я сборка').AsString;
    if SB_2_S = '' then
      SB_2_S := '0';
        SB_LOP_S := Form1.ADOQuery1.FieldByName('Лопатка').AsString;
      //
    if SB_LOP_S = '' then
      SB_LOP_S := '0';
    SB_Lop := StrToFloat(SB_LOP_S) * Kol_Lop;
    SB_LOP_S := FloatToStr(SB_Lop);
    SB_1 := StrToFloat(SB_1_S);
    SB_2 := StrToFloat(SB_2_S);
  end;
        //----------------------------------------------------- КПУ-ДД
  P := 0;
        {if (DD=1) then
        Begin
          if A <= 100 then
            P := 100;
          if (A > 100) and (A <= 350) then
            P := 350;

          if (A > 350) and (A <= 600) then
            P := 600;

          if (A > 600) and (A <= 800) then
            P :=800;

          if (A > 800) and (A <= 1000) then
            P :=1000;

          if (A > 1000) then
            P := 1500;

          //Str:= StringReplace(n1, '2Н', '1Н',[rfReplaceAll, rfIgnoreCase]);
          NAM_LIST:= 'КПУ-ДД';
          if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where  ([кол-во лопаток]='
          + #39 + IntToStr(KOl_Lop)+ #39 + ') AND   (полупериметр='+ #39 + IntToStr(p)+ #39 + ')',
          [NAM_LIST]) then
          exit;

            SB_TYAG_S:='0';
          SB_1_S:=  Form1.ADOQuery1.FieldByName('1-я сборка').AsString;
          if SB_1_S='' then
            SB_1_S:='0';
          SB_2_S:=  Form1.ADOQuery1.FieldByName('2-я сборка').AsString;
          if SB_2_S='' then
            SB_2_S:='0';
          SB_1:= StrToFloat(SB_1_S);
          SB_2:= StrToFloat(SB_2_S);
        End;  }
        //--------------------------------------------------------КОРПУС Hol_Kor_2N,Hol_kor,Perehod,Perehod2
  P := 0;
  Hol_Kor_2N := Pos('-2Н-', Nam); //холодный корпус 2Н
  if (Hol_Kor_2N <> 0) AND (B<>0) then
  begin
    if (Perim <= 600) then
      P := 600;

    if (Perim > 600) and (Perim <= 850) then
      P := 850;

    if (Perim > 850) and (Perim <= 1200) then
      P := 1200;

    if (Perim > 1200) and (Perim <= 1800) then
      P := 1800;

    if (Perim > 1800) and (Perim <= 2500) then
      P := 2500;

    if (Perim > 2500) then
      P := 2501;

    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + IntToStr(P) + #39 + ')', ['Корпус']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('холодный корпус 2Н').AsString;
    NC_Kor := StrToFloat(S);
    SB_1 := SB_1 + NC_Kor;
  end;
  P := 0;
  NC_Kor := 0;
        //=========Корпус холодный если есть 2*1000(A)  Hol_Kor_2N,Hol_kor,Perehod,Perehod2
  S := AnsiUpperCase('2*000');
  S1 := AnsiUpperCase(Nam);
  Perehod2 := Pos(S, S1);
  if (Perehod2 <> 0) then
  begin
    if (Perim <= 600) then
      P := 600;

    if (Perim > 600) and (Perim <= 850) then
      P := 850;

    if (Perim > 850) and (Perim <= 1200) then
      P := 1200;

    if (Perim > 1200) and (Perim <= 1800) then
      P := 1800;

    if (Perim > 1800) and (Perim <= 2500) then
      P := 2500;

    if (Perim > 2500) then
      P := 2501;

    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + IntToStr(P) + #39 +
    ')', ['Корпус']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('холодный корпус').AsString;
    NC_Kor := StrToFloat(S) * 2;
    SB_1 := SB_1 + NC_Kor;

  end;
        //=========Корпус холодный если есть 2*1000(A)Hol_Kor_2N,Hol_kor,Perehod,Perehod2
  P := 0;
  S := AnsiUpperCase('2*' + Pereh);
  S1 := AnsiUpperCase(Nam);
  Perehod := Pos(S, S1);
  if (Perehod <> 0) then
  begin
    if (Perim <= 600) then
      P := 600;

    if (Perim > 600) and (Perim <= 850) then
      P := 850;

    if (Perim > 850) and (Perim <= 1200) then
      P := 1200;

    if (Perim > 1200) and (Perim <= 1800) then
      P := 1800;

    if (Perim > 1800) and (Perim <= 2500) then
      P := 2500;

    if (Perim > 2500) then
      P := 2501;

    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + IntToStr(P) + #39
    + ')', ['Корпус']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('холодный корпус').AsString;
    NC_Kor := StrToFloat(S) * 2;
    SB_1 := SB_1 + NC_Kor;
    S := Form1.ADOQuery1.FieldByName('Переходник').AsString;
    NC_Kor := StrToFloat(S) * 2;
    SB_2 := SB_2 + NC_Kor;
  end;
        //=========Корпус холодный если есть 1*1000(A)Hol_Kor_2N,Hol_kor,Perehod,Perehod2
  P := 0;
  S := AnsiUpperCase('1*' + Pereh);
  S1 := AnsiUpperCase(Nam);
  Perehod := Pos(S, S1);
  if (Perehod <> 0) then
  begin
    if (Perim <= 600) then
      P := 600;

    if (Perim > 600) and (Perim <= 850) then
      P := 850;

    if (Perim > 850) and (Perim <= 1200) then
      P := 1200;

    if (Perim > 1200) and (Perim <= 1800) then
      P := 1800;

    if (Perim > 1800) and (Perim <= 2500) then
      P := 2500;

    if (Perim > 2500) then
      P := 2501;

    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + IntToStr(P) + #39 + ')', ['Корпус']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('холодный корпус').AsString;
    NC_Kor := StrToFloat(S);
    SB_1 := SB_1 + NC_Kor;
    S := Form1.ADOQuery1.FieldByName('Переходник').AsString;
    NC_Kor := StrToFloat(S);
    SB_2 := SB_2 + NC_Kor;
  end;
        //=========Корпус холодный если есть 1*000(A)Hol_Kor_2N,Hol_kor,
  P := 0;
  S := AnsiUpperCase('1*000');
  S1 := AnsiUpperCase(Nam);
  Perehod := Pos(S, S1);
  if (Perehod <> 0) then
  begin
    if (Perim <= 600) then
      P := 600;

    if (Perim > 600) and (Perim <= 850) then
      P := 850;

    if (Perim > 850) and (Perim <= 1200) then
      P := 1200;

    if (Perim > 1200) and (Perim <= 1800) then
      P := 1800;

    if (Perim > 1800) and (Perim <= 2500) then
      P := 2500;

    if (Perim > 2500) then
      P := 2501;

    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + IntToStr(P) + #39 +
    ')', ['Корпус']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('холодный корпус').AsString;
    NC_Kor := StrToFloat(S);
    SB_1 := SB_1 + NC_Kor;

  end;
  NC_Kor := 0;
        //=========Корпус холодный если есть РОН  и не 1ф  Hol_Kor_2N,Hol_kor,Perehod,Perehod2
  P := 0;
  S := AnsiUpperCase('рон');
  S1 := AnsiUpperCase(Nam);
  Res_Resh := Pos(S, S1);
  if (Res_Resh <> 0) and (Kol_F <> 1) and (Hol_Kor_2N <> 0) and (Perehod <> 0) and (Perehod2 <> 0) then
  begin
    if (Perim <= 600) then
      P := 600;

    if (Perim > 600) and (Perim <= 850) then
      P := 850;

    if (Perim > 850) and (Perim <= 1200) then
      P := 1200;

    if (Perim > 1200) and (Perim <= 1800) then
      P := 1800;

    if (Perim > 1800) and (Perim <= 2500) then
      P := 2500;

    if (Perim > 2500) then
      P := 2501;

    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + IntToStr(P) + #39 +
    ')', ['Корпус']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('холодный корпус').AsString;
    NC_Kor := StrToFloat(S);
  end;
  SB_1 := SB_1 + NC_Kor;
  NC_Kor := 0;
        //--------------------------------------------------------КK
  S := AnsiUpperCase('-КК-');
  S1 := AnsiUpperCase(Nam);
  Res := Pos(S, S1); //Клемная коробка
  if Res <> 0 then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('КК').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;
               //--------------------------------------------------------КK
  S := AnsiUpperCase('-КЛ-');
  S1 := AnsiUpperCase(Nam);
  Res := Pos(S, S1); //Клемная коробка
  if Res <> 0 then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('КК').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;
        //--------------------------------------------------------Т Клапан КПУ-1Н-О-Н-1000*650-2*ф-MB220-T-сн-0-0-0-0-0-0
      //Термодатчик
  S := AnsiUpperCase('-T-');
  S1 := AnsiUpperCase(Nam);
  Res := Pos(S, S1);
  if Res <> 0 then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Т').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;
        //-----------------------------------------------------  МРЗ-МРП
  Perim := a + b;
  Res_Resh := Pos(AnsiUpperCase('мрЗ'), AnsiUpperCase(Nam));
  Res_Ram := Pos(AnsiUpperCase('мрП'), AnsiUpperCase(Nam));
  if (Res_Ram <> 0) or (Res_Resh <> 0) then
  begin
    if Perim <= 600 then
      USLOVie := '600';
          //+++++++++++++++++++++
    if (Perim > 600) and (Perim <= 850) then
      USLOVie := '850';
          //+++++++++++++++++++++
    if (Perim > 850) and (Perim <= 1200) then
      USLOVie := '1200';
          //+++++++++++++++++++++
    if (Perim > 1200) and (Perim <= 1800) then
      USLOVie := '1800';
          //+++++++++++++++++++++
    if (Perim > 1800) then
      USLOVie := '2000';
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + (USLOVie) + #39 + ')', ['МРЗ']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Норма').AsString;
    NC_RON := StrToFloat(S);
    Form1.Memo13.Lines.Add(S);
  end;
        //-----------------------------------------------------  РОН
  Perim := a + b;
  S := AnsiUpperCase('рон');
  S1 := AnsiUpperCase(Nam);
  Res_Resh := Pos(S, S1);
  if (Res_Resh <> 0) then
  begin
    if Perim <= 1000 then
      USLOVie := '1000';
          //+++++++++++++++++++++
    if (Perim > 1000) and (Perim <= 1300) then
      USLOVie := '1300';
          //+++++++++++++++++++++
    if (Perim > 1300) and (Perim <= 1800) then
      USLOVie := '1800';
          //+++++++++++++++++++++
    if (Perim > 1800) and (Perim <= 2500) then
      USLOVie := '2500';
          //+++++++++++++++++++++
    if (Perim > 2500) then
      USLOVie := '2501';
          //
    S := AnsiUpperCase('рон130');
    S1 := AnsiUpperCase(Nam);
    Res_Resh := Pos(S, S1);
    if (Res_Resh <> 0) then
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + (USLOVie) + #39 + ')', ['Решетка']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('РОН130').AsString;
    end
    else
    begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + (USLOVie) + #39 + ')', ['Решетка']) then
        exit;
      S := Form1.ADOQuery1.FieldByName('РОН130').AsString;
    end;

    Form1.Memo13.Lines.Add(S);
    NC_RON := StrToFloat(S);
  end;
        //-----------------------------------------------------------ПРИВОД
        //Электромагнит
  Res_Resh := Pos(AnsiUpperCase('ЭМП'), AnsiUpperCase(Priv));
  if (Res_Resh <> 0) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Эл-магнит').AsString;
    Form1.Memo13.Lines.Add(S);
    D := StrToFloat(S) * Kol_Priv;
  end;
        //Эл-привод+++++++++++++++++++
  if (Res_Resh = 0) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
      exit;
    Res_MS := Pos(AnsiUpperCase('МС'), AnsiUpperCase(Ispol));
    if (Res_MS <> 0) then
      S := Form1.ADOQuery1.FieldByName('МС').AsString;
         //===================
    Res_EPV := Pos(AnsiUpperCase('ЭПВ'), AnsiUpperCase(Priv));
    if (Res_EPV <> 0) then
      S := Form1.ADOQuery1.FieldByName('ЭПВ').AsString;
         //===================
    if (Res_EPV = 0) and (Res_MS = 0) then
      S := Form1.ADOQuery1.FieldByName('Эл-привод').AsString;

    Form1.Memo13.Lines.Add(S);
    D := (StrToFloat(S)+0.008) * Kol_Priv;
  end;
 end;
      //------------------------------------------------------------------
  SB_2 := SB_2 + D ;
  //--------------------------------------------------
  D:=0;
  SS1:='';
  //Матвеенко БРЕД от 24.04.2023
  if Flag_Razb_Klapana > 1 then
  Begin
    //SB_2 := SB_2 + 0.213; //Клапан разбит на 2
    //==========================================1
      Res := Pos('-О-', Nam);
      Perehod := Pos('-З-', Nam);
      Res_Resh:=Pos('-1Н-',Nam);

    if (Res_Resh <> 0) and (Kol_F = 1) and ((Res <> 0) OR (Perehod <> 0))  then
    Begin
    B:=B*2;
    if (b <= 750) and (a > 2000) then
    begin
      SS := '(B=' + #39 + 'B<=750' + #39 + ') AND (A='+#39+'A>2000'+#39+')';
    end;
    //
    if (b <= 1400) and (a > 2000) then
    begin
      SS := '(B=' + #39 + 'B<=1400' + #39 + ') AND (A='+#39+'A>2000'+#39+')';
    end;
    //-------------------------------------------2
    if (b >= 750) and (a >= 1000) then
    begin
      SS := '(B=' + #39 + 'B>=750' + #39 + ') AND (A='+#39+'A>1000'+#39+')';
    end;
    //
    if (b >= 1400) and (a > 2000) then
    begin
      SS := '(B=' + #39 + 'B>=1400' + #39 + ') AND (A='+#39+'A>2000'+#39+')';
    end;
    //-------------------------------------------3
    if (b > 1400) and (a <= 750) then
    begin
      SS := '(B=' + #39 + 'B>1400' + #39 + ') AND (A='+#39+'A<=750'+#39+')';
    end;
    //
    if (b > 1400) and (A<= 2000) then
    begin
      SS := '(B=' + #39 + 'B>1400' + #39 + ') AND (A='+#39+'A<=2000'+#39+')';
    end;
    if SS<>'' then
      ss1:=SS+' AND (ТИП='+#39+'O'+#39+')';
    End;
    //-------------------------------------------
    //++++++++++++++++++++++++++++++++++++++++++DD1
   // Res := Pos('О', Nazn);
      Perehod := Pos('ДД', Nam);
      Res_Resh:=Pos('-1Н-',Nam);

    if (Res_Resh <> 0) and (Kol_F = 1) and (Perehod <> 0)  then
    Begin
    //==========================================1
    if (b <= 500) and (a > 1000) then
    begin
      SS := '(B=' + #39 + 'B<=750' + #39 + ') AND (A='+#39+'A>2000'+#39+')';
    end;
    //
    if (b <= 1200) and (a > 1000) then
    begin
      SS := '(B=' + #39 + 'B<=1200' + #39 + ') AND (A='+#39+'A>1000'+#39+')';
    end;
    //-------------------------------------------2
    if (b >= 500) and (a >= 500) then
    begin
      SS := '(B=' + #39 + 'B>=500' + #39 + ') AND (A='+#39+'A>=500'+#39+')';
    end;
    //
    if (b >= 1000) and (a > 1000) then
    begin
      SS := '(B=' + #39 + 'B>=1000' + #39 + ') AND (A='+#39+'A>1000'+#39+')';
    end;
    //-------------------------------------------3
    if (b > 1200) and (a <= 500) then
    begin
      SS := '(B=' + #39 + 'B>1200' + #39 + ') AND (A='+#39+'A<=500'+#39+')';
    end;
    //
    if (b > 1200) and (A<= 1000) then
    begin
      SS := '(B=' + #39 + 'B>1200' + #39 + ') AND (A='+#39+'A<=1000'+#39+')';
    end;
    if SS<>'' then

    ss1:=SS+' AND (ТИП='+#39+'D'+#39+')';
    //-------------------------------------------
    End;
    if SS1<>'' then
    Begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] WHERE %s ', ['Перемычка',ss1]) then
      exit;
      S := Form1.ADOQuery1.FieldByName('НЧ').AsString;
      if S='' then
      S:='0';
    D := (StrToFloat(S));
    End;
  End;
  SB_2 := SB_2 + D ;
  //--------------------------------------------------
  if Flag_Razb_Klapana > 1 then
    SB_1 := SB_1 * 2; //Клапан разбит на 2
  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
  Result.Sborka_lop := SB_LOP_S;
  Result.Sborka_tyag := SB_TYAG_S;//КОРПУС
    Result.Sborka_RON:=NC_RON;
end;

function Elektr(Izdel, IDGP: string; Svarka1: Double; Ii: Integer): TResult;
var
  i:Integer;
  Tab,Str,Str1:string;
begin
  I:=0;
  if Svarka1=0 then
     Tab:='Специф'
  else
     Tab:='СпецифВозд';

  Str := 'Кабель нагревательный%'; //Кабель нагревательный ZR-DXW-14-P/H
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 +
  ') AND ((Элемент Like ' + #39 + '%s' + #39 + '))', [Tab, Str]) then
    exit;
  if Form1.ADOQuery1.RecordCount <>0 Then
  begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([РАботы]='
      + #39 + 'Итого Тен' + #39 + ')', ['ЭлектроРасключение']) then
      exit;
    Result.El:=Result.El+  Form1.ADOQuery1.FieldByName('НЧ').AsFloat;
  end;
  // сборка датчиков ТРУ
   Str := 'ВГ 905.00.00.000%';
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 +
  ') AND ((Обозначение Like ' + #39 + '%s' + #39 + '))', [Tab, Str]) then
    exit;
  if Form1.ADOQuery1.RecordCount <>0 Then
  begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([РАботы]='
      + #39 + 'Итого Тен' + #39 + ')', ['ЭлектроРасключение']) then
      exit;
    Result.El:=Result.El+  Form1.ADOQuery1.FieldByName('НЧ').AsFloat;
  end;

   // сборка фиксатора эл/магнита
   Str := ' (Обозначение Like ' + #39 + 'ВГ 909.01.00.000%' + #39 +
   ') or (Обозначение Like ' + #39 + 'ВГ 909.02.00.000%' + #39 + ')';
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 +
  ') AND (%s)', [Tab, Str]) then
    exit;
  if Form1.ADOQuery1.RecordCount <>0 Then
  begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([РАботы]='
      + #39 + 'сборка фиксатора эл/магнита' + #39 + ')', ['ЭлектроРасключение']) then
      exit;
    Result.El:=Result.El+  Form1.ADOQuery1.FieldByName('НЧ').AsFloat;
  end;

    // сборка исполнительного механизма
   Str := ' (Обозначение Like ' + #39 + 'ВГ 652.00.00.000%' + #39 +
   ') or (Обозначение Like ' + #39 + 'ВГ 909.00.00.000%' + #39 + ')';
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 +
  ') AND (%s)', [Tab, Str]) then
    exit;
  if Form1.ADOQuery1.RecordCount <>0 Then
  begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([РАботы]='
      + #39 + 'сборка исполнительного механизма' + #39 + ')', ['ЭлектроРасключение']) then
      exit;
    Result.El:=Result.El+  Form1.ADOQuery1.FieldByName('НЧ').AsFloat;
  end;

    //сборка кожуха эл/магнита
   Str := ' (Обозначение Like ' + #39 + 'ТЕКИ 07.375.00.00.009%' + #39 +
   ') or (Обозначение Like ' + #39 + 'ТЕКИ 07.375.00.00.014%' + #39 + ')';
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 +
  ') AND (%s)', [Tab, Str]) then
    exit;
  if Form1.ADOQuery1.RecordCount <>0 Then
  begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([РАботы]='
      + #39 + 'сборка кожуха эл/магнита' + #39 + ')', ['ЭлектроРасключение']) then
      exit;
    Result.El:=Result.El+  Form1.ADOQuery1.FieldByName('НЧ').AsFloat;
  end;

      //сборка кронштейна концевика
   Str := ' (Обозначение Like ' + #39 + 'ВГ 342.00.00.009%' + #39 +
   ')';
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 +
  ') AND (%s)', [Tab, Str]) then
    exit;
  if Form1.ADOQuery1.RecordCount <>0 Then
  begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([РАботы]='
      + #39 + 'сборка кронштейна концевика' + #39 + ')', ['ЭлектроРасключение']) then
      exit;
    Result.El:=Result.El+  Form1.ADOQuery1.FieldByName('НЧ').AsFloat;
  end;

      //сборка стопор. Механизма
   Str := ' (Обозначение Like ' + #39 + 'ТЕКИ 269.16.133.000%' + #39 +
   ')';
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 +
  ') AND (%s)', [Tab, Str]) then
    exit;
  if Form1.ADOQuery1.RecordCount <>0 Then
  begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([РАботы]='
      + #39 + 'сборка стопор. Механизма' + #39 + ')', ['ЭлектроРасключение']) then
      exit;
    Result.El:=Result.El+  Form1.ADOQuery1.FieldByName('НЧ').AsFloat;
  end;

      //сборка амортизатора
   Str := ' (Обозначение Like ' + #39 + 'ВГ 543.05.00.100%' + #39 +
   ')';
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 +
  ') AND (%s)', [Tab, Str]) then
    exit;
  if Form1.ADOQuery1.RecordCount <>0 Then
  begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([РАботы]='
      + #39 + 'сборка амортизатора' + #39 + ')', ['ЭлектроРасключение']) then
      exit;
    Result.El:=Result.El+  Form1.ADOQuery1.FieldByName('НЧ').AsFloat;
  end;

      //установка колодки клемной на кронштейн
   Str := ' (Обозначение Like ' + #39 + 'ВГ 265.00.00.003%' + #39 +
   ') or (Обозначение Like ' + #39 + 'ТЕКИ 176.00.00.009%' + #39 + ')';
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 +
  ') AND (%s)', [Tab, Str]) then
    exit;
  if Form1.ADOQuery1.RecordCount <>0 Then
  begin
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([РАботы]='
      + #39 + 'установка колодки клемной на кронштейн' + #39 + ')', ['ЭлектроРасключение']) then
      exit;
    Result.El:=Result.El+  Form1.ADOQuery1.FieldByName('НЧ').AsFloat;
  end;

end;

function REA_New(Izdel, IDGP: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, j, Klap, Res, Res1, a, b, Kol_Priv, Kol_Lop, Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram, Res_Ruk, Kol_F, Res_Resh, Perim, P, Res_MS, Res_EPV, MS_I, Hol_Kor_2N, Hol_kor, Perehod, Perehod2, DD: Integer;
  Kol_Ed_Str, Nam, Elem, Lop, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama, F, luk, NAM_LIST, USLOVie, S, Str: string;
  Kol_Ed, NC_RON, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2, NC_Kor, Flag_Razb_Klapana: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, MS, SS, SS1,Str1: string;
begin
  D := 0;
  NAM_LIST := '';
  Nam := Izdel;
  DD := 0;
  Result.SVarka := 0;
  Result.Sborka1 := 0;
  Result.Sborka2 := 0;
  Result.Sborka_lop := '0';
  Result.Sborka_tyag := '0';
  Kol_Lop := 0;
  Lop := '0';
  Flag_Razb_Klapana := 0;
  //Лопатка-заготовка  Лопатка (S=2)
  Str := 'Лопатка%';
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 +
  ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ') AND ((Элемент Like ' + #39 + '%s' + #39 + '))', ['Специф', Str]) then
    exit;
  for i := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    Kol_Lop := Kol_Lop + Form1.ADOQuery1.FieldByName('Количество').AsInteger;
    Form1.ADOQuery1.Next;
  end;

  Privod := Form1.SG6.Cells[I_FN_BRIKET, Ii + 1];
  Str := '%ЭМВ%';
  Str1 := '%Электропривод%';
  if (Privod = '0') then
  begin
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 +
  ') AND (Элемент Like ' + #39 + '%s' + #39 + ') OR ((Элемент Like ' + #39 + '%s' + #39 + '))', ['Специф', Str,Str1]) then
    exit;

    Privod :=  Form1.ADOQuery1.FieldByName('Количество').AsString;
    Privod_Nam := Form1.ADOQuery1.FieldByName('Элемент').AsString;
  end;
    if Privod = '' then
    Kol_Priv := 0
  else
    Kol_Priv := StrToInt(Privod);

 //Заслонка РЭА-1165*450-1-1-20-1*EFA-S2-У-20G-ТУ4863-098-40149153-07
 //Заслонка РЭА-315-1-2-20-1*NM230A+S2A-Н-ТУ4863-098-40149153-07 (2отв.фл., КК) (4Н)
  Izdel := Trim(Izdel);
  Res1 := Pos(' ', Izdel);
  if Res1 <> 0 then
    Delete(Izdel,1, Res1);
  //
  //
  Res1 := Pos('-', Izdel);
  if Res1 <> 0 then
  Delete(Izdel,1, Res1);
  //1165*450-1-1-20-1*EFA-S2-У-20G-ТУ4863-098-40149153-07
  //315-1-2-20-1*NM230A+S2A-Н-ТУ4863-098-40149153-07 (2отв.фл., КК) (4Н)
   Res1 := Pos('-', Izdel);
  if Res1 >5 then
    DD:=1;//Квадратн
  if DD=0 then
  Begin
    Res := Pos('-', Izdel);
    a := StrToInt(Copy(Izdel, 1, Res - 1));
    Perim:=A;
    Delete(Izdel, 1, Res);
    B:=0;
    NAM_LIST :=  'заслонки кр';

    if Perim <= 200 then
      P := 200;
    if (Perim > 200) and (Perim <= 400) then
      P := 400;

    if (Perim > 400) and (Perim <= 600) then
      P := 600;

    if (Perim > 600) and (Perim <= 800) then
      P := 800;

    if (Perim > 800) and (Perim <= 1000) then
      P := 1000;

    if (Perim > 1000) and (Perim <= 1200) then
      P := 1200;

    if (Perim > 1200)  then
      P := 2000;
        if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Д]=' + #39 + IntToStr(p) + #39 + ')', [NAM_LIST]) then
      exit;
          SB_1_S := Form1.ADOQuery1.FieldByName('1-я сборка').AsString;
    if SB_1_S = '' then
      SB_1_S := '0';
    SB_2_S := '0';
    SB_1 := StrToFloat(SB_1_S);
    SB_2 := StrToFloat(SB_2_S);
  End
  Else
  Begin
    Res := Pos('*', Izdel);
    a := StrToInt(Copy(Izdel, 1, Res - 1));
    Delete(Izdel, 1, Res);
            //========================================
    Res := Pos('-', Izdel);
    b := StrToInt(Copy(Izdel, 1, Res - 1));
    Delete(Izdel, 1, Res);
    NAM_LIST :=  'заслонки кв';
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Лоп]=' + #39 + IntToStr(Kol_Lop) + #39 + ')', [NAM_LIST]) then
      exit;
    SB_1_S := Form1.ADOQuery1.FieldByName('1-я сборка').AsString;
    if SB_1_S = '' then
      SB_1_S := '0';
//
    SB_2_S := Form1.ADOQuery1.FieldByName('2-я сборка').AsString;
    if SB_2_S = '' then
      SB_2_S := '0';
    SB_1 := StrToFloat(SB_1_S);
    SB_2 := StrToFloat(SB_2_S);
  End;
  SB_LOP_S := '0';
  SB_TYAG_S := '0';
  Rama := Izdel;

  NC_Kor := 0;

  NC_Kor := 0;
        //--------------------------------------------------------КK
  S := AnsiUpperCase('-КК-');
  S1 := AnsiUpperCase(Nam);
  Res := Pos(S, S1); //Клемная коробка
  if Res <> 0 then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('КК').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;
               //--------------------------------------------------------КK
  S := AnsiUpperCase('-КЛ-');
  S1 := AnsiUpperCase(Nam);
  Res := Pos(S, S1); //Клемная коробка
  if Res <> 0 then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('КК').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;
  //1165*450-1-1-20-1*EFA-S2-У-20G-ТУ4863-098-40149153-07
  //315-1-2-20-1*NM230A+S2A-Н-ТУ4863-098-40149153-07 (2отв.фл., КК) (4Н)
      //Термодатчик
  S := AnsiUpperCase('-T-');
  S1 := AnsiUpperCase(Nam);
  Res := Pos(S, S1);
  if Res <> 0 then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Т').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;

        //-----------------------------------------------------------ПРИВОД
        //Электромагнит
  Res_Resh := Pos(AnsiUpperCase('ЭМП'), AnsiUpperCase(Privod_Nam));
  if (Res_Resh <> 0) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Эл-магнит').AsString;
    Form1.Memo13.Lines.Add(S);
    D := StrToFloat(S) * Kol_Priv;
  end;
  //
    Res_Resh := Pos(AnsiUpperCase('Электропривод'), AnsiUpperCase(Privod_Nam));
  if (Res_Resh <> 0) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Эл-привод').AsString;
    Form1.Memo13.Lines.Add(S);
    D := StrToFloat(S) * Kol_Priv;
  end;

      //------------------------------------------------------------------
  SB_2 := SB_2 + D ;

  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
  Result.Sborka_lop := SB_LOP_S;
  Result.Sborka_tyag := SB_TYAG_S;
end;

function Regular(Izdel, IDGP, IDKO: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, j, Flag_Razb_Klapana, Klap, Res, Res1, Kol_Priv, Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram, Res_Ruk, Kol_F, Res_Resh, Perim, P, Res_MS, Res_EPV, MS_I, Pos_Zv, R1, R2, R3, R4: Integer;
  Kol_Ed_Str, Nam, Elem, Lop, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama, F, luk, NAM_LIST, USLOVie, S, Str: string;
  Kol_Ed, NC_RON, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2, NC_Kor, Kol_Lop, Simmetri, Kol_MUF, b_I: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, MS, Tip_Klap, Ispolnenie, Var_Raskr_Lop, Tip_Priv, Nal_Kog,
   Ispol_KOnstr, Ispol_Klim, Tip, Pos2, Pos3, Pos4, Pos5, Pos6, Izdel_Germik, Izdelie, a, b, SQL_S,BB,AA: string;
  Pos_U, Ruch, Res0, Res2, Res3, A_i, FL: Integer;
begin
  D := 0;
  NAM_LIST := '';
  Nam := Izdel;
  Izdelie := Izdel;
  Izdel_Germik := Izdel;
  Result.SVarka := 0;
  Result.Sborka1 := 0;
  Result.Sborka2 := 0;
  Result.Sborka_lop := '0';
  Result.Sborka_tyag := '0';
  Result.Obvarka_G_R := 0;
  Lop := '0';
  Ispolnenie := '';
  Var_Raskr_Lop := '';
  Tip_Priv := '';
  Nal_Kog := '';
  Ispol_KOnstr := '';
  Ispol_Klim := '';
  SB_2 := 0;
  SQL_S := '';
  FL := 0;
  Ruch := 0;
      //=============================
      //Клапан РЕГУЛЯР-0675-1175-Н-12-01-00-У2
      //Клапан РЕГУЛЯР-Л-500-Н-1*NM230ASR-УХЛ2-0
      //Клапан РЕГУЛЯР-Л-250-Н-1*РУЧКА-У2
      //Клапан РЕГУЛЯР-Л-450*400-Н-1*LF230-S-У2
      //Клапан РЕГУЛЯР-Л-250*250-Н-1*РУЧКА-У2
  Pos_Zv := Pos('-Л-', Izdelie);
  if Pos_Zv <> 0 then
  begin
             //Exit;
    Res := Pos(' ', Izdelie);
    Delete(Izdelie, 1, Res);
              //========================================
    Res := Pos('-', Izdelie);
    Nam := Copy(Izdelie, 1, Res - 1); // РЕГУЛЯР
    Delete(Izdelie, 1, Res);
              //========================================
    Res := Pos('-', Izdelie);
    Tip_Klap := Copy(Izdelie, 1, Res - 1); //Л
    Delete(Izdelie, 1, Res);
              //========================================
              //355*355-Н-1*LM230A-УХЛ2-0
    Res := Pos('-', Izdelie);
    Res1 := Pos('*', Izdelie);
    if (Res > Res1) then
    begin
      a := Copy(Izdelie, 1, Res1 - 1);
      Delete(Izdelie, 1, Res1);
    end
    else
    begin
      a := Copy(Izdelie, 1, Res - 1);
      Delete(Izdelie, 1, Res);
    end;
    A_i := StrToInt(a);
              //========================================
    Res := Pos('-', Izdelie);
    if Res < 4 then
    begin
      b := '0';
      if (A_i <= 150) then
        aa := '100';
                   //
      if (A_i > 150) and (A_i <= 280) then
        aa := '160';
                   //
      if (A_i > 280) and (A_i <= 390) then
        aa := '315';
                   //
      if (A_i > 390) and (A_i <= 630) then
        aa := '400';
                   //
      if (A_i > 630) and (A_i <= 1000) then
        aa := '630';
                   //
      if (A_i > 1000) then
        aa := '1000';
                   //
      NAM_LIST := 'Регуляр Л КР';
      SQL_S := '([Д]=' + #39 + aa + #39 + ') ';
      FL := 1;
    end
    else
    begin
      b := Copy(Izdelie, 1, Res - 1);
      NAM_LIST := 'Регуляр Л';
      SQL_S := ' ([кол-во лопаток]=' + #39 + FloatToStr(Kol_Lop) + #39 + ') and ([Ширина]=' + #39 + b + #39 + ') ';
    end;
    Delete(Izdelie, 1, Res);
              //========================================
              //Клапан ГЕРМИК-С-800*800-Н-1*РУЧКА-1-УХЛ2
              //Клапан ГЕРМИК-С-740*740-Н-1*LM24A-SR-2-УХЛ2
    Ruch := Pos('РУЧКА', Izdelie);
    Res := Pos('-', Izdelie);
    Ispolnenie := Copy(Izdelie, 1, Res - 1); // H
    Delete(Izdelie, 1, Res);
              //========================================
    Res := Pos('*', Izdelie);
    Tip := Copy(Izdelie, 1, Res - 1);
    Delete(Izdelie, 1, Res);
              //Ruch := Pos('РУЧКА', Izdelie);
              //========================================
    Res := Pos('-', Izdelie);
    Pos2 := Copy(Izdelie, 1, Res - 1);
    Delete(Izdelie, 1, Res);
                                                //========================================
    Res := Pos('-', Izdelie);
    Pos3 := Copy(Izdelie, 1, Res - 1);
    Delete(Izdelie, 1, Res);
                                                //========================================
    Res := Pos('-', Izdelie);
    Pos4 := Copy(Izdelie, 1, Res - 1);
    Delete(Izdelie, 1, Res);
                                                //========================================
    Res := Pos('-', Izdelie);
    Pos5 := Copy(Izdelie, 1, Res - 1);
    Delete(Izdelie, 1, Res);
                                                //========================================
    Res := Pos('-', Izdelie);
    Pos6 := Copy(Izdelie, 1, Res - 1);
    Delete(Izdelie, 1, Res);
                                                //========================================
    Ispol_Klim := Izdelie;
    Res := Pos('У', Ispol_Klim);
    if Res = 0 then
      Ispol_KOnstr := Ispol_Klim
    else
    begin
                                                        //-----------------------------
      Pos_U := Pos(Izdel, Izdel_Germik);
      Ruch := Pos('РУЧКА', Izdelie);
      if (Pos_U <> 0) then
        Delete(Izdel_Germik, 1, Pos_U - 3);
                                                        //---------------------------
      Res1 := Pos('-', Izdel_Germik);
      Ispol_KOnstr := Copy(Izdel_Germik, 1, Res1 - 1); //1=0 2=0.126+0.273
    end;

  end;
            //03423=-4012=304-034=-204=-230
            //Клапан РЕГУЛЯР-0675-1175-Н-12-01-00-У2
            //Клапан РЕГУЛЯР-355*355-Н-1*LM230A-УХЛ2-0
             //Клапан РЕГУЛЯР-0675-0575-Н-11-01-00-У2
  Izdelie := Izdel;
  Pos_Zv := Pos('-Л-', Izdelie);
  if Pos_Zv = 0 then
  begin
    NAM_LIST := 'Регуляр';
    Res := Pos(' ', Izdelie);
    Delete(Izdelie, 1, Res);
              //========================================
    Res := Pos('-', Izdelie);
    Nam := Copy(Izdelie, 1, Res - 1); // РЕГУЛЯР
    Delete(Izdelie, 1, Res);
              //========================================
              //========================================
              //355*355-Н-1*LM230A-УХЛ2-0
    Res := Pos('-', Izdelie);
    Res1 := Pos('*', Izdelie);
    if (Res > Res1) and (Res1<>0) then
    begin
      a := Copy(Izdelie, 1, Res1 - 1);
      Delete(Izdelie, 1, Res1);
    end
    else
    begin
      a := Copy(Izdelie, 1, Res - 1);
      Delete(Izdelie, 1, Res);
    end;
              //========================================
    Res := Pos('-', Izdelie);
    b := Copy(Izdelie, 1, Res - 1);
    Delete(Izdelie, 1, Res);

              //========================================
              //Н-12-01-00-У2
    Res := Pos('-', Izdelie);
    Ispolnenie := Copy(Izdelie, 1, Res - 1); // H
    Delete(Izdelie, 1, Res);
              //========================================
              //12-01-00-У2
    Res := Pos('-', Izdelie);
    Pos2 := Copy(Izdelie, 1, Res - 1);
    Delete(Izdelie, 1, Res);
              //========================================
    Res := Pos('-', Izdelie);
    Pos3 := Copy(Izdelie, 1, Res - 1);
    Delete(Izdelie, 1, Res);
              //========================================
    Res := Pos('-', Izdelie);
    Pos4 := Copy(Izdelie, 1, Res - 1);
    Delete(Izdelie, 1, Res);
              //========================================
    Res := Pos('-', Izdelie);
    Pos5 := Copy(Izdelie, 1, Res - 1);
    Delete(Izdelie, 1, Res);
              //========================================
  end;
  Izdelie := Izdel;
  b_I := StrToInt(b);
  Flag_Razb_Klapana := 0;
  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + IDGP + #39 + ') AND ([IdКО]=' + #39 + IDKO + #39 + ') ', ['СпецифВозд']) then
    exit;
  Flag_Razb_Klapana := 0;
  Simmetri := 0;
  for j := 0 to Form1.ADOQuery2.RecordCount - 1 do  //Проверка на Клапан разбитый на 2
  begin
    Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
    Kol_Ed_Str := StringReplace(Form1.ADOQuery2.FieldByName('Количество').AsString, '.', ',', [rfReplaceAll]);
    System.SysUtils.FormatSettings.DecimalSeparator := (',');
    Kol_Ed := StrToFloat(Kol_Ed_Str);
    Klap := POs('Клапан', Elem);
    if (Klap <> 0) then
    begin
      Flag_Razb_Klapana := Flag_Razb_Klapana + StrToInt(Kol_Ed_Str); //Клапан разбит на 2
      Izdel := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
            //Nam := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
    end;
    Form1.ADOQuery2.Next;
  end;                 //Лопатка-заготовка
  Str := 'Лопатка%';
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 + ') AND ([IdКО]=' + #39 + IDKO + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ') AND ((Элемент Like ' + #39 + '%s' + #39 + '))', ['СпецифВозд', Str]) then
    exit;
  for i := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    Kol_Lop := Kol_Lop + Form1.ADOQuery1.FieldByName('Количество').AsFloat;
    Form1.ADOQuery1.Next;
  end;

  if b_I <= 300 then
    bb := '300';
                                                //-------------------------
  if (b_I > 300) and (b_I <= 875) then
    bb := '800';
                                                //-------------------------
  if (b_I > 875) then
    bb := '1500';

  if Kol_Lop = 0 then
    Kol_Lop := 1;
        //-------------------------------------------------------------------
  Res := Pos('КР', NAM_LIST);
  if Res = 0 then
    SQL_S := ' ([кол-во лопаток]=' + #39 + FloatToStr(Kol_Lop) + #39 + ') and ([Ширина]=' + #39 + bb + #39 + ') ';
  Ruch := Pos('РУЧКА', Izdelie);
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where %s ', [NAM_LIST, SQL_S]) then
    exit;
  if FL = 1 then
  begin
    SB_2 := Form1.ADOQuery1.FieldByName('1-я сборка').AsFloat;
    SB_1 := 0.001
  end
  else

  begin
    b_I := StrToInt(b)+StrToInt(a);
    if b_I <= 600 then
    bb := '600';
                                                //-------------------------
  if (b_I > 600) and (b_I <= 850) then
    bb := '850';
                                                //-------------------------
  if (b_I > 850) and (b_I <= 1200) then
    bb := '1200';
   if (b_I > 1200) and (b_I <= 2000) then
    bb := '2000';

  if (b_I > 2000) then
    bb := '2500';

    SB_1 := Form1.ADOQuery1.FieldByName('1-я сборка').AsFloat;
    SB_2 := Form1.ADOQuery1.FieldByName('2-я сборка').AsFloat;
    SB_Lop := Form1.ADOQuery1.FieldByName('Сборка лопаток').AsFloat;
    SB_Lop := SB_Lop * Kol_Lop;
       if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where Полупериметр='+#39+Bb+#39, ['ОбваркаКорпуса-Герм-Рег']) then
    exit;

    Result.Obvarka_G_R := Form1.ADOQuery1.FieldByName('Норма').AsFloat;
  end;
  ///


  Privod := Form1.StringGrid6.Cells[I_FN_BRIKET, Ii + 1];
  if Privod = '' then
    Kol_Priv := 0
  else
    Kol_Priv := StrToInt(Privod);
  Privod_Nam := Form1.SGL.Cells[I_FN_MOD_PRIVOD, Ii + 1];
  Priv := Form1.SGL.Cells[I_FN_MOD_PRIVOD, Ii + 1];
        //--------------------------------------------------------КK
       {if Ruch<>0 then
          SB_2:=SB_2+0.06;

       s:= AnsiUpperCase('-КК-');
        S1:=AnsiUpperCase(Izdelie);
        res:=Pos(s,S1); //Клемная коробка
        if Res<>0 then
        Begin
          if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ',
          ['КК']) then
          exit;
          S:=  Form1.ADOQuery1.FieldByName('КК').AsString;
          D:=StrToFloat(S)*Kol_Priv;
        End;
       SB_2:=SB_2+D;
       D:=0;
  }
  //-----------------------------------------------------------ПРИВОД
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
    exit;
  S := Form1.ADOQuery1.FieldByName('Эл-приводВоз').AsString;
  Form1.Memo13.Lines.Add(S);
  D := StrToFloat(S) * Kol_Priv;   //Простой

  R4 := Pos('-2-У', Izdelie); //Простой Утепленный
  R1 := Pos('-В-', Izdelie);
  R2 := Pos('-ВК-', Izdelie);
  R3 := Pos('-КВ-', Izdelie);
  if (R1 = 0) and (R2 = 0) and (R3 = 0) and (R4 <> 0) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Эл-приводВозУТ').AsString;
    Form1.Memo13.Lines.Add(S);
    D := StrToFloat(S) * Kol_Priv;
  end;
        //взрыв+++++++++++++++++++
  R1 := Pos('-В-', Izdelie);
  R2 := Pos('-ВК-', Izdelie);
  R3 := Pos('-КВ-', Izdelie);
  if (R1 <> 0) or (R2 <> 0) or (R3 <> 0) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Эл-приводВозВЗР').AsString;
    Form1.Memo13.Lines.Add(S);
    D := StrToFloat(S) * Kol_Priv;
  end;

  R1 := Pos('-В-', Izdelie);
  R2 := Pos('-ВК-', Izdelie);
  R3 := Pos('-КВ-', Izdelie);
  R4 := Pos('-2-У', Izdelie); //взрыв Утепленный
  if ((R1 <> 0) or (R2 <> 0) or (R3 <> 0)) and (R4 <> 0) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Эл-приводВозВЗРУТ').AsString;
    Form1.Memo13.Lines.Add(S);
    D := StrToFloat(S) * Kol_Priv;
  end;

      //------------------------------------------------------------------
  if Ruch <> 0 then
    SB_2 := SB_2 + 0.06
  else

    SB_2 := SB_2 + D; //+NC_RON;
        //--------------------------------------------------------К нерж
      { s:= AnsiUpperCase('-К-');
        S1:=AnsiUpperCase(Izdelie);
        res:=Pos(s,S1); //КIspolnenie
        if Res<>0 then
        SB_2:=SB_2*1.2;

        if Flag_Razb_Klapana>1 then
          SB_1:=SB_1*2;//Клапан разбит на 2  }
  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
  SB_LOP_S := FloatToStr(SB_Lop);
  Result.Sborka_lop := SB_LOP_S;
 // Result.Obvarka_G_R := ;
end;

function NERPA(Izdel, IDGP, IDKO: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, j, Flag_Razb_Klapana, Klap, Res, Res1, Kol_Priv, Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram, Res_Ruk, Kol_F, Res_Resh, Perim, P, Res_MS, Res_EPV, MS_I, Pos_Zv, R1, R2, R3, R4: Integer;
  Kol_Ed_Str, Nam, Elem, Lop, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama, F, luk, NAM_LIST, USLOVie, S, Str: string;
  Kol_Ed, NC_RON, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2, NC_Kor, Kol_Lop, Simmetri, Kol_MUF, b_I: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, MS, Tip_Klap, Ispolnenie, Var_Raskr_Lop, Tip_Priv, Nal_Kog, Ispol_KOnstr, Ispol_Klim, Tip, Pos2, Pos3, Pos4, Pos5, Pos6, Izdel_Germik, Izdelie, a, b, SQL_S: string;
  Pos_U, Ruch, Res0, Res2, Res3, A_i, FL: Integer;
begin
  D := 0;
  NAM_LIST := '';
  Nam := Izdel;
  Izdelie := Izdel;
  Izdel_Germik := Izdel;
  Result.SVarka := 0;
  Result.Sborka1 := 0;
  Result.Sborka2 := 0;
  Result.Sborka_lop := '0';
  Result.Sborka_tyag := '0';
  Lop := '0';
  Ispolnenie := '';
  Var_Raskr_Lop := '';
  Tip_Priv := '';
  Nal_Kog := '';
  Ispol_KOnstr := '';
  Ispol_Klim := '';
  SB_2 := 0;
  SQL_S := '';
  FL := 0;
  Ruch := 0;
  SB_Lop:=0;
      //=============================
  //Клапан НЕРПА-200*150-1*РУЧКА-Н-5000-У3-0
  //Клапан НЕРПА-160-1*РУЧКА-Н-5000-0-20g
  //Клапан обратный НЕРПА-КО-200-УХЛ2-КВ-2000
  //  Клапан НЕРПА-КП-О-В-300*300-2*ф-1*ЭПВ-BFL230-сн-0-0-0-0-0-0_229500114-ННВ
  Izdelie := Izdel;
    Res := Pos(' ', Izdelie);
    if Res<>0 then
    Delete(Izdelie, 1, Res); //НЕРПА-200*150-1*РУЧКА-Н-5000-У3-0

    Res := Pos('обратный', Izdelie);
    if Res<>0 then
    begin
      Exit;
      Res := Pos(' ', Izdelie);
      if Res<>0 then
      Delete(Izdelie, 1, Res); //НЕРПА-200*150-1*РУЧКА-Н-5000-У3-0

    end;
        Res := Pos('-КП-', Izdelie);
    if Res<>0 then
    begin
      Exit;
    end;
              //========================================
    Res := Pos('-', Izdelie);
    if Res<>0 then
    begin
    Nam := Copy(Izdelie, 1, Res - 1); //200*150-1*РУЧКА-Н-5000-У3-0
    Delete(Izdelie, 1, Res);
    end;

    //========================================   160-1*РУЧКА-Н-5000-0-20g
    Res := Pos('*', Izdelie);
    Res1:=Pos('-', Izdelie);
    if Res1<Res then
    //Круглый
    begin
      a := Copy(Izdelie, 1, Res1 - 1);
      NAM_LIST := 'НЕРПА-КРУГ';
        b_I := StrToInt(A);

      if b_I <= 200 then
        b := '200';
                                                //-------------------------
      if (b_I > 200) and (b_I <= 400) then
        b := '280';

      if (b_I > 400) and (b_I <= 600) then
        b := '600';
      if (b_I > 600) and (b_I <= 800) then
        b := '800';
                                               //-------------------------
      if (b_I > 800) then
        b := '1000';
        //-------------------------------------------------------------------
      if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where (Д='+#39+B+#39+') ', [NAM_LIST]) then
      exit;
          SB_2 := Form1.ADOQuery1.FieldByName('1-я сборка').AsFloat;
      SB_1 := 0.001;
    end
    Else
    begin
     // Izdelie := Izdel;
      Flag_Razb_Klapana := 0;
      if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + IDGP + #39 +
      ') AND ([IdКО]=' + #39 + IDKO + #39 +
      ') AND ([ВидЭлемента]=' + #39 + 'Сборочные единицы' + #39 + ') AND ([Элемент] LIKE '+#39+'%s'+#39 +
      ') ', ['СпецифВозд','%лопатка%' ]) then
      exit;
      Flag_Razb_Klapana := 0;
      Simmetri := 0;
      for j := 0 to Form1.ADOQuery2.RecordCount - 1 do  //Проверка на Клапан разбитый на 2
      begin

        Kol_Ed_Str := StringReplace(Form1.ADOQuery2.FieldByName('Количество').AsString, '.', ',', [rfReplaceAll]);
        System.SysUtils.FormatSettings.DecimalSeparator := (',');
        Kol_Ed := StrToFloat(Kol_Ed_Str);
          Flag_Razb_Klapana := Flag_Razb_Klapana + StrToInt(Kol_Ed_Str); //Клапан разбит на 2
        Form1.ADOQuery2.Next;
      end;
      a := Copy(Izdelie, 1, Res - 1);
      Delete(Izdelie, 1, Res);   // 150-1*РУЧКА-Н-5000-У3-0
      Res1:=Pos('-', Izdelie);
      B := Copy(Izdelie, 1, Res1 - 1);

      b_I := StrToInt(A)+StrToInt(B);

      if b_I <= 500 then
        b := '500';
                                                //-------------------------
      if (b_I > 500) and (b_I <= 700) then
        b := '700';

      if (b_I > 700)  then
        b := '1000';

      NAM_LIST := 'НЕРПА-КВ';
        if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where (Д='+#39+B+#39+') ', [NAM_LIST]) then
        exit;
        SB_2 := Form1.ADOQuery1.FieldByName('2-я сборка').AsFloat;
        SB_1 :=Form1.ADOQuery1.FieldByName('1-я сборка').AsFloat;
    end;
  Privod := Form1.StringGrid6.Cells[I_FN_BRIKET, Ii + 1];
  if Privod = '' then
    Kol_Priv := 0
  else
    Kol_Priv := StrToInt(Privod);
  Privod_Nam := Form1.SGL.Cells[I_FN_MOD_PRIVOD, Ii + 1];
  Priv := Form1.SGL.Cells[I_FN_MOD_PRIVOD, Ii + 1];
        //--------------------------------------------------------КK
  Ruch :=Pos('РУЧКА',Izdel);
       if Ruch<>0 then
          SB_2:=SB_2+0.06;
  D:=0;
  if (Ruch=0) and (Kol_Priv<>0) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ',
          ['ПриводНЕРПА']) then
          exit;
          S:=  Form1.ADOQuery1.FieldByName('Эл-приводНЕРПА').AsString;
          D:=StrToFloat(S)*Kol_Priv;
       SB_2:=SB_2+D;
       D:=0;

          if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ',
          ['КК']) then
          exit;
          S:=  Form1.ADOQuery1.FieldByName('ККНЕРПА').AsString;
          D:=StrToFloat(S)*Kol_Priv;

       SB_2:=SB_2+D;
       D:=0;
  end;

  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
  SB_LOP_S := FloatToStr(SB_Lop);
  Result.Sborka_lop := SB_LOP_S;
end;

function KANAL_KV(Izdel, IDGP, IDKO: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, j, Flag_Razb_Klapana, Klap, Res, Res1, Kol_Priv, Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram, Res_Ruk, Kol_F, Res_Resh, Perim, P, Res_MS, Res_EPV, MS_I, Pos_Zv, R1, R2, R3, R4: Integer;
  Kol_Ed_Str, Nam, Elem, Lop, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama, F, luk, NAM_LIST, USLOVie, S, Str: string;
  Kol_Ed, NC_RON, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2, NC_Kor, Kol_Lop, Simmetri, Kol_MUF, b_I: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, MS, Tip_Klap, Ispolnenie, Var_Raskr_Lop, Tip_Priv, Nal_Kog, Ispol_KOnstr, Ispol_Klim, Tip, Pos2, Pos3, Pos4, Pos5, Pos6, Izdel_Germik, Izdelie, a, b, SQL_S: string;
  Pos_U, Ruch, Res0, Res2, Res3, A_i, FL: Integer;
begin
  D := 0;
  NAM_LIST := '';
  Nam := Izdel;
  Izdelie := Izdel;
  Izdel_Germik := Izdel;
  Result.SVarka := 0;
  Result.Sborka1 := 0;
  Result.Sborka2 := 0;
  Result.Sborka_lop := '0';
  Result.Sborka_tyag := '0';
  Lop := '0';
  Ispolnenie := '';
  Var_Raskr_Lop := '';
  Tip_Priv := '';
  Nal_Kog := '';
  Ispol_KOnstr := '';
  Ispol_Klim := '';
  SB_2 := 0;
  SQL_S := '';
  FL := 0;
  Ruch := 0;
  SB_Lop:=0;
      //=============================
  //Клапан Канал-КОЛ-100-50
  Izdelie := Izdel;

    NAM_LIST := 'КОЛ-КВ';
    Res := Pos(' ', Izdelie);
    if Res<>0 then
    Delete(Izdelie, 1, Res); //Канал-КОЛ-100-50
              //========================================
    Res := Pos('-', Izdelie);
    if Res<>0 then
    begin
    Nam := Copy(Izdelie, 1, Res - 1); //КОЛ-100-50
    Delete(Izdelie, 1, Res);
    end;

    Res := Pos('-', Izdelie);
    if Res<>0 then
    begin
    Nam := Copy(Izdelie, 1, Res - 1); //100-50
    Delete(Izdelie, 1, Res);
    end;
              //========================================
    Res := Pos('-', Izdelie);
    if Res<>0 then
    begin
      a := Copy(Izdelie, 1, Res - 1);
      Delete(Izdelie, 1, Res);   // -50
    end;
     B := Izdelie;

  b_I := StrToInt(A);

  if b_I <= 400 then
    b := '400';
                                                //-------------------------
  if (b_I > 400) and (b_I <= 500) then
    b := '500';

  if (b_I > 500) and (b_I <= 600) then
    b := '600';
                                               //-------------------------
  if (b_I > 600) then
    b := '800';
        //-------------------------------------------------------------------
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where (Д='+#39+B+#39+') ', [NAM_LIST]) then
    exit;

    SB_2 := Form1.ADOQuery1.FieldByName('1-я сборка').AsFloat;
    SB_1 := 0.001;

  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
  SB_LOP_S := FloatToStr(SB_Lop);
  Result.Sborka_lop := SB_LOP_S;
end;

function KANAL_KR_KV(Izdel, IDGP, IDKO: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, j, Flag_Razb_Klapana, Klap, Res, Res1, Kol_Priv, Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram, Res_Ruk, Kol_F, Res_Resh, Perim, P, Res_MS, Res_EPV, MS_I, Pos_Zv, R1, R2, R3, R4: Integer;
  Kol_Ed_Str, Nam, Elem, Lop, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama, F, luk, NAM_LIST, USLOVie, S, Str: string;
  Kol_Ed, NC_RON, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2, NC_Kor, Kol_Lop, Simmetri, Kol_MUF, b_I: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, MS, Tip_Klap, Ispolnenie, Var_Raskr_Lop, Tip_Priv, Nal_Kog, Ispol_KOnstr, Ispol_Klim, Tip, Pos2, Pos3, Pos4, Pos5, Pos6, Izdel_Germik, Izdelie, a, b, SQL_S: string;
  Pos_U, Ruch, Res0, Res2, Res3, A_i, FL: Integer;
begin
  D := 0;
  NAM_LIST := '';
  Nam := Izdel;
  Izdelie := Izdel;
  Izdel_Germik := Izdel;
  Result.SVarka := 0;
  Result.Sborka1 := 0;
  Result.Sborka2 := 0;
  Result.Sborka_lop := '0';
  Result.Sborka_tyag := '0';
  Lop := '0';
  Ispolnenie := '';
  Var_Raskr_Lop := '';
  Tip_Priv := '';
  Nal_Kog := '';
  Ispol_KOnstr := '';
  Ispol_Klim := '';
  SB_2 := 0;
  SQL_S := '';
  FL := 0;
  Ruch := 0;
  SB_Lop:=0;
      //=============================
  //Клапан Канал-КВ-160-рукоятка
  Izdelie := Izdel;

    NAM_LIST := 'КОЛ-КРУГ';
    Res := Pos(' ', Izdelie);
    if Res<>0 then
    Delete(Izdelie, 1, Res); //Канал-КВ-160-рукоятка
              //========================================
    Res := Pos('-', Izdelie);
    if Res<>0 then
    begin
    Delete(Izdelie, 1, Res);  // КВ-160-рукоятка
    end;
    Res := Pos('-', Izdelie);
    if Res<>0 then
    begin
    Delete(Izdelie, 1, Res); //160-рукоятка
    end;
              //========================================
    Res := Pos('-', Izdelie);
    if Res<>0 then
    begin
    A := Copy(Izdelie, 1, Res - 1); //рукоятка
    Delete(Izdelie, 1, Res);
    end
    Else
     a := Izdelie;

  b_I := StrToInt(A);

  if b_I <= 250 then
    b := '250';
                                                //-------------------------
  if (b_I > 250) and (b_I <= 350) then
    b := '350';
                                               //-------------------------
  if (b_I > 350) then
    b := '600';
        //-------------------------------------------------------------------
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where (Д='+#39+B+#39+') ', [NAM_LIST]) then
    exit;

    SB_2 := Form1.ADOQuery1.FieldByName('1-я сборка').AsFloat;
    SB_1 := 0.001;

  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
  SB_LOP_S := FloatToStr(SB_Lop);
  Result.Sborka_lop := SB_LOP_S;
end;

function KANAL_KR(Izdel, IDGP, IDKO: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, j, Flag_Razb_Klapana, Klap, Res, Res1, Kol_Priv, Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram, Res_Ruk, Kol_F, Res_Resh, Perim, P, Res_MS, Res_EPV, MS_I, Pos_Zv, R1, R2, R3, R4: Integer;
  Kol_Ed_Str, Nam, Elem, Lop, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama, F, luk, NAM_LIST, USLOVie, S, Str: string;
  Kol_Ed, NC_RON, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2, NC_Kor, Kol_Lop, Simmetri, Kol_MUF, b_I: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, MS, Tip_Klap, Ispolnenie, Var_Raskr_Lop, Tip_Priv, Nal_Kog, Ispol_KOnstr, Ispol_Klim, Tip, Pos2, Pos3, Pos4, Pos5, Pos6, Izdel_Germik, Izdelie, a, b, SQL_S: string;
  Pos_U, Ruch, Res0, Res2, Res3, A_i, FL: Integer;
begin
  D := 0;
  NAM_LIST := '';
  Nam := Izdel;
  Izdelie := Izdel;
  Izdel_Germik := Izdel;
  Result.SVarka := 0;
  Result.Sborka1 := 0;
  Result.Sborka2 := 0;
  Result.Sborka_lop := '0';
  Result.Sborka_tyag := '0';
  Lop := '0';
  Ispolnenie := '';
  Var_Raskr_Lop := '';
  Tip_Priv := '';
  Nal_Kog := '';
  Ispol_KOnstr := '';
  Ispol_Klim := '';
  SB_2 := 0;
  SQL_S := '';
  FL := 0;
  Ruch := 0;
  SB_Lop:=0;
      //=============================
  //Клапан Канал-КОЛ-К-200_226200001-02-СПБ
  Izdelie := Izdel;

    NAM_LIST := 'КОЛ-КРУГ';
    Res := Pos(' ', Izdelie);
    if Res<>0 then
    Delete(Izdelie, 1, Res); //Канал-КОЛ-К-200_226200001-02-СПБ
              //========================================
    Res := Pos('-', Izdelie);
    if Res<>0 then
    begin
    Nam := Copy(Izdelie, 1, Res - 1); // КОЛ-К-200_226200001-02-СПБ
    Delete(Izdelie, 1, Res);
    end;
    Res := Pos('-', Izdelie);
    if Res<>0 then
    begin
    Nam := Copy(Izdelie, 1, Res - 1); // К-200_226200001-02-СПБ
    Delete(Izdelie, 1, Res);
    end;
              //========================================
    Res := Pos('-', Izdelie);
    if Res<>0 then
    begin
    Nam := Copy(Izdelie, 1, Res - 1); // 200_226200001-02-СПБ
    Delete(Izdelie, 1, Res);
    end;

    Res := Pos('_', Izdelie);
    if Res<>0 then
    begin
      a := Copy(Izdelie, 1, Res - 1);
      Delete(Izdelie, 1, Res);   // 200_226200001-02-СПБ
    end
    Else
     a := Izdelie;

  b_I := StrToInt(A);

  if b_I <= 250 then
    b := '250';
                                                //-------------------------
  if (b_I > 250) and (b_I <= 350) then
    b := '350';
                                               //-------------------------
  if (b_I > 350) then
    b := '600';
        //-------------------------------------------------------------------
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where (Д='+#39+B+#39+') ', [NAM_LIST]) then
    exit;

    SB_2 := Form1.ADOQuery1.FieldByName('1-я сборка').AsFloat;
    SB_1 := 0.001;

  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
  SB_LOP_S := FloatToStr(SB_Lop);
  Result.Sborka_lop := SB_LOP_S;
end;

function KLARA(Izdel, IDGP, IDKO: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, j, Flag_Razb_Klapana, Klap, Res, Res1, Kol_Priv, Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram, Res_Ruk, Kol_F, Res_Resh, Perim, P, Res_MS, Res_EPV, MS_I, Pos_Zv, R1, R2, R3, R4: Integer;
  Kol_Ed_Str, Nam, Elem, Lop, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama, F, luk, NAM_LIST, USLOVie, S, Str: string;
  Kol_Ed, NC_RON, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2, NC_Kor, Kol_Lop, Simmetri, Kol_MUF, b_I: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, MS, Tip_Klap,
   Ispolnenie, Var_Raskr_Lop, Tip_Priv, Nal_Kog,
   Ispol_KOnstr, Ispol_Klim, Tip, Pos2, Pos3,
   Pos4, Pos5, Pos6, Izdel_Germik, Izdelie, a,aa,bb, b: string;
  Pos_U, Ruch, Res0, Res2, Res3,A_I: Integer;
begin
  D := 0;
  NAM_LIST := '';
  Nam := Izdel;
  Izdelie := Izdel;
  Izdel_Germik := Izdel;
  Result.SVarka := 0;
  Result.Sborka1 := 0;
  Result.Sborka2 := 0;
  Result.Sborka_lop := '0';
  Result.Sborka_tyag := '0';
  Lop := '0';
  Ispolnenie := '';
  Var_Raskr_Lop := '';
  Tip_Priv := '';
  Nal_Kog := '';
  Ispol_KOnstr := '';
  Ispol_Klim := '';
  SB_2 := 0;
      //=============================
      //Клапан КЛАРА-400*250-Н
      //Клапан КЛАРА-450-К
      //Клапан КЛАРА-315-Н
      //Клапан КЛАРА-КРОС-1120-Н


  Res := Pos(' ', Izdelie);
  Delete(Izdelie, 1, Res);
              //========================================
  Res := Pos('-', Izdelie);
  Nam := Copy(Izdelie, 1, Res - 1); //  КЛАРА
  Delete(Izdelie, 1, Res);
              //========================================
  Res := Pos('КРОС-', Izdelie);
  if Res<>0 then
  Delete(Izdelie, 1, Res);
              //======================================== 400-Н
  {Res := Pos('-', Izdelie);
  Tip_Klap := Copy(Izdelie, 1, Res - 1); //Л
  Delete(Izdelie, 1, Res);}
              //========================================
              //355*355-Н-1*LM230A-УХЛ2-0
  Res := Pos('-', Izdelie);
  Res1 := Pos('*', Izdelie);

  if (Res > Res1) AND (Res1<>0) then
  begin
                //400*250-Н
    a := Copy(Izdelie, 1, Res1 - 1);
    Delete(Izdelie, 1, Res1);

    Res2 := Pos('-', Izdelie);
    b := Copy(Izdelie, 1, Res2 - 1);
    Delete(Izdelie, 1, Res2);

      if b_I <= 250 then
    bb := '250';
        //-------------------------
   if (b_I > 250) and (b_I <= 600) then
    bb := '600';

  if (b_I > 600) and (b_I <= 800) then
    bb := '800';
        //-------------------------
  if (b_I > 800) then
    bb := '1250';
   //
        A_I:=StrToInt(A);
    if A_i<=800 then
     Aa:='800';
    if (a_I > 800)   then
     Aa:='1250';
  end
  else
  begin
              //315-Н
    a := Copy(Izdelie, 1, Res - 1);
    Delete(Izdelie, 1, Res);
    b := '0';
    A_I:=StrToInt(A);
    if A_i<=125 then
     Aa:='125';
    if (a_I > 125) and (a_I <= 250)  then
     Aa:='250';
    if (a_I > 250) and (a_I <= 400)  then
     Aa:='400';
    if (a_I > 400) and (a_I <= 630)  then
     Aa:='630';
    if (a_I > 630)   then
     Aa:='1000';

  end;
  Ispolnenie := Izdelie; // H

  Izdelie := Izdel;
  b_I := StrToInt(b);
  Flag_Razb_Klapana := 0;
  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + IDGP + #39 + ') AND ([IdКО]=' + #39 + IDKO + #39 + ') ', ['СпецифВозд']) then
    exit;
  Flag_Razb_Klapana := 0;
  Simmetri := 0;
  for j := 0 to Form1.ADOQuery2.RecordCount - 1 do  //Проверка на Клапан разбитый на 2
  begin
    Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
    Kol_Ed_Str := StringReplace(Form1.ADOQuery2.FieldByName('Количество').AsString, '.', ',', [rfReplaceAll]);
    System.SysUtils.FormatSettings.DecimalSeparator := (',');
    Kol_Ed := StrToFloat(Kol_Ed_Str);
    Klap := POs('Клапан', Elem);
    if (Klap <> 0) then
    begin
      Flag_Razb_Klapana := Flag_Razb_Klapana + StrToInt(Kol_Ed_Str); //Клапан разбит на 2
      Izdel := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
            //Nam := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
    end;
    Form1.ADOQuery2.Next;
  end;

       // ДОДЕЛАТЬ

  if Kol_Lop = 0 then
    Kol_Lop := 1;
        //-------------------------------------------------------------------
  if b_I = 0 then
  begin
    NAM_LIST := 'КЛАРА КР';
     if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where  ([Д]=' + #39 + aa + #39 + ') ', [NAM_LIST]) then
    exit;
  end
  else
  Begin
    NAM_LIST := 'КЛАРА';
     if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([А]=' + #39 + aa + #39 + ') and ([В]=' + #39 + bb + #39 + ') ', [NAM_LIST]) then
    exit;
  End;

  SB_1 := Form1.ADOQuery1.FieldByName('1-я сборка').AsFloat;
  SB_2 := 0.01; //Form1.ADOQuery1.FieldByName('2-я сборка').AsFloat;
         // SB_LOP:=  Form1.ADOQuery1.FieldByName('Сборка лопаток').AsFloat;
         // SB_LOP:=SB_LOP*KOl_Lop;

  Privod := Form1.StringGrid6.Cells[I_FN_BRIKET, Ii + 1];
  if Privod = '' then
    Kol_Priv := 0
  else
    Kol_Priv := StrToInt(Privod);
  Privod_Nam := Form1.SGL.Cells[I_FN_MOD_PRIVOD, Ii + 1];
  Priv := Form1.SGL.Cells[I_FN_MOD_PRIVOD, Ii + 1];
        //--------------------------------------------------------КK
        //-----------------------------------------------------------ПРИВОД
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
    exit;
  S := Form1.ADOQuery1.FieldByName('Эл-приводВоз').AsString;
  Form1.Memo13.Lines.Add(S);
  D := StrToFloat(S) * Kol_Priv;   //Простой

  R4 := Pos('-2-У', Izdelie); //Простой Утепленный
  R1 := Pos('-В-', Izdelie);
  R2 := Pos('-ВК-', Izdelie);
  R3 := Pos('-КВ-', Izdelie);
  if (R1 = 0) and (R2 = 0) and (R3 = 0) and (R4 <> 0) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Эл-приводВозУТ').AsString;
    Form1.Memo13.Lines.Add(S);
    D := StrToFloat(S) * Kol_Priv;
  end;
        //взрыв+++++++++++++++++++
  R1 := Pos('-В-', Izdelie);
  R2 := Pos('-ВК-', Izdelie);
  R3 := Pos('-КВ-', Izdelie);
  if (R1 <> 0) or (R2 <> 0) or (R3 <> 0) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Эл-приводВозВЗР').AsString;
    Form1.Memo13.Lines.Add(S);
    D := StrToFloat(S) * Kol_Priv;
  end;

  R1 := Pos('-В-', Izdelie);
  R2 := Pos('-ВК-', Izdelie);
  R3 := Pos('-КВ-', Izdelie);
  R4 := Pos('-2-У', Izdelie); //взрыв Утепленный
  if ((R1 <> 0) or (R2 <> 0) or (R3 <> 0)) and (R4 <> 0) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Эл-приводВозВЗРУТ').AsString;
    Form1.Memo13.Lines.Add(S);
    D := StrToFloat(S) * Kol_Priv;
  end;
      //------------------------------------------------------------------
  SB_2 := SB_2 + D; //+NC_RON;
        //--------------------------------------------------------К нерж
      { s:= AnsiUpperCase('-К-');
        S1:=AnsiUpperCase(Izdelie);
        res:=Pos(s,S1); //КIspolnenie
        if Res<>0 then
        SB_2:=SB_2*1.2;

        if Flag_Razb_Klapana>1 then
          SB_1:=SB_1*2;//Клапан разбит на 2  }
  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
  SB_LOP_S := FloatToStr(SB_Lop);
  Result.Sborka_lop := SB_LOP_S;
end;

function TULPAN(Izdel, IDGP, IDKO: string; Svarka1: Double; Ii: Integer): TResult;  //Клапан ТЮЛЬПАН-1-250*250-КВ-2*225
var
  i, Kpu, j, Flag_Razb_Klapana, Klap, Res, Res1, Kol_Priv, Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram, Res_Ruk, Kol_F, Res_Resh, Perim, P, Res_MS, Res_EPV, MS_I, Pos_Zv, R1, R2, R3, R4: Integer;
  Kol_Ed_Str, Nam, Elem, Lop, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama, F, luk, NAM_LIST, USLOVie, S, Str: string;
  Kol_Ed, NC_RON, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2, NC_Kor, Kol_Lop, Simmetri, Kol_MUF, b_I: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, MS, Tip_Klap, Ispolnenie, Var_Raskr_Lop, Tip_Priv, Nal_Kog, Ispol_KOnstr, Ispol_Klim, Tip, Pos2, Pos3, Pos4, Pos5, Pos6, Izdel_Germik, Izdelie, a, b: string;
  Pos_U, Ruch, Res0, Res2, Res3: Integer;
begin
  D := 0;
  NAM_LIST := '';
  Nam := Izdel;
  Izdelie := Izdel;
  Izdel_Germik := Izdel;
  Result.SVarka := 0;
  Result.Sborka1 := 0;
  Result.Sborka2 := 0;
  Result.Sborka_lop := '0';
  Result.Sborka_tyag := '0';
  Lop := '0';
  Ispolnenie := '';
  Var_Raskr_Lop := '';
  Tip_Priv := '';
  Nal_Kog := '';
  Ispol_KOnstr := '';
  Ispol_Klim := '';
  SB_2 := 0;
      //Клапан ТЮЛЬПАН-1-250*250-КВ-2*225
      //Клапан ТЮЛЬПАН-1-200*200-Н-0
      //Клапан ТЮЛЬПАН-1-300*200-В-0
     //Клапан ТЮЛЬПАН-1-650*650-К-1*560
  Res := Pos(' ', Izdel);
  Delete(Izdel, 1, Res);
              //========================================
  Res := Pos('-', Izdel);
  Nam := Copy(Izdel, 1, Res - 1); // ТЮЛЬПАН
  Delete(Izdel, 1, Res);
              //========================================
  Res := Pos('-', Izdel);
  Tip_Klap := Copy(Izdel, 1, Res - 1); //1,2,3
  Delete(Izdel, 1, Res);
              //========================================
  Res := Pos('*', Izdel);
  a := Copy(Izdel, 1, Res - 1);
  Delete(Izdel, 1, Res);
              //========================================
  Res := Pos('-', Izdel);
  b := Copy(Izdel, 1, Res - 1);
  Delete(Izdel, 1, Res);
              //========================================
  Res := Pos('-', Izdel);
  Ispolnenie := Copy(Izdel, 1, Res - 1); // H ,В,КВ
  Delete(Izdel, 1, Res);
              //========================================
  Tip := Izdel; // Copy(Izdel, 1, res - 1);

  Flag_Razb_Klapana := 0;
  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + IDGP + #39 + ') AND ([IdКО]=' + #39 + IDKO + #39 + ') ', ['СпецифВозд']) then
    exit;
  Flag_Razb_Klapana := 0;
  Simmetri := 0;
  for j := 0 to Form1.ADOQuery2.RecordCount - 1 do  //Проверка на Клапан разбитый на 2
  begin
    Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
    Kol_Ed_Str := StringReplace(Form1.ADOQuery2.FieldByName('Количество').AsString, '.', ',', [rfReplaceAll]);
    System.SysUtils.FormatSettings.DecimalSeparator := (',');
    Kol_Ed := StrToFloat(Kol_Ed_Str);
    Klap := POs('Клапан', Elem);
    if (Klap <> 0) then
    begin
      Flag_Razb_Klapana := Flag_Razb_Klapana + StrToInt(Kol_Ed_Str); //Клапан разбит на 2
      Izdel := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
            //Nam := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
    end;
    Form1.ADOQuery2.Next;
  end;                 //Лопатка-заготовка
  Str := 'Лопатка%';
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 + ') AND ([IdКО]=' + #39 + IDKO + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ') AND ((Элемент Like ' + #39 + '%s' + #39 + '))', ['СпецифВозд', Str]) then
    exit;
  for i := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    Kol_Lop := Kol_Lop + Form1.ADOQuery1.FieldByName('Количество').AsFloat;
    Form1.ADOQuery1.Next;
  end;

  b_I := StrToInt(b);

  if b_I < 1000 then
    b := '500';
        //-------------------------
  if (b_I >= 1000) then
    b := '1000';
        //-------------------------
  Res := Pos('К', Ispolnenie);
  if Res <> 0 then
    Ispolnenie := 'В';
  Res := Pos('3', Tip_Klap);
  if Res = 0 then
  begin
    NAM_LIST := Nam + '-' + Tip_Klap + '-' + Ispolnenie + '-' + b;
          //-------------------------------------------------------------------
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([кол-во лопаток]=' + #39 + FloatToStr(Kol_Lop) + #39 + ')  ', [NAM_LIST]) then
      exit;
    SB_2 := Form1.ADOQuery1.FieldByName('1-я сборка').AsFloat;
    SB_1 := 0.01;
  end;

  if Res <> 0 then
  begin
    NAM_LIST := Nam + '-' + Tip_Klap + '-' + Ispolnenie;
    if b_I <= 400 then
      b := '<400';
          //-------------------------      and ([полупериметр]='+#39+B+#39+')
    if (b_I > 400) then
      b := '>400';
          //-------------------------------------------------------------------
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([кол-во лопаток]=' + #39 + FloatToStr(Kol_Lop) + #39 + ')', [NAM_LIST]) then
      exit;
    SB_2 := Form1.ADOQuery1.FieldByName(b).AsFloat;
    SB_1 := 0.01;
  end;
          //Form1.ADOQuery1.FieldByName('2-я сборка').AsFloat;
        //  Переходник    //Клапан ТЮЛЬПАН-1-250*250-КВ-2*225
  Res := Pos('*', Tip);
  if Res <> 0 then
  begin
    if b_I <= 600 then
      b := '600';
          //-------------------------
    if (b_I > 600) and (b_I <= 850) then
      b := '850';
          //-------------------------
    if (b_I > 850) and (b_I <= 1200) then
      b := '1200';
          //-------------------------
    if (b_I > 1200) and (b_I <= 1800) then
      b := '1800';
          //-------------------------
    if (b_I > 1800) and (b_I <= 2500) then
      b := '2500';
          //-------------------------
    if (b_I > 2500) then
      b := '2501';
          //-------------------------------------------------------------------
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([полупериметр]=' + #39 + b + #39 + ') ', ['Корпус']) then
      exit;
    Res := Pos('2', Tip);
    if Res <> 0 then
      Kol_Priv := 2
    else
      Kol_Priv := 1;
    S := Form1.ADOQuery1.FieldByName('Переходник').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;
        //
  Privod := Form1.StringGrid6.Cells[I_FN_BRIKET, Ii + 1];
  if Privod = '' then
    Kol_Priv := 0
  else
    Kol_Priv := StrToInt(Privod);
  Privod_Nam := Form1.SGL.Cells[I_FN_MOD_PRIVOD, Ii + 1];
  Priv := Form1.SGL.Cells[I_FN_MOD_PRIVOD, Ii + 1];
        //--------------------------------------------------------КK
  S := AnsiUpperCase('-КК-');
  S1 := AnsiUpperCase(Izdelie);
  Res := Pos(S, S1); //Клемная коробка
  if Res <> 0 then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('КК').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;
               //--------------------------------------------------------КK
  S := AnsiUpperCase('-КЛ-');
  S1 := AnsiUpperCase(Izdelie);
  Res := Pos(S, S1); //Клемная коробка
  if Res <> 0 then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('КК').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;
        //--------------------------------------------------------Т Клапан КПУ-1Н-О-Н-1000*650-2*ф-MB220-T-сн-0-0-0-0-0-0
      //Термодатчик
  S := AnsiUpperCase('-T-');
  S1 := AnsiUpperCase(Izdelie);
  Res := Pos(S, S1);
  if Res <> 0 then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Т').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;
        //-----------------------------------------------------------ПРИВОД
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
    exit;
  S := Form1.ADOQuery1.FieldByName('Эл-приводВоз').AsString;
  Form1.Memo13.Lines.Add(S);
  D := StrToFloat(S) * Kol_Priv;   //Простой

  R4 := Pos('-2-У', Izdelie); //Простой Утепленный
  R1 := Pos('-В-', Izdelie);
  R2 := Pos('-ВК-', Izdelie);
  R3 := Pos('-КВ-', Izdelie);
  if (R1 = 0) and (R2 = 0) and (R3 = 0) and (R4 <> 0) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Эл-приводВозУТ').AsString;
    Form1.Memo13.Lines.Add(S);
    D := StrToFloat(S) * Kol_Priv;
  end;
        //взрыв+++++++++++++++++++
  R1 := Pos('-В-', Izdelie);
  R2 := Pos('-ВК-', Izdelie);
  R3 := Pos('-КВ-', Izdelie);
  if (R1 <> 0) or (R2 <> 0) or (R3 <> 0) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Эл-приводВозВЗР').AsString;
    Form1.Memo13.Lines.Add(S);
    D := StrToFloat(S) * Kol_Priv;
  end;

  R1 := Pos('-В-', Izdelie);
  R2 := Pos('-ВК-', Izdelie);
  R3 := Pos('-КВ-', Izdelie);
  R4 := Pos('-2-У', Izdelie); //взрыв Утепленный
  if ((R1 <> 0) or (R2 <> 0) or (R3 <> 0)) and (R4 <> 0) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Эл-приводВозВЗРУТ').AsString;
    Form1.Memo13.Lines.Add(S);
    D := StrToFloat(S) * Kol_Priv;
  end;
      //------------------------------------------------------------------
  SB_2 := SB_2 + D ;
        //--------------------------------------------------------К нерж
       {s:= AnsiUpperCase('-К-');
        S1:=AnsiUpperCase(Izdelie);
        res:=Pos(s,S1); //КIspolnenie
        if Res<>0 then
        SB_2:=SB_2*1.2;   }

  if Flag_Razb_Klapana > 1 then
    SB_1 := SB_1 * 2; //Клапан разбит на 2
  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;

end;
//

function Germik_P(Izdel, IDGP, IDKO: string; Svarka1: Double; Ii: Integer): TResult;
var
  i, Kpu, j, Flag_Razb_Klapana, Klap, Res, Res1, Kol_Priv, Res_Ispol, Res_Priv, Res_Term, Res_Klem, Res_Ram, Res_Ruk, Kol_F, Res_Resh, Perim, P, Res_MS, Res_EPV, MS_I, Pos_Zv, R1, R2, R3, R4: Integer;
  Kol_Ed_Str, Nam, Elem, Lop, Privod_Nam, KPu_S, Nazn, Privod, Ispol, Term, Priv, Razmesh, klem, Resh, N1, Pereh, Ruk, Rama, F, luk, NAM_LIST, USLOVie, S, Str: string;
  Kol_Ed, NC_RON, NC_MRP, HK, D, SB_Lop, SB_Tyag, SB_1, SB_2, NC_Kor, Kol_Lop, Simmetri, Kol_MUF, b_I,
  NC_Ger_S_Prov: Double;
  SB_LOP_S, SB_TYAG_S, S1, SB_1_S, SB_2_S, MS, Tip_Klap,
  Ispolnenie, Var_Raskr_Lop, Tip_Priv, Nal_Kog, Ispol_KOnstr, Ispol_Klim, Tip,
  Pos2, Pos3, Pos4, Pos5, Pos6, Izdel_Germik, Izdelie, a,A1, b,B1: string;
  Pos_U, Ruch, Res0, Res2, Res3,Ger_S: Integer;
begin
  D := 0;
  NAM_LIST := '';
  Nam := Izdel;
  Izdelie := Izdel;
  Izdel_Germik := Izdel;
  Result.SVarka := 0;
  Result.Sborka1 := 0;
  Result.Sborka2 := 0;
  Result.Sborka_lop := '0';
  Result.Sborka_tyag := '0';
  Result.Obvarka_G_R := 0;
  NC_Ger_S_Prov:=0;
  Lop := '0';
  Ispolnenie := '';
  Var_Raskr_Lop := '';
  Tip_Priv := '';
  Nal_Kog := '';
  Ispol_KOnstr := '';
  Ispol_Klim := '';
  SB_2 := 0;
                        //=============================
          //Kol_Lop //Кол лопаток в МЕТРАХ см Табл

  Pos_Zv := Pos('*', Izdel);
  if Pos_Zv <> 0 then
  begin

    Res := Pos(' ', Izdel);
    Delete(Izdel, 1, Res);
              //========================================
    Res := Pos('-', Izdel);
    Nam := Copy(Izdel, 1, Res - 1); // ГЕРМИК
    Delete(Izdel, 1, Res);
              //========================================
    Res := Pos('-', Izdel);
    Tip_Klap := Copy(Izdel, 1, Res - 1); //С или П
    Delete(Izdel, 1, Res);
              //========================================
    Res := Pos('*', Izdel);
    a := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
              //========================================
    Res := Pos('-', Izdel);
    b := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
              //========================================
              //Клапан ГЕРМИК-С-800*800-Н-1*РУЧКА-1-УХЛ2
              //Клапан ГЕРМИК-С-740*740-Н-1*LM24A-SR-2-УХЛ2
    Res := Pos('-', Izdel);
    Ispolnenie := Copy(Izdel, 1, Res - 1); // H
    Delete(Izdel, 1, Res);
              //========================================
    Res := Pos('*', Izdel);
    Tip := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
    Ruch := Pos('РУЧКА', Izdelie);
              //========================================
    Res := Pos('-', Izdel);
    Pos2 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                                                //========================================
    Res := Pos('-', Izdel);
    Pos3 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                                                //========================================
    Res := Pos('-', Izdel);
    Pos4 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                                                //========================================
    Res := Pos('-', Izdel);
    Pos5 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                                                //========================================
    Res := Pos('-', Izdel);
    Pos6 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                                                //========================================
    Ispol_Klim := Izdel;
    Res := Pos('У', Ispol_Klim);
    if Res = 0 then
      Ispol_KOnstr := Ispol_Klim
    else
    begin
                                                        //-----------------------------
      Pos_U := Pos(Izdel, Izdel_Germik);
      Ruch := Pos('РУЧКА', Izdelie);
      if (Pos_U <> 0) then
        Delete(Izdel_Germik, 1, Pos_U - 3);
                                                        //---------------------------
      Res1 := Pos('-', Izdel_Germik);
      Ispol_KOnstr := Copy(Izdel_Germik, 1, Res1 - 1); //1=0 2=0.126+0.273
    end;
              //+++++++++++++++++++++++++++++++++++++++++++++++++
              {B_i := StrToInt(B);

              if B_i <= 550 then
                B := '600';
                                                //-------------------------
              if (B_i > 550) and (B_i <= 1100) then
                B := '1200';
                                                //-------------------------
              if (B_i > 1100) and (B_i <= 1530) then
                B := '1500';
                                                //-------------------------
              if (B_i > 1530) then
                B := '2000';  }


  end            //++++++++++++++++++++++++++++++++++++++++++++++++++++++ Нормальные Гермики
  else
  begin
            //Клапан ГЕРМИК-П-0510-0750-НВ-П-04-00-00-У2
            //Клапан ГЕРМИК-С-0625-0875-Н-П-12-00-00-У2 для Кондиционер КЦКП-С1-5
            //Tip_Klap,       //1
            //A
            //B
            //Ispolnenie,     //3
            //Var_Raskr_Lop,  //4
            //Tip_Priv,       //5
            //Nal_Kog,        //6
            //Ispol_KOnstr,   //7
            //Ispol_Klim      //8   Клапан ГЕРМИК-С-0675-0575-В-С-12-00-00-УХЛ3
    Res := Pos(' ', Izdel);
    Delete(Izdel, 1, Res);
                                                //========================================
    Res := Pos('-', Izdel);
    Nam := Copy(Izdel, 1, Res - 1); //ГЕРМИК
    Delete(Izdel, 1, Res);
                                                //========================================
    Res := Pos('-', Izdel);
    Tip_Klap := Copy(Izdel, 1, Res - 1); //C
    Delete(Izdel, 1, Res);
                                                //========================================
    Res := Pos('-', Izdel);
    a := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                                                //========================================
    Res := Pos('-', Izdel);
    b := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                                                //========================================H ГЕРМИК-П-0510-0750-НВ
                                                //Клапан ГЕРМИК-П-0510-0750-НВ
    Res := Pos('-', Izdel);      //Исполнение Н=Общепром В=Взрывозащ К=Нерж
    Ispolnenie := Copy(Izdel, 1, Res - 1); //В-С-12-00-00-УХЛ3
    Delete(Izdel, 1, Res);
                                                //======================================== ГЕРМИК-П-0510-0750-НВ-П
    Res := Pos('-', Izdel);                   //П=Паралельное раскр лопаток
    Var_Raskr_Lop := Copy(Izdel, 1, Res - 1); //С=Симетричное
    Delete(Izdel, 1, Res);
                                                //======================================== ГЕРМИК-П-0510-0750-НВ-П-04
    Res := Pos('-', Izdel);                    //99=Ручной
    Tip_Priv := Copy(Izdel, 1, Res - 1);       //00=Без привода
    Delete(Izdel, 1, Res);                     //Остальные Эл.Привод
                                                //======================================== ГЕРМИК-П-0510-0750-НВ-П-04-00//01=С кожухом
    Res := Pos('-', Izdel);                    //ГЕРМИК С
    Nal_Kog := Copy(Izdel, 1, Res - 1);       //00=Исполнение 1
    Delete(Izdel, 1, Res);                    //01=Исполнение 2
                                                //======================================== ГЕРМИК-П-0510-0750-НВ-П-04-00-00
    Res := Pos('-', Izdel);                 //00=Наружное 01=Внутри корпуса
    Ispol_KOnstr := Copy(Izdel, 1, Res - 1); //02=Наруже Фланец 03=Внутри Фланец
    Delete(Izdel, 1, Res);
                                                //========================================
    Ispol_Klim := Copy(Izdel, 1, Res - 1);
  end;

  Flag_Razb_Klapana := 0;
  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + IDGP + #39 +
  ') AND ([IdКО]=' + #39 + IDKO + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ')  ', ['СпецифВозд']) then
    exit;
  Flag_Razb_Klapana := 0;
  Simmetri := 0;
  for j := 0 to Form1.ADOQuery2.RecordCount - 1 do  //Проверка на Клапан разбитый на 2
  begin
    Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
    Kol_Ed_Str := StringReplace(Form1.ADOQuery2.FieldByName('Количество').AsString, '.', ',', [rfReplaceAll]);
    System.SysUtils.FormatSettings.DecimalSeparator := (',');
    Kol_Ed := StrToFloat(Kol_Ed_Str);
    Klap := POs('Клапан', Elem);
    if (Klap <> 0) then
    begin
      Flag_Razb_Klapana := Flag_Razb_Klapana + StrToInt(Kol_Ed_Str); //Клапан разбит на 2
      Izdel := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
            //Nam := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
    end;
    Form1.ADOQuery2.Next;
  end;                 //Лопатка-заготовка
  Str := 'Лопатка%';
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 + ') AND ([IdКО]=' + #39 + IDKO + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ') AND ((Элемент Like ' + #39 + '%s' + #39 + '))', ['СпецифВозд', Str]) then
    exit;
  for i := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    Kol_Lop := Kol_Lop + Form1.ADOQuery1.FieldByName('Количество').AsFloat;
    Form1.ADOQuery1.Next;
  end;
  Str := 'Муфта%';
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 + ') AND ([IdКО]=' + #39 + IDKO + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ') AND ((Элемент Like ' + #39 + '%s' + #39 + '))', ['СпецифВозд', Str]) then
    exit;
  for i := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    Kol_MUF := Kol_MUF + Form1.ADOQuery1.FieldByName('Количество').AsFloat;
    Form1.ADOQuery1.Next;
  end;
  Res0 := Pos('С', Tip_Klap);
        // Res1:=Pos('В',Ispolnenie);
  Res2 := Pos('С', Var_Raskr_Lop);

  if (Res0 <> 0) and (Res2 <> 0) then
    Simmetri := Kol_Lop * 0.02;  //Клапан ГЕРМИК-С-0675-0575-В-С-12-00-00-УХЛ3 симметрия

  b_I := StrToInt(b);
  if Flag_Razb_Klapana > 1 then
    Kol_Lop := Kol_Lop / 2;

  if Flag_Razb_Klapana > 1 then
    b_I := b_I / 2;

  if b_I <= 550 then
    b1 := '600';
                                                //-------------------------
  if (b_I > 550) and (b_I <= 1100) then
    b1 := '1200';
                                                //-------------------------
  if (b_I > 1100) and (b_I <= 1530) then
    b1 := '1500';
                                                //-------------------------
  if (b_I > 1530) then
    b1 := '2000';
  NAM_LIST := Nam + '-' + Tip_Klap;
        //-------------------------------------------------------------------
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([кол-во лопаток]=' + #39 + FloatToStr(Kol_Lop) + #39 + ') and ([полупериметр]=' + #39 + b1 + #39 + ') ', [NAM_LIST]) then
    exit;
  SB_1 := Form1.ADOQuery1.FieldByName('1-я сборка').AsFloat;
  SB_2 := Form1.ADOQuery1.FieldByName('2-я сборка').AsFloat;
  if Flag_Razb_Klapana > 1 then //Тютева 2 секции 14.04.2020
    SB_2 := SB_2 * 2;
  if Flag_Razb_Klapana > 1 then //Тютева 2 секции 14.04.2020
    SB_2 := SB_2 + (Kol_MUF * 0.03);

  if (Flag_Razb_Klapana > 1) and (Res2 <> 0) then   //-C- Тютева 2 секции 14.04.2020
    SB_2 := SB_2 + 0.382;
  Res2 := Pos('П', Var_Raskr_Lop);
  if (Flag_Razb_Klapana > 1) and (Res2 <> 0) then   //-П- Тютева 2 секции 14.04.2020
    SB_2 := SB_2 + 0.2;
  if Flag_Razb_Klapana > 1 then
    SB_2 := SB_2 + 0.213; //Клапан разбит на 2
  SB_2 := SB_2 + Simmetri;  //Клапан ГЕРМИК-С-0675-0575-В-С-12-00-00-УХЛ3 симметрия
  //  ==========================================
    b_I := StrToInt(b)+StrToInt(a);
    if b_I <= 600 then
    b1 := '600';
                                                //-------------------------
  if (b_I > 600) and (b_I <= 850) then
    b1 := '850';
                                                //-------------------------
  if (b_I > 850) and (b_I <= 1200) then
    b1 := '1200';

  if (b_I > 1200) and (b_I <= 1800) then
    b1 := '1800';

   if (b_I > 1800) and (b_I <= 2000) then
    b1 := '2000';

  if (b_I > 2000) then
    b1 := '2500';
   if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where Полупериметр='+#39+B1+#39, ['ОбваркаКорпуса-Герм-Рег']) then
    exit;

    Result.Obvarka_G_R := Form1.ADOQuery1.FieldByName('Норма').AsFloat;
    // ===============================
  Privod := Form1.StringGrid6.Cells[I_FN_BRIKET, Ii + 1];
  if Privod = '' then
    Kol_Priv := 0
  else
    Kol_Priv := StrToInt(Privod);
  Privod_Nam := Form1.SGL.Cells[I_FN_MOD_PRIVOD, Ii + 1];
  Priv := Form1.SGL.Cells[I_FN_MOD_PRIVOD, Ii + 1];
        //--------------------------------------------------------КK
  if Ruch <> 0 then
    SB_2 := SB_2 + 0.06;
  //----------------------------------------------------------------
  Ger_S:=Pos('ГЕРМИК-С-',Izdelie);
  if Ger_S=0 then     //Матвеенко 09,09,2022 по служебке
  begin
  S := AnsiUpperCase('-КК-');
  S1 := AnsiUpperCase(Izdelie);
  Res := Pos(S, S1); //Клемная коробка
  if Res <> 0 then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('КК').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;
               //--------------------------------------------------------КK
  S := AnsiUpperCase('-КЛ-');
  S1 := AnsiUpperCase(Izdelie);
  Res := Pos(S, S1); //Клемная коробка
  if Res <> 0 then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('КК').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;
  end
  //----------------------------------
  Else
  begin
    NC_Ger_S_Prov:=Kol_Priv *0.32 ; //Расключение
    b_I:=StrToFloat(A);
    if b_I>1500 then
     NC_Ger_S_Prov:= NC_Ger_S_Prov*1.2;
  end;
  //----------------------------------------------------------------
  Ger_S:=Pos('ГЕРМИК-С-',Izdelie);
  if Ger_S=0 then     //Матвеенко 31,01,2023 по служебке
  begin
  //--------------------------------------------------------Т Клапан КПУ-1Н-О-Н-1000*650-2*ф-MB220-T-сн-0-0-0-0-0-0
      //Термодатчик
  S := AnsiUpperCase('-T-');
  S1 := AnsiUpperCase(Izdelie);
  Res := Pos(S, S1);
  if Res <> 0 then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Т').AsString;
    D := StrToFloat(S) * Kol_Priv;
  end;
  SB_2 := SB_2 + D;
  D := 0;
        //-----------------------------------------------------------ПРИВОД
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
    exit;
  S := Form1.ADOQuery1.FieldByName('Эл-приводВоз').AsString;
  Form1.Memo13.Lines.Add(S);
  D := StrToFloat(S) * Kol_Priv;   //Простой

  R4 := Pos('-2-У', Izdelie); //Простой Утепленный
  R1 := Pos('-В-', Izdelie);
  R2 := Pos('-ВК-', Izdelie);
  R3 := Pos('-КВ-', Izdelie);
  if (R1 = 0) and (R2 = 0) and (R3 = 0) and (R4 <> 0) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Эл-приводВозУТ').AsString;
    Form1.Memo13.Lines.Add(S);
    D := StrToFloat(S) * Kol_Priv;
  end;
        //взрыв+++++++++++++++++++
  R1 := Pos('-В-', Izdelie);
  R2 := Pos('-ВК-', Izdelie);
  R3 := Pos('-КВ-', Izdelie);
  if (R1 <> 0) or (R2 <> 0) or (R3 <> 0) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Эл-приводВозВЗР').AsString;
    Form1.Memo13.Lines.Add(S);
    D := StrToFloat(S) * Kol_Priv;
  end;

  R1 := Pos('-В-', Izdelie);
  R2 := Pos('-ВК-', Izdelie);
  R3 := Pos('-КВ-', Izdelie);
  R4 := Pos('-2-У', Izdelie); //взрыв Утепленный
  if ((R1 <> 0) or (R2 <> 0) or (R3 <> 0)) and (R4 <> 0) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Эл-приводВозВЗРУТ').AsString;
    Form1.Memo13.Lines.Add(S);
    D := StrToFloat(S) * Kol_Priv;
  end;
      //------------------------------------------------------------------
  SB_2 := SB_2 + D ;
  end;
        //--------------------------------------------------------К нерж
  S := AnsiUpperCase('-К-');
  S1 := AnsiUpperCase(Izdelie);
  Res := Pos(S, S1); //КIspolnenie
  if Res <> 0 then
    SB_2 := SB_2 * 1.2;

  if Flag_Razb_Klapana > 1 then
    SB_1 := SB_1 * 2; //Клапан разбит на 2
  Result.Sborka1 := SB_1;
  Result.Sborka2 := SB_2;
  Result.Svarka:=NC_Ger_S_Prov; //Расключение

end;

procedure TForm1.Button17Click(Sender: TObject);
const
  wdStory = 6;
var
  I,I1, j, ilengy, Kpu, Kpd, Kpd05, a, A1, A2, b, B1, B2, Perim, Perim1, Res, Kol_F, Res_T, Res_SN, Kol_lop, Kol_Priv, Pos_F1, Pos_F2, KPD_4_03, Res_Isp, Klap: Integer;
  Res_Nazn, ResN1, Res_Ispol, Res_Priv, Res_Klem, Res_Pereh, Res_Ruk, Res_Ram, Res_Term, Res_Resh, Res_Resh_R, Res_Resh_S, Flag_Razb_Klapana,Stat: Integer;
  KPu_S, Izdel, Nam, N1, Nazn, Ispol, F, Priv, Term, Razmesh, Klem, Resh, luk, Pereh, Ruk, Rama, A_S, B_S, Perim_S, Lop, Lopatka, Privod, SB, Privod_Nam, IDGP, A_S1, B_S1, Pos_Flan, Pos_Privod, Pos_Sn, Pos_Dop, Pos_Ram, Elem, Kol_Ed_Str: string;
  NC_Sbor, HK, Kol_Ed, SB_1, SB_2, SB_LOP, SB_TYAG,RON,Sb_ZAs,El1: Double;
  SB_LOP_S, SB_TYAG_S, SB1_S, SB2_S,RoN_S,Nom,Zas_S,El_S: string;
  Result: Tresult;
begin
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  for I := 0 to StringGrid10.RowCount - 1 do
  begin
    if SG6.Cells[I_FN_SBOR_KLAP_NC, I + 1] = '0' then
    begin
      Stat := StrToInt(SG6.Cells[I_FN_OTMENA + 1, I+1]);
    if (Stat = 0) then
    Continue;
      NC_Sbor := 0;
      NC_Sbor := 0;
      Result.Sborka1 := 0;
      Result.Sborka2 := 0;
      Result.Sborka_lop := '0';
      Result.Sborka_tyag := '0';
      Result.Sborka_RON := 0;
      Result.Sborka_Zas := 0;
      Result.El := 0;
      Izdel := StringGrid10.Cells[5, I + 1];
      Nam := StringGrid10.Cells[5, I + 1];
      IDGP := StringGrid10.Cells[I_FN_SGP + 2, I + 1];
      Kpd := Pos('КЭД', Izdel);
      Kpd05 := Pos('КЭД-05', Izdel); //  And (KPD05=0)
      if (Kpd <> 0) then
      begin
        NC_Sbor := 0;
        Result := KPD_New(Izdel, IDGP, 0, I);
      end;
      //Continue;
      //
      Kpu := Pos('ГЕРМИК-ДУ', Izdel);
      if Kpu <> 0 then
      begin
        NC_Sbor := 0;
        Result := Germik_DU_New(Izdel, IDGP, 0, I);
      end;
      //Клапан ОКСИД-400*400-1*Ф-Н-0-МРЗ
      Kpu := Pos('ОКСИД-', Izdel);
      if Kpu <> 0 then
      begin
        NC_Sbor := 0;
        Result := OKSID_New(Izdel, IDGP, 0, I);
      end;
      //Клапан ПРОК-1-Н-1000*300-1*000*V1
      Kpu := Pos('ПРОК-', Izdel);
      if Kpu <> 0 then
      begin
        NC_Sbor := 0;
        Result := PROK_New(Izdel, IDGP, 0, I);
      end;
      //
      Kpu := Pos('КПУ', Izdel);
      if Kpu <> 0 then
      begin
        NC_Sbor := 0;
        Result := KPU_New(Izdel, IDGP, 0, I);
      end;
      //Заслонка РЭА-100-1-2-50-1*NM230A+S2A-Н-ТУ4863-098-40149153-07 (2отв.фл., КК) (2НЛ)
      //Заслонка РЭА-1165*450-1-1-20-1*EFA-S2-У-20G-ТУ4863-098-40149153-07
      Kpu := Pos('РЭА', Izdel);
      if Kpu <> 0 then
      begin
        NC_Sbor := 0;
        Result := REA_New(Izdel, IDGP, 0, I);
      end;
      Kpu := Pos('РРА', Izdel);
      if Kpu <> 0 then
      begin
        NC_Sbor := 0;
        Result := REA_New(Izdel, IDGP, 0, I);
      end;
      //
      Result := Elektr(Izdel, IDGP, 0, I);
      El1:=Result.El;
      El_S := StringReplace(FloatToStr(El1), ',', '.', [rfReplaceAll]);
      //
      NC_Sbor := Result.Sborka1;
      SB_1 := Result.Sborka1;
      SB_2 := Result.Sborka2;
      SB_LOP_S := StringReplace(Result.Sborka_lop, ',', '.', [rfReplaceAll]);
      SB_TYAG_S := StringReplace(Result.Sborka_tyag, ',', '.', [rfReplaceAll]);
      RON:=Result.Sborka_RON;
      ZAs_S:=StringReplace(FloatToStr(Result.Sborka_Zas), ',', '.', [rfReplaceAll]) ;
      SB1_S := StringReplace(FloatToStr(SB_1), ',', '.', [rfReplaceAll]);
      SB2_S := StringReplace(FloatToStr(SB_2), ',', '.', [rfReplaceAll]);
      Ron_S := StringReplace(FloatToStr(RON), ',', '.', [rfReplaceAll]);
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Н\ч Сборка Клапана]=' +
      #39 + (SB1_S) + #39 + ',[Н\ч Сварка]=' + #39 + (SB2_S) + #39 +
      ',[Сборка лопаток]=' + #39 + (SB_LOP_S) + #39 + ',[Сборка тяг]=' +
      #39 + (SB_TYAG_S) + #39 + ',[СборкаРеш]=' +
      #39 + (Ron_S) + #39 +',[Сборка Засова]=' +
      #39 + (Zas_S) + #39 + ',[Электро]=' +
      #39 + (El_S) + #39 +' WHERE ([IdГП]=' + #39 + IDGP + #39 + ') ', ['Klapana']) then
        Exit;

      if not Form1.mkQuerySelect1(Form1.ADOQuery2, 'Select * from %s Where ([IdГП]=' + #39 + IDGP + #39 + ') ', ['Запуск']) then
        exit;
      for I1 := 0 to Form1.ADOQuery2.RecordCount-1  do
      begin
        Kol_Ed_Str := StringReplace(Form1.ADOQuery2.FieldByName('Кол во запущенных').AsString, '.', ',', [rfReplaceAll]);
        if (Kol_Ed_Str = '') then
        Continue;
        Nom:= Form1.ADOQuery2.FieldByName('Номер').AsString;
        Kol_Ed := StrToFloat(Kol_Ed_Str);
             NC_Sbor := Result.Sborka1;
        SB_1 := Result.Sborka1;
        SB_2 := Result.Sborka2;
        SB_LOP_S := StringReplace(Result.Sborka_lop, ',', '.', [rfReplaceAll]);
        SB_TYAG_S := StringReplace(Result.Sborka_tyag, ',', '.', [rfReplaceAll]);
        RON:=Result.Sborka_RON;
        ZAs_S:=StringReplace(FloatToStr(Result.Sborka_Zas), ',', '.', [rfReplaceAll]) ;
        SB1_S := StringReplace(FloatToStr(SB_1), ',', '.', [rfReplaceAll]);
        SB2_S := StringReplace(FloatToStr(SB_2), ',', '.', [rfReplaceAll]);
        Ron_S := StringReplace(FloatToStr(RON), ',', '.', [rfReplaceAll]);
        SB_1 := SB_1 * Kol_Ed;
        //
        SB_2 := SB_2 * Kol_Ed;
        RON:=   RON * Kol_Ed;
        //
        SB_LOP := StrToFloat(SB_LOP_S);
        SB_TYAG := StrToFloat(SB_TYAG_S);
        //
        SB_LOP := SB_LOP * Kol_Ed;
        //
        SB_TYAG := SB_TYAG * Kol_Ed;
        //
        SB_Zas:=StrToFloat(Zas_S);
        SB_Zas := SB_Zas * Kol_Ed;
        EL1:=EL1*Kol_Ed;
        El_S := StringReplace(FloatToStr(El1), ',', '.', [rfReplaceAll]);
        //
        SB_LOP_S := FloatToStr(SB_LOP);
        SB_TYAG_S := FloatToStr(SB_TYAG);
        SB_LOP_S := StringReplace(SB_LOP_S, ',', '.', [rfReplaceAll]);
        SB_TYAG_S := StringReplace(SB_TYAG_S, ',', '.', [rfReplaceAll]);
        SB1_S := StringReplace(FloatToStr(SB_1), ',', '.', [rfReplaceAll]);
        SB2_S := StringReplace(FloatToStr(SB_2), ',', '.', [rfReplaceAll]);
        RON_S := StringReplace(FloatToStr(RON), ',', '.', [rfReplaceAll]);
        Zas_s := StringReplace(FloatToStr(Sb_ZAs), ',', '.', [rfReplaceAll]);
        if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Н\ч Сборка Клапана]=' + #39 + SB1_S + #39 +
        ',[Н\ч Сварка]=' + #39 + SB2_S + #39 + ',[Сборка лопаток]=' + #39 + (SB_LOP_S) + #39 +
        ',[Сборка тяг]=' + #39 + (SB_TYAG_S) + #39 +
        ',[СборкаРеш]=' + #39 + (RON_S) + #39 +',[Сборка Засова]=' +
        #39 + (Zas_S) + #39 +
        ',[Электро]=' +
          #39 + (El_S) + #39 +' WHERE ([IdГП]=' + #39 + IDGP + #39 + ') AND (Номер=' + #39 + Nom + #39 + ')', ['Запуск']) then
        Exit;
        Form1.ADOQuery2.Next;
      end;
    end;
  end;

end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.mkQueryDelete(var AAQ: TADOQuery; const sQ: WideString; Args: array of const): boolean;
var
  Str: string;
begin
  Result := false;
  if not SetConnect1(AAQ) then
    exit;
  try
    AAQ.Close;
    AAQ.SQL.Clear;
    Str := Format(sQ, Args);
    AAQ.SQL.Text := Format(sQ, Args);

    AAQ.ExecSQL;
    check('query', AAQ.SQL.Text, 1);
  except
    Check('Error in Query', Format(sQ, Args), 0);
    MessageDlg('Не удалось удалить запись!', mtError, [mbOk], 0);
    AAQ.Close;
    exit;
  end;
  Result := true;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

procedure TForm1.Button18Click(Sender: TObject);
begin
  FV.Label22.Caption := 'Запуск';
  FV.Label23.Caption := 'Klapana';
  FV.Label24.Caption := 'Специф';
  FV.Label25.Caption := '0';
  FV.Show;
end;

procedure TForm1.Button21Click(Sender: TObject);
var
  chosenDirectory, IDKO, S, IDGP, Izdel, Zakaz: string;
  I: Integer;
begin

       {For I:=1 to StringGrid10.RowCount-2 do
        begin
          if StringGrid10.Cells[I_FN_SGP+2, i] ='' then
         IDGP:='0'
         Else
         IDGP:=StringGrid10.Cells[I_FN_SGP+2, i] ;
         Izdel:=StringGrid10.Cells[I_FN_NAM, i] ;
         Zakaz:=StringGrid10.Cells[I_FN_Zak, i] ;
               // #39+'12.19.2014'+#39+' ) AND (БЗ='+#39+''+#39+')'
        if not Form1.mkQueryUpdate( Form1.ADOQuery1, 'UPDATE %s SET IdГП='+#39+IDGP+#39+
        'Where (Заказ=' + #39+ Zakaz + #39+') AND (Изделие=' + #39+ Izdel + #39+')',['Запуск'])
        Then
         Exit;
        end;
        For I:=1 to ZCV.RowCount-2 do
        begin
          if ZCV.Cells[30, i] ='' then
         IDKO:='0'
         Else
         IDKO:=ZCV.Cells[30, i] ; //+ ' Where (Дата='+
               // #39+'12.19.2014'+#39+' ) AND (БЗ='+#39+''+#39+')'
        if not Form1.mkQueryUpdate( Form1.ADOQuery1, 'UPDATE %s SET ([Н\ч Сборка Клапана]=[Н\ч Сборка Клапана]/[Кол во запущенных],'+
        '[Н\ч Сварка]=[Н\ч Сварка]/[Кол во запущенных]) Where (IdКО=' + #39
                + '0' + #39+') AND ()'  ,
                ['KlapanaZap'] )
         Then
         Exit;
         S:= '435305'; }
        { if not Form1.mkQueryUpdate(Form1.ADOQuery1,
                'UPDATE %s SET [Статус]=' + #39+ '1'+ #39 ,//Where (Дата<'+ #39+ '05.31.2015'+ #39+') ',
                ['СТАМ']) then
                Exit; }
        // if not Form1.mkQueryUpdate(Form1.ADOQuery1,
        //        'UPDATE %s SET [ОТК]=' + #39+ '03.10.2015'+ #39+' Where (Дата>'+ #39+ '03.31.2015'+ #39+') AND (Дата<'+ #39+ '04.13.2015'+ #39+')',
        //        ['ЗапускСТАМ']) then
        //        Exit;
         //end;
       // FPeredel.Show;
end;

procedure TForm1.StringGrid10MouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin
  Handled := true;
  StringGrid10.Perform(WM_VSCROLL, SB_LINEUP, 0);

end;

procedure TForm1.StringGrid10MouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin
  Handled := true;
  StringGrid10.Perform(WM_VSCROLL, SB_LINEDOWN, 0);
end;

procedure TForm1.StringGrid10MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  I, j: Integer;
  myrect: TGridRect;
  Sum: Double;
begin
  mmoDGP1.Lines.Clear;

  myrect := StringGrid10.Selection;
  for I := myrect.Left to myrect.Right do
    for j := myrect.Top to myrect.Bottom do
    begin
      mmoDGP1.Lines.Add(StringGrid10.Cells[I_FN_SGP + 2, j]);
    end;

  I := X;

  if (StringGrid10.Col = 3) or (StringGrid10.Col = 4) or (StringGrid10.Col = 7) then
  begin
    Sum := 0;
    myrect := StringGrid10.Selection;
    for I := myrect.Left to myrect.Right do
      for j := myrect.Top to myrect.Bottom do
      begin
        try
          Sum := Sum + StrToFloat(StringGrid10.Cells[I, j]);
        except
          Break;
        end;
      end;
    StatusBar2.Panels[2].Text := FloattOsTR(Sum);

  end;
  if (StringGrid10.Col = 5) then
  begin
    StringGrid10.Hint := 'Изделие';
    StringGrid10.ShowHint := True;
  end;
  if (StringGrid10.Col <> 5) then
  begin
    StringGrid10.Hint := 'Изделие';
    StringGrid10.ShowHint := False;
  end;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

procedure TForm1.FSelectRow(StringGrid: TStringGrid; RowNumber: integer);
//Выделение Строки
var
  NewSel: TGridRect;
begin

  with StringGrid do
  begin
    if (RowNumber > FixedRows - 1) and (RowNumber < RowCount) then
    begin
      NewSel.Left := FixedCols;
      NewSel.Top := RowNumber;
      NewSel.Right := ColCount - 2;
      NewSel.Bottom := RowNumber;
      Selection := NewSel;
      Canvas.Font.Color := clBlack;
    end;
  end;

end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

procedure TForm1.StringGrid9MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  i, j: integer;
begin

  StringGrid9.MouseToCell(X, Y, i, j);
  FSelectRow(StringGrid10, StringGrid9.Row);

end;

procedure TForm1.StringGrid9MouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin

  Handled := true;
  StringGrid9.Perform(WM_VSCROLL, SB_LINEDOWN, 0);

end;

procedure TForm1.StringGrid9MouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin

  Handled := true;
  StringGrid9.Perform(WM_VSCROLL, SB_LINEUP, 0);

end;

procedure TForm1.btn33Click(Sender: TObject);
begin
  Order := ' ORDER BY [' + StringGrid10.Cells[StringGrid10.Col, 0] + ']';
  Button16.Click;

end;

procedure TForm1.btn34Click(Sender: TObject);
begin
  Order := ' ORDER BY [' + StringGrid10.Cells[StringGrid10.Col, 0] + '] DESC';
  Button16.Click;
end;

procedure TForm1.btn35Click(Sender: TObject);
var
  Vn_Dat, fileName, Dat: string;
  I, Y, A: Integer;
begin
        //Vn_Dat := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  UOsnova_Main := Osnova_Main.Create();
  Conn_Klap := Connect_Miass_Klap.Create();
  Conn_Ceh := Connect_Miass_Ceh.Create();

  fileName := '';//ExtractFileDir(ParamStr(0)); //+'\Klapan.EXE';

  for I := 0 to SG216.RowCount - 1 do
  begin
    if SG216.Cells[0, I] <> '' then
    begin                               //ZSG.Cells[I_FN_KOL_ZAP + 3, 1]
      Vn_Dat := SG215.Cells[8, I];
      UOsnova_Main.Flag_Error := 0;                            //  Edit1.Text
      if not UOsnova_Main.Osnova(Vn_Dat, 'ЗапускСТАМ', 'СпецифСТАМ', #39 + SG215.Cells[0, I] + #39, fileName, 1, 0) then
        Exit;
    end;
  end;
end;

procedure TForm1.btn36Click(Sender: TObject);
var
  I, res, Res1, Kol_I, Y: Integer;
  God, Mes, kol_Z: Integer;
  Dat, Dat1, Betwe1: string;
  Br, Izdel, Kol: string;
  Rect: TRect;
begin
  SG4.COLCount := 24;
  Clear_StringGrid(SG4);

  SG4.Cells[0, 0] := '№';
  SG4.Cells[1, 0] := 'Дата задания';
  SG4.Cells[2, 0] := 'Заказ';
  SG4.Cells[3, 0] := 'Изделие';
  SG4.Cells[4, 0] := 'Кол во';
  SG4.Cells[5, 0] := 'Кол во запущенных';
  SG4.Cells[6, 0] := 'План Неделя';
  SG4.Cells[7, 0] := 'Расчетная Дата готовности';
  SG4.Cells[8, 0] := 'Технолог';
  SG4.Cells[9, 0] := 'Кол принятых';
  SG4.Cells[10, 0] := 'Прмечания';
  SG4.Cells[11, 0] := 'Дата Запуска';
  SG4.Cells[12, 0] := 'ОТК';
  SG4.Cells[13, 0] := 'IDГП';
  SG4.Cells[14, 0] := 'НачНомер';
  SG4.Cells[15, 0] := 'КонНомер';
  SG4.Cells[16, 0] := 'Статус';
  SG4.Cells[17, 0] := 'Брикет';
  SG4.Cells[18, 0] := 'Номер раз';
  SG4.Cells[19, 0] := 'БЗ';
  SG4.Cells[20, 0] := 'Н\ч Сборка';
  SG4.Cells[21, 0] := 'Материал';
  SG4.Cells[22, 0] := 'ПР';
  SG4.Cells[23, 0] := 'Отмена';
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  if ((ComboBox29.ItemIndex = 0) or (ComboBox29.ItemIndex = -1) or (ComboBox29.Text = '')) and (ComboBox28.ItemIndex <> 0) and (ComboBox28.Text <> '') then
  begin
    if ComboBox28.ItemIndex = -1 then
      God := StrToInt(ComboBox28.Text)
    else
      God := StrToInt(ComboBox28.Items[ComboBox28.ItemIndex]);
    Dat := '12.31.' + IntToStr(God - 1);
    Dat1 := '12.31.' + IntToStr(God);
    Betwe1 := ' AND (Дата BETWEEN ' + #39 + Dat + #39 + ' AND ' + #39 + Dat1 + #39 + ') ';
  end;
  if (ComboBox28.ItemIndex <> 0) and (ComboBox28.Text <> '') and (ComboBox29.ItemIndex <> 0) and (ComboBox29.ItemIndex <> -1) and (ComboBox29.Text <> '') then
  begin
    if ComboBox28.ItemIndex = -1 then
      God := StrToInt(ComboBox28.Text)
    else
      God := StrToInt(ComboBox28.Items[ComboBox28.ItemIndex]);
    Mes := ComboBox29.ItemIndex;
    Dat := IntToStr(Mes) + '.01' + '.' + IntToStr(God);
    if Mes = 12 then
      Dat1 := '01.01.' + IntToStr(God + 1)
    else
    begin
      if (Mes + 1) < 10 then
        Dat1 := '0' + IntToStr(Mes + 1) + '.01.' + IntToStr(God)
      else
        Dat1 := IntToStr(Mes + 1) + '.01.' + IntToStr(God);
    end;
    Betwe1 := ' AND (Дата>= ' + #39 + Dat + #39 + ' AND Дата<' + #39 + Dat1 + #39 + ') ';
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if (ComboBox30.ItemIndex = 1) or (ComboBox30.ItemIndex = -1) then
    Betwe1 := Betwe1 + ' AND (ОТК IS NULL) ';

  if (ComboBox30.ItemIndex = 2) then
    Betwe1 := Betwe1 + ' AND ([Кол во Запущенных]<[Кол во]) ';

  if (ComboBox30.ItemIndex = 3) then
    Betwe1 := Betwe1 + ' AND (NOT ОТК IS NULL) AND (ПР=' + #39 + 'МИ' + #39 + ') ';

  if (ComboBox30.ItemIndex = 4) then
    Betwe1 := Betwe1 + ' AND (NOT Отмена IS NULL) AND (ПР=' + #39 + 'МИ' + #39 + ') ';
  if Poisk_LUK = 1 then
  begin
    if not mkQuerySelect(ADOQuery2, 'Select * from %s WHERE ' + Label182.Caption + ' like ' + #39 + '%s' + Edit24.Text + '%s' + #39, ['ЛЮК', '%', '%']) then
      exit;
  end;

  if Poisk_LUK = 0 then
  begin
    if not mkQuerySelect(ADOQuery2, 'Select * from %s WHERE (Отмена IS NULL) AND (L=0) ' + Betwe1 + Order2, ['ЛЮК']) then
      exit;
  end;
  if ADOQuery2.RecordCount = 0 then
    SG4.RowCount := 2
  else
    SG4.RowCount := ADOQuery2.RecordCount + 1;
  StatusBar1.Panels[2].Text := IntToStr(ADOQuery2.RecordCount);
  for I := 0 to ADOQuery2.RecordCount - 1 do
  begin
    SG4.Cells[1, I + 1] := ADOQuery2.FieldByName('Дата').AsString;
    SG4.Cells[2, I + 1] := ADOQuery2.FieldByName('Заказ').AsString;
    Izdel := ADOQuery2.FieldByName('Изделие').AsString;
    res := Pos(' ', Izdel);
    if res <> 0 then
      Delete(Izdel, 1, res);
    res := Pos(' ', Izdel);
    if res <> 0 then
      Delete(Izdel, 1, res);
    SG4.Cells[3, I + 1] := Izdel;
    SG4.Cells[4, I + 1] := ADOQuery2.FieldByName('Кол во').AsString;
    SG4.Cells[5, I + 1] := ADOQuery2.FieldByName('Кол во Запущенных').AsString;
    SG4.Cells[6, I + 1] := ADOQuery2.FieldByName('План Неделя').AsString;
    SG4.Cells[7, I + 1] := ADOQuery2.FieldByName('Расчетная Дата готовности').AsString;
    SG4.Cells[8, I + 1] := ADOQuery2.FieldByName('Технолог').AsString;
    //--------------------------------------------------------------
    SG4.Cells[9, I + 1] := ADOQuery2.FieldByName('Кол принятых').AsString;
    SG4.Cells[10, I + 1] := ADOQuery2.FieldByName('Примечания').AsString;
    SG4.Cells[11, I + 1] := ADOQuery2.FieldByName('Дата запуска').AsString;
    SG4.Cells[12, I + 1] := ADOQuery2.FieldByName('ОТК').AsString;
    SG4.Cells[13, I + 1] := ADOQuery2.FieldByName('IDГП').AsString;
    SG4.Cells[14, I + 1] := ADOQuery2.FieldByName('НачНомер').AsString;
    SG4.Cells[15, I + 1] := ADOQuery2.FieldByName('КонНомер').AsString;
    SG4.Cells[16, I + 1] := ADOQuery2.FieldByName('Статус').AsString;
    SG4.Cells[17, I + 1] := ADOQuery2.FieldByName('Брикет').AsString;
    SG4.Cells[18, I + 1] := ADOQuery2.FieldByName('Номер раз').AsString;
    SG4.Cells[19, I + 1] := ADOQuery2.FieldByName('БЗ').AsString;
    SG4.Cells[20, I + 1] := ADOQuery2.FieldByName('Н\ч Сборка').AsString;
    SG4.Cells[21, I + 1] := ADOQuery2.FieldByName('Мат').AsString;
    SG4.Cells[22, I + 1] := ADOQuery2.FieldByName('ПР').AsString;
    SG4.Cells[23, I + 1] := ADOQuery2.FieldByName('Отмена').AsString;
    ADOQuery2.Next;

  end;
        //SG4.SortByColumn(1);
  for I := 0 to SG4.RowCount - 1 do
  begin
    SG4.Cells[0, I + 1] := IntToStr(I + 1);
  end;
  SG4.ColWidths[9] := 0;
  SG4.ColWidths[10] := 20;
  SG4.ColWidths[17] := 0;
  SG4.ColWidths[19] := 50;
  SG4.ColWidths[18] := 40;
  SG4.ColWidths[13] := 0;
  SG4.ColWidths[16] := 0;
  SG4.ColWidths[23] := 0;
       // SG4.ColWidths[19]:=0;
  {if not mkQuerySelect(ADOQuery2, 'Select Технолог from %s  Where (Технолог=' + #39 + 'False' + #39 + ')', ['ШаблонСТАМ']) then
    exit;  }
  Label117.Caption := IntToStr(ADOQuery2.RecordCount);
  SG4.RowHeights[0] := 60;
  SG4.WordWrap := True;
  Poisk_LUK := 0;
end;

function LUK_New(Izdel, IDGP: string; Svarka1: Double; Ii: Integer): TResult;
var
  Res, Res1, Res2, R, Z, A, B, P, Kol_Pr, DD, Ispol: Integer;
  A_S, B_S, aa, bb, Str, S, Priv, Nam, NAM_LIST, SB_1_S, pp: string;
  SB_1, D: Double;
begin
  D := 0;
  NAM_LIST := '';
  Nam := Izdel;
  DD := 0; //Л-К-01-1000*1300-П-1*DIA38-РЗ-0
            //Л-К-02-1600*2600-С-2*DIA52-З-МТ
            //Л-С-04-1700*1600-С-1*KS2 230V-З-0
  R := 0;
  Z := 0;
  Kol_Pr := 0;
  Result.SVarka := 0;
  Result.Sborka1 := 0;
  Res := Pos('-', Nam);
  if Res <> 0 then
    Delete(Nam, 1, Res); //Л-
  Res := Pos('-', Nam);
  if Res <> 0 then
    Delete(Nam, 1, Res); //K-
  Res := Pos('-', Nam);
  if Res <> 0 then
  begin
    Str := Copy(Nam, 1, Res - 1);
    Delete(Nam, 1, Res); //01,02,03
    Ispol := StrToInt(Str);
  end;
  Res := Pos('*', Nam);
  if Res <> 0 then
  begin
    A_S := Copy(Nam, 1, Res - 1);
    Delete(Nam, 1, Res); //A
  end;
  Res := Pos('-', Nam);
  if Res <> 0 then
  begin
    B_S := Copy(Nam, 1, Res - 1);
    Delete(Nam, 1, Res); //B
  end;
  Res := Pos('-', Nam);
  if Res <> 0 then
  begin
    Delete(Nam, 1, Res); //-П
  end;
  Res := Pos('*', Nam); // 1*DIA38-РЗ-0
  if Res <> 0 then
  begin
    Priv := Copy(Nam, 1, Res - 1);
    Kol_Pr := StrToInt(Priv);
    Delete(Nam, 1, Res);
  end;

  Res := Pos('Р', Nam); // -П-1*DIA38-РЗ-0
  if Res <> 0 then
  begin
    R := 1;
  end;

  Res := Pos('З', Nam); // -П-1*DIA38-РЗ-0
  if Res <> 0 then
  begin
    Z := 1;
  end;

  A := StrToInt(A_S);
  B := StrToInt(B_S);
  P := A + B;
  if A < 1000 then
    aa := '500';
        //
  if (A >= 1000) and (A <= 1500) then
    aa := '1000';
        //
  if (A > 1500) and (A <= 1800) then
    aa := '1500';
        //
  if (A > 1800) then
    aa := '1800';
      //=====================================
  if B < 1000 then
    bb := '500';
        //
  if (B >= 1000) and (B <= 1800) then
    bb := '1000';
        //
  if (B > 1800) then
    bb := '1800';
      //
  if P < 2400 then
    pp := '2400';
        //
  if (P >= 2400) and (P <= 2700) then
    pp := '2700';
        //
  if (P > 2700) and (P <= 2800) then
    pp := '2800';
        //
  if (P > 2800) then
    pp := '3000';
  NAM_LIST := 'Л-К-0' + Priv;
  if Ispol <> 4 then
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([A]=' + #39 + aa + #39 + ') AND ([B]=' + #39 + bb + #39 + ') ', [NAM_LIST]) then
      exit;

  if Ispol = 4 then
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] Where ([Полупериметр]=' + #39 + pp + #39 + ') ', [NAM_LIST]) then
      exit;

  SB_1_S := Form1.ADOQuery1.FieldByName('Норма').AsString;
  if SB_1_S = '' then
    SB_1_S := '0';

  SB_1 := StrToFloat(SB_1_S);
      //--------------------------------------------------------Решетка
  if R = 1 then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Решетка']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('ЛЮК').AsString;
    D := StrToFloat(S);
  end;
  SB_1 := SB_1 + D;
  D := 0;
      //--------------------------------------------------------ТЭН
  if Z = 1 then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['КК']) then
      exit;
    S := Form1.ADOQuery1.FieldByName('Т-ЛЮК').AsString;
    D := StrToFloat(S);
  end;
  SB_1 := SB_1 + D;
  D := 0;
      //--------------------------------------------------------Привод
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from [%s] ', ['Привод']) then
    exit;
  S := Form1.ADOQuery1.FieldByName('ЭПВ').AsString;
  D := StrToFloat(S);
  SB_1 := SB_1 + (D * Kol_Pr);
  D := 0;
  Result.Sborka1 := SB_1;
end;

procedure TForm1.btn37Click(Sender: TObject);
var
  Result: Tresult;
  Kpu: Integer;
  SB1_S, Kol_Ed_Str, Izdel, IDGP: string;
  Kol_Ed, SB_1: Double;
  I: Integer;
begin
  luk := 1;
 //Л-К-01-1000*1300-П-1*DIA38-РЗ-0
 //Л-К-02-1600*2600-С-2*DIA52-З-МТ
 //Л-С-04-1700*1600-С-1*KS2 230V-З-0
  for I := 0 to SG4.RowCount - 1 do
  begin
    Izdel := SG4.Cells[3, I + 1];
    IDGP := SG4.Cells[13, I + 1];

    Kpu := Pos('Л-К-', Izdel);

    if Kpu <> 0 then
    begin
      Result := LUK_New(Izdel, IDGP, 0, I);
    end;
    SB_1 := Result.Sborka1;

    SB1_S := StringReplace(FloatToStr(SB_1), ',', '.', [rfReplaceAll]);

    SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Н\ч Сборка]=' + #39 + (SB1_S) + #39 + ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ') ', ['ЛЮК']) then
      Exit;

    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where ([IdГП]=' + #39 + IDGP + #39 + ') ', ['ЗапускЛЮК']) then
      exit;
    Kol_Ed_Str := StringReplace(Form1.ADOQuery2.FieldByName('Кол во запущенных').AsString, '.', ',', [rfReplaceAll]);
    if (Kol_Ed_Str = '') then
      Continue;
    Kol_Ed := StrToFloat(Kol_Ed_Str);
    SB_1 := SB_1 * Kol_Ed;

    SB1_S := StringReplace(FloatToStr(SB_1), ',', '.', [rfReplaceAll]);

    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Н\ч Сборка]=' + #39 + SB1_S + #39 + ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ')', ['ЗапускЛЮК']) then
      Exit;
  end;
  btn36.Click;
  FS.ShowModal;
end;

procedure TForm1.btn39Click(Sender: TObject);
begin
  tmr3.Enabled := False;
  btn39.Font.Color := clBlack;
end;

procedure TForm1.StringGrid10Click(Sender: TObject);
begin
  CheckBox3.Visible := False;
end;

procedure TForm1.Button22Click(Sender: TObject);
var
  God, Mes, I, Y, Kol, Kol_Zap, Kol_Kl, A, B, Kol_Vert, Kol_Gor, Kol_G, Kol_V, Res, Fl, X1, Res_, Kol_Otk, ne_pusto, Flag_Zagot, D1: Integer;
  Zag, Zap, OTK, Sbor, Betwe, Bet1, Dat, Dat1, Sql_Str, X, Sb_s, Sv_s, StrDat1, D, StrDat2, Izdel, Pos1, Pos2, Pos3, Pos4, Pos5, Sbor1, Str_e4, Str1, Str2, Str3: string;
  SB, SV, SB_O, SV_O: Double;
begin
  Label276.Caption:='0' ;
  Label277.Caption:='0' ;
  Label278.Caption:='0' ;
  Label279.Caption:='0' ;
  Label280.Caption:='0' ;
  Label281.Caption:='0' ;
  Memo32.Lines.Clear;
  Clear_StringGrid(ZSG);
  Clear_StringGrid(StringGrid11);
  ZSG.RowCount := 3;
  ZSG.FixedRows := 2;
  Kol_Vert := 0;
  ZSG.ColCount := 45;
  ZSG.Cells[0, 0] := '№';
  ZSG.Cells[I_FN_DAT, 0] := FN_DAT;
  ZSG.Cells[I_FN_ZAK, 0] := FN_ZAK;

  ZSG.Cells[I_FN_NAM, 0] := FN_NAM;
  ZSG.Cells[I_FN_KOL, 0] := FN_KOL;
  ZSG.Cells[I_FN_KOL_ZAP, 0] := FN_KOL_ZAP;

  ZSG.MergeCells.AddRectXY(I_FN_KOL_ZAP + 1, 0, I_FN_KOL_ZAP + 3, 0);
  ZSG.Cells[I_FN_KOL_ZAP + 1, 0] := 'Заготовка';
  ZSG.Cells[I_FN_KOL_ZAP + 1, 1] := 'Запуск';
  ZSG.Cells[I_FN_KOL_ZAP + 2, 1] := 'Готовность';
  ZSG.Cells[I_FN_KOL_ZAP + 3, 1] := 'Планирование';
  ZSG.MergeCells.AddRectXY(I_FN_KOL_ZAP + 4, 0, I_FN_KOL_ZAP + 6, 0);
  ZSG.Cells[I_FN_KOL_ZAP + 4, 0] := 'Сборка';
  ZSG.Cells[I_FN_KOL_ZAP + 4, 1] := 'Запуск';
  ZSG.Cells[I_FN_KOL_ZAP + 5, 1] := 'Готовность';
  ZSG.Cells[I_FN_KOL_ZAP + 6, 1] := 'Примечание';

  ZSG.Cells[I_FN_KOL_ZAP + 7, 1] := FN_NAM;

  ZSG.MergeCells.AddRectXY(I_FN_KOL_ZAP + 8, 0, I_FN_KOL_ZAP + 10, 0);
  ZSG.Cells[I_FN_KOL_ZAP + 8, 0] := FN_PR_OTK;
  ZSG.Cells[I_FN_KOL_ZAP + 8, 1] := FN_PR_OTK;
  ZSG.Cells[I_FN_KOL_ZAP + 9, 1] := FN_KOL_OTK;
  ZSG.Cells[I_FN_KOL_ZAP + 10, 1] := FN_PR_OTK_PRIM;
  ZSG.Cells[I_FN_KOL_ZAP + 11, 1] := FN_DAT_OTGRUZ;
  ZSG.Cells[I_FN_KOL_ZAP + 12, 1] := 'Сборщик';
 // ZSG.Cells[I_FN_KOL_ZAP + 13, 1] := 'X';
  ZSG.Cells[I_FN_KOL_ZAP + 13, 1] := 'Расчетная Дата';
  ZSG.ColWidths[I_FN_KOL_ZAP + 13] := 70;
  ZSG.Cells[I_FN_KOL_ZAP + 14, 1] := 'id';
  ZSG.ColWidths[I_FN_KOL_ZAP + 14] := 0;
  ZSG.Cells[I_FN_KOL_ZAP + 15, 1] := 'Отмена';
  ZSG.ColWidths[I_FN_KOL_ZAP + 15] := 0;
  ZSG.Cells[I_FN_KOL_ZAP + 16, 1] := 'план Дата';
  ZSG.Cells[I_FN_KOL_ZAP + 17, 1] := 'Сборка2';
  ZSG.Cells[I_FN_KOL_ZAP + 18, 1] := 'Сборка1';
  ZSG.Cells[I_FN_KOL_ZAP + 19, 1] := 'ОТКФам';
  ZSG.ColWidths[I_FN_KOL_ZAP + 19] := 20;
  ZSG.Cells[I_FN_KOL_ZAP + 20, 1] := 'МодПривода';
  ZSG.Cells[I_FN_KOL_ZAP + 21, 1] := 'Кол в наличии';
  ZSG.Cells[I_FN_KOL_ZAP + 22, 1] := 'Заказчик';
  ZSG.ColWidths[I_FN_KOL_ZAP + 22] := 0;
  ZSG.Cells[I_FN_KOL_ZAP + 23, 1] := 'НачНомер';
  ZSG.Cells[I_FN_KOL_ZAP + 24, 1] := 'КонНомер'; //Заводск номер
  ZSG.ColWidths[I_FN_KOL_ZAP + 23] := 0;
  ZSG.ColWidths[I_FN_KOL_ZAP + 24] := 0;
  ZSG.Cells[I_FN_KOL_ZAP + 25, 1] := 'Подсборка1';
  ZSG.Cells[I_FN_KOL_ZAP + 26, 1] := 'IdГП';
  ZSG.ColWidths[I_FN_KOL_ZAP + 26] := 0;
  ZSG.Cells[I_FN_KOL_ZAP + 27, 1] := 'ФлагЗаготовки';
  ZSG.Cells[I_FN_KOL_ZAP + 28, 1] := 'Цвет';
  ZSG.Cells[I_FN_KOL_ZAP + 29, 1] := 'БЗ';
  ZSG.ColWidths[I_FN_KOL_ZAP + 27] := 0;
  ZSG.ColWidths[I_FN_KOL_ZAP + 28] := 0;
  ZSG.Cells[I_FN_KOL_ZAP + 30, 1] := 'Легион';
  ZSG.Cells[I_FN_KOL_ZAP + 31, 1] := 'Срочно';
 ZSG.ColWidths[I_FN_KOL_ZAP + 30] := 0;
 ZSG.ColWidths[I_FN_KOL_ZAP + 31] := 0;
  ZSG.Cells[I_FN_KOL_ZAP + 32, 1] := 'Н\ч Лопатка';
  ZSG.Cells[I_FN_KOL_ZAP + 33, 1] := 'СборЛопатка';
 ZSG.ColWidths[I_FN_KOL_ZAP + 33] := 40;
  ZSG.Cells[I_FN_KOL_ZAP + 34, 1] := 'Н\ч Корпус';
  ZSG.Cells[I_FN_KOL_ZAP + 35, 1] := 'СборКорпус';
 ZSG.ColWidths[I_FN_KOL_ZAP + 35] := 40;
  ZSG.Cells[I_FN_KOL_ZAP + 36, 1] := 'IdКО';
  ZSG.Cells[I_FN_KOL_ZAP + 37, 1] := 'СборкаРеш';
  ZSG.Cells[I_FN_KOL_ZAP + 38, 1] := 'СборРеш';
   ZSG.Cells[I_FN_KOL_ZAP + 39, 1] := 'Электро';
        //ZSG.ColWidths[I_FN_KOL_ZAP + 27] := 0;
        //Naimen:= '';
  Sbor1 := '';
  if Edit6.Text <> '' then
    Str_e4 := Edit6.Text;
  if Edit6.Text <> '' then
  begin

    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := ' (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    if X1 = 1 then
      Str1 := Str1 + ' OR (Номер=' + #39 + Str_e4 + #39 + ')'
    else
      Str1 := ' (Номер=' + #39 + Str_e4 + #39 + ')';
    Res_ := Pos('-', Str_e4);
    if Res_ <> 0 then
    begin
      Str2 := Copy(Str_e4, 1, Res_ - 1);
      Delete(Str_e4, 1, Res_);
      Str3 := Str_e4;
      Sbor1 := '  ((Номер>=' + #39 + Str2 + #39 + ') AND (Номер<=' + #39 + Str3 + #39 + ')) AND ';
    end
    else
    begin
      Sbor1 := '(' + Str1 + ') AND ';
    end;
  end;
  X := ' WHERE ' + Sbor1 + ' (Отмена IS NULL)  AND ([Х] IS NULL) ';
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  D := FormatDateTime('yyyy', Now);
  Delete(D, 1, 3);
  D1 := StrToInt(D);
 // ComboBox9.ItemIndex :=D1;

  if Order1 = '' then
    Order1 := ' Order By Номер DESC';

  if ComboBox12.ItemIndex = 3 then
  begin                                                                         //  AND ([Сборка Готовность] IS NULL)
    X := ' WHERE ' + Sbor1 + ' (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL) ';
    Bet1 := '  AND ([' + ComboBox12.Text + ']  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';

  end;
  if ComboBox12.ItemIndex = 7 then //Упаковка
  begin                                                                         //  AND ([Сборка Готовность] IS NULL)
    X := ' WHERE ' + Sbor1 + ' (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL)  AND (Упаковка IS NULL)';
    Bet1 := '  AND ([ОТК]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';

  end;
  if ComboBox12.ItemIndex = 9 then //Отмена
  begin                                                                         //  AND ([Сборка Готовность] IS NULL)
    X := ' WHERE ' + Sbor1 + ' (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (NOT Отмена IS NULL) ';
    Bet1 := '  AND ([ОТК]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';

  end;
  if (ComboBox12.Text <> '') and (ComboBox12.ItemIndex <> 3) and (ComboBox12.ItemIndex <> 7) and (ComboBox12.ItemIndex <> 9) then
  begin
    X := ' WHERE' + Sbor1 + '  (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL) ';
    Bet1 := ' AND ([' + ComboBox12.Text + ']  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';

  end;

  //if (ComboBox12.Text = '') then
  //  X := ' WHERE' + Sbor1 + '  (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL)  AND (ОТК is NULL)  ';

  if ((ComboBox10.ItemIndex = 0) or (ComboBox10.ItemIndex = -1) or (ComboBox10.Text = '')) and (ComboBox9.ItemIndex <> 0) and (ComboBox9.ItemIndex <> -1) and (ComboBox9.Text <> '') then
  begin
    God := StrToInt(ComboBox9.Items[ComboBox9.ItemIndex]);
    Dat := '12.31.' + IntToStr(God - 1);
    Dat1 := '12.31.' + IntToStr(God);
    Betwe := ' AND ((Дата >=' + #39 + Dat + #39 + ') AND (Дата<' + #39 + Dat1 + #39 + ')) ';
  end;
  if (ComboBox9.ItemIndex <> 0) and (ComboBox9.ItemIndex <> -1) and (ComboBox9.Text <> '') and (ComboBox10.ItemIndex <> 0) and (ComboBox10.ItemIndex <> -1) and (ComboBox10.Text <> '') then
  begin
    God := StrToInt(ComboBox9.Items[ComboBox9.ItemIndex]);
    Mes := ComboBox10.ItemIndex;
    Dat := IntToStr(Mes) + '.01' + '.' + IntToStr(God);
    if Mes = 12 then
      Dat1 := '01.01.' + IntToStr(God + 1)
    else
    begin
      if (Mes + 1) < 10 then
        Dat1 := '0' + IntToStr(Mes + 1) + '.01.' + IntToStr(God)
      else
        Dat1 := IntToStr(Mes + 1) + '.01.' + IntToStr(God);
    end;
    Betwe := ' AND ((Дата >=' + #39 + Dat + #39 + ') AND (Дата<' + #39 + Dat1 + #39 + ')) ';
  end;

  Res := Pos('Пусто', ComboBox8.Text);
  ne_pusto := Pos('Не пусто', ComboBox8.Text);
  if (ComboBox8.ItemIndex <> -1) and (ComboBox8.ItemIndex <> 0) and (Res = 0) and (ne_pusto = 0) then
  begin
    Sql_Str := Sql_Str + ' AND ((Сборщик=' + #39 + ComboBox8.Text + #39 +
    ') OR (Подсборка1=' + #39 + ComboBox8.Text + #39 +
    ') or (СборЛопатка=' + #39 + ComboBox8.Text + #39 +
    ') or (Сбортяга=' + #39 + ComboBox8.Text + #39 +
    ') or (СборРеш=' + #39 + ComboBox8.Text + #39 + '))';
  end;

  if (Res <> 0) then
    Sql_Str := Sql_Str + ' AND ((Сборщик IS NULL) OR (Сборщик=' + #39 + #39 + '))';
  if (ne_pusto <> 0) then
    Sql_Str := Sql_Str + ' AND ((Not Сборщик IS NULL) AND (Сборщик<>' + #39 + #39 + '))';
  if (ComboBox8.Text = '') then
    Sql_Str := Sql_Str + '';
  if (ComboBox5.ItemIndex <> -1) and (ComboBox5.ItemIndex <> 0) then
  begin
    case ComboBox5.ItemIndex of // AND ([Х] IS NULL)
      1:
        Sql_Str := Sql_Str + ' AND ([Заготовка Готовность] IS NULL) AND (Not [Заготовка Запуск] IS NULL) AND (Отмена IS NULL)  ';
      2:
        Sql_Str := Sql_Str + ' AND (Not [Заготовка Готовность] IS NULL) AND( [Сборка Запуск] IS NULL) AND (Отмена IS NULL)  ';
      3:
        Sql_Str := Sql_Str + ' AND (Not [Сборка Запуск] IS NULL) AND( [Сборка Готовность] IS NULL)  ';
      4:                                                                  //([' + FN_KOL_OTK + ']=0)
        Sql_Str := Sql_Str + ' AND (Not [Сборка Готовность] IS NULL) AND  ([Кол принятых]<[Кол во запущенных]) AND (Отмена IS NULL)  ';
      5:
        Sql_Str := Sql_Str + ' AND ([' + FN_KOL_OTK + ']=[' + FN_KOL_ZAP + ']) AND (Отмена IS NULL) ';
      6:
        begin
          X := '';
          Sql_Str := ' WHERE' + Sbor1 + '  (NOT Дата IS NULL)  AND ([Х] IS NULL)  AND ([' + FN_KOL_OTK + ']<[' + FN_KOL_ZAP + ']) AND ([' + FN_KOL_OTK + ']<>0) AND (Отмена IS NULL)  ';
        end;
      7:
        Sql_Str := Sql_Str + ' AND (NOT [' + 'Упаковка' + '] IS NULL) AND (Отмена IS NULL)  ';
      8:
        Sql_Str := Sql_Str + ' AND (Not [Отмена] IS NULL)  ';
      9:
        Sql_Str := Sql_Str + ' AND ([Заготовка Запуск] IS NULL) AND (Отмена IS NULL) ';
      10:
        Sql_Str := Sql_Str + ' AND (([Сборка Готовность] IS NULL) OR ([' + FN_KOL_OTK + ']<[' + FN_KOL_ZAP + ']) AND ([' + FN_KOL_OTK + ']<>0)) AND (Отмена IS NULL)  ';
      12:
        Sql_Str := Sql_Str + ' AND ([Упаковка] IS NULL) AND (Not [ОТК] is null) AND (Отмена IS NULL)  ';

      13:
        Sql_Str := Sql_Str + ' AND (ФлагЗаготовки=' + #39 + 'False' + #39 + ') AND (Отмена IS NULL)  ';
    end;
  end;
  if ComboBox12.ItemIndex = 7 then //не Упаковка
  begin                                                                         //  AND ([Сборка Готовность] IS NULL)
    X := ' WHERE ' + Sbor1 + ' (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL)  AND (Упаковка IS NULL)';
    Bet1 := '  AND ([ОТК]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';
    Sql_Str := '';
  end;

  if ComboBox12.ItemIndex = 8 then //Упаковка
  begin                                                                         //  AND ([Сборка Готовность] IS NULL)
    X := ' WHERE ' + Sbor1 + ' (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL)  AND (Not Упаковка IS NULL)';
    Bet1 := '  AND ([Упаковка]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';
    Sql_Str := '';
  end;
  if Flag_Poisk = 0 then
  begin
    if not mkQuerySelect(ADOQuery2, 'Select * from %s  ' + X + Sql_Str + Betwe + Bet1 + Order1, ['Запуск']) then
      exit;
  end;
  if Flag_Poisk = 1 then
  begin
    if not mkQuerySelect(ADOQuery2, 'Select * from %s  WHERE %s', ['Запуск', Str_SQL_Poisk]) then
      exit;
  end;

  StatusBar1.Panels[2].Text := IntToStr(ADOQuery2.RecordCount);
  Y := 2;
        //if not mkQuerySelect( ADOQuery2, 'Select * from %s '+Order,['Запуск'] )
        //then exit;
  ZSG.RowCount := ADOQuery2.RecordCount + 2;
  StatusBar1.Panels[2].Text := IntToStr(ADOQuery2.RecordCount);
  StringGrid11.RowCount := ADOQuery2.RecordCount + 2;
  for I := 2 to ADOQuery2.RecordCount + 1 do
  begin
    ZSG.Cells[0, I] := ADOQuery2.FieldByName(FN_Nom).AsString;
    ZSG.Cells[I_FN_DAT, I] := ADOQuery2.FieldByName(FN_DAT).AsString;
    ZSG.Cells[I_FN_ZAK, I] := ADOQuery2.FieldByName(FN_ZAK).AsString;
                //ZSG.Cells[I_FN_NAM,I] :=ADOQuery2.FieldByName(FN_NAM).AsString;
    ZSG.Cells[I_FN_KOL, I] := ADOQuery2.FieldByName(FN_KOL).AsString;
    ZSG.Cells[I_FN_KOL_ZAP, I] := ADOQuery2.FieldByName(FN_KOL_ZAP).AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 1, I] := ADOQuery2.FieldByName('Заготовка Запуск').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 2, I] := ADOQuery2.FieldByName('Заготовка Готовность').AsString;
    Zag := Prim(ADOQuery2.FieldByName('Планирование').AsString);
    ZSG.Cells[I_FN_KOL_ZAP + 3, I] := Zag;

    ZSG.Cells[I_FN_KOL_ZAP + 4, I] := ADOQuery2.FieldByName('Сборка Запуск').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 5, I] := ADOQuery2.FieldByName('Сборка Готовность').AsString;
    Zap := Prim(ADOQuery2.FieldByName('Сборка Примечание').AsString);
    ZSG.Cells[I_FN_KOL_ZAP + 6, I] := Zap;

    ZSG.Cells[I_FN_KOL_ZAP + 7, I] := ADOQuery2.FieldByName(FN_NAM).AsString;

    ZSG.Cells[I_FN_KOL_ZAP + 8, I] := ADOQuery2.FieldByName('ОТК').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 9, I] := ADOQuery2.FieldByName('Кол принятых').AsString;
    OTK := Prim(ADOQuery2.FieldByName('ОТК прим').AsString);
    ZSG.Cells[I_FN_KOL_ZAP + 10, I] := OTK;
    ZSG.Cells[I_FN_KOL_ZAP + 11, I] := ADOQuery2.FieldByName('Упаковка').AsString;
    Sbor := (ADOQuery2.FieldByName('Сборщик').AsString);
    ZSG.Cells[I_FN_KOL_ZAP + 12, I] := Sbor;
    //ZSG.Cells[I_FN_KOL_ZAP + 13, I] := ADOQuery2.FieldByName('Х').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 13, I] := ADOQuery2.FieldByName('Расчетная дата готовности').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 14, I] := ADOQuery2.FieldByName('ID').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 15, I] := ADOQuery2.FieldByName('Отмена').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 16, I] := ADOQuery2.FieldByName('план Дата').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 17, I] := ADOQuery2.FieldByName('Н\ч Сварка').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 18, I] := ADOQuery2.FieldByName('Н\ч Сборка Клапана').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 19, I] := ADOQuery2.FieldByName('ОТКФам').AsString;
                //----------------------------------------------------------
    ZSG.Cells[I_FN_KOL_ZAP + 20, I] := ADOQuery2.FieldByName('МодПривода').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 21, I] := ADOQuery2.FieldByName('Привод').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 22, I] := ADOQuery2.FieldByName('Заказчик').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 23, I] := ADOQuery2.FieldByName('НачНомер').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 24, I] := ADOQuery2.FieldByName('КонНомер').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 25, I] := ADOQuery2.FieldByName('Подсборка1').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 26, I] := ADOQuery2.FieldByName('IdГП').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 27, I] := ADOQuery2.FieldByName('ФлагЗаготовки').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 28, I] := ADOQuery2.FieldByName('Cvet').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 29, I] := ADOQuery2.FieldByName('БЗ').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 30, I] := ADOQuery2.FieldByName('Легион').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 31, I] := ADOQuery2.FieldByName('Срочно').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 32, I] := ADOQuery2.FieldByName('Сборка лопаток').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 33, I] := ADOQuery2.FieldByName('СборЛопатка').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 34, I] := ADOQuery2.FieldByName('Сборка тяг').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 35, I] := ADOQuery2.FieldByName('Сбортяга').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 36, I] := ADOQuery2.FieldByName('IdКО').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 37, I] := ADOQuery2.FieldByName('СборкаРеш').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 38, I] := ADOQuery2.FieldByName('СборРеш').AsString;
    ZSG.Cells[I_FN_KOL_ZAP + 39, I] := ADOQuery2.FieldByName('Электро').AsString;
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    Sb_s := (ADOQuery2.FieldByName(FN_SBOR_KLAP_NC).AsString);
    if Sb_s = '' then
      SB := 0
    else
      SB := StrToFloat(ADOQuery2.FieldByName(FN_SBOR_KLAP_NC).AsString);
    Sv_s := (ADOQuery2.FieldByName(FN_SVARKA_NC).AsString);
    if Sv_s = '' then
      SV := 0
    else
      SV := StrToFloat(ADOQuery2.FieldByName(FN_SVARKA_NC).AsString);
    Kol := StrToInt(ADOQuery2.FieldByName(FN_KOL).AsString);
    Kol_Zap := StrToInt(ADOQuery2.FieldByName(FN_KOL_ZAP).AsString);
    Izdel := ADOQuery2.FieldByName(FN_NAM).AsString;
    Res := Pos('КПУ', Izdel);
    Fl := Pos('2*ф', Izdel);
    if (Res <> 0) and (Fl <> 0) then
    begin

      Res := Pos(' ', Izdel);
      Delete(Izdel, 1, Res);
                        //======================================== KPU
      Res := Pos('-', Izdel);
      Pos1 := Copy(Izdel, 1, Res - 1);
      Delete(Izdel, 1, Res);
                        //======================================== 1 H
      Res := Pos('-', Izdel);
      Pos2 := Copy(Izdel, 1, 1);
      Pos3 := Copy(Izdel, 2, 1);
      Delete(Izdel, 1, Res);
                        //========================================
                        //Клапан КПУ-1Н-О-Н-600*400-2*ф-MB220-сн-0-0-0-0-0-0
                        //========================================
      Res := Pos('-', Izdel);
      Pos4 := Copy(Izdel, 1, Res - 1);
      Delete(Izdel, 1, Res);
                        //========================================
      Res := Pos('-', Izdel);
      Pos5 := Copy(Izdel, 1, Res - 1);
      Delete(Izdel, 1, Res);
                        //========================================

      Res := Pos('*', Izdel);
      if Res < 5 then
      begin
        A := StrToInt(Copy(Izdel, 1, Res - 1));
        Delete(Izdel, 1, Res);
                                //========================================
        Res := Pos('-', Izdel);
        B := StrToInt(Copy(Izdel, 1, Res - 1));
        Delete(Izdel, 1, Res);
      end;

      if (A >= 150) and (A <= 1000) then
      begin
        Kol_G := 2 * Kol;
        Kol_Gor := Kol_Gor + Kol_G;

      end;
      if (B >= 150) and (B <= 1000) then
      begin
        Kol_V := 2 * Kol;
        Kol_Vert := Kol_Vert + Kol_V;

      end;
    end;
    Kol_Kl := Kol_Kl + (Kol_Zap);
    SV_O := SV_O + SV;
    SB_O := SB_O + SB;
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ADOQuery2.Next;
  end;
  Flag_Poisk := 0;
  Label40.Caption := IntToStr(Kol_Kl);
  Label64.Caption := IntToStr(Kol_Gor);
  Label66.Caption := IntToStr(Kol_Vert);
  Label37.Caption := FloatToStr(RoundTo(SB_O, -2));
  Label39.Caption := FloatToStr(RoundTo(SV_O, -2));
  ZSG.ColWidths[I_FN_KOL] := 0;
  Memo10.Lines.Clear;
  btn27.Click;
end;

procedure TForm1.Button23Click(Sender: TObject);
var
  Str, Str1, Otk, Nam, Zak, Kol_Otk: string;
  I: Integer;
begin
  FTSP.Show;
  if Regist.Doljnost = 1 then
    FServer.Show;

end;

procedure TForm1.ZSGDblClick(Sender: TObject);
var
  kol, Kol_Zap, Kol_Prin, Flag_Zag: Integer;
  OTK,N:TDate;
begin
  Memo2.Lines.Add('DB'+IntToStr(FlagDolg));
  Vozduh := 0;
  if (ZSG.Col = 1) then
  begin
    Spec := 0;
    FSpec.Label1.Caption := ZSG.Cells[I_FN_KOL_ZAP + 26, ZSG.Row];
    FSpec.Caption := ZSG.Cells[0, ZSG.Row]; //Номер
    FSpec.Lbl1.Caption := ZSG.Cells[I_FN_KOL_ZAP + 36, ZSG.Row];
    FSpec.Label2.Caption := '0';
    FSpec.fl2 := 0;
    FSpec.ShowModal;

  end;           //  and (ZSG.Cells[I_FN_KOL_ZAP + 5, ZSG.Row] = '')  ZSG.Cells[I_FN_KOL_ZAP + 3, 1] := 'Планирование';
 { if (ZSG.Col = 0) and ((FlagDolg = 4) or (FlagDolg = 1) or (FlagDolg = 10) or (FlagDolg = 7)) then
  begin
    FSborAll.Sbor1:=0;
    FSborAll.Label1.Caption := Zsg.Cells[0, ZSG.Row];
    FSborAll.ComboBox1.Clear;
    FSborAll.CBB1.Clear;
    FSborAll.CBB2.Clear;
    FSborAll.CBB3.Clear;
    FSborAll.ComboBox1.Text := ZSG.Cells[I_FN_KOL_ZAP + 12, ZSG.Row] ;//:= 'Сборщик';
    FSborAll.CBB1.Text := ZSG.Cells[I_FN_KOL_ZAP + 25, ZSG.Row] ;//:= 'Сборщик';
    FSborAll.CBB2.Text := ZSG.Cells[I_FN_KOL_ZAP + 33, ZSG.Row] ;//:= 'Сборщик';
    FSborAll.CBB3.Text := ZSG.Cells[I_FN_KOL_ZAP + 35, ZSG.Row] ;//:= 'Сборщик';
    FSborAll.ShowModal;
  end; }
  //
    Kol_Zap := StrToInt(ZSG.Cells[I_FN_KOL_ZAP, ZSG.ROW]);
  Kol_Prin := StrToInt(ZSG.Cells[I_FN_KOL_ZAP + 9, ZSG.ROW]);
    if ZSG.Cells[I_FN_KOL_ZAP + 8, ZSG.ROW]<>'' then
  Begin
    OTK:=StrToDate(ZSG.Cells[I_FN_KOL_ZAP + 8, ZSG.ROW]);
    N:=Now;
  End;
    if ((ZSG.Col = 0) or (ZSG.Col = I_FN_KOL_ZAP + 12) or (ZSG.Col = I_FN_KOL_ZAP + 25) or (ZSG.Col = I_FN_KOL_ZAP + 33) or (ZSG.Col = I_FN_KOL_ZAP + 35))
    and ((FlagDolg = 4) or (FlagDolg = 1) or (FlagDolg = 10) or (FlagDolg = 7) or (FlagDolg = 2)) then
  begin     //

    if ((Kol_Zap=Kol_Prin) AND (N>OTK+2)) AND (FlagDolg <> 1) AND (FlagDolg <> 2) Then  //   (ZSG.Cells[I_FN_KOL_ZAP + 9,ZSG.row]<>'')
    Begin
      MessageDlg('ОТК приняло клапан, запрещенно изменять дату!', mtError, [mbOk], 0);
      Exit;
    End;
    FSborAll.Sbor1:=0;
    FSborAll.CBB1.Visible:=True;
    FSborAll.CBB2.Visible:=True;
    FSborAll.CBB3.Visible:=True;
    FSborAll.Label1.Caption := Zsg.Cells[0, ZSG.Row];
    FSborAll.ComboBox1.Clear;
    FSborAll.CBB1.Clear;
    FSborAll.CBB2.Clear;
    FSborAll.CBB3.Clear;
    FSborAll.ComboBox1.Text := ZSG.Cells[I_FN_KOL_ZAP + 12, ZSG.Row] ;//:= 'Сборщик';
    FSborAll.CBB1.Text := ZSG.Cells[I_FN_KOL_ZAP + 25, ZSG.Row] ;//:= 'Сборщик';
    FSborAll.CBB2.Text := ZSG.Cells[I_FN_KOL_ZAP + 33, ZSG.Row] ;//:= 'Сборщик';
    FSborAll.CBB3.Text := ZSG.Cells[I_FN_KOL_ZAP + 35, ZSG.Row] ;//:= 'Сборщик';
    FSborAll.ShowModal;
  end;
        ///++++++++++++++++++++++++++++
  Flag_Zag := Pos('rue', ZSG.Cells[I_FN_KOL_ZAP + 27, ZSG.Row]);


        //+++++++++++++++++++++++++++++++++++++Заготовка Запуск     Планирование не пусто
  if (ZSG.Col = I_FN_KOL_ZAP + 1) and (ZSG.Cells[I_FN_KOL_ZAP + 3, ZSG.Row] <> '') and ((FlagDolg = 7) or (FlagDolg = 1) or (FlagDolg = 8)) then
  begin
    Form2.Label1.Caption := 'Заготовка';
    Form2.Label2.Caption := ZSG.Cells[ZSG.Col, 1];
    Form2.Label3.Caption := ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.ROW];
                //Nam
    Form2.Label6.Caption := ZSG.Cells[2, ZSG.ROW]; //Zak
    Form2.Label7.Caption := ZSG.Cells[I_FN_KOL_ZAP, ZSG.ROW]; //Kol
    Form2.Label8.Caption := ZSG.Cells[0, ZSG.ROW]; //Nom
    Form2.Label4.Caption := IntToStr(ZSG.Row);
    Form2.Label5.Caption := IntToStr(ZSG.Col);
    Form2.Caption := ZSG.Cells[0, ZSG.ROW];
    Form2.ShowModal;
  end;
 { if (ZSG.Col = I_FN_KOL_ZAP + 25) then //Подсборка
  begin
    Form2.Label1.Caption := 'Подсборка';
    Form2.Label2.Caption := ZSG.Cells[ZSG.Col, 1];
    Form2.Label3.Caption := ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.ROW];
                //Nam
    Form2.Label6.Caption := ZSG.Cells[2, ZSG.ROW]; //Zak
    Form2.Label7.Caption := ZSG.Cells[I_FN_KOL_ZAP, ZSG.ROW]; //Kol
    Form2.Label8.Caption := ZSG.Cells[0, ZSG.ROW]; //Nom
    Form2.Caption := ZSG.Cells[0, ZSG.ROW]; //Nom
    Form2.Label4.Caption := IntToStr(ZSG.Row);
    Form2.Label5.Caption := IntToStr(ZSG.Col);
    Form2.Button3.Visible := True;
    Form2.ShowModal;
  end;   }
        //++++++++++++++++++++++++++++++++++++++Заготовка Готова
  if (FlagDolg = 1) or (FlagDolg = 7) or (FlagDolg = 8) then
  begin
    if (ZSG.Col = I_FN_KOL_ZAP + 2) and (ZSG.Cells[I_FN_KOL_ZAP + 1, ZSG.Row] //Заготовка Готова
      <> '') then
    begin
      Memo2.Lines.Add('Условие');
      Form2.Caption := ZSG.Cells[0, ZSG.ROW];
      if ZSG.Cells[I_FN_KOL_ZAP + 2, ZSG.Row] <> '' then
        Form2.Label9.Caption := '1'
      else
        Form2.Label9.Caption := '0';
      Memo2.Lines.Add('1,0');
      Form2.Label1.Caption := 'Заготовка';
      Form2.Label2.Caption := ZSG.Cells[ZSG.Col, 1];
      Form2.Label3.Caption := ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.ROW]; //Nam
      Form2.Label6.Caption := ZSG.Cells[2, ZSG.ROW]; //Zak
      Form2.Label7.Caption := ZSG.Cells[I_FN_KOL_ZAP, ZSG.ROW];
                        //Kol
      Form2.Label8.Caption := ZSG.Cells[0, ZSG.ROW]; //Nom
      Form2.Label10.Caption := ZSG.Cells[I_FN_KOL_ZAP + 2, ZSG.ROW]; //Dat
      Form2.Label4.Caption := IntToStr(ZSG.Row);
      Form2.Label5.Caption := IntToStr(ZSG.Col);
      Memo2.Lines.Add('ShowModal');
      Form2.ShowModal;
    end;

  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Сборка запуск
  if (ZSG.Col = I_FN_KOL_ZAP + 4) and (ZSG.Cells[I_FN_KOL_ZAP + 2, ZSG.Row] <> '')
  and ((FlagDolg = 10) or (FlagDolg = 1) or (FlagDolg = 7) or (FlagDolg = 4)) then
  begin
    if ZSG.Cells[I_FN_KOL_ZAP + 4, ZSG.Row] <> '' then
      Form2.Label9.Caption := '1'
    else
      Form2.Label9.Caption := '0';
    Form2.Label1.Caption := 'Сборка';
    Form2.Label2.Caption := ZSG.Cells[ZSG.Col, 1];
    Form2.Label3.Caption := ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.ROW]; //Nam
    Form2.Label6.Caption := ZSG.Cells[2, ZSG.ROW]; //Zak
    Form2.Label7.Caption := ZSG.Cells[I_FN_KOL_ZAP, ZSG.ROW];
                        //Kol
    Form2.Label8.Caption := ZSG.Cells[0, ZSG.ROW]; //Nom
    Form2.Label10.Caption := ZSG.Cells[I_FN_KOL_ZAP + 4, ZSG.ROW]; //Dat
    Form2.Label4.Caption := IntToStr(ZSG.Row);
    Form2.Label5.Caption := IntToStr(ZSG.Col);
    Form2.ShowModal;
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Сборка Готовность
  if (ZSG.Col = I_FN_KOL_ZAP + 5) and (ZSG.Cells[I_FN_KOL_ZAP + 4, ZSG.Row] <> '') and (ZSG.Cells[I_FN_KOL_ZAP + 12, ZSG.Row] <> '') and ((FlagDolg = 10) or (FlagDolg = 4) or (FlagDolg = 1) or (FlagDolg = 7)) then //Трапезников
  begin

    if ZSG.Cells[I_FN_KOL_ZAP + 5, ZSG.Row] <> '' then
      Form2.Label9.Caption := '1'
    else
      Form2.Label9.Caption := '0';
    Form2.Label1.Caption := 'Сборка';
    Form2.Label2.Caption := ZSG.Cells[ZSG.Col, 1];
    Form2.Label3.Caption := ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.ROW];
                //Nam
    Form2.Label6.Caption := ZSG.Cells[2, ZSG.ROW]; //Zak
    Form2.Label7.Caption := ZSG.Cells[I_FN_KOL_ZAP, ZSG.ROW]; //Kol
    Form2.Label8.Caption := ZSG.Cells[0, ZSG.ROW]; //Nom
    Form2.Label10.Caption := ZSG.Cells[I_FN_KOL_ZAP + 5, ZSG.ROW];
                //Dat
    Form2.Label4.Caption := IntToStr(ZSG.Row);
    Form2.Label5.Caption := IntToStr(ZSG.Col);
    Form2.Caption := ZSG.Cells[0, ZSG.ROW];
    Form2.ShowModal;
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Kol_Zap := StrToInt(ZSG.Cells[I_FN_KOL_ZAP, ZSG.ROW]);
  Kol_Prin := StrToInt(ZSG.Cells[I_FN_KOL_ZAP + 9, ZSG.ROW]);
  if (ZSG.Col = I_FN_KOL_ZAP + 9) and (ZSG.Cells[I_FN_KOL_ZAP + 5, ZSG.Row] //Кол ОТК     and (Kol_Zap > Kol_Prin)
    <> '') and ((((FlagDolg = 10) or (FlagDolg = 7))) or (FlagDolg = 1)) then
  begin
    if (FlagDolg = 7) then
      FOTK.Button3.Visible := True;
    FOTK.Label2.Caption := ZSG.Cells[0, ZSG.ROW]; //Nom
    FOTK.Label3.Caption := ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.ROW];
                //Nam
    FOTK.Label4.Caption := ZSG.Cells[2, ZSG.ROW]; //Zak
    FOTK.Label5.Caption := ZSG.Cells[I_FN_KOL_ZAP, ZSG.ROW]; //Kol
    FOTK.Label6.Caption := ZSG.Cells[I_FN_KOL_ZAP + 14, ZSG.ROW];
                //ID
    FOTK.Label10.Caption := ZSG.Cells[I_FN_KOL_ZAP + 5, ZSG.ROW];
    FOTK.LabGP.Caption := ZSG.Cells[I_FN_KOL_ZAP + 26, ZSG.ROW];
    FOTK.Labko.Caption := '0';
                //ОТК
    FOTK.Label7.Caption := IntToStr(ZSG.Row);
    FOTK.Label8.Caption := IntToStr(ZSG.Col);
    FOTK.Caption := ZSG.Cells[0, ZSG.ROW];

    FOTK.Label13.Caption := ZSG.Cells[I_FN_KOL_ZAP + 23, ZSG.ROW]; //Нач Номер
    FOTK.Label15.Caption := ZSG.Cells[I_FN_KOL_ZAP + 24, ZSG.ROW]; //КонНомер
    FOTK.ShowModal;
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if (ZSG.Col = I_FN_KOL_ZAP + 11) and (ZSG.Cells[I_FN_KOL_ZAP + 8, ZSG.Row] <> '') and ((FlagDolg = 10) or (FlagDolg = 7) or (FlagDolg = 1) //Отгрузка
    or (FlagDolg = 0) or (FlagDolg = 4)) then //Отгрузка
  begin
                //Проверить перед отгрузкой все ли приняло ОТК
                //Form2.Label1.Caption := 'Отгрузка';
    Form2.Label2.Caption := ZSG.Cells[ZSG.Col, 1];
    Form2.Label3.Caption := ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.ROW];
                //Nam
    Form2.Label6.Caption := ZSG.Cells[2, ZSG.ROW]; //Zak
    Form2.Label7.Caption := ZSG.Cells[I_FN_KOL_ZAP, ZSG.ROW]; //Kol
    Form2.Label8.Caption := ZSG.Cells[0, ZSG.ROW]; //Nom
    Form2.Label4.Caption := IntToStr(ZSG.Row);
    Form2.Label5.Caption := IntToStr(ZSG.Col);
    Form2.Caption := ZSG.Cells[0, ZSG.ROW];
    Form2.ShowModal;
  end;
  Form2.Plan.Caption :='';
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ OR (FlagDolg = 4)
  {if (ZSG.Col = I_FN_KOL_ZAP + 3) and (Flag_Zag = 0) and ((FlagDolg = 7) or (FlagDolg = 1)) then //Планирование
  begin
    MessageDlg('Не все детали обработаны! Список в папке с накладной.', mtError, [mbOk], 0);
    Exit;
  end;  and (Flag_Zag <> 0)}
  if (ZSG.Col = I_FN_KOL_ZAP + 3) and ((FlagDolg = 7) or (FlagDolg = 1)) then //Планирование
  begin
    Form2.Label2.Caption := ZSG.Cells[ZSG.Col, 1];
    Form2.Label3.Caption := ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.ROW];
                //Nam
    Form2.Plan.Caption := Form1.ConvertDat1(ZSG.Cells[I_FN_KOL_ZAP + 3, ZSG.ROW]); //Планирование Дата для удаления
    Form2.Label6.Caption := ZSG.Cells[2, ZSG.ROW]; //Zak
    Form2.Label7.Caption := ZSG.Cells[I_FN_KOL_ZAP, ZSG.ROW]; //Kol
    Form2.Label8.Caption := ZSG.Cells[0, ZSG.ROW]; //Nom
    Form2.Label4.Caption := IntToStr(ZSG.Row);
    Form2.Label5.Caption := IntToStr(ZSG.Col);
    Form2.Caption := ZSG.Cells[0, ZSG.ROW];
    Form2.LabCVET.Caption := ZSG.Cells[I_FN_KOL_ZAP + 28, ZSG.ROW]; //Cvet
    Form2.ShowModal;
  end;

  if (ZSG.Col = I_FN_KOL_ZAP + 6) and ((FlagDolg = 4) or (FlagDolg = 1) or (FlagDolg = 7)) //Примечание
    then
  begin

    if (ZSG.Col = I_FN_KOL_ZAP + 3) then
    begin
      Form3.Label1.Caption := 'Заготовка';
      Form3.Label2.Caption := ZSG.Cells[ZSG.Col, 1];
    end
    else
    begin
      Form3.Label1.Caption := 'Сборка';
      Form3.Label2.Caption := ZSG.Cells[ZSG.Col, 1];
    end;
    Form3.Label3.Caption := ZSG.Cells[0, ZSG.ROW];
    Form3.Label6.Caption := ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.ROW];
    Form3.Label7.Caption := ZSG.Cells[I_FN_ZAK, ZSG.ROW];
    Form3.Label4.Caption := IntToStr(ZSG.Row);
    Form3.Label5.Caption := IntToStr(ZSG.Col);
    Form3.Memo1.Text := Form1.ZSG.Cells[ZSG.Col, ZSG.Row];
    Form3.Caption := ZSG.Cells[0, ZSG.ROW];
    Form3.LabKO.Caption := ZSG.Cells[I_FN_KOL_ZAP + 14, ZSG.ROW]; //ID
    Form3.LabGP.Caption := ZSG.Cells[I_FN_KOL_ZAP + 26, ZSG.ROW]; //IDGP
    Form3.Show;
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if (ZSG.Col = I_FN_KOL_ZAP + 10) and ((FlagDolg = 10) or (FlagDolg = 1) or (FlagDolg = 7) or (FlagDolg = 4))//ОТК Примеч
    then //OTK
  begin
    Form3.Memo1.Text := ZSG.Cells[I_FN_KOL_ZAP + 10, ZSG.ROW];
    Form3.Label1.Caption := ZSG.Cells[ZSG.Col, 1];
    Form3.Label2.Caption := '0';
    Form3.Label3.Caption := ZSG.Cells[0, ZSG.ROW];
    Form3.Label6.Caption := ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.ROW];
    Form3.Label7.Caption := ZSG.Cells[I_FN_ZAK, ZSG.ROW];
    Form3.Label4.Caption := IntToStr(ZSG.Row);
    Form3.Label5.Caption := IntToStr(ZSG.Col);
    Form3.Caption := ZSG.Cells[0, ZSG.ROW];
    Form3.LabKO.Caption := ZSG.Cells[I_FN_KOL_ZAP + 14, ZSG.ROW]; //ID
    Form3.LabGP.Caption := ZSG.Cells[I_FN_KOL_ZAP + 26, ZSG.ROW]; //IDGP
    Form3.Show;
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if (ZSG.Col = I_FN_KOL_ZAP + 21) and ((FlagDolg = 0) or (FlagDolg = 7) or (FlagDolg = 1)) then //Кол в наличии
  begin
    FBriket.Label4.Caption := 'Кол в наличии';
    FBriket.Label1.Caption := IntToStr(I_FN_KOL_ZAP + 21);
    FBriket.Caption := ZSG.Cells[0, ZSG.ROW];
    FBriket.Show;
  end;
  if (ZSG.Col = I_FN_KOL_ZAP + 22) and ((FlagDolg = 0) or (FlagDolg = 1) or (FlagDolg = 7) or (FlagDolg = 4)) then //Кол выданных
  begin
    FBriket.Label4.Caption := 'Кол выданных';
    FBriket.Label1.Caption := IntToStr(I_FN_KOL_ZAP + 22);
    FBriket.GradientLabel1.Caption := ZSG.Cells[0, ZSG.ROW];
    FBriket.Caption := ZSG.Cells[0, ZSG.ROW];
    FBriket.Show;
  end;
        //Программист
  if (ZSG.Col = 11) and ((FlagDolg = 1) or (FlagDolg = 9)) then //Кол выданных
  begin
    FProgramm.Label1.Caption := ZSG.Cells[I_FN_KOL_ZAP + 26, ZSG.Row];
    FProgramm.Label2.Caption := ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.Row];
    FProgramm.Label3.Caption := ZSG.Cells[I_FN_KOL_ZAP, ZSG.Row];
    FProgramm.Caption := ZSG.Cells[0, ZSG.ROW];
    FProgramm.Show;
  end;
end;

procedure TForm1.BitBtn4Click(Sender: TObject);
var
  Str: string;
begin
  if (ZSG.Col = 0) then
    Str := 'Номер';
  if (ZSG.Col = 1) then
    Str := 'Дата';
  if (ZSG.Col = 2) then
    Str := 'Заказ';

  if (ZSG.Col = 4) then
    Str := 'Кол во запущенных';
  if (ZSG.Col = 5) then
    Str := 'Заготовка Запуск';
  if (ZSG.Col = 6) then
    Str := 'Заготовка Готовность';
  if (ZSG.Col = 7) then
    Str := 'Планирование';
        //if (ZSG.Col = 7) then
        //        Str := 'Заготовка Примечание';

  if (ZSG.Col = 8) then
    Str := 'Сборка Запуск';
  if (ZSG.Col = 9) then
    Str := 'Сборка Готовность';
  if (ZSG.Col = 10) then
    Str := 'Сборка Примечание';
  if (ZSG.Col = 12) then
    Str := 'ОТК';
  if (ZSG.Col = 20) then
    Str := 'План Дата';
  Order1 := ' ORDER BY [' + Str + ']';
  Button22.Click;
end;

procedure TForm1.BitBtn3Click(Sender: TObject);
var
  Str: string;
begin
  if (ZSG.Col = 0) then
    Str := 'Номер';
  if (ZSG.Col = 1) then
    Str := 'Дата';
  if (ZSG.Col = 2) then
    Str := 'Заказ';

  if (ZSG.Col = 4) then
    Str := 'Кол во запущенных';
  if (ZSG.Col = 5) then
    Str := 'Заготовка Запуск';
  if (ZSG.Col = 6) then
    Str := 'Заготовка Готовность';
  if (ZSG.Col = 7) then
    Str := 'Планирование';
        //if (ZSG.Col = 7) then
        //        Str := 'Заготовка Примечание';

  if (ZSG.Col = 8) then
    Str := 'Сборка Запуск';
  if (ZSG.Col = 9) then
    Str := 'Сборка Готовность';
  if (ZSG.Col = 10) then
    Str := 'Сборка Примечание';

  if (ZSG.Col = 12) then
    Str := 'ОТК';
  if (ZSG.Col = 20) then
    Str := 'План Дата';
  Order1 := ' ORDER BY [' + Str + '] DESC';
  Button22.Click;
end;

procedure TForm1.Edit2Click(Sender: TObject);
begin
  Find_StringGrid(ZSG, Edit2.Text, I_FN_ZAK, Label2.Caption, 5);
end;

procedure TForm1.SG6DrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
var
  H, Kol, Kol1, Res, x, y, Zag, Sbor, Zap, Zap1, Kol_Dn: Integer;
  Str, Str1, S, S1, S2: string;
  Format: Word;
  C: array[0..255] of Char;
  Dat: TDate;
begin
  try
    Rect.Left := Rect.Left - 4;
    if ARow = 0 then
    begin
      H := DrawText(SG6.Canvas.Handle, PChar(SG6.Cells[ACol, ARow]), length(SG6.Cells[ACol, ARow]), Rect, DT_WORDBREAK);
      if H > SG6.RowHeights[ARow] then
      begin
        StringGrid10.RowHeights[ARow] := H;  //увеличиваем
        StringGrid9.RowHeights[ARow] := H;  //увеличиваем
        SG6.RowHeights[ARow] := H;  //увеличиваем
      end;
      SG6.Canvas.Brush.Color := clLtGray;
      SG6.Canvas.FillRect(Rect);
      Inc(Rect.Top, 2);
      Dec(Rect.Bottom, 2);
      Inc(Rect.Left, 2);
      Dec(Rect.Right, 2);
      DrawText(SG6.Canvas.Handle, pChar(SG6.Cells[ACol, ARow]), Length(SG6.Cells[ACol, ARow]), Rect, DT_LEFT or DT_WORDBREAK);
      if Sender = ActiveControl then
        Exit;
      if not (gdSelected in State) then
        Exit;
      with Sender as TStringGrid do
      begin
        Canvas.Brush.Color := clYellow;
        Canvas.Font.Color := Font.Color;
        Canvas.TextRect(Rect, Rect.Left + 2, Rect.Top + 2, Cells[ACol, ARow]);
      end;
    end;
    if ARow > 0 then
    begin
                        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  + (Rect.Width()   Rect.Height()
                        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      if StringGrid10.Cells[I_FN_KOL, ARow] = '' then
        Kol := 0
      else
        Kol := StrToInt(StringGrid10.Cells[I_FN_KOL, ARow]);
      if StringGrid10.Cells[I_FN_KOL_ZAP, ARow] = '' then
        Kol1 := 0
      else
        Kol1 := StrToInt(StringGrid10.Cells[I_FN_KOL_ZAP, ARow]);
      Str := SG6.Cells[I_FN_ZAG, ARow];
      Res := Pos('/', Str);
      if Res <> 0 then
      begin
        Zag := StrToInt(Copy(Str, Res + 1, 4));
        Zap := StrToInt(Copy(Str, 1, Res - 1));
      end;

      if (Kol1 <> 0) then
      begin
        SG6.canvas.brush.Color := RGB(247, 247, 26);
                                //Желтый (Запущены не все)
        SG6.Canvas.FillRect(Rect);
        SG6.Canvas.TextOut(Rect.Left, Rect.Top, SG6.Cells[ACol, ARow]);
      end;
      if (Kol1 = 0) then
      begin
        SG6.canvas.brush.Color := RGB(255, 255, 255);
                                //Белый
        SG6.Canvas.FillRect(Rect);
        SG6.Canvas.TextOut(Rect.Left, Rect.Top, SG6.Cells[ACol, ARow]);
      end;
      if (Zag < Zap) or (Zag = Zap) and (Zag <> 0) then
                                //Салатовый (Запущены все)
      begin
        SG6.canvas.brush.Color := RGB(183, 251, 132);
        SG6.Canvas.Font.Color := clBlack;
        SG6.Canvas.FillRect(Rect);
        SG6.Canvas.TextOut(Rect.Left, Rect.Top, SG6.Cells[ACol, ARow]);

      end;
      Str := SG6.Cells[I_FN_SBOR, ARow];
      Res := Pos('/', Str);
      if Res <> 0 then
      begin
        Sbor := StrToInt(Copy(Str, Res + 1, 4));
        Zap1 := StrToInt(Copy(Str, 1, Res - 1));
      end;

      if (Zap1 <> 0) and ((Sbor = 0)) then
                                //Ярко зеленый Сборка готова
      begin
        SG6.canvas.brush.Color := RGB(0, 255, 0);
        SG6.Canvas.Font.Color := clBlack;
        SG6.Canvas.FillRect(Rect);
        SG6.Canvas.TextOut(Rect.Left, Rect.Top, SG6.Cells[ACol, ARow]);
      end;
      if SG6.Cells[I_FN_DAT_OTGRUZ, ARow] <> '' then
                                //Отгрузка
      begin
        SG6.canvas.brush.Color := RGB(100, 149, 237);
        SG6.Canvas.Font.Color := clBlack;
        SG6.Canvas.FillRect(Rect);
        SG6.Canvas.TextOut(Rect.Left, Rect.Top, SG6.Cells[ACol, ARow]);
      end;

      Res := Pos('rue', StringGrid10.Cells[I_FN_SGP+5, ARow]);
      if (Res <> 0) AND (ACol=I_FN_TEHNOLOG) then
      begin
      SG6.Canvas.Font.Style := [fsItalic] + [fsBold];
      SG6.Canvas.brush.Color := RGB(64, 249, 254);
      SG6.Canvas.FillRect(Rect);
      SG6.Canvas.TextOut(Rect.Left, Rect.Top, SG6.Cells[ACol, ARow]);
      end;

      if (SG6.Cells[I_FN_PR_OTK, ARow] <> '') and (Zap1 <> 0) and (Sbor = 0) then //Темно зеленый
      begin
        SG6.canvas.brush.Color := RGB(0, 100, 0);
        SG6.Canvas.Font.Color := clBlack;
        SG6.Canvas.FillRect(Rect);
        SG6.Canvas.TextOut(Rect.Left, Rect.Top, SG6.Cells[ACol, ARow]);
      end;
      if (SG6.Cells[I_FN_PR_OTK, ARow] <> '') and (Zap1 > Sbor) and (Sbor <> 0) and (ACol = I_FN_PR_OTK) then
                                //Темно зеленый
      begin
        SG6.canvas.brush.Color := RGB(0, 100, 0);
        SG6.Canvas.Font.Color := clBlack;
        SG6.Canvas.FillRect(Rect);
        SG6.Canvas.TextOut(Rect.Left, Rect.Top, SG6.Cells[ACol, ARow]);
      end;
      if StringGrid10.Cells[I_FN_PLAN_DATA, ARow] <> '' then
      begin
        Dat := StrToDate(StringGrid10.Cells[I_FN_PLAN_DATA, ARow]);
        Kol_Dn := (Trunc(Now) - Trunc(Dat));
                        // Плановая дата истекла

        if (Kol_Dn > 1) and ((Zag <> 0) or (Sbor <> 0)) and (ACol = I_FN_SBOR_PRIM) then
        begin

          SG6.canvas.brush.Color := RGB(242, 12, 20); //Красный
          SG6.Canvas.FillRect(Rect);
          SG6.Canvas.TextOut(Rect.Left, Rect.Top, SG6.Cells[ACol, ARow]);
        end;

      end;
      if SG6.Cells[I_FN_OTMENA, ARow] <> '' then
      begin
        SG6.canvas.brush.Color := RGB(128, 128, 128);
                                        //Серый
                                //Закрашиваем бэкграунд
        SG6.Canvas.Font.Color := clBlack;
        SG6.Canvas.FillRect(Rect);
        SG6.Canvas.TextOut(Rect.Left, Rect.Top, SG6.Cells[ACol, ARow]);
      end;

    end;

    if (gdSelected in State) then
    begin
      SG6.Canvas.Brush.Color := clBlack;
      SG6.Canvas.Font.Color := clWhite;
      SG6.Canvas.FillRect(Rect);
      SG6.Canvas.TextOut(Rect.Left, Rect.Top, SG6.Cells[ACol, ARow]);
    end;
    with Sender as TStringGrid do
    begin
      Canvas.Pen.Color := clBlue;

      Canvas.MoveTo(0, Rect.Top);
      Canvas.LineTo(Rect.Right, Rect.Top);

      if ARow = RowCount - 1 then
      begin
        Canvas.MoveTo(0, Rect.Bottom);
        Canvas.LineTo(Rect.Right, Rect.Bottom);
      end;

      Canvas.MoveTo(Rect.Right, Rect.Top);
      Canvas.LineTo(Rect.Right, Rect.Bottom);

      if ACol = 0 then
      begin
        Canvas.MoveTo(Rect.Left, Rect.Top);
        Canvas.LineTo(Rect.Left, Rect.Bottom);
      end;
    end;
  except
    MessageDlg('Не удалось подключиться к базе данных10!', mtError, [mbOk], 0);
  end;
end;

procedure TForm1.SG4DblClickCell(Sender: TObject; ARow, ACol: Integer);
var
  Str, Izdel: string;
  I, Kol_R, Kol_G, Res1: Integer;
begin
  luk := 1;

  if ACol = 8 then //Технолог
  begin
    Form1.Vozduh := 12;
    N102.Click;
    if UOsnova_Main.Flag_Error = 2 then //ДЕТАЛИ НЕ ВСЕ
      Exit;
    FNomer.Caption := SG4.Cells[3, SG4.Row];
    FNomer.Label2.Caption := SG4.Cells[2, SG4.Row];
    FNomer.Label3.Caption := 'Технолог';

    FNomer.Label7.Caption := SG4.Cells[19, SG4.Row];  //BZ
    FNomer.Label8.Caption := SG4.Cells[13, SG4.Row]; //GP
    //FNomer.Label9.Caption := SG.Cells[2, SG.Row];


    FNomer.DateTimePicker1.Visible := True;
    FNomer.ComboBox1.Visible := False;
    FNomer.ComboBox2.Visible := False;
    FNomer.Edit1.Visible := False;
    FNomer.Label4.Caption := IntToStr(SG.Row);
    FNomer.Label5.Caption := IntToStr(SG.Col);
    FNomer.Show;
  end;
  if ACol = 3 then
  begin
    Spec := 0;
    FSTAM.lbl1.Caption := SG4.Cells[13, ARow]; //IDGP
    FSTAM.Show;
  end;
  if ACol = 7 then
  begin
    Form5.label1.Caption := SG4.Cells[13, ARow]; //IDGP
    Form5.label10.Caption := SG4.Cells[2, ARow]; //Заказ
    FSTAM.Shablon := 0;
            //Form5.label10.Caption:=SG.Cells[4,ARow];//Кол
    Kol_R := 0;
    Kol_G := 0;
    if not mkQuerySelect(ADOQuery2, 'Select * from %s WHERE (Not [Заготовка Запуск] IS NULL) AND ([Кол принятых] IS NULL) AND (IdГП=' + SG4.Cells[12, ARow] + ') AND (Х IS NULL) ', ['ЗапускЛЮК']) then
      exit;
    for I := 0 to ADOQuery2.RecordCount - 1 do
    begin
      Kol_R := Kol_R + ADOQuery2.FieldByName('Кол во').AsInteger;
      ADOQuery2.Next;
    end;
            //++++++++++++++++++++++++++++++++++++++++++++++
    if not mkQuerySelect(ADOQuery2, 'Select * from %s WHERE  ([Кол принятых]<>0) AND (IdГП=' + SG4.Cells[13, ARow] + ') AND (Х IS NULL) ', ['ЗапускЛЮК']) then
      exit;
    for I := 0 to ADOQuery2.RecordCount - 1 do
    begin
      Kol_G := Kol_G + ADOQuery2.FieldByName('Кол принятых').AsInteger;
      ADOQuery2.Next;
    end;
    Form5.label11.Caption := SG4.Cells[4, ARow];
    Form5.label12.Caption := IntToStr(Kol_R);
    Form5.label13.Caption := IntToStr(Kol_G);
    Izdel := SG4.Cells[3, ARow];
    Res1 := Pos('СТАМ', Izdel);
    if Res1 <> 0 then
      Delete(Izdel, 1, Res1 - 1);
    Form5.label2.Caption := Izdel;
    Form5.Show;
  end;
end;

procedure TForm1.SG4GetCellColor(Sender: TObject; ARow, ACol: Integer; AState: TGridDrawState; ABrush: TBrush; AFont: TFont);
var
  I, Res: Integer;
begin

  if (ARow > 0) and (ACol > 1) then
  begin

          //++++++++++++++++++++++++++++++++++++++
    Res := AnsiComparestr('0', SG4.Cells[5, ARow]);
    if (Res <> 0) then
    begin
      ABrush.Color := RGB(247, 247, 131); //Желтый
    end;
          //++++++++++++++++++++++++++++++++++++++

    if (SG4.Cells[11, ARow] <> '') then
    begin
      ABrush.Color := RGB(0, 255, 0); //Св зеленый
    end;
          //++++++++++++++++++++++++++++++++++++++
    if (SG4.Cells[12, ARow] <> '') then
    begin
      ABrush.Color := RGB(0, 100, 0); //ОТК
    end;
          //++++++++++++++++++++++++++++++++++++++
    Res := AnsiComparestr('0', SG4.Cells[8, ARow]);
    if (Res = 0) and (ACol = 8) then
    begin
      ABrush.Color := RGB(230, 134, 216); //Rozov Не было запуска из Москвы
    end;
    Res := AnsiComparestr('1', SG4.Cells[16, ARow]);
    if (Res = 0) then
    begin
      AFont.Style := [fsBold];
    end;
  end;
end;

procedure TForm1.SG4MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
// Эмуляция нажатия мыши
  if Button = mbRight then
    mouse_event(MOUSEEVENTF_LEFTDOWN or MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
end;

procedure TForm1.SG5DblClick(Sender: TObject);
begin

  luk := 1;
  if (SG5.Col = 9) //and ((FlagDolg = 4) or (FlagDolg = 1) or (FlagDolg = 7)) Примечание
    then
  begin
    Form1.Vozduh := 4;
    Form3.Label3.Caption := SG5.Cells[0, SG5.ROW]; //Nomer
    Form3.Label6.Caption := SG5.Cells[21, SG5.ROW]; //IDGP
    Form3.Label7.Caption := SG5.Cells[2, SG5.ROW]; //Zakaz
    Form3.Label4.Caption := IntToStr(SG5.Row);
    Form3.Label5.Caption := IntToStr(SG5.Col);
    Form3.Memo1.Text := Form1.SG5.Cells[SG5.Col, SG5.Row];
    Form3.Caption := SG5.Cells[3, SG5.ROW]; //Izdel
    Form3.Show;
  end;
  if (SG5.Col = 8) and ((FlagDolg = 1) or (FlagDolg = 7)) then  //Планирование
  begin   // TRUMPF
    FStamTime.Caption := SG5.Cells[SG5.Col, 0];
    FStamTime.Label1.Caption := SG5.Cells[21, SG5.Row]; //idGP
    FStamTime.Label2.Caption := SG5.Cells[0, SG5.Row];  //Nomer
    FStamTime.Label6.Caption := SG5.Cells[10, SG5.Row];  //Материал
    FStamTime.Label3.Caption := IntToStr(SG5.Col);
    FStamTime.Label4.Caption := IntToStr(SG5.Row);
    FStamTime.ShowModal;
  end;
  if (SG5.Col = 12) or (SG5.Col = 11) and ((FlagDolg = 1) or (FlagDolg = 7)) then
  begin   // TRUMPF
    FStamTime.Caption := SG5.Cells[SG5.Col, 0];
    FStamTime.Label1.Caption := SG5.Cells[21, SG5.Row]; //idGP
    FStamTime.Label2.Caption := SG5.Cells[0, SG5.Row];  //Nomer
    FStamTime.Label6.Caption := SG5.Cells[10, SG5.Row];  //Материал
    FStamTime.Label3.Caption := IntToStr(SG5.Col);
    FStamTime.Label4.Caption := IntToStr(SG5.Row);
    FStamTime.ShowModal;
  end;
  if (SG5.Cells[12, SG5.Row] <> '') and (SG5.Col = 13) and ((FlagDolg = 1) or (FlagDolg = 7)) then
  begin   // ГИБКА
    FStamTime.Caption := SG5.Cells[SG5.Col, 0];
    FStamTime.Label1.Caption := SG5.Cells[21, SG5.Row]; //idGP
    FStamTime.Label2.Caption := SG5.Cells[0, SG5.Row];  //Nomer
    FStamTime.Label6.Caption := SG5.Cells[10, SG5.Row];  //Материал
    FStamTime.Label3.Caption := IntToStr(SG5.Col);
    FStamTime.Label4.Caption := IntToStr(SG5.Row);
    FStamTime.ShowModal;
  end;
  if (SG5.Cells[13, SG5.Row] <> '') and (SG5.Col = 14) and ((FlagDolg = 1) or (FlagDolg = 4) or (FlagDolg = 7)) then
  begin   // СВАРКА
    FStamTime.Caption := SG5.Cells[SG5.Col, 0];
    FStamTime.Label1.Caption := SG5.Cells[21, SG5.Row]; //idGP
    FStamTime.Label2.Caption := SG5.Cells[0, SG5.Row];  //Nomer
    FStamTime.Label6.Caption := SG5.Cells[10, SG5.Row];  //Материал
    FStamTime.Label3.Caption := IntToStr(SG5.Col);
    FStamTime.Label4.Caption := IntToStr(SG5.Row);
    FStamTime.ShowModal;
  end;
  if (SG5.Cells[14, SG5.Row] <> '') and (SG5.Col = 15) and ((FlagDolg = 1) or (FlagDolg = 4) or (FlagDolg = 7)) then
  begin   // ПОКРАСКА
    FStamTime.Caption := SG5.Cells[SG5.Col, 0];
    FStamTime.Label1.Caption := SG5.Cells[21, SG5.Row]; //idGP
    FStamTime.Label2.Caption := SG5.Cells[0, SG5.Row];  //Nomer
    FStamTime.Label6.Caption := SG5.Cells[10, SG5.Row];  //Материал
    FStamTime.Label3.Caption := IntToStr(SG5.Col);
    FStamTime.Label4.Caption := IntToStr(SG5.Row);
    FStamTime.ShowModal;
  end;
  if (SG5.Cells[20, SG5.Row] <> '') and (SG5.Col = 25) and ((FlagDolg = 1) or (FlagDolg = 4) or (FlagDolg = 7)) then
  begin   // Плановая Сборка
    FStamTime.Caption := SG5.Cells[SG5.Col, 0];
    FStamTime.Label1.Caption := SG5.Cells[21, SG5.Row]; //idGP
    FStamTime.Label2.Caption := SG5.Cells[0, SG5.Row];  //Nomer
    FStamTime.Label6.Caption := SG5.Cells[10, SG5.Row];  //Материал
    FStamTime.Label3.Caption := IntToStr(SG5.Col);
    FStamTime.Label4.Caption := IntToStr(SG5.Row);
    FStamTime.ShowModal;
  end;
  if (SG5.Cells[15, SG5.Row] <> '') and (SG5.Col = 17) and ((FlagDolg = 1) or (FlagDolg = 4) or (FlagDolg = 7)) then
  begin   // Сборка Запуск
    FStamTime.Caption := SG5.Cells[SG5.Col, 0];
    FStamTime.Label1.Caption := SG5.Cells[21, SG5.Row]; //idGP
    FStamTime.Label2.Caption := SG5.Cells[0, SG5.Row];  //Nomer
    FStamTime.Label6.Caption := SG5.Cells[10, SG5.Row];  //Материал
    FStamTime.Label3.Caption := IntToStr(SG5.Col);
    FStamTime.Label4.Caption := IntToStr(SG5.Row);
    FStamTime.ShowModal;
  end;
  if (SG5.Cells[17, SG5.Row] <> '') and ((SG5.Col = 19) or (SG5.Col = 20)) and ((FlagDolg = 1) or (FlagDolg = 10)) then
  begin
    Vozduh := 3;
    FOTK.Label2.Caption := SG5.Cells[0, SG5.ROW]; //Nom
    FOTK.Label3.Caption := SG5.Cells[3, SG5.ROW]; //NAM
                //Nam
    FOTK.Label4.Caption := SG5.Cells[2, SG5.ROW]; //Zak
    FOTK.Label5.Caption := SG5.Cells[4, SG5.ROW]; //Kol
               // FOTK.Label6.Caption := ZCV.Cells[18, SG5.ROW];
                //ID
    FOTK.Label10.Caption := SG5.Cells[10, SG5.ROW];
                //ОТК
    FOTK.Label7.Caption := IntToStr(SG5.Row);
    FOTK.Label8.Caption := IntToStr(SG5.Col);
    FOTK.LabGP.Caption := SG5.Cells[21, SG5.ROW]; //IDGP
    FOTK.LabKO.Caption := '0';
                //FOTK.Caption := ZCV.Cells[0, ZCV.ROW];
    FOTK.Label13.Caption := SG5.Cells[22, SG5.ROW]; //НачНомер
    FOTK.Label15.Caption := SG5.Cells[23, SG5.ROW]; //КонНомер
    FOTK.ShowModal;
  end;
end;

procedure TForm1.SG5DrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
var
  Kol, Kol_Pr: Integer;
begin
        //and (ACol>7)
  if (ARow <> 0) then //Zag Zapusk
  begin
    if SG5.Cells[12, ARow] <> '' then
    begin
      SG5.Canvas.Brush.Color := clYellow;
      SG5.Canvas.FillRect(Rect);
      SG5.Canvas.TextOut(Rect.Left, Rect.Top, SG5.Cells[ACol, ARow]);
    end;
    if SG5.Cells[13, ARow] <> '' then   //Zag Gotov
    begin
      SG5.Canvas.Brush.Color := clOlive;
      SG5.Canvas.FillRect(Rect);
      SG5.Canvas.TextOut(Rect.Left, Rect.Top, SG5.Cells[ACol, ARow]);
    end;
    if SG5.Cells[15, ARow] <> '' then   //Zbor zap
    begin
      SG5.Canvas.Brush.Color := clLime;
      SG5.Canvas.FillRect(Rect);
      SG5.Canvas.TextOut(Rect.Left, Rect.Top, SG5.Cells[ACol, ARow]);
    end;
    if SG5.Cells[20, ARow] <> '' then   //OTK
    begin
      SG5.Canvas.Brush.Color := clGreen;
      SG5.Canvas.FillRect(Rect);
      SG5.Canvas.TextOut(Rect.Left, Rect.Top, SG5.Cells[ACol, ARow]);
    end;
    if SG5.Cells[4, ARow] = '' then
      Kol := 0
    else
      Kol := StrToInt(SG5.Cells[4, ARow]);
    if SG5.Cells[19, ARow] = '' then
      Kol_Pr := 0
    else
      Kol_Pr := StrToInt(SG5.Cells[19, ARow]);
    if (SG5.Cells[20, ARow] <> '') and (Kol > Kol_Pr) then   //OTK Не Все
    begin
      SG5.Canvas.Brush.Color := clRed;
      SG5.Canvas.FillRect(Rect);
      SG5.Canvas.TextOut(Rect.Left, Rect.Top, SG5.Cells[ACol, ARow]);
    end;

    Kol_Pr := Pos('rue', SG5.Cells[26, ARow]);
    if (Kol_Pr <> 0) then   //Срочно
    begin
      SG5.Canvas.Brush.Color := clRed;
      SG5.Canvas.FillRect(Rect);
      SG5.Canvas.TextOut(Rect.Left, Rect.Top, SG5.Cells[ACol, ARow]);
    end;

    if SG5.Cells[25, ARow] <> '' then   //Упаковка
    begin
      SG5.Canvas.Brush.Color := clMenuHighlight;
      SG5.Canvas.FillRect(Rect);
      SG5.Canvas.TextOut(Rect.Left, Rect.Top, SG5.Cells[ACol, ARow]);
    end;
  end;
end;

procedure TForm1.SG5EditingDone(Sender: TObject);
var
  Str: string;
begin
  Str := SG5.Cells[8, SG5.Row];
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [' + 'Примечание]=' + #39 + Str + #39 + ' WHERE ([IdГП]=' + #39 + SG5.Cells[21, SG5.Row] + #39 + ') AND (Номер=' + #39 + SG5.Cells[0, SG5.Row] + #39 + ') ', ['ЗапускЛЮК']) then
    Exit;
end;

procedure TForm1.SG5MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
// Эмуляция нажатия мыши
  if Button = mbRight then
    mouse_event(MOUSEEVENTF_LEFTDOWN or MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
end;

procedure TForm1.SG5MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  I, X1: Integer;
  F: Double;
  J: Integer;
  myRect: TGridRect;
  Sum: Double;
begin
  if (SG5.Col = 4) or (SG5.Col = 18) or (SG5.Col = 5) then
  begin
    Sum := 0;
    myRect := SG5.Selection;
    for I := myRect.Left to myRect.Right do
      for J := myRect.Top to myRect.Bottom do
      begin
        try
          Sum := Sum + StrToFloat(SG5.Cells[I, J]);
        except
          Break;
        end;
      end;
    StatusBar2.Panels[2].Text := FloattOsTR(Sum);

  end;
  Clear_StringGrid(SG212);
  X1 := 0;
    // myRect := ZSG.Selection;
    //for I := myRect.Left to myRect.Right do
    //  for J := myRect.Top to myRect.Bottom do
    //  begin
  SG212.Cells[0, X1] := SG5.Cells[0, SG5.row]; //Nom
  SG212.Cells[1, X1] := SG5.Cells[21, SG5.row]; //IDGP
           //SG212.RowCount:=X1+1;
          // Inc(X1);
     // end;
end;

procedure TForm1.SG5RowChanging(Sender: TObject; OldRow, NewRow: Integer; var Allow: Boolean);
begin
  SG7.RowHeights[0] := SG5.RowHeights[0];
end;

procedure TForm1.SG5SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
begin

  case ACol of
    1:
      Label203.Caption := 'Дата';
    6:
      Label203.Caption := 'Расчетная Дата готовности';
    11:
      Label203.Caption := 'Дата запуска';
    12:
      Label203.Caption := 'TRUMPF';
    13:
      Label203.Caption := 'ГИБКА';
    14:
      Label203.Caption := 'СВАРКА';
    15:
      Label203.Caption := 'ПОКРАСКА';
    16:
      Label203.Caption := 'Заготовка готовность';
    8:
      Label203.Caption := 'Планирование';
    18:
      Label203.Caption := 'Сборка Запуск';
    20:
      Label203.Caption := 'ОТК';
    25:
      Label203.Caption := 'Упаковка';
  end;
  SG7.FocusCell(0, ARow);
  if (SG5.Col = 8) and ((FlagDolg = 1) or (FlagDolg = 7)) then
  begin
    SG5.Options := SG5.Options + [goEditing];
  end;
end;

procedure TForm1.SG5TopLeftChanged(Sender: TObject);
begin
  SG7.TopRow := SG5.TopRow;
end;

procedure TForm1.SG6DblClick(Sender: TObject);
var
  Nom_pos, Kol_Raz, Nomer_Raz: string;
  kol_zap, kol, kol1, Res, Res1, Res2,I: Integer;
begin
  Vozduh := 1;
  if SG6.Col = I_FN_FILE then
    FBriket.Show;

  if (SG6.Col = I_FN_TEHNOLOG) and ((Regist.Doljnost = 1) or (Regist.Doljnost = 2)) then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where  (технолог= ' + #39 + '0' + #39 + ') AND ([примечание]= ' + #39 + '0' + #39 + ') and ((колнаед= ' + #39 + '310' + #39 + ') or (колнаед= ' + #39 + '330' + #39 + ') or (колнаед= ' + #39 + '400' + #39 + ') or (колнаед= ' + #39 + '520' + #39 + ') or (колнаед= ' + #39 + '525' + #39 + ') or (колнаед= ' + #39 + '530' + #39 + '))  AND ( Изделие = ' + #39 + '%s' + #39 + ')', ['СпецифОбщая', StringGrid10.Cells[I_FN_NAM, SG6.Row]]) then
      exit;
    if ADOQuery2.RecordCount <> 0 then
    begin
      MessageDlg('Не все детали обработаны в ПЕРЕДЕЛАХ! ', mtError, [mbOk], 0);
      Exit;
    end;
    FNomer.Caption := StringGrid10.Cells[I_FN_NAM, SG6.Row];
    FNomer.Label2.Caption := StringGrid10.Cells[I_FN_ZAK, SG6.Row];
    FNomer.Label3.Caption := FN_TEHNOLOG;
    FNomer.DateTimePicker1.Visible := True;
    FNomer.Edit1.Visible := False;
    FNomer.ComboBox1.Visible := False;
    FNomer.ComboBox2.Visible := False;
    FNomer.Label4.Caption := IntToStr(SG6.Row);
    FNomer.Label5.Caption := IntToStr(SG6.Col);
    FNomer.Show;
  end;
  if (SG6.Col = I_FN_TEHNOLOG_GOTOV) and (SG6.Cells[I_FN_TEHNOLOG, SG6.Row] <> '') and ((FlagDolg = 1) or (Regist.Doljnost = 2)) then
  begin

    FNomer.Caption := StringGrid10.Cells[I_FN_NAM, SG6.Row];
    FNomer.Label2.Caption := StringGrid10.Cells[I_FN_ZAK, SG6.Row];
    FNomer.Label3.Caption := FN_TEHNOLOG_GOTOV;
    FNomer.DateTimePicker1.Visible := True;
    FNomer.ComboBox1.Visible := False;
    FNomer.ComboBox2.Visible := False;
    FNomer.Edit1.Visible := False;
    FNomer.Label4.Caption := IntToStr(SG6.Row);
    FNomer.Label5.Caption := IntToStr(SG6.Col);
    FNomer.Show;
  end;

  if (SG6.Col = I_FN_PR_OTK) and (SG6.Cells[I_FN_SBOR_GOT, SG6.Row] <> '') then
  begin
    FNomer.Caption := StringGrid10.Cells[I_FN_NAM, SG6.Row];
    FNomer.Label2.Caption := StringGrid10.Cells[I_FN_ZAK, SG6.Row];
    FNomer.Label3.Caption := FN_PR_OTK;
    FNomer.DateTimePicker1.Visible := True;
    FNomer.Edit1.Visible := True;
    FNomer.Show;
  end;

  if (SG6.Col = I_FN_DAT_OTGRUZ) and (SG6.Cells[I_FN_PR_OTK, SG6.Row] <> '') then
  begin
    FNomer.Caption := StringGrid10.Cells[I_FN_NAM, SG6.Row];
    FNomer.Label2.Caption := StringGrid10.Cells[I_FN_ZAK, SG6.Row];
    FNomer.Label3.Caption := 'Упаковка';
    FNomer.DateTimePicker1.Visible := True;
    FNomer.ComboBox1.Visible := False;
    FNomer.ComboBox2.Visible := False;
    FNomer.Edit1.Visible := False;
    FNomer.Label4.Caption := IntToStr(SG6.Row);
    FNomer.Label5.Caption := IntToStr(SG6.Col);
    FNomer.Show;
  end; //or (SG6.Col = I_FN_PLAN_PRIM  )

  if (SG6.Col = I_FN_TEHNOLOG_PRIM) or (SG6.Col = I_FN_SBOR_PRIM) or (SG6.Col = I_FN_PR_OTK_PRIM) then
  begin
    FPrim.Caption := StringGrid10.Cells[I_FN_NAM, SG6.Row];
    FPrim.Label6.Caption := StringGrid10.Cells[I_FN_SGP + 2, SG6.Row]; // IdГП
    FPrim.Label2.Caption := StringGrid10.Cells[I_FN_SGP + 3, SG6.Row];  //  IdКО
    FPrim.Label3.Caption := SG6.Cells[SG6.Col, 0];
    FPrim.Label4.Caption := IntToStr(SG6.Row);
    FPrim.Label5.Caption := IntToStr(SG6.Col);
    //FPrim.Memo1.lines.Add(SG6.Cells[SG6.Col, SG6.Row]);
    FPrim.Memo1.Lines.Clear;
    FPrim.Memo2.Lines.Clear;
    FPrim.Memo1.Text:=(SG6.Cells[SG6.Col, SG6.Row]);
    for I := 0 to FPrim.Memo1.Lines.Count-1 do
      begin
        if FPrim.Memo1.Lines.Strings[i]<>'' then
        FPrim.Memo2.Lines.Add(FPrim.Memo1.Lines.Strings[i]);
      end;
      FPrim.Memo1.Lines.Clear;
      FPrim.Memo1.Text:=FPrim.Memo2.Text;
    FPrim.Show;
  end;
    Res1:=Pos('Матвеенко',Regist.Famili);
  if (SG6.Col = I_FN_SBOR_KLAP_NC) and (((FlagDolg = 2)  and (Res1<>0)) or (FlagDolg = 1))  then
  begin
    {Res := AnsiCompareStr('0', StringGrid10.Cells[I_FN_B, StringGrid10.Row]);
    Res1 := Pos('КПУ', StringGrid10.Cells[I_FN_NAM, SG6.Row]);
    Res2 := Pos('2*ф', StringGrid10.Cells[I_FN_NAM, SG6.Row]);
    if (Res <> 0) then
      Exit;
    Res1 := Pos('ГЕРМИК-ДУ', StringGrid10.Cells[I_FN_NAM, SG6.Row]);
    if (Res1 <> 0) then
      Exit;
    Res1 := Pos('КЭД', StringGrid10.Cells[I_FN_NAM, SG6.Row]);
    if (Res1 <> 0) then
      Exit;  }
    FNorm.Caption := StringGrid10.Cells[I_FN_ZAK, SG6.Row];
    FNorm.Label3.Caption := StringGrid10.Cells[I_FN_NAM, SG6.Row];
    FNorm.Label4.Caption := StringGrid10.Cells[I_FN_KOL, SG6.Row];
    FNorm.Show;
  end;
  if (SG6.Col = I_FN_SVARKA_NC) and ((FlagDolg = 2)  and (Res1<>0)) then
  begin
   { Res := AnsiCompareStr('0', StringGrid10.Cells[I_FN_B, StringGrid10.Row]);
    Res1 := Pos('КПУ', StringGrid10.Cells[I_FN_NAM, SG6.Row]);
    Res2 := Pos('2*ф', StringGrid10.Cells[I_FN_NAM, SG6.Row]);
    if (Res1<>0)  AND (Res<>0) AND (FlagDolg <> 1) then
       Exit;
    Res1 := Pos('ГЕРМИК-ДУ', StringGrid10.Cells[I_FN_NAM, SG6.Row]);
    if (Res1 <> 0) and (FlagDolg <> 1) then
      Exit;
    Res1 := Pos('КЭД', StringGrid10.Cells[I_FN_NAM, SG6.Row]);
    if (Res1 <> 0) and (FlagDolg <> 1) then
      Exit;  }
    FNorm.Caption := StringGrid10.Cells[I_FN_ZAK, SG6.Row];
    FNorm.Label3.Caption := StringGrid10.Cells[I_FN_NAM, SG6.Row];
    FNorm.Label4.Caption := StringGrid10.Cells[I_FN_KOL, SG6.Row];
    FNorm.Show;
  end;
end;

procedure TForm1.SG6TopLeftChanged(Sender: TObject);
begin

  StringGrid10.TopRow := SG6.TopRow;
  StringGrid9.TopRow := SG6.TopRow;

end;

procedure TForm1.SG7DblClickCell(Sender: TObject; ARow, ACol: Integer);
begin
  if SG7.Cells[0, ARow] = '' then
    SG7.Cells[0, ARow] := 'V'
  else
    SG7.Cells[0, ARow] := ''
end;

procedure TForm1.SG7SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
begin
  FSelectRow(SG5, SG7.Row);
end;

procedure TForm1.SG8DblClick(Sender: TObject);
begin
  SG8.Group(1);
end;

procedure TForm1.SG6MouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin

  Handled := true;
  SG6.Perform(WM_VSCROLL, SB_LINEDOWN, 0);

end;

procedure TForm1.SG6MouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin
  Handled := true;
  SG6.Perform(WM_VSCROLL, SB_LINEUP, 0);

end;

procedure TForm1.StringGrid10SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
var
  Str1: string;
begin
  FSelectRow(StringGrid9, ARow);
  FSelectRow(SG6, ARow);

  TmpCol := ACol;
  tmpRow := ARow;

end;

procedure TForm1.SG6SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
begin

  FSelectRow(StringGrid9, ARow);
  FSelectRow(StringGrid10, ARow);

  RowG := ARow;
  TmpCol := ACol;
  TmpRow := ARow;
end;

procedure TForm1.ZSGMouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin
  Handled := true;
  ZSG.Perform(WM_VSCROLL, SB_LINEDOWN, 0);

end;

procedure TForm1.ZSGMouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin

  Handled := true;
  ZSG.Perform(WM_VSCROLL, SB_LINEUP, 0);

end;

procedure TForm1.DateTimePicker1Change(Sender: TObject);
begin
  DateTimePicker2.DateTime := DateTimePicker1.DateTime;
  DateTimePicker3.DateTime := DateTimePicker1.DateTime;
end;

procedure TForm1.DateTimePicker4Change(Sender: TObject);
begin
  DateTimePicker5.DateTime := DateTimePicker4.DateTime;
end;

procedure TForm1.DelClick(Sender: TObject);
begin
  if MessageDlg('Подумай! Удалить?', mtConfirmation, [mbYes, mbNo], 0) = mrNo then
    Exit
  else
  begin
    if not Form1.mkQueryDelete(Form1.ADOQuery1, 'DELETE FROM %s Where (IdГП= ' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39 + ') ', ['Специф']) then
      Exit;
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Статус]=' + #39 + '0' + #39 + ',[СтатусФ]=' + #39 + '0' + #39 + ',[СПисокФ]=' + #39 + '' + #39 + ' WHERE ([IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39 + ')', ['Klapana']) then
      Exit;

  end;

        {if not Form1.mkQueryDelete(Form1.ADOQuery1,
                'DELETE FROM %s Where  (Заказ=' +
                #39 + StringGrid10.Cells[I_FN_ZAK, StringGrid10.Row] + #39 +
                ') AND (Изделие='
                + #39 + StringGrid10.Cells[I_FN_NAM, StringGrid10.Row] + #39 +
                ')',
                ['Klapana']) then
                Exit;
        if not Form1.mkQueryDelete(Form1.ADOQuery1,
                'DELETE FROM %s Where  (Заказ=' +
                #39 + StringGrid10.Cells[I_FN_ZAK, StringGrid10.Row] + #39 +
                ') AND (Изделие='
                + #39 + StringGrid10.Cells[I_FN_NAM, StringGrid10.Row] + #39 +
                ')',
                ['Запуск']) then
                Exit;}
end;

procedure TForm1.PopupKPU_LPopup(Sender: TObject);
var
  S: Integer;
begin
  if SG6.Cells[I_FN_OTMENA + 1, SG6.Row] = '' then
    S := 0
  else
    S := StrToInt(SG6.Cells[I_FN_OTMENA + 1, SG6.Row]);
  if S = 0 then            //SG6.Cells[I_FN_OTMENA + 1, 0]
    N80.Visible := True
  else
    N80.Visible := False;
end;

procedure TForm1.PopupVOZD_LPopup(Sender: TObject);
var
  S: Integer;
begin
  if StringGrid6.Cells[24, StringGrid6.Row] = '' then
    S := 0
  else
    S := StrToInt(StringGrid6.Cells[24, StringGrid6.Row]);
  if S = 0 then            //SG6.Cells[I_FN_OTMENA + 1, 0]
    N81.Visible := True
  else
    N81.Visible := False;
end;

procedure TForm1.BitBtn5Click(Sender: TObject);
begin
  if SG6.Col = 2 then
    Order := ' ORDER BY [Привод] '
  else
    Order := ' ORDER BY [' + SG6.Cells[SG6.Col, 0] + ']';
  Button16.Click;
end;

procedure TForm1.BitBtn6Click(Sender: TObject);
begin
  if SG6.Col = 2 then
    Order := ' ORDER BY [Привод] DESC'
  else
    Order := ' ORDER BY [' + SG6.Cells[SG6.Col, 0] + '] DESC';
  Button16.Click;
end;

procedure TForm1.Button14Click(Sender: TObject);
var
  XL_Temp: Variant;
begin
  Zapusk2 := 0;
  FZapusk.F_Rasf := 0;
  FNewNakl.ShowModal;
end;

procedure TForm1.Button20Click(Sender: TObject);
var
  I, Res, Zap, Zap1, Zag, Sbor, KolI, Res_K, ID: Integer;
  XL1, XL_TEMP, Sh: Variant;
  Parent, Vid, Elem, Kol_Ed, Kol, EI, Obozn, Typ, Kateg, Prim, Diam, Massa, Dlina, Shir, Dlin_Raz, Shir_Raz, Obem, Kol_Gib, Kanban, Mater, Kompl_Ved, Trumpf, Nog, Uglorub, Gibka, Prokat, Pila, Naim, Naim_Izdel, Grupp, Rout, Varian, Str2, IDGP, Str, Kod, Zak, God, Dat, Obozn_Sh: string;
  vSocket: TSocket;
  vRemote: sockaddr_in;
  vWSAData: WSAData;
  vReply: AnsiString;
  w: Double;
  s: string;
  F, SR: TSearchRec;
  Path: string;
  Attr, FindRes: Integer;
  j, PosZ, Res1, Res2, Res3, Res4, ColSum, FF, Res_C1, Res_C2, Res_G3, Res_N, Res_G2, Res_G1, Res_P, Res_GC, Res_GN, Res_KMKP, Res_KCKP_A, Res_eko1, Res_eko2, Res_eko3, Res_EKVO, kl, Res_Shum, Res_Filtr, Res_Teplo, Res_Semistor, PosTrud, Kol_I, c, Res_Ten, Res_AK, Res_AK1, OSA, //16 Колонка Комплект для идентификации нужных деталей если вентиляторов несколько
G, GG, Res5, Res6, Res7, Res8, Res9, Res10, Res11, Res12, res13: Integer;
  NewCheckBox: TCheckBox;
  ChecBol: Boolean;
  StrDat, Data, mes, Dir, Str1, ZNum, Briket, Briket1, Briket2, Br3, KCKP, KC, KC_TYP, KC_Ras, Moch, Moch1, Priemka, Izdel: string;
  Dat1: TDate;
  Moch_EKO, Moch_Ten, KC_Ras_f, Kol_Ten, Dlin, Sbor_NC, Rez_NC, Gib_NC: Double;
  Moch_EKO_S, Moch_Ten_S, KC_Ras_f_S, Kol_Ten_S, Dlin_S, Sbor_NC_S, Rez_NC_S, Gib_NC_S, Kompl, bz, DatGot, NachNom, KonNom, NachKod, KonKod, Otmen, DatOtmen, DatOtmen1, Dop: string;
  EKO: array[0..50, 0..50] of Double;
  XL: Variant;
  IDKO, Zakaz, DatZak, Tip, Grup, Izdelie, Izdelie3, GrupGP, IzdelGP, Poluch, PR, Komplekt, BZ_KC, d, Sklad_I, BZ_PUST, IZDEL_PUST: string;
  Nomer1, Nomer2: Integer; //Найти все номера из диапазона (Для Автоматики)
  Max, Ne_Nuj, Ne_Got, Res_PR: Integer;
  IZNal, Sklad, Up_Log, UP, Menedg, Prim_Of, Data1: string;
begin


                             // ALTER procedure [dbo].[Импорт]
  try
    mkQuerySelect(ADOQuery1, 'EXEC	[dbo].[Импорт_ПЛ] @date1 = ' + #39 + '03.08.2018' + #39 + ',@s = ' + #39 + '010,020,520,' + #39, []); //'Select * from  dbo.[импорт](' + #39 + '03.08.2018' + #39 + ',' + #39 + '010,020,' +  #39 + ')  ', []);
  except
    MessageDlg('Не удалось подключиться к базе данных!', mtError, [mbOk], 0);
    Exit;
  end;
  I := ADOQuery1.RecordCount;
  for I := 0 to ADOQuery1.RecordCount - 1 do
  begin
    Memo2.Lines.Add(ADOQuery1.FieldByName('IdГП').AsString);
    IDGP := Trim(ADOQuery1.FieldByName('IdГП').AsString);
    IDKO := Trim(ADOQuery1.FieldByName('IdКО').AsString);
    DatZak := Trim(ADOQuery1.FieldByName('ДатаЗаказа').AsString);

    DatZak := ConvertDat1(DatZak);
    Memo1.Lines.Add(DatZak);
    Zakaz := Trim(ADOQuery1.FieldByName('Заказ').AsString);
    bz := Trim(ADOQuery1.FieldByName('БЗ').AsString);
    Tip := Trim(ADOQuery1.FieldByName('Тип').AsString);
    Grup := Trim(ADOQuery1.FieldByName('Группа').AsString);
             //after  := StringReplace(before, ' a ', ' THE ',
             //             [rfReplaceAll, rfIgnoreCase]);
    Izdelie := StringReplace(Trim(ADOQuery1.FieldByName('Изделие').AsString), '%', 'проц.', [rfReplaceAll, rfIgnoreCase]);
    GrupGP := Trim(ADOQuery1.FieldByName('ГруппаГП').AsString);
    IzdelGP := Trim(ADOQuery1.FieldByName('ИзделиеГП').AsString);

    Kol := Trim(ADOQuery1.FieldByName('Кол-во').AsString);
    Kol_I := StrToInt(Kol);
    Poluch := Trim(ADOQuery1.FieldByName('Получатель').AsString);
    PR := Trim(ADOQuery1.FieldByName('Производитель').AsString);
    DatGot := Trim(ADOQuery1.FieldByName('ДатаГотОфис').AsString);

    DatGot := ConvertDat1(DatGot);
    NachNom := Trim(ADOQuery1.FieldByName('НачНомер').AsString);
    if NachNom = '' then
      NachNom := '0';
    KonNom := Trim(ADOQuery1.FieldByName('КонНомер').AsString);
    if KonNom = '' then
      KonNom := '0';
    NachKod := Trim(ADOQuery1.FieldByName('НачКод').AsString);
    if NachKod = '' then
      NachKod := '0';
    KonKod := Trim(ADOQuery1.FieldByName('КонКод').AsString);
    if KonKod = '' then
      KonKod := '0';
    Otmen := Trim(ADOQuery1.FieldByName('Отмена').AsString);
    Komplekt := Trim(ADOQuery1.FieldByName('Комплект').AsString);
    if Komplekt = '' then
      Komplekt := '0';
    Prim := Trim(ADOQuery1.FieldByName('Особенности').AsString);
    d := Trim(ADOQuery1.FieldByName('ДатаОтмены').AsString);
    DatOtmen := Trim(ADOQuery1.FieldByName('ДатаОтмены').AsString);
    if DatOtmen = '' then
      DatOtmen := 'NULL'
    else
    begin   //
      DatOtmen1 := ConvertDat1(DatOtmen);
      DatOtmen := (DatOtmen1);

    end;
  end;

  {Искать все файлы в заданной директории с расширение .wav}
  Path := 'V:\КТО\_Развертки new\СТАМ 18.05.2018\';
  {которые имеют атрибуты "Только для чтения" и "Архивный"}
  Attr := faAnyFile;
  s := 'VG230.00.00.003-04.GEO';

 //FindFiles(Path,S , Memo2.Lines, True);
 //GetAllFiles('V:\КТО\_Развертки new\СТАМ 18.05.2018\');
 { WSAStartup(02, vWSAData);
  vSocket := Socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
  vRemote.sin_family := AF_INET;
  vRemote.sin_port := ntohs(StrToInt(Edit7.Text));
                                                     // 'time.nist.gov' ntp3.stratum2.ru
  vRemote.sin_addr := TInAddr(Pointer((GetHostByName(PAnsiChar(Edit3.Text)))^.h_addr_list^)^);
  Connect(vSocket, vRemote, SizeOf(sockaddr_in));
  SetLength(vReply, $100);
  SetLength(vReply, recv(vSocket, vReply[1], $100, 0));
  Memo2.Lines.Add(vReply);
 //Объявим и заполним структуру sockaddr_in
var
SAddr : sockaddr_in;
//Указажем адрес и порт на сервере
SAddr.sin_family      := AF_INET;
SAddr.sin_port        := htons(31337);
//Указываем ip сервера, используя функцию inet_addr для перевода ip из cтроки   //в понятный функции вид
SAddr.sin_addr.s_addr := inet_addr('127.0.0.1');
//Устанавливаем соединение, приводя структуру sockaddr_in к типу sockaddr
if connect(sock, SAddr, sizeof(struct sockaddr_in)) <> 0 then
    Exit;          ID:=0;
Clear_StringGrid(SG1);
        if OpenDialog2.Execute then
        begin
                Str := OpenDialog2.FileName;
                Xls_To_StringGrid(SG1, Str, 'ф'+Edit3.Text);
        end
        else
        Exit;
         if not mkQueryUpdate(ADOQuery1,
         'UPDATE %s SET  [ШиринаПолки1]='+#39+'0'+#39+',ШиринаПолки2='+#39+'0'+#39+
         ' WHERE ШиринаПолки1 IS NULL',
         ['ШАБЛОН']) then
         Exit;
         if not mkQueryUpdate(ADOQuery1,
         'UPDATE %s SET  [ШиринаПолки1]='+#39+'0'+#39+',ШиринаПолки2='+#39+'0'+#39+
         ' WHERE ШиринаПолки1 IS NULL',
         ['ШАБЛОНСТАМ']) then
         Exit;
         if not mkQueryUpdate(ADOQuery1,
         'UPDATE %s SET  [HACO]='+#39+'False'+#39+',Ротор='+#39+'False'+#39+

         ',Вальцы='+#39+'False'+#39+ ',Кромкогиб='+#39+'False'+#39+',Токарный='+#39+'False'+#39,
         ['ШАБЛОН']) then
         Exit;}
         {if not Form1.mkQueryDelete( Form1.ADOQuery1, 'DELETE FROM %s Where (Элемент= '+#39+#39+') OR (Элемент IS NULL)'  ,
         ['Шаблон'] )
         Then
         Exit; }
       { if not mkQueryUpdate(ADOQuery1,

          ' UPDATE Z   Set Z.[Расчетная дата готовности] = S.[Расчетная дата готовности]'+
          ' FROM ЗапускСТАМ as Z INNER JOIN СТАМ as S'+
          ' ON  S.IDГП = Z.IDГП', []) then
           //mysql> UPDATE nomenclature AS t1, nomenclature AS t2 SET t1.id = t2.id WHERE t1.id = t2.id;
         Exit; }
       {  update e set salary = salary * 2
  from dbo.employee       as e
    inner join dbo.depart as d on d.id = e.depart_id if not mkQueryUpdate(ADOQuery1,
         'UPDATE %s SET  Количество=Replace(Специф.Количество,''.',',')'
           ,
         ['Специф']) then
         Exit;
         end;
         if not mkQueryUpdate(ADOQuery1,
         'UPDATE %s SET  [Кол во запущенных]='+#39+'0'+#39+',[Кол во запущенных пос]='+#39+'0'+#39+
         ' ,[Номер]='+#39+'0'+#39+ ',[Номер раз]='+#39+'0'+#39+ ',[Кол раз]='+#39+'0'+#39+
         ' WHERE (IdГП='+#39+'514545'+#39+') OR (IdГП='+#39+'514551'+#39+') OR (IdГП='+#39+'514532'+#39+')' ,
         ['KlapanaZap']) then
         Exit;
         if not mkQueryUpdate(ADOQuery1,
         'Delete From %s '+
         ' WHERE (IdГП='+#39+'514545'+#39+') OR (IdГП='+#39+'514551'+#39+') OR (IdГП='+#39+'514532'+#39+')' ,
         ['ЗапускВозд']) then
         Exit; }

end;

procedure TForm1.Button25Click(Sender: TObject);
begin
  FRasform.ShowModal;
end;

procedure TForm1.Action1Execute(Sender: TObject);
begin
  if Button17.Visible = False then
  begin
    Memo2.Visible := True;
    Memo14.Visible := True;
                //Panel2.Align := alBottom;
    Button17.Visible := True;
    Del.Visible := True;
    MenuItem1.Visible := True;
    n5.Visible := True;
    ClearSbor.Visible := True;
  end
  else
  begin
    Memo2.Visible := False;
    Memo14.Visible := False;
                //Panel2.Align := alNone;
    Button17.Visible := False;
    Del.Visible := False;
    MenuItem1.Visible := False;
    n5.Visible := False;
    ClearSbor.Visible := False;
  end;
end;

procedure TForm1.Timer1Timer(Sender: TObject);
var
  Dat: TDateTime;
  myHour, myMin, mySec, myMilli: Word;
begin
  Dat := Now;
  DecodeTime(Dat, myHour, myMin, mySec, myMilli);
  if myHour = 0 then
    Form1.Close;
end;

procedure TForm1.Button24Click(Sender: TObject);
var
  XL, XL1, XL2: Variant;
  Dir, Izdel, Nam, Pos1, Pos2, Pos3, Pos4, Pos5, Pos6, Pos7, A, B, L, EPV_S, Mod_S, S: string;
  R: Double;
  Res, Pos_Zv, Pos_P, Pos_TF, Pos_LF, POs_NF, Pos_SF, pos_LM, Pos_NM, Pos_SM, Pos_GM, EPV, Pos_S: Integer;
begin
        //Клапан РЕГУЛЯР-0525-0575-Н-П-12-00-00-У2 для Кондиционер КЦКП-3,15
        //Клапан РЕГУЛЯР-1075-1135-Н-П-04-00-00-У2
        //Клапан РЕГУЛЯР-1000*1000-Н-M230-S_NM230A-S-П
        //Клапан РЕГУЛЯР-1000*820-Н-1*ручной-П
        //Клапан РЕГУЛЯР-Л-200*600-Н-1*ручной

  Pos_TF := Pos('TF', Izdel);
  Pos_LF := Pos('LF', Izdel);
  POs_NF := Pos('NF', Izdel);
  Pos_SF := Pos('SF', Izdel);
  pos_LM := Pos('LM', Izdel);
  Pos_NM := Pos('NM', Izdel);
  Pos_SM := Pos('SM', Izdel);
  Pos_GM := Pos('GM', Izdel);
        //======================================== ЭПВ
  EPV := Pos('EPV', Izdel);
  if EPV <> 0 then
  begin
    EPV_S := Copy(Izdel, EPV - 1, 3);
  end;
  if (Pos_TF <> 0) or (Pos_LF <> 0) or (POs_NF <> 0) or (Pos_SF <> 0) or (pos_LM <> 0) or (Pos_NM <> 0) or (Pos_SM <> 0) or (Pos_GM <> 0) then
  begin
    Delete(Izdel, 1, Pos_TF - 1);
    Res := Pos('-', Izdel);
    S := Copy(Izdel, 1, Res + 1);
    Pos_S := AnsiCompareStr('S', S);
    if Pos_S = 0 then
      Mod_S := Copy(Izdel, 1, Res + 1)
    else
      Mod_S := Copy(Izdel, 1, Res)
  end;

        //Izdel:=ComboBox6.Text;
  Pos_Zv := Pos('*', Izdel);
  if Pos_Zv = 0 then
  begin

    Memo2.Lines.Add(Izdel);
    Res := Pos(' ', Izdel);
    Delete(Izdel, 1, Res);
                //======================================== РЕГУЛЯР
    Res := Pos('-', Izdel);
    Nam := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                //========================================
    Res := Pos('-', Izdel);
    if Res = 2 then
    begin
      L := Copy(Izdel, 1, Res - 1);
      Delete(Izdel, 1, Res);
    end;
    Res := Pos('-', Izdel);
    A := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                //========================================
    Res := Pos('-', Izdel);
    B := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);

                //========================================
    Res := Pos('-', Izdel);
    Pos1 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                //========================================
    Res := Pos('-', Izdel);
    Pos2 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                //========================================
    Res := Pos('-', Izdel);
    Pos3 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                //========================================
    Res := Pos('-', Izdel);
    Pos4 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                //========================================
    Res := Pos('-', Izdel);
    Pos5 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                //========================================
    Res := Pos(' ', Izdel);
    Pos6 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                //========================================
    Memo2.Lines.Add(Nam + '   ' + A + '  ' + B + '  ' + Pos1 + '  ' + Pos2 + '  ' + Pos3 + '  ' + Pos4 + '  ' + Pos5 + '  ' + Pos6 + '  ' + Pos7);
  end;
        //Клапан РЕГУЛЯР-0525-0575-Н-П-12-00-00-У2 для Кондиционер КЦКП-3,15
      //Клапан РЕГУЛЯР-1075-1135-Н-П-04-00-00-У2
      //Клапан РЕГУЛЯР-1000*1000-Н-M230-S_NM230A-S-П
      //Клапан РЕГУЛЯР-1000*820-Н-1*ручной-П
      //Клапан РЕГУЛЯР-Л-200*600-Н-1*ручной
  Pos_Zv := Pos('*', Izdel);
  if Pos_Zv <> 0 then
  begin
    Memo2.Lines.Add(Izdel);
    Res := Pos(' ', Izdel);
    Delete(Izdel, 1, Res);
                //======================================== РЕГУЛЯР
    Res := Pos('-', Izdel);
    Nam := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                //========================================
    Res := Pos('-', Izdel);
    if Res = 2 then
      L := Copy(Izdel, 1, Res - 1);
    Res := Pos('*', Izdel);
    A := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                //========================================
    Res := Pos('-', Izdel);
    B := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                //========================================
    Pos_Zv := Pos('*', Izdel);
    Pos_P := Pos('_', Izdel);
    Mod_S := Copy(Izdel, 1, Res - 1);
                //========================================
    Res := Pos('-', Izdel);
    Pos1 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                //========================================
    Res := Pos('-', Izdel);
    Pos2 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                //========================================
    Res := Pos('-', Izdel);
    Pos3 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                //========================================
    Res := Pos('-', Izdel);
    Pos4 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                //========================================
    Res := Pos('-', Izdel);
    Pos5 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                //========================================
    Res := Pos(' ', Izdel);
    Pos6 := Copy(Izdel, 1, Res - 1);
    Delete(Izdel, 1, Res);
                //========================================
    Memo2.Lines.Add(Nam + '   ' + A + '  ' + B + '  ' + Pos1 + '  ' + Pos2 + '  ' + Pos3 + '  ' + Pos4 + '  ' + Pos5 + '  ' + Pos6 + '  ' + Pos7);
  end;
end;

procedure TForm1.Button26Click(Sender: TObject);
var
  h: hwnd;
begin
  ShellExecute(h, 'open', PWideChar(Put_KTO + '\CKlapana\Обработка клапанов'), nil, nil, SW_SHOW);
end;

procedure TForm1.Button27Click(Sender: TObject);
begin
  FVozKl.ShowModal;
end;

procedure TForm1.Button28Click(Sender: TObject);
var
  I, Col1, Col2, God, Mes: Integer;
  Date1: TDate;
  Dat, Dat1, S, DatTimS, Zag_got, Betwe1, SQL_Str, Grupp, Str1, EM1: string;
  DatTim: TDateTime;
begin
  DatTim := NoW;
  DatTimS := DateTimeToStr(DatTim);

  Memo2.Lines.Add('List1  ' + DatTimS);
        //Order:=' ORDER BY ';
      {Все
      Не обработанные технологом
      Не обработанные программистом
      Сформированные
      Не сформированные
      Не запущенные
      Запущенные
      Запущенные(часть)
      Готовые
      Отмененые
      Не готовые
      Собранные }
  SQL_Str := '';
     { if not mkQuerySelect(ADOQuery2,
                                'Select * from %s  Where (Технолог=' +#39+ 'False'+#39 +
                                        ')',
                                ['ШаблонВоз']) then
                                exit; }

  case cbb1.ItemIndex of
    0:
      Grupp := ' AND (Код=' + #39 + '520' + #39 + ') ';
    1:
      Grupp := ' AND (Код=' + #39 + '525' + #39 + ') ';
    2:
      Grupp := ' AND (Код=' + #39 + '530' + #39 + ') ';
    3:
      Grupp := ' AND (Код=' + #39 + '400' + #39 + ') ';
  else
    Grupp := ' ';
  end;
       // Label112.Caption:=IntToStr(ADOQuery2.RecordCount);
  if Order2 = '' then
    Order2 := ' ORDER BY [Дата] DESC';
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if ((ComboBox16.ItemIndex = 0) or (ComboBox16.ItemIndex = -1) or (ComboBox16.Text = '')) and (ComboBox17.ItemIndex <> 0) and (ComboBox17.Text <> '') then
  begin
    if ComboBox17.ItemIndex = -1 then
      God := StrToInt(ComboBox17.Text)
    else
      God := StrToInt(ComboBox17.Items[ComboBox17.ItemIndex]);
    Dat := '12.31.' + IntToStr(God - 1);
    Dat1 := '12.31.' + IntToStr(God);
    Betwe1 := ' AND (Дата BETWEEN ' + #39 + Dat + #39 + ' AND ' + #39 + Dat1 + #39 + ') ';
  end;
  if (ComboBox17.ItemIndex <> 0) and (ComboBox13.Text <> '') and (ComboBox16.ItemIndex <> 0) and (ComboBox16.ItemIndex <> -1) and (ComboBox16.Text <> '') then
  begin
    if ComboBox17.ItemIndex = -1 then
      God := StrToInt(ComboBox17.Text)
    else
      God := StrToInt(ComboBox17.Items[ComboBox17.ItemIndex]);
    Mes := ComboBox16.ItemIndex;
    Dat := IntToStr(Mes) + '.01' + '.' + IntToStr(God);
    if Mes = 12 then
      Dat1 := '01.01.' + IntToStr(God + 1)
    else
    begin
      if (Mes + 1) < 10 then
        Dat1 := '0' + IntToStr(Mes + 1) + '.01.' + IntToStr(God)
      else
        Dat1 := IntToStr(Mes + 1) + '.01.' + IntToStr(God);
    end;
    Betwe1 := ' AND (Дата>= ' + #39 + Dat + #39 + ' AND Дата<' + #39 + Dat1 + #39 + ') ';
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if (ComboBox15.ItemIndex = 0) or (ComboBox15.ItemIndex = -1) then
  begin
    SQL_Str := 'Select * from %s Where (Х IS NULL)  AND (Отмена IS NULL)';
  end;
        //=============================================================================== Не обработанные технологом
  if (ComboBox15.ItemIndex = 1) then
  begin
    SQL_Str := 'Select * from %s Where ([' + FN_TEHNOLOG + '] IS NULL)  AND (Х IS NULL) AND (Отмена IS NULL) ';
  end;
        //===============================================================================Не обработанные программистом
  if (ComboBox15.ItemIndex = 2) then
  begin
    SQL_Str := 'Select * from %s Where (NOT [' + FN_TEHNOLOG + '] IS NULL) AND ([' + FN_TEHNOLOG_GOTOV + '] IS NULL )  AND (Х IS NULL) AND (Отмена IS NULL)';
  end;

        //===============================================================================Сформированные
  if (ComboBox15.ItemIndex = 3) then
  begin
    SQL_Str := 'Select * from %s Where' + '([' + FN_ZAG_ZAP + '] IS NULL) AND ([' + FN_ZAG_GOT + '] IS NULL) AND  (Номер<>0) AND (Х IS NULL) AND (Отмена IS NULL) AND (пр=' + #39 + 'МИ' + #39 + ') AND (Отмена IS NULL)';
  end;
        //===============================================================================не Сформированные
  if (ComboBox15.ItemIndex = 4) then
  begin
    SQL_Str := 'Select * from %s Where (([' + FN_KOL_ZAP + ']=0) OR ([' + FN_KOL_ZAP + ']<[' + FN_KOL + '] )) AND (Х IS NULL) AND (Отмена IS NULL) ';
  end;
        //===============================================================================не Запущен
  if (ComboBox15.ItemIndex = 5) then
  begin
    SQL_Str := 'Select * from %s Where ([Запуск]=0) AND ([Кол во запущенных]<>0) ' + 'AND (Х IS NULL) AND (Отмена IS NULL)  ';
  end;
        //=============================================================================== Запущен на заготовку
  if (ComboBox15.ItemIndex = 6) then
  begin
    SQL_Str := 'Select * from %s Where ( [Запуск] <>0) AND (Х IS NULL)' + ' AND ( [Заготовка] <>0) AND (Отмена IS NULL) ';
  end;
        //=============================================================================== Запущен на сборку
  if (ComboBox15.ItemIndex = 7) then
  begin
    SQL_Str := 'Select * from %s Where ( [Запуск1] <>0) AND ' + ' ([Сборка] <>0) AND (Х IS NULL) AND (Отмена IS NULL) ';
  end;
//
  if (ComboBox15.ItemIndex = 15) then
  begin
    SQL_Str := 'Select * from %s Where ([Н\ч Сборка Клапана]=0) AND (Статус<>0) AND (Х IS NULL) AND (Отмена IS NULL) ';
  end;
        {//=============================================================================== Обработ ПДМ

0Все
1Не обработанные технологом
2Не обработанные программистом
3Сформированные
4Не сформированные
5Не запущенные
6Запущенные
7Запущенные(часть)
8Готовые
9Отмененые
10Не готовые
11Собранные
12Все+Старые
 }
        //=============================================================================== Готовые
  if (ComboBox15.ItemIndex = 8) then
  begin
    SQL_Str := 'Select * from %s Where ( [' + FN_SBOR + '] =0) AND (Х IS NULL) AND (Запуск1<>0) AND (Отмена IS NULL) ';
  end;
        //===============================================================================
  if (ComboBox15.ItemIndex = 9) then
  begin
    SQL_Str := 'Select * from %s Where  (Х IS NULL) AND (not Отмена IS NULL) ';
  end;
  if (ComboBox15.ItemIndex = 10) then //AND (Х IS NULL)
  begin
    SQL_Str := 'Select * from %s Where (Х IS NULL) AND ([' + FN_SBOR_GOT + '] IS NULL) AND (Отмена IS NULL) ';
  end;
  if (ComboBox15.ItemIndex = 11) then
  begin
    SQL_Str := 'Select * from %s Where (NOT [' + FN_SBOR_GOT + '] IS NULL) AND ( [' + FN_PR_OTK + '] IS NULL) AND (Х IS NULL) AND (Отмена IS NULL) ';
  end;
  if (ComboBox15.ItemIndex = 12) then
  begin
    SQL_Str := 'Select * from %s Where (NOT [Х] IS NULL) ';
  end;
  Dat := FormatDateTime('mm.dd.yyyy', Now);
  if (ComboBox15.ItemIndex = 13) then
  begin
    SQL_Str := 'Select * from %s Where (Х IS NULL) AND (Отмена IS NULL)' + ' AND ([' + FN_PLAN_DATA + ']<' + #39 + Dat + #39 + ') AND (([Заготовка]<>' + #39 + '0' + #39 + ') OR ([Сборка]<>' + #39 + '0' + #39 + ')) '
  end;

   if (ComboBox15.ItemIndex = 14) then //ОТК
  begin
    Dat:= FormatDateTime('mm.dd.yyyy', dtp12.DateTime);
    Dat1:= FormatDateTime('mm.dd.yyyy', dtp13.DateTime);
    Betwe1 := ' AND (ОТК>= ' + #39 + Dat + #39 + ' AND ОТК<' + #39 + Dat1 + #39 + ') ';
    SQL_Str := 'Select * from %s Where (Х IS NULL) AND (Отмена IS NULL)' + Betwe1;
  end;
  //
    //==========
  if chk8.Checked then
  begin
    EM1 := ' AND (Изделие Like ' + #39 + '%Канал%' + #39 + ')';
      // if not mkQuerySelect(ADOQuery1, 'Select * from %s Where (Х IS NULL) %s AND (Отмена IS NULL)' + Betwe1 + Order, ['KlapanaZap',EM1]) then
     // exit;
  end;
  SQL_Str := SQL_Str + ' AND (пр=' + #39 + 'МИ' + #39 + ')';

  SGL.ColCount := 26; //I_FN_POS+2;
  SGL.Cells[0, 0] := '№';
  SGL.ColWidths[0] := 40;
  SGL.Cells[I_FN_DAT, 0] := FN_DAT;
  SGL.Cells[I_FN_ZAK, 0] := FN_ZAK;
  SGL.Cells[I_FN_KOL, 0] := FN_KOL;
  SGL.Cells[I_FN_KOL_ZAP, 0] := 'в пакете';
  SGL.Cells[I_FN_NAM, 0] := FN_NAM;
  SGL.Cells[I_FN_A, 0] := FN_A;
  SGL.Cells[I_FN_B, 0] := FN_B;
  SGL.ColWidths[I_FN_A] := 0;
  SGL.ColWidths[I_FN_B] := 0;
  SGL.Cells[I_FN_MOD_PRIVOD, 0] := FN_MOD_PRIVOD;
  SGL.Cells[I_FN_PLAN_DATA, 0] := FN_PLAN_DATA;
  SGL.Cells[I_FN_PLAN_NED, 0] := FN_PLAN_NED;
  SGL.Cells[I_FN_ZAKAZCHIK, 0] := FN_ZAKAZCHIK;
  SGL.Cells[I_FN_PR, 0] := FN_PR;
  SGL.Cells[I_FN_SGP, 0] := FN_SGP;
  SGL.Cells[I_FN_SGP + 1, 0] := 'КТО';
  SGL.Cells[I_FN_SGP + 2, 0] := 'IdГП';
  SGL.Cells[I_FN_SGP + 3, 0] := 'Брикет';
  SGL.Cells[I_FN_SGP + 4, 0] := 'Брик_Нед1';
  SGL.Cells[I_FN_SGP + 5, 0] := 'Брик_Ден1';
  SGL.Cells[I_FN_SGP + 6, 0] := 'Брик_Нед2';
  SGL.Cells[I_FN_SGP + 7, 0] := 'Брик_Ден1';
  SGL.Cells[I_FN_SGP + 8, 0] := 'IdКО';
  SGL.Cells[I_FN_SGP + 9, 0] := 'bz';
  SGL.Cells[I_FN_SGP + 10, 0] := 'СтатусФ';
  SGL.Cells[I_FN_SGP + 11, 0] := 'BLF';
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++SG6
            //
  StringGrid6.ColCount := 33;
  StringGrid6.Cells[I_FN_NOM, 0] := 'Номер раз';
  StringGrid6.Cells[I_FN_RAS_DATA_GOTOVN, 0] := FN_RAS_DATA_GOTOVN;
  StringGrid6.Cells[I_FN_BRIKET, 0] := 'Кол-во Приводов';
  StringGrid6.Cells[I_FN_TEHNOLOG, 0] := FN_TEHNOLOG;
  StringGrid6.Cells[I_FN_TEHNOLOG_GOTOV, 0] := FN_TEHNOLOG_GOTOV;
  StringGrid6.Cells[I_FN_TEHNOLOG_PRIM, 0] := FN_TEHNOLOG_PRIM;
  StringGrid6.Cells[I_FN_ZAG_ZAP, 0] := FN_ZAG_ZAP;
  StringGrid6.Cells[I_FN_ZAG, 0] := FN_ZAG;
  StringGrid6.Cells[I_FN_SBOR_ZAP, 0] := FN_SBOR_ZAP;
  StringGrid6.Cells[I_FN_SBOR, 0] := FN_SBOR;
  StringGrid6.Cells[I_FN_SBOR_PRIM, 0] := FN_SBOR_PRIM;
  StringGrid6.Cells[I_FN_PR_OTK, 0] := FN_PR_OTK;
  StringGrid6.Cells[I_FN_PR_OTK_PRIM, 0] := FN_PR_OTK_PRIM;
  StringGrid6.Cells[I_FN_DAT_OTGRUZ, 0] := FN_DAT_OTGRUZ;
  StringGrid6.Cells[I_FN_OSOBEN, 0] := FN_OSOBEN;
  StringGrid6.Cells[I_FN_SBOR_KLAP_NC, 0] := FN_SBOR_KLAP_NC;
  StringGrid6.Cells[I_FN_SVARKA_NC, 0] := FN_SVARKA_NC;
  StringGrid6.Cells[I_FN_KOL_RAZ, 0] := FN_KOL_RAZ;
  StringGrid6.Cells[I_FN_NOMER_RAZ, 0] := FN_NOM;

  StringGrid6.Cells[I_FN_FILE, 0] := FN_FILE;
  StringGrid6.Cells[I_FN_OTMENA, 0] := FN_OTMENA;
  StringGrid6.Cells[23, 0] := 'БЗ';
  StringGrid6.Cells[24, 0] := 'Статус';
  StringGrid6.Cells[25, 0] := 'Код';
  StringGrid6.Cells[26, 0] := 'РаскрЛопаток';
  StringGrid6.Cells[27, 0] := 'Расключение';
  StringGrid6.Cells[28, 0] := 'Сборка лопаток';
  StringGrid6.Cells[29, 0] := 'Сборка тяг';
  StringGrid6.Cells[30, 0] := 'СборкаРеш';
  StringGrid6.Cells[31, 0] := 'Обварка';
  StringGrid6.Cells[32, 0] := 'Электро';
  StringGrid6.ColWidths[6] := 0;
  StringGrid6.ColWidths[8] := 0;
  StringGrid6.ColWidths[9] := 0;
  StringGrid6.ColWidths[11] := 0;
  StringGrid6.ColWidths[19] := 0;
  StringGrid6.ColWidths[20] := 0;
  StringGrid6.ColWidths[21] := 0;
  StringGrid6.ColWidths[22] := 0;
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++SG6
       // StringGrid9.RowCount := 1;
  if not mkQuerySelect(ADOQuery1, SQL_Str + ' %s' + Voz_Brik + Grupp + Betwe1 + Order2, ['KlapanaZap', EM1]) then
    exit;

  if Poisk_Vosd = 1 then
    if not mkQuerySelect(ADOQuery1, 'Select * from %s Where (Х IS NULL) %s', ['KlapanaZap', Str_SQL_Poisk]) then
      exit;
  Str_SQL_Poisk := '';
  Poisk_Vosd := 0;
  if ADOQuery1.RecordCount = 0 then
  begin
    SGL.RowCount := 1;
    Clear_StringGrid(SGL);

    StringGrid6.RowCount := 1;
    Clear_StringGrid(StringGrid6);
    exit;
  end;

  StatusBar1.Panels[2].Text := IntToStr(ADOQuery1.RecordCount);
  SGL.RowCount := ADOQuery1.RecordCount + 1;
  StringGrid6.RowCount := ADOQuery1.RecordCount + 1;
  SGL.FixedRows := 1;
  StringGrid6.FixedRows := 1;
        // Clear_StringGrid(StringGrid9);
  ADOQuery1.First;
  for I := 0 to ADOQuery1.RecordCount do
  begin
    SGL.Cells[0, I + 1] := IntToStr(I + 1);

    SGL.Cells[I_FN_DAT, I + 1] := ADOQuery1.FieldByName(FN_DAT).AsString;
    SGL.Cells[I_FN_ZAK, I + 1] := ADOQuery1.FieldByName(FN_ZAK).AsString;
    SGL.Cells[I_FN_KOL, I + 1] := ADOQuery1.FieldByName(FN_KOL).AsString;
    SGL.Cells[I_FN_KOL_ZAP, I + 1] := ADOQuery1.FieldByName(FN_KOL_ZAP).AsString;
    SGL.Cells[I_FN_NAM, I + 1] := ADOQuery1.FieldByName(FN_NAM).AsString;
    SGL.Cells[I_FN_A, I + 1] := ADOQuery1.FieldByName(FN_A).AsString;
    SGL.Cells[I_FN_B, I + 1] := ADOQuery1.FieldByName(FN_B).AsString;
    SGL.Cells[I_FN_MOD_PRIVOD, I + 1] := ADOQuery1.FieldByName(FN_MOD_PRIVOD).AsString;
    SGL.Cells[I_FN_PLAN_DATA, I + 1] := ADOQuery1.FieldByName(FN_PLAN_DATA).AsString;
    SGL.Cells[I_FN_PLAN_NED, I + 1] := ADOQuery1.FieldByName(FN_PLAN_NED).AsString;
    SGL.Cells[I_FN_ZAKAZCHIK, I + 1] := ADOQuery1.FieldByName(FN_ZAKAZCHIK).AsString;
    SGL.Cells[I_FN_PR, I + 1] := ADOQuery1.FieldByName(FN_PR).AsString;
    SGL.Cells[I_FN_SGP, I + 1] := ADOQuery1.FieldByName(FN_SGP).AsString;
    SGL.Cells[I_FN_SGP + 1, I + 1] := ADOQuery1.FieldByName('№Поз').AsString;
    SGL.Cells[I_FN_SGP + 2, I + 1] := ADOQuery1.FieldByName('IdГП').AsString;

    SGL.Cells[I_FN_SGP + 3, I + 1] := ADOQuery1.FieldByName('Брикет').AsString;
    SGL.Cells[I_FN_SGP + 4, I + 1] := ADOQuery1.FieldByName('Брик_Нед1').AsString;
    SGL.Cells[I_FN_SGP + 5, I + 1] := ADOQuery1.FieldByName('Брик_Ден1').AsString;
    SGL.Cells[I_FN_SGP + 6, I + 1] := ADOQuery1.FieldByName('Брик_Нед2').AsString;
    SGL.Cells[I_FN_SGP + 7, I + 1] := ADOQuery1.FieldByName('Брик_Ден1').AsString;
    SGL.Cells[I_FN_SGP + 8, I + 1] := ADOQuery1.FieldByName('IdКО').AsString;
    SGL.Cells[I_FN_SGP + 9, I + 1] := ADOQuery1.FieldByName('bz').AsString;
    SGL.Cells[I_FN_SGP + 10, I + 1] := ADOQuery1.FieldByName('СтатусФ').AsString;
    SGL.Cells[I_FN_SGP + 11, I + 1] := ADOQuery1.FieldByName('BLF').AsString;
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++SG6
    StringGrid6.Cells[I_FN_NOM, I + 1] := ADOQuery1.FieldByName(FN_NOMER_RAZ).AsString;
    StringGrid6.Cells[I_FN_RAS_DATA_GOTOVN, I + 1] := ADOQuery1.FieldByName(FN_RAS_DATA_GOTOVN).AsString;
    StringGrid6.Cells[I_FN_BRIKET, I + 1] := ADOQuery1.FieldByName('Привод').AsString;
    S := ADOQuery1.FieldByName(FN_TEHNOLOG).AsString;
    StringGrid6.Cells[I_FN_TEHNOLOG, I + 1] := ADOQuery1.FieldByName(FN_TEHNOLOG).AsString;
    StringGrid6.Cells[I_FN_TEHNOLOG_GOTOV, I + 1] := ADOQuery1.FieldByName(FN_TEHNOLOG_GOTOV).AsString;
    StringGrid6.Cells[I_FN_TEHNOLOG_PRIM, I + 1] := ADOQuery1.FieldByName(FN_TEHNOLOG_PRIM).AsString;
    StringGrid6.Cells[I_FN_ZAG_ZAP, I + 1] := ADOQuery1.FieldByName(FN_ZAG_ZAP).AsString;
    StringGrid6.Cells[I_FN_ZAG, I + 1] := ADOQuery1.FieldByName('Запуск').AsString + '/' + ADOQuery1.FieldByName(FN_ZAG).AsString;
    StringGrid6.Cells[I_FN_ZAG_GOT, I + 1] := ADOQuery1.FieldByName(FN_ZAG_GOT).AsString;
    StringGrid6.Cells[I_FN_SBOR_ZAP, I + 1] := ADOQuery1.FieldByName(FN_SBOR_ZAP).AsString;
    StringGrid6.Cells[I_FN_SBOR, I + 1] := ADOQuery1.FieldByName('Запуск1').AsString + '/' + ADOQuery1.FieldByName(FN_SBOR).AsString;
    StringGrid6.Cells[I_FN_SBOR_GOT, I + 1] := ADOQuery1.FieldByName(FN_SBOR_GOT).AsString;
    StringGrid6.Cells[I_FN_SBOR_PRIM, I + 1] := ADOQuery1.FieldByName(FN_SBOR_PRIM).AsString;
    StringGrid6.Cells[I_FN_PR_OTK, I + 1] := ADOQuery1.FieldByName(FN_PR_OTK).AsString;
    StringGrid6.Cells[I_FN_PR_OTK_PRIM, I + 1] := ADOQuery1.FieldByName(FN_PR_OTK_PRIM).AsString;
    StringGrid6.Cells[I_FN_DAT_OTGRUZ, I + 1] := ADOQuery1.FieldByName('Упаковка').AsString;

    StringGrid6.Cells[I_FN_OSOBEN, I + 1] := ADOQuery1.FieldByName(FN_OSOBEN).AsString;
    StringGrid6.Cells[I_FN_SBOR_KLAP_NC, I + 1] := ADOQuery1.FieldByName(FN_SBOR_KLAP_NC).AsString;
    StringGrid6.Cells[I_FN_SVARKA_NC, I + 1] := ADOQuery1.FieldByName(FN_SVARKA_NC).AsString;

    StringGrid6.Cells[I_FN_KOL_RAZ, I + 1] := ADOQuery1.FieldByName(FN_KOL_RAZ).AsString;
    StringGrid6.Cells[I_FN_NOMER_RAZ, I + 1] := ADOQuery1.FieldByName(FN_NOM).AsString;

    StringGrid6.Cells[I_FN_FILE, I + 1] := ADOQuery1.FieldByName(FN_FILE).AsString;

    StringGrid6.Cells[I_FN_OTMENA, I + 1] := ADOQuery1.FieldByName(FN_OTMENA).AsString;
    StringGrid6.Cells[23, I + 1] := ADOQuery1.FieldByName('БЗ').AsString;
    StringGrid6.Cells[24, I + 1] := ADOQuery1.FieldByName('Статус').AsString;
    StringGrid6.Cells[25, I + 1] := ADOQuery1.FieldByName('Код').AsString;
    StringGrid6.Cells[27, I + 1] := ADOQuery1.FieldByName('Расключение').AsString;
    StringGrid6.Cells[28, I + 1] := ADOQuery1.FieldByName('Сборка лопаток').AsString;
     StringGrid6.Cells[29, I + 1] := ADOQuery1.FieldByName('Сборка тяг').AsString;
     StringGrid6.Cells[30, I + 1] := ADOQuery1.FieldByName('СборкаРеш').AsString;
     StringGrid6.Cells[31, I + 1] := ADOQuery1.FieldByName('Обварка').AsString;
     StringGrid6.Cells[32, I + 1] := ADOQuery1.FieldByName('Электро').AsString;
             {   Str1:=' AND ((Элемент Like '+#39 +'%опатк%'+#39+') OR (Элемент Like '+#39 +'%Лопасть%'+#39+'))';
              if not mkQuerySelect66(ADOQuery4,
                                'Select * from %s  Where  (ВидЭлемента=' +#39+''+#39 +
                                ') %s',
                                ['СпецифВозд',Str1]) then
                                exit;
              ADOQuery4.Close;
              ADOQuery4.SQL.Clear;
              Str1:= 'Select * from  СпецифВозд Where (IdГП=' +#39+SGL.Cells[I_FN_SGP + 2, I + 1]  +#39 +
              ') AND (ВидЭлемента=' +#39+'Детали'+#39 +
              ');
              ADOQuery4.SQL.Text:= Str1;
              ADOQuery4.Active:=True;
                  {if not mkQuerySelect66(ADOQuery4,
                                'Select * from %s  Where (IdГП=' +#39+SGL.Cells[I_FN_SGP + 2, I + 1]  +#39 +
                                ') AND (ВидЭлемента=' +#39+'Детали'+#39 +
                                ') AND ('+Str1+')',
                                ['СпецифВозд']) then
                                exit;  }
    StringGrid6.Cells[26, I + 1] := ADOQuery1.FieldByName('РаскрЛопаток').AsString;
                //Str1:= ADOQuery4.FieldByName('Элемент').AsString;
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++SG6
    ADOQuery1.Next;
  end;
  if not mkQuerySelect(ADOQuery2, 'Select * from %s  Where (Технолог=' + #39 + 'False' + #39 + ')', ['ШаблонВоз']) then
    exit;
  Label104.Caption := IntToStr(ADOQuery2.RecordCount);
end;

procedure TForm1.SGLSelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
var
  R: TRect;
  I: Integer;
begin
  TmpCol := ACol;
  tmpRow := ARow;
  FSelectRow(SGl, ARow);
  FSelectRow(StringGrid6, ARow);
  edt1.Text := StringGrid6.Cells[25, ARow]; //Kod
  edt2.Text := SGl.Cells[I_FN_NAM, ARow]; //Nam
  edt3.Text := StringGrid6.Cells[23, ARow]; //BZ
  if FlagDolg = 0 then
    SGl.ShowHint := False
  else
    SGl.ShowHint := True;
  Hint := SGl.Cells[I_FN_NAM, ARow] + #13 + StringGrid6.Cells[23, ARow] + #13 + SGl.Cells[I_FN_SGP + 3, ARow];
  for I := 1 to SGL.RowCount do
  begin

  end;
end;

procedure TForm1.ComboBox7Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [МодПривода]=' + #39 + ComboBox7.Items[ComboBox7.ItemIndex] + #39 + ' WHERE ([Заказ]=' + #39 + SGL.Cells[I_FN_ZAK, SGL.Row] + #39 + ') AND ([' + FN_NAM + ']=' + #39 + SGL.Cells[I_FN_NAM, SGL.Row] + #39 + ')', ['KlapanaZap']) then
    Exit;
  SGL.Cells[SGL.Col, SGL.Row] := ComboBox7.Items[ComboBox7.ItemIndex];
  ComboBox7.Visible := False;
end;

procedure TForm1.Memo21DblClick(Sender: TObject);
var
  str: string;
  FindLine: Integer;
begin
  str := Memo21.Lines.Strings[Memo21.CaretPos.Y];
end;

procedure TForm1.MenuItem11Click(Sender: TObject);
var
  XL2, Sheet1, Sheet2, Sheet3, Rang: Variant;
  E, E1, i, Res, Priv, Kol_Zap, u, r, uu, ff, ff1: Integer;
  Vn_DAt, Vn_DAt1, Dir, God, mes, Nom, S_Svar, S_Sbor, Priv_Str, idgp, idko, Zak, Izdel, Kol_S, Stan, Oboz, Elem, Mat, Err, id_lop, s, Lop, Dir1, Prim, Nam: string;
  Svar_o, Sbor_o, Kol_D: Double;
  Res_Nog, Res_Trumph, Res_Gib, Res_Pila, Kanban, Val, Svark, Rotor, Pokr, Kol_LOP, fff, FFF1, gggg, G1, C, R1: Integer;
  d: TDate;
begin
  Vn_DAt := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 3, zclrstrngrd1.Row]; //dd.mm/YYYY//FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  d := StrToDate(Vn_DAt);
  Vn_DAt1 := FormatDateTime('mm.dd.yyyy', d);
  God := FormatDateTime('yyyy', d);
  mes := FormatDateTime('mmmm', d);
  Memo27.Lines.Clear;
  for i := 0 to StringGrid4.RowCount - 1 do
  begin
    if StringGrid4.Cells[0, i] <> '' then
    begin
      Memo27.Lines.Add(zclrstrngrd1.Cells[0, i]);
      Nam := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, i]
    end;
  end;
  Nom := '0'; //zclrstrngrd1.Cells[0, zclrstrngrd1.Row];
  C := StrToInt(zclrstrngrd1.Cells[I_FN_KOL_ZAP + 28, zclrstrngrd1.Row]);
  Prim := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 6, zclrstrngrd1.Row];
  Dir1 := '\Суточные задания(Канал)\';
  r := Pos('Канал-ГКВ', Nam);
  R1 := Pos('Канал-ГКП', Nam);
  if (r <> 0) then
    Form1.SUT_Kanal_GKV(Vn_DAt, Nom, Dir1, 2, C, Prim);
  if (R1 <> 0) then
    Form1.SUT_Kanal_GKV(Vn_DAt, Nom, Dir1, 2, C, Prim);
  if (R1 = 0) and (r = 0) then
    Form1.SUT_Kanal(Vn_DAt, Nom, Dir1, 2, C, Prim);
end;

procedure TForm1.MenuItem15Click(Sender: TObject);
begin
  FBRAK.LabZN.Caption := '1';
  FNewBRAK.Edit1.Text := zclrstrngrd1.Cells[I_FN_ZAK, zclrstrngrd1.Row]; //Zakaz
   // FNewBRAK.LabZak.Caption:=ZSG.Cells[I_FN_ZAK,ZSG.Row ];//Zakaz

  FNewBRAK.Edit2.Text := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 29, zclrstrngrd1.Row]; //BZ
    //FNewBRAK.LabBZ.Caption:= ZSG.Cells[I_FN_KOL_ZAP + 29,ZSG.Row ]; //BZ

  FNewBRAK.LabGP.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 26, zclrstrngrd1.Row]; //GP
  FNewBRAK.Labko.Caption := '0'; //ko
    //FNewBRAK.LabZN.Caption:=ZSG.Cells[I_FN_KOL_ZAP + 23, ZSG.Row]; //zavNom
  FNewBRAK.Edit3.Text := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 23, zclrstrngrd1.Row]; //zavNom
  FNewBRAK.LabIndex.Caption := '1'; //Клапана
  FNewBRAK.Caption := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, zclrstrngrd1.Row];
  FNewBRAK.Label16.Caption := Regist.Famili;
  FBRAK.IZD_G := 0;
  FNewBRAK.Doljn := FlagDolg;
   // MessageDlg('Бред!'+#10#13+IntToStr(FlagDolg), mtError, [mbOk], 0);
  FNewBRAK.Plan := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 3, zclrstrngrd1.Row];
  FNewBRAK.Nom_G := zclrstrngrd1.Cells[0, zclrstrngrd1.Row];
  FNewBRAK.ShowModal;
end;

procedure TForm1.MenuItem16Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE [%s] SET [Срочно]=' + #39 + 'True' + #39 + ' WHERE ([Заказ]=' + #39 + zclrstrngrd1.Cells[2, zclrstrngrd1.Row] + #39 + ') ', ['Запуск750']) then
    Exit;
  button71.Click;
end;

procedure TForm1.MenuItem17Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE [%s] SET [Срочно]=' + #39 + 'False' + #39 + ' WHERE ([Заказ]=' + #39 + zclrstrngrd1.Cells[2, zclrstrngrd1.Row] + #39 + ') ', ['Запуск750']) then
    Exit;
  button71.Click;
end;

procedure TForm1.MenuItem1Click(Sender: TObject);
begin
{        if not Form1.mkQueryDelete(Form1.ADOQuery1,
                'DELETE FROM %s Where  (Заказ=' +
                #39 + SGL.Cells[I_FN_ZAK, SGL.Row] + #39 + ') AND (Изделие=' +
                #39 +
                SGL.Cells[I_FN_NAM, SGL.Row] + #39 + ')',
                ['Klapana']) then
                Exit;
        if not Form1.mkQueryDelete(Form1.ADOQuery1,
                'DELETE FROM %s Where  (Заказ=' +
                #39 + SGL.Cells[I_FN_ZAK, SGL.Row] + #39 + ') AND (Изделие=' +
                #39 +
                SGL.Cells[I_FN_NAM, SGL.Row] + #39 + ')',
                ['Запуск']) then
                Exit;  }
end;

procedure TForm1.MenuItem2Click(Sender: TObject);
begin
  Clipboard.AsText := SG10.Cells[SG10.Col, SG10.Row];
end;

procedure TForm1.MenuItem5Click(Sender: TObject);
var
  I, j, x, n, l, C, I_P, X_P, N_P, L_P, C_P, A, A_P: Integer;
  Doc: OleVariant;
  XL1, XL_P, wdDoc, wdRang, b, vstart, vend, Sel: variant;
  Vn_Dat, Dir, Name, Nom, Zav_Nomer, Zakaz: string;
  ZavN1, ZavN2, Res, Kol_Zap, Kol, Kol_P, Kol_Zap_P, Res1, Res2: Integer;
  Buffer: array[0..1000] of string;
  BufferNam: array[0..1000] of string;
  BufferZ: array[0..1000] of string;
  Buffer_P: array[0..1000] of string;
  BufferNam_P: array[0..1000] of string;
  BufferZ_P: array[0..1000] of string;
begin
        //Зав.№: 764697;  Зав.№: 764694..764695;
  Vn_Dat := FormatDateTime('dd.mm.yyyy', NOW);
  Dir := ExtractFileDir(ParamStr(0));
  Nom := zclrstrngrd1.Cells[0, zclrstrngrd1.Row];
  Kol := 0;
  x := 0;
  Kol_P := 0;
  X_P := 0;
  for j := 2 to zclrstrngrd1.RowCount do
  begin
    Res := AnsiCompareStr(Nom, zclrstrngrd1.Cells[0, j]);
    if Res = 0 then
    begin
      Name := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, j];

      Zakaz := zclrstrngrd1.Cells[I_FN_ZAK, j];
                        //Zav_Nomer := ZSG.Cells[I_FN_KOL_ZAP + 19, j];
      Res1 := Pos('КПУ', Name);
      Res2 := Pos('КЭД', Name);
      if Res1 <> 0 then
      begin

        Kol_Zap := Kol_Zap + StrToInt(zclrstrngrd1.Cells[I_FN_KOL_ZAP, j]);
        Kol := StrToInt(zclrstrngrd1.Cells[I_FN_KOL_ZAP, j]);
        if Kol > 1 then
        begin
          A := 0;
          n := x;
          for l := x to x + Kol - 1 do
          begin
            Buffer[n] := zclrstrngrd1.Cells[I_FN_ZAK, j];
            BufferNam[n] := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, j];
            if zclrstrngrd1.Cells[I_FN_KOL_ZAP + 23, j] <> '' then
              ZavN1 := StrToInt(zclrstrngrd1.Cells[I_FN_KOL_ZAP + 23, j])
            else
              ZavN1 := 0;
            BufferZ[n] := IntToStr(ZavN1 + A);
            Inc(A);
                                                        //ZSG.Cells[I_FN_KOL_ZAP +
                                                                //23, J];
            Inc(n);
          end;
          x := n;
        end
        else
        begin
          Buffer[x] := zclrstrngrd1.Cells[I_FN_ZAK, j];
          BufferNam[x] := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, j];
          BufferZ[x] := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 23, j];
          Inc(x);

        end;

      end;
      if Res2 <> 0 then
      begin

        Kol_Zap_P := Kol_Zap_P + StrToInt(zclrstrngrd1.Cells[I_FN_KOL_ZAP, j]);
        Kol_P := StrToInt(zclrstrngrd1.Cells[I_FN_KOL_ZAP, j]);
        if Kol_P > 1 then
        begin
          N_P := X_P;
          A_P := 0;
          for L_P := X_P to X_P + Kol_P - 1 do
          begin
            Buffer_P[N_P] := zclrstrngrd1.Cells[I_FN_ZAK, j];
            BufferNam_P[N_P] := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, j];
                                               // BufferZ_P[n_P] :=ZSG.Cells[I_FN_KOL_ZAP +
                                                //23, J];
            if zclrstrngrd1.Cells[I_FN_KOL_ZAP + 23, j] <> '' then
              ZavN1 := StrToInt(zclrstrngrd1.Cells[I_FN_KOL_ZAP + 23, j])
            else
              ZavN1 := 0;
            BufferZ_P[N_P] := IntToStr(ZavN1 + A_P);
            Inc(A_P);
            Inc(N_P);
          end;
          X_P := N_P;
        end
        else
        begin
          Buffer_P[X_P] := zclrstrngrd1.Cells[I_FN_ZAK, j];
          BufferNam_P[X_P] := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, j];
          BufferZ_P[X_P] := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 23, j];
          Inc(X_P);

        end;

      end;

    end;
  end;
  if Buffer[0] <> '' then
  begin
    XL1 := CreateOleObject('Excel.Application');
    CopyFile(PWideChar(Dir + '\Заполнения паспорта этикетка КПУ от 15.11.12.xlsx'), PWideChar(Dir + '\Заполнения паспорта этикетка КПУ от 15.11.12(1).xlsx'), False);
    XL1.Workbooks.Open(Dir + '\Заполнения паспорта этикетка КПУ от 15.11.12(1).xlsx');
    XL1.Application.EnableEvents := false;

    for I := 1 to Kol_Zap do
    begin
      XL1.ActiveWorkBook.WorkSheets[23].Cells[I + 3, 2] := Buffer[I - 1];
      XL1.ActiveWorkBook.WorkSheets[23].Cells[I + 3, 3] := BufferNam[I - 1];
      XL1.ActiveWorkBook.WorkSheets[23].Cells[I + 3, 4] := BufferZ[I - 1];
      XL1.ActiveWorkBook.WorkSheets[23].Cells[I + 3, 5] := Vn_Dat;

    end;
    XL1.Visible := True;
    XL1 := Unassigned;
  end;
  if Buffer_P[0] <> '' then
  begin
    XL_P := CreateOleObject('Excel.Application');
    CopyFile(PWideChar(Dir + '\Заполнения паспорта этикетка КПД от 28.02.12.xlsx'), PWideChar(Dir + '\Заполнения паспорта этикетка КПД от 28.02.12(1).xlsx'), False);
    XL_P.Workbooks.Open(Dir + '\Заполнения паспорта этикетка КПД от 28.02.12(1).xlsx');
    XL_P.Application.EnableEvents := false;

    for I_P := 1 to Kol_Zap_P do
    begin
      XL_P.ActiveWorkBook.WorkSheets[1].Cells[I_P + 3, 2] := Buffer_P[I_P - 1];
      XL_P.ActiveWorkBook.WorkSheets[1].Cells[I_P + 3, 3] := BufferNam_P[I_P - 1];
      XL_P.ActiveWorkBook.WorkSheets[1].Cells[I_P + 3, 4] := BufferZ_P[I_P - 1];
      XL_P.ActiveWorkBook.WorkSheets[1].Cells[I_P + 3, 5] := Vn_Dat;

    end;
    XL_P.Visible := True;
    XL_P := Unassigned;
  end;
end;

procedure TForm1.MenuItem7Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Кол принятых]=' + #39 + '0' + #39 + ',[ОТК]=NULL  WHERE ([' + FN_NAM + ']=' + #39 + zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, zclrstrngrd1.Row] + #39 + ') AND (Заказ=' + #39 + zclrstrngrd1.Cells[I_FN_ZAK, zclrstrngrd1.Row] + #39 + ') ', ['Klapana']) then
    Exit;
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Кол принятых]=' + #39 + '0' + #39 + ',[ОТК]=NULL WHERE ([' + FN_NOM + ']=' + #39 + zclrstrngrd1.Cells[0, zclrstrngrd1.Row] + #39 + ') AND ([' + FN_NAM + ']=' + #39 + zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, zclrstrngrd1.Row] + #39 + ') AND (Заказ=' + #39 + zclrstrngrd1.Cells[I_FN_ZAK, zclrstrngrd1.Row] + #39 + ') ', ['Запуск']) then
    Exit;
end;

procedure TForm1.MenuItem8Click(Sender: TObject);
begin
  Clipboard.AsText := zclrstrngrd1.Cells[zclrstrngrd1.Col, zclrstrngrd1.Row];
end;

procedure TForm1.StringGrid6SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
begin

  FSelectRow(SGL, ARow);
end;

procedure TForm1.SGLTopLeftChanged(Sender: TObject);
begin
  StringGrid6.TopRow := SGL.TopRow;
end;

procedure TForm1.StringGrid6TopLeftChanged(Sender: TObject);
begin
  SGL.TopRow := StringGrid6.TopRow;
end;

procedure TForm1.SGLMouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin
  Handled := true;
  SGl.Perform(WM_VSCROLL, SB_LINEDOWN, 0);
end;

procedure TForm1.StringGrid6MouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin
  Handled := true;
  StringGrid6.Perform(WM_VSCROLL, SB_LINEDOWN, 0);
end;

procedure TForm1.SGLMouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin
  Handled := true;
  SGl.Perform(WM_VSCROLL, SB_LINEUP, 0);
end;

procedure TForm1.StringGrid6MouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin
  Handled := true;
  StringGrid6.Perform(WM_VSCROLL, SB_LINEUP, 0);
end;

procedure TForm1.StringGrid6DblClick(Sender: TObject);
var
  Nom_pos, Kol_Raz, Nomer_Raz: string;
  kol_zap, kol, kol1, Res,Res1: Integer;
  I: Integer;
begin
  Vozduh := 0;
  FNomer.Label8.Caption := SGL.Cells[I_FN_SGP + 2, StringGrid6.Row]; //IDGP
  FNomer.Label9.Caption := SGL.Cells[I_FN_SGP + 8, StringGrid6.Row]; //IDKO
  if (StringGrid6.Col = I_FN_TEHNOLOG) and ((Regist.Doljnost = 1) or (Regist.Doljnost = 2)) then
  begin
    { and ((колнаед= ' + #39+ '310' + #39 + ') or (колнаед= ' + #39+ '330' + #39 + ') or (колнаед= '
    + #39+ '400' + #39 + ') or (колнаед= ' + #39+ '520' + #39 + ') or (колнаед= ' + #39+ '525' + #39 +
    ') or (колнаед= ' + #39+ '530' + #39 + '))}
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where  (технолог= ' + #39 + '0' + #39 + ') AND ([примечание]= ' + #39 + '0' + #39 + ')  AND ( Изделие = ' + #39 + '%s' + #39 + ')', ['СпецифОбщая', SGL.Cells[I_FN_NAM, StringGrid6.Row]]) then
      exit;
    if ADOQuery2.RecordCount <> 0 then
    begin
      MessageDlg('Не все детали обработаны в ПЕРЕДЕЛАХ! ', mtError, [mbOk], 0);
      Exit;
    end;
    FNomer.Caption := SGL.Cells[I_FN_NAM, StringGrid6.Row];
    FNomer.Label2.Caption := SGL.Cells[I_FN_ZAK, StringGrid6.Row];
    FNomer.Label7.Caption := StringGrid6.Cells[23, StringGrid6.Row]; //БЗ
    FNomer.Label3.Caption := FN_TEHNOLOG;
    FNomer.DateTimePicker1.Visible := True;
    FNomer.Edit1.Visible := False;
    FNomer.ComboBox1.Visible := False;
    FNomer.ComboBox2.Visible := False;
    FNomer.Label4.Caption := IntToStr(StringGrid6.Row);
    FNomer.Label5.Caption := IntToStr(StringGrid6.Col);
    FNomer.Show;
  end;
  if (StringGrid6.Col = I_FN_TEHNOLOG_GOTOV) and (StringGrid6.Cells[I_FN_TEHNOLOG, StringGrid6.Row] <> '') and ((FlagDolg = 1) or (Regist.Doljnost = 2)) then
  begin
    FNomer.Caption := SGL.Cells[I_FN_NAM, StringGrid6.Row];
    FNomer.Label2.Caption := SGL.Cells[I_FN_ZAK, StringGrid6.Row];
    FNomer.Label7.Caption := StringGrid6.Cells[23, StringGrid6.Row]; //БЗ
    FNomer.Label3.Caption := FN_TEHNOLOG_GOTOV;
    FNomer.DateTimePicker1.Visible := True;
    FNomer.ComboBox1.Visible := False;
    FNomer.ComboBox2.Visible := False;
    FNomer.Edit1.Visible := False;
    FNomer.Label4.Caption := IntToStr(StringGrid6.Row);
    FNomer.Label5.Caption := IntToStr(StringGrid6.Col);
    FNomer.Show;
  end;

  if (StringGrid6.Col = I_FN_PR_OTK) and (StringGrid6.Cells[I_FN_SBOR_GOT, StringGrid6.Row] <> '') then
  begin
    FNomer.Caption := SGL.Cells[I_FN_NAM, StringGrid6.Row];
    FNomer.Label2.Caption := SGL.Cells[I_FN_ZAK, StringGrid6.Row];
    FNomer.Label7.Caption := StringGrid6.Cells[23, StringGrid6.Row]; //БЗ
    FNomer.Label3.Caption := FN_PR_OTK;
    FNomer.DateTimePicker1.Visible := True;
    FNomer.Edit1.Visible := True;
    FNomer.Show;
  end;

  if (StringGrid6.Col = I_FN_DAT_OTGRUZ) and (StringGrid6.Cells[I_FN_PR_OTK, StringGrid6.Row] <> '') then
  begin
    FNomer.Caption := SGL.Cells[I_FN_NAM, StringGrid6.Row];
    FNomer.Label2.Caption := SGL.Cells[I_FN_ZAK, StringGrid6.Row];
    FNomer.Label7.Caption := StringGrid6.Cells[23, StringGrid6.Row]; //БЗ
    FNomer.Label3.Caption := 'Упаковка';
    FNomer.DateTimePicker1.Visible := True;
    FNomer.Edit1.Visible := True;
    FNomer.Show;
  end; //or (SG6.Col = I_FN_PLAN_PRIM  )

  if (StringGrid6.Col = I_FN_TEHNOLOG_PRIM) or (StringGrid6.Col = I_FN_SBOR_PRIM) or (StringGrid6.Col = I_FN_PR_OTK_PRIM) then
  begin
    FPrim.Caption := SGL.Cells[I_FN_NAM, StringGrid6.Row];

    // := 'IdГП';
    FPrim.Label6.Caption := SGL.Cells[I_FN_SGP + 2, SGL.row]; //IDGP  StringGrid6.Cells[23, StringGrid6.Row]; //БЗ
    FPrim.Label2.Caption := SGL.Cells[I_FN_SGP + 8, SGL.row]; //IDKO //SGL.Cells[I_FN_ZAK, StringGrid6.Row];
    FPrim.Label3.Caption := StringGrid6.Cells[StringGrid6.Col, 0];
    FPrim.Label4.Caption := IntToStr(StringGrid6.Row);
    FPrim.Label5.Caption := IntToStr(StringGrid6.Col);
    FPrim.Memo1.Lines.Clear;
    FPrim.Memo2.Lines.Clear;
    FPrim.Memo1.Text:=(StringGrid6.Cells[StringGrid6.Col, StringGrid6.Row]);
    for I := 0 to FPrim.Memo1.Lines.Count-1 do
      begin
        if FPrim.Memo1.Lines.Strings[i]<>'' then
        FPrim.Memo2.Lines.Add(FPrim.Memo1.Lines.Strings[i]);
      end;
      FPrim.Memo1.Lines.Clear;
      FPrim.Memo1.Text:=FPrim.Memo2.Text;
    FPrim.Show;
  end;
                 {if not Form1.mkQueryUpdate(Form1.ADOQuery1,
                'UPDATE %s SET [Статус]=' + #39
                + '0' + #39 + ' WHERE ([IdГП]=' +
                #39+SGL.Cells[I_FN_SGP + 2, StringGrid6.Row]+#39+') AND'+
                ' (IdКО= '+#39+SGL.Cells[I_FN_SGP + 8, StringGrid6.Row]+#39+') ' ,
                ['KlapanaZAP']) then
                Exit; }
  Res1:=Pos('Матвеенко',Regist.Famili);
  if (StringGrid6.Col = I_FN_SBOR_KLAP_NC) and (((FlagDolg = 2) and (Res1<>0)) or (FlagDolg = 1)) then
  begin
    FNorm.Caption := SGL.Cells[I_FN_ZAK, StringGrid6.Row];
    FNorm.Label3.Caption := SGL.Cells[I_FN_NAM, StringGrid6.Row];
    FNorm.Label5.Caption := StringGrid6.Cells[23, StringGrid6.Row]; //БЗ
    FNorm.Label4.Caption := SGL.Cells[I_FN_KOL, StringGrid6.Row];
    FNorm.lbliDGP.Caption := SGL.Cells[I_FN_SGP + 2, StringGrid6.Row];
    FNorm.lbliDKO.Caption := SGL.Cells[I_FN_SGP + 8, StringGrid6.Row];
    FNorm.Show;
  end;
  if (StringGrid6.Col = I_FN_SVARKA_NC) and ((FlagDolg = 2) and (Res1<>0)) then
  begin
    Res := Pos('ГЕРМИК', SGL.Cells[I_FN_NAM, StringGrid6.Row]);
    if (Res <> 0) and (FlagDolg = 2) then
      Exit;
    FNorm.Caption := SGL.Cells[I_FN_ZAK, StringGrid6.Row];
    FNorm.Label3.Caption := SGL.Cells[I_FN_NAM, StringGrid6.Row];

    FNorm.Label5.Caption := StringGrid6.Cells[23, StringGrid6.Row]; //БЗ
    FNorm.Label4.Caption := SGL.Cells[I_FN_KOL, StringGrid6.Row];
    FNorm.lbliDGP.Caption := SGL.Cells[I_FN_SGP + 2, StringGrid6.Row];
    FNorm.lbliDKO.Caption := SGL.Cells[I_FN_SGP + 8, StringGrid6.Row];
    FNorm.Show;
  end;
  if (StringGrid6.Col = 26) and ((Regist.Doljnost = 1) or (Regist.Doljnost = 9) or (Regist.Doljnost = 2)) then
  begin
    FKolLop.Caption := SGL.Cells[I_FN_NAM, StringGrid6.Row];
    FKolLop.Label2.Caption := SGL.Cells[I_FN_ZAK, StringGrid6.Row];
    FKolLop.Label7.Caption := StringGrid6.Cells[23, StringGrid6.Row]; //БЗ
    FKolLop.Label3.Caption := 'РаскрЛопаток';
               // FKolLop.Edit1.Visible := False;
    FKolLop.Label4.Caption := IntToStr(StringGrid6.Row);
    FKolLop.Label5.Caption := IntToStr(StringGrid6.Col);
    FKolLop.Show;
  end;

end;

procedure TForm1.Button29Click(Sender: TObject);
var
  Kol, Kol_Zap, I, Kol_Kl, Kol_Pak, Kol_Zap_O, Y, Res: Integer;
  TR, SV, SB, TR_O: Double;
  Zakaz, SV_S, SB_S: string;
begin
  TR_O := 0;
  Kol_Zap_O := 0;
  SV := 0;
  SB := 0;
        //не сформированные
  if not mkQuerySelect(ADOQuery1, 'Select [' + FN_SBOR_KLAP_NC + '],[' + FN_SVARKA_NC + '],[' + FN_KOL + '],[' + FN_KOL_ZAP + '] from %s Where (([' + FN_KOL_ZAP + ']=0) OR ([' + FN_KOL_ZAP + ']<[' + FN_KOL + '] )) AND (Х IS NULL) AND (Отмена IS NULL) ' + Order, ['Klapana']) then
    exit;
  for I := 0 to ADOQuery1.RecordCount - 1 do
  begin
    SB_S := ADOQuery1.FieldByName(FN_SBOR_KLAP_NC).AsString;
    if SB_S = '' then
      SB := 0
    else
      SB := StrToFloat(ADOQuery1.FieldByName(FN_SBOR_KLAP_NC).AsString);
    SV_S := ADOQuery1.FieldByName(FN_SVARKA_NC).AsString;
    if SV_S = '' then
      SV := 0
    else
      SV := StrToFloat(ADOQuery1.FieldByName(FN_SVARKA_NC).AsString);
    Kol := StrToInt(ADOQuery1.FieldByName(FN_KOL).AsString);
    Kol_Zap := StrToInt(ADOQuery1.FieldByName(FN_KOL_ZAP).AsString);
    Kol_Kl := Kol_Kl + (Kol - Kol_Zap);
    TR := (SB + SV) * (Kol - Kol_Zap);
    TR_O := (TR_O + TR);
    ADOQuery1.Next;
  end;

  Label32.Caption := IntToStr(Kol_Kl);
  Label3.Caption := FloatToStr(RoundTo(TR_O, -2));
  if not mkQuerySelect(ADOQuery1, 'Select DISTINCT (Заказ) from %s Where (([' + FN_KOL_ZAP + ']=0) OR ([' + FN_KOL_ZAP + ']<[' + FN_KOL + '] )) AND (Х IS NULL) AND (Отмена IS NULL) ', ['Klapana']) then
    exit;
  Label13.Caption := IntToStr(ADOQuery1.RecordCount);
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                //Сформированные и не запущенные  Клапаны DISTINCT Повтор
  TR_O := 0;
  Kol_Zap_O := 0;
  SV := 0;
  SB := 0;

  if not mkQuerySelect(ADOQuery1, 'Select [' + FN_SBOR_KLAP_NC + '],[' + FN_SVARKA_NC + '],[' + FN_KOL + '],[' + FN_KOL_ZAP + '] from %s Where ([Запуск]=0) AND ([Кол во запущенных]<>0) AND (Х IS NULL) AND (Отмена IS NULL)  ' + Order, ['Klapana']) then
    exit;
  for I := 0 to ADOQuery1.RecordCount - 1 do
  begin
    SB := StrToFloat(ADOQuery1.FieldByName(FN_SBOR_KLAP_NC).AsString);
    SV := StrToFloat(ADOQuery1.FieldByName(FN_SVARKA_NC).AsString);
    Kol := StrToInt(ADOQuery1.FieldByName(FN_KOL).AsString);
    Kol_Zap := StrToInt(ADOQuery1.FieldByName(FN_KOL_ZAP).AsString);
    Kol_Zap_O := Kol_Zap_O + Kol_Zap;
    TR := (SB + SV) * Kol_Zap;
    TR_O := TR_O + TR;
    ADOQuery1.Next;
  end;
  Label14.Caption := IntToStr(ADOQuery1.RecordCount);
  Label16.Caption := IntToStr(Kol_Zap_O);
  Label5.Caption := FloatToStr(RoundTo(TR_O, -2));
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                //запущенные Пакеты
  TR_O := 0;
  Kol_Zap_O := 0;
  SV := 0;
  SB := 0;

  if not mkQuerySelect(ADOQuery1, 'Select [' + FN_SBOR_KLAP_NC + '],[' + FN_SVARKA_NC + '],[' + FN_KOL + '],[' + FN_KOL_ZAP + '] from %s Where (Not [' + FN_ZAG_ZAP + '] IS NULL) AND (Х IS NULL) AND ( [' + FN_SBOR_GOT + '] IS NULL) AND (Отмена IS NULL) ' + Order, ['Klapana']) then
    exit;
  for I := 0 to ADOQuery1.RecordCount - 1 do
  begin
    SB := StrToFloat(ADOQuery1.FieldByName(FN_SBOR_KLAP_NC).AsString);
    SV := StrToFloat(ADOQuery1.FieldByName(FN_SVARKA_NC).AsString);
    Kol := StrToInt(ADOQuery1.FieldByName(FN_KOL).AsString);
    Kol_Zap := StrToInt(ADOQuery1.FieldByName(FN_KOL_ZAP).AsString);
    Kol_Zap_O := Kol_Zap_O + Kol_Zap;
    TR := (SB + SV) * Kol_Zap;
    TR_O := TR_O + TR;
    ADOQuery1.Next;
  end;
  Label21.Caption := IntToStr(ADOQuery1.RecordCount);
  Label31.Caption := FloatToStr(RoundTo(TR_O, -2));
  Label4.Caption := IntToStr(Kol_Zap_O);
  Kol_Zap_O := 0;
  SV := 0;
  SB := 0;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where (Х IS NULL) AND ( [' + FN_SBOR_GOT + '] IS NULL) AND (Отмена IS NULL) ' + Order, ['Klapana']) then
    exit;
  for I := 0 to ADOQuery1.RecordCount - 1 do
  begin
    Kol_Zap := StrToInt(ADOQuery1.FieldByName(FN_KOL).AsString);
    Kol_Zap_O := Kol_Zap_O + Kol_Zap;
    ADOQuery1.Next;
  end;

  Label62.Caption := IntToStr(Kol_Zap_O);
end;

procedure TForm1.BitBtn7Click(Sender: TObject);
begin
  Order2 := 'ORDER BY [' + SGL.Cells[SGL.Col, 0] + ']';
  Button28.Click;
end;

procedure TForm1.BitBtn8Click(Sender: TObject);
begin
  Order2 := 'ORDER BY [' + SGL.Cells[SGL.Col, 0] + '] DESC';
  Button28.Click;
end;

procedure TForm1.BitBtn9Click(Sender: TObject);
begin
  Order2 := 'ORDER BY [' + StringGrid6.Cells[StringGrid6.Col, 0] + ']';
  Button28.Click;
end;

procedure TForm1.BLF1Click(Sender: TObject);
var
  IDGP, Idko: string;
  X2: Integer;
begin
  X2 := SGL.Row;
  IDGP := SGL.Cells[I_FN_SGP + 2, X2];
  Idko := SGL.Cells[I_FN_SGP + 8, X2];
  if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET [BLF]=' + #39 + 'True' + #39 +
  ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ') AND ([IdКО]=' + #39 + Idko + #39 + ') ', ['KlapanaZap']) then
    Exit;
  SGL.Cells[I_FN_SGP + 11, X2] := 'True';
end;

procedure TForm1.BLF2Click(Sender: TObject);
var
  IDGP, Idko: string;
  X2: Integer;
begin
  X2 := SGL.Row;
  IDGP := SGL.Cells[I_FN_SGP + 2, X2];
  Idko := SGL.Cells[I_FN_SGP + 8, X2];
  if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET [BLF]=' + #39 + 'False' + #39 +
  ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ') AND ([IdКО]=' + #39 + Idko + #39 + ') ', ['KlapanaZap']) then
    Exit;
  SGL.Cells[I_FN_SGP + 11, X2] := 'False';
end;

procedure TForm1.BitBtn10Click(Sender: TObject);
begin
  Order2 := 'ORDER BY [' + StringGrid6.Cells[StringGrid6.Col, 0] + ']' + ' DESC ';
  Button28.Click;
end;

procedure TForm1.Button30Click(Sender: TObject);
begin
  Flag_Briket := 1;
  FV1.Show;
end;

procedure TForm1.Button31Click(Sender: TObject);
begin
  FZapuskVozd.ShowModal;
end;

procedure TForm1.Button35Click(Sender: TObject);
begin
       // Button34.Click;
end;

procedure TForm1.Edit2Change(Sender: TObject);
begin
  Find_StringGrid(ZSG, Edit2.Text, I_FN_ZAK, Label2.Caption, 5);
end;

procedure TForm1.Edit31Click(Sender: TObject);
begin
  ComboBox8.Text := '';
  Edit4.Text := '';
  Edit5.Text := '';
  Edit36.Text := '';
end;

procedure TForm1.Edit31KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and (Button36.Enabled) then
    Button36Click(nil);
end;

procedure TForm1.Edit32Change(Sender: TObject);
begin
  ComboBox19.ItemIndex := 0;
end;

procedure TForm1.Edit32Click(Sender: TObject);
begin
  Edit12.Text := '';
  Edit13.Text := '';
  Edit9.Text := '';
end;

procedure TForm1.Edit32KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and (Button55.Enabled) then
    Button55Click(nil);
end;

procedure TForm1.Edit33Change(Sender: TObject);
begin
  Label182.Caption := 'БЗ';
  Find_StringGrid(SG4, Edit33.Text, 2, Label182.Caption, 5);
end;

procedure TForm1.Edit33Click(Sender: TObject);
begin
  Edit24.Text := '';
end;

procedure TForm1.Edit33KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and (Btn41.Enabled) then
    Btn41Click(nil);
end;

procedure TForm1.Edit34KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then
    Button42Click(nil);
end;

procedure TForm1.Edit36Click(Sender: TObject);
begin
  ComboBox8.Text := '';
  Edit4.Text := '';
  Edit5.Text := '';
  Edit31.Text := '';
end;

procedure TForm1.Edit36KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and (Button36.Enabled) then
    Button36Click(nil);
end;

procedure TForm1.Edit37Click(Sender: TObject);
begin
  Edit38.Text := '';
  Edit40.Text := '';
end;

procedure TForm1.Edit37KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then
    Button68Click(nil);
end;

procedure TForm1.Edit38Click(Sender: TObject);
begin
  Edit37.Text := '';
  Edit40.Text := '';
end;

procedure TForm1.Edit38KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then
    Button68Click(nil);
end;

procedure TForm1.Edit39Click(Sender: TObject);
begin
  Edit12.Text := '';
  Edit13.Text := '';
  Edit32.Text := '';
  Edit9.Text := '';
end;

procedure TForm1.Edit3Change(Sender: TObject);
begin
  Find_StringGrid(StringGrid10, Edit3.Text, I_FN_ZAK, Label17.Caption, 5);
end;

procedure TForm1.Edit3Click(Sender: TObject);
begin
  Find_StringGrid(StringGrid10, Edit3.Text, I_FN_ZAK, Label17.Caption, 5);
end;

procedure TForm1.Edit3KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then
    Button40Click(nil);
end;

function Material_Gib(Mater, Dlin_R, Shir_R, Dlin, Shir, Shir_Pol1, Shir_Pol2, Detal: string; KL, Kol_Gib, BB: Integer; IDGP: string; Kol_Det: Double): TResult;
var
  I: integer;
  Res_List, Res_Tol, Srav, Klap, Res_Lop, Ugol, KolGib, Res_Resh, Resh_RON, Lenta, Kol_LOP_I, B, Res: Integer;
  Mat, Tol_S, NC_S, NC_S2, NC_S3, Dlin_S, Shir_S, GP, Det, S: string;
  Res_Tol55, Tol, NC, NC2, NC3, ShirI, DlinI, DlinD, C, Kol_Ed, Razmet_KPU, Kol_lop, A_Lenta, T, DlinII, SH1, SH2, F1, F2: Double;
  Flag_Razb_Klapana, Cel, Des: Integer;
begin
        //+ ++++++++++++++++++++++++++++++++++++++++++
        //Лист ДПРНМ 1,0х600х1500 Л63 ГОСТ 931-90  'Круг 15-h11 ГОСТ 7417-75 /12Х18Н10Т ГОСТ 5949-75'
  Mat := Mater;
  //KL - тип клапана 0-КПУ 1-КПД, 2-Гермик-ДУ, 3-КЭД, 4-
  if Shir_R = '' then
    Shir_R := '0';
  if Dlin_R = '' then
    Dlin_R := '0';
  Dlin_S := Dlin_R;
  Shir_S := Shir_R;

  ShirI := StrToFloat(Shir_R);
  DlinI := StrToFloat(Dlin_R);
        //===============
  if Shir_Pol1 = '' then //До первого отверстия
    SH1 := 0
  else
    SH1 := StrToFloat(Shir_Pol1);
        //----------------------
  if Shir_Pol2 = '' then  //ШАГ ()150
    SH2 := 0
  else
    SH2 := StrToFloat(Shir_Pol2);
        //====================
  Klap := KL;
  if KL = 0 then
    I := 0;
  GP := IDGP;
  Det := Detal;

  KolGib := Kol_Gib;
  Kol_Ed := Kol_Det;
  Result.MAT_G_Do1 := 0;
  Result.MAT_G_Do2 := 0;
  Result.MAT_G_Do3 := 0;
  B := BB;
  Res_List := Pos('ФЭЗ', Mat);
  if Res_List <> 0 then
    Mat := '1';
  Res_List := Pos('Круг', Mat);
  if Res_List <> 0 then
    Mat := '1';
  Res_List := Pos('ДПРНМ', Mat);
  if Res_List <> 0 then
    Mat := '1';
  Res := Pos('Шпилька', Mat);
  if (Mat = '') or (Res <> 0) then
    Mat := '0';
  try
        //Лента на шестьдесят НЕРЖ 0,3
    Res_List := Pos('НЕРЖ', Mat);
    if Res_List <> 0 then
      Delete(Mat, 1, Res_List + 4);
    Res_List := Pos('Л', Mat);
    if Res_List <> 0 then
    begin
      Res_Tol := Pos(' ', Mat); // Лента
      Delete(Mat, 1, Res_Tol);
                //
      Res_Tol := Pos(' ', Mat); //ОЦ
      Delete(Mat, 1, Res_Tol);

      Res_Tol := Pos(' ', Mat); //08pc
      Delete(Mat, 1, Res_Tol);

      Res_Tol := Pos('х', Mat); //x
      Delete(Mat, Res_Tol, 50);

      Res_Tol := Pos('*', Mat); //*
      Delete(Mat, Res_Tol, 50);

      Res_Tol := Pos(' ', Mat); //08pc
      Delete(Mat, 1, Res_Tol);
    end
    else
    begin
      Res_Tol := Pos(' ', Mat);
      Delete(Mat, 1, Res_Tol);
    end;
    Res_List := Pos('ОЦ', Mat);
    if Res_List <> 0 then
      Delete(Mat, 1, 2);
        //+++++++++++++++++++++++++++++++++++++++++++++
    Res := Pos('Шпилька', Mat);
    if (Mat = '') or (Res <> 0) then
      Mat := '0';

    Tol := StrToFloat(StringReplace(Mat, ',', '.', [rfReplaceAll, rfIgnoreCase]));
  except
    Mat := '1';
  end;
  if Tol <= 1 then
    Tol_S := '0.55';
  if (Tol > 1) and (Tol <= 2) then
    Tol_S := '2';
  if Tol > 2 then
    Tol_S := '3';
  if DlinI <= 2000 then
    DlinII := 2000
  else
    DlinII := 3000;
        //
  if DlinI <= 1000 then
    DlinII := 1000
  else
    DlinII := 1100;
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Lenta := Pos('Лента уплотнительная', Det);
  Res_Resh := Pos('Решетка жалюзийная', Det);
  Resh_RON := Pos('Решетка РОН', Det);
  Res_Lop := AnsiCompareStr('Корпус лопатки', Det);
        //KL - тип клапана 0-КПУ 1-КПД, 2-Гермик-ДУ, 3-КЭД, 4-
  if Res_Lop = 0 then
  begin
                //КПУ
    if KL = 0 then
      Result.MAT_G_Do1 := 0.034 * 0.85 * 2;
     // Result.MAT_G_Do1 := 0.034 * 2;
    if KL = 2 then
    begin
                //Гермик ДУ
                //Таблица №3+Таблица "66
      if not Form1.mkQuerySelect1(Form1.ADOQuery2, 'Select * from %s Where ([№]=' + #39 + '66' + #39 + ')  And ([Длина]=' + #39 + FloatToStr(DlinII) + #39 + ')', ['[Резка Гибка]']) then
        exit;
      NC_S := (Form1.ADOQuery2.FieldByName('Норма').AsString);
      if NC_S = '' then
        NC := 0
      else
        NC := StrToFloat(NC_S) + StrToFloat(Form1.ADOQuery2.FieldByName('Высота').AsString);

      if not Form1.mkQuerySelect1(Form1.ADOQuery2, 'Select * from %s Where ([№]=' + #39 + '3' + #39 + ') And ([Толщина]=' + #39 + (Tol_S) + #39 + ') And ([Длина]=' + #39 + FloatToStr(DlinII) + #39 + ') And ([Высота]=' + #39 + IntToStr(KolGib) + #39 + ')', ['[Резка Гибка]']) then
        exit;
      NC_S := (Form1.ADOQuery2.FieldByName('Норма').AsString);
      if NC_S = '' then
        NC := NC + 0
      else
        NC := NC + StrToFloat(NC_S);
      Result.MAT_G_Do1 := NC;
    end;
  end;
        //===========================
  if (Lenta = 0) and (Res_Resh = 0) then
  begin
    if Shir_R = '' then
      Shir_R := '0';
    if Dlin_R = '' then
      Dlin_R := '0';
    ShirI := StrToFloat(Shir_R);
    DlinI := StrToFloat(Dlin_R);
    DlinII := StrToFloat(Dlin_R);

    if DlinI <= 2000 then
      DlinII := 2000
    else
      DlinII := 3000;
    if KolGib > 10 then
    begin
      F1 := KolGib / 10;
      Cel := Trunc(F1);
      F2 := SimpleRoundTo(Frac(F1), -2);
      S := FloatToStr(F2);
      Res := Pos('.', S);
      Delete(S, 1, Res);
      Des := StrToInt(S);
    end;
    if not Form1.mkQuerySelect1(Form1.ADOQuery2, 'Select * from %s Where ([№]=' + #39 + '3' + #39 + ') And ([Толщина]=' + #39 + (Tol_S) + #39 + ') And ([Длина]=' + #39 + FloatToStr(DlinII) + #39 + ') And ([Высота]=' + #39 + IntToStr(KolGib) + #39 + ')', ['[Резка Гибка]']) then
      exit;
    NC_S := (Form1.ADOQuery2.FieldByName('Норма').AsString);
    if NC_S = '' then
      NC := 0
    else
      NC := StrToFloat(NC_S);
    Result.MAT_G_Do1 := NC;
  end;
  //================================================================

  if Res_Resh <> 0 then
  begin
    if not Form1.mkQuerySelect1(Form1.ADOQuery2, 'Select * from %s Where ([№]=' + #39 + '9' + #39 + ') And ([Толщина]=' + #39 + IntToStr(KolGib) + #39 + ')', ['[Резка Гибка]']) then
      exit;
    NC_S := (Form1.ADOQuery2.FieldByName('Высота').AsString);
    if NC_S = '' then
      NC := 0
    else
      NC := StrToFloat(NC_S);
                //Result.MAT_G_Do1:=NC;
                //++++++++++++
    NC_S2 := (Form1.ADOQuery2.FieldByName('Длина').AsString);
    if NC_S2 = '' then
      NC2 := 0
    else
      NC2 := StrToFloat(NC_S2);
    Result.MAT_G_Do1 := NC + NC2;
  end;
  //================================================================
  if Resh_RON <> 0 then
  begin
    if DlinI < 1250 then
      DlinII := 1250
    else
      DlinII := 2000;
    if not Form1.mkQuerySelect1(Form1.ADOQuery2, 'Select * from %s Where ([№]=' + #39 + '77' + #39 + ') And ([Толщина]=' + #39 + IntToStr(KolGib) + #39 + ') And ([Длина]=' + #39 + FloatToStr(DlinII) + #39 + ')', ['[Резка Гибка]']) then
      exit;
    NC_S := (Form1.ADOQuery2.FieldByName('Норма').AsString);
    if NC_S = '' then
      NC := 0
    else
      NC := StrToFloat(NC_S);

    Result.MAT_G_Do1 := NC;
  end;
  //================================================================
  Res_Lop := AnsiCompareStr('Стенка лопатки', Det);
  if Res_Lop = 0 then
  begin
    Kol_lop := Kol_Ed;
  end;
  Lenta := Pos('Лента уплотнительная', Det);
        //Лента уплотнительная ?? 050.00.00.001-600
  if Lenta <> 0 then
  begin
    if Shir = '' then
      Shir := '0';
    if Dlin = '' then
      Dlin := '0';
    Dlin_S := Dlin;
    Shir_S := Shir;

    ShirI := StrToFloat(Shir);
    DlinI := StrToFloat(Dlin);
    if Shir_Pol1 = '' then //До первого отверстия
      SH1 := 0
    else
      SH1 := StrToFloat(Shir_Pol1);
          //----------------------
    if Shir_Pol2 = '' then  //ШАГ ()150
      SH2 := 0
    else
      SH2 := StrToFloat(Shir_Pol2);

                //B:=StrToInt(Dlin);
    DlinI := StrToFloat(Dlin);

    if DlinI <= 2000 then
      DlinII := 2000
    else
      DlinII := 3000;
                //KL - тип клапана 0-КПУ 1-КПД, 2-Гермик-ДУ, 3-КЭД, 4-


    if not Form1.mkQuerySelect1(Form1.ADOQuery2, 'Select * from %s Where ([№]=' + #39 + '3' + #39 + ') And ([Толщина]=' + #39 + (Tol_S) + #39 + ') And ([Длина]=' + #39 + FloatToStr(DlinII) + #39 + ') And ([Высота]=' + #39 + IntToStr(KolGib) + #39 + ')', ['[Резка Гибка]']) then
      exit;
    NC_S := (Form1.ADOQuery2.FieldByName('Норма').AsString);
    if NC_S = '' then
      NC := 0
    else
      NC := StrToFloat(NC_S);
    Result.MAT_G_Do1 := NC;
    DlinD := StrToFloat(Dlin);
    A_Lenta := (SH1); // До Первого отверстия(DlinD-(KOl_Lop/2-1)*150)/2;
    Result.MAT_G_Do2 := A_Lenta;
    if SH2 <> 0 then
      Kol_lop := (DlinD - ((SH1 * 2))) / (SH2) + 1
    else
      Kol_lop := 1;
    Result.MAT_G_Do2 := Kol_lop; //Кол Отверст
    T := 0.043 + 0.007 * (Kol_lop / 2) * Kol_Ed + 0.007 * Kol_Ed; //Пробивка отверстий в одной ленте
    Result.MAT_G_Do3 := T;
    Result.MAT_G_Do1 := NC + T;
  end;
end;

function Material_Pila(Mater, Dlin, Shir, Shir_Pol1, Detal: string; KL, R_25, BB: Integer; IDGP: string; Kol_Det: Double): TResult;
var
  I: integer;
  Res_List, Res_Tol, Srav, Klap, Res_Lop, Ugol, KolGib, Res_Resh, Lenta, B, R25, Res: Integer;
  Mat, Tol_S, NC_S, NC_S2, NC_S3, Dlin_S, Shir_S, GP, Det: string;
  Res_Tol55, Tol, NC, NC2, NC3, NC_P_L, ShirI, DlinI, DlinD, C, Kol_Ed, Razmet_KPU, Kol_lop, A_Lenta, T, DlinII: Double;
  Flag_Razb_Klapana, Res_Koppus_Lopatki: Integer;
begin
  Mat := Mater;
  Dlin_S := Dlin;
  Shir_S := Shir;
  Klap := KL;
  if KL = 0 then
    I := 0;
  GP := IDGP;
  Det := Detal;
  R25 := R_25;
  Kol_Ed := Kol_Det;
  Result.MAT_Pila_Do1 := 0;
  Result.MAT_Pila_Do2 := 0;
  Result.MAT_Pila_Do3 := 0;
  B := BB;
  Res_List := Pos('ФЭЗ', Mat);
  if Res_List <> 0 then
    Mat := '1';
  Res_List := Pos('ДПРНМ', Mat);
  if Res_List <> 0 then
    Mat := '1';
  Res_List := Pos('Круг', Mat);
  if Res_List <> 0 then
    Mat := '1';
  Res := Pos('Шпилька', Mat);
  if (Mat = '') or (Res <> 0) then
    Mat := '0';
  try
    Res_List := Pos('НЕРЖ', Mat);
    if Res_List <> 0 then
      Delete(Mat, 1, Res_List + 4);
    Res_List := Pos('Л', Mat);
    if Res_List <> 0 then
    begin
      Res_Tol := Pos(' ', Mat); // Лента
      Delete(Mat, 1, Res_Tol);

      Res_Tol := Pos(' ', Mat); //ОЦ
      Delete(Mat, 1, Res_Tol);

      Res_Tol := Pos(' ', Mat); //08pc
      Delete(Mat, 1, Res_Tol);

      Res_Tol := Pos('х', Mat); //x
      Delete(Mat, Res_Tol, 50);

      Res_Tol := Pos('*', Mat); //*
      Delete(Mat, Res_Tol, 50);

      Res_Tol := Pos(' ', Mat); //08pc
      Delete(Mat, 1, Res_Tol);
    end
    else
    begin
      Res_Tol := Pos(' ', Mat);
      Delete(Mat, 1, Res_Tol);
    end;
    Res_List := Pos('ОЦ', Mat);
    if Res_List <> 0 then
      Delete(Mat, 1, 2);
    Res := Pos('Шпилька', Mat);
    if (Mat = '') or (Res <> 0) then
      Mat := '0';
  except
    Mat := '1';
  end;
        //++++++++++++++++++++++++++++++++==
        //KL - тип клапана 0-КПУ 1-КПД, 2-Гермик-ДУ, 3-КЭД, 4-
  Res_Lop := Pos('Лопатка', Det);
  Res_Koppus_Lopatki := Pos('Корпус лопатки', Det);
  Res_List := R_25; //Pos('20001',Mat);//if R_25 = 1 то Лопатка Р25

  Ugol := Pos('Стенка', Det);
        //++++++++++++++++++++++++++++++++++++++++++++++++
  if (Res_Lop <> 0) and (Res_List <> 0) then
  begin
    DlinI := StrToFloat(Dlin);  // Shir
    if DlinI <= 250 then
      DlinI := 250;
    if (DlinI > 250) and (DlinI <= 500) then
      DlinI := 500;
    if (DlinI > 500) and (DlinI <= 750) then
      DlinI := 750;
    if (DlinI > 750) then
      DlinI := 1000;
    if not Form1.mkQuerySelect1(Form1.ADOQuery2, 'Select * from %s Where   ([№]=' + #39 + '8' + #39 + ') And  ([Длина]=' + #39 + FloatToStr(DlinI) + #39 + ')', ['[Резка Гибка]']) then
      exit;
    NC_S := (Form1.ADOQuery2.FieldByName('Норма').AsString);
    if NC_S = '' then
      NC := 0
    else
      NC := StrToFloat(NC_S);
    Result.MAT_Pila_Do1 := NC;
  end;
                //++++++++++++++++++++++++++++++++++++++++++++++++ Простая лопатка не Р25
  if ((Res_Lop <> 0) and (Res_List = 0)) or (Ugol <> 0) then
  begin
    DlinI := StrToFloat(Dlin);  // Shir
    if DlinI <= 250 then
      DlinI := 250;
    if (DlinI > 250) and (DlinI <= 500) then
      DlinI := 500;
    if (DlinI > 500) and (DlinI <= 750) then
      DlinI := 750;

    if (DlinI > 750) and (DlinI <= 1000) then
      DlinI := 1000;
    if (DlinI > 1000) and (DlinI <= 1250) then
      DlinI := 1250;

    if (DlinI > 1250) and (DlinI <= 2495) then
      DlinI := 2495;

    if (DlinI > 2495) then
      DlinI := 2500;
    if not Form1.mkQuerySelect1(Form1.ADOQuery2, 'Select * from %s Where   ([№]=' + #39 + '13' + #39 + ') And  ([Длина]=' + #39 + FloatToStr(DlinI) + #39 + ')', ['[Резка Гибка]']) then
      exit;
    NC_S := (Form1.ADOQuery2.FieldByName('Норма').AsString);
    if NC_S = '' then
      NC := 0
    else
      NC := StrToFloat(NC_S);
    Result.MAT_Pila_Do1 := NC;
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++
  if (Res_Lop = 0) and (Res_List = 0) then
  begin
    DlinI := StrToFloat(Dlin) + 78;
    if DlinI <= 350 then
      DlinI := 350;
    if (DlinI > 350) and (DlinI <= 500) then
      DlinI := 500;
    if (DlinI > 500) and (DlinI <= 750) then
      DlinI := 750;
    if (DlinI > 750) then
      DlinI := 1000;
    if not Form1.mkQuerySelect1(Form1.ADOQuery2, 'Select * from %s Where   ([№]=' + #39 + '7' + #39 + ') And  ([Длина]=' + #39 + FloatToStr(DlinI) + #39 + ')', ['[Резка Гибка]']) then
      exit;
    NC_S := (Form1.ADOQuery2.FieldByName('Норма').AsString);
    if NC_S = '' then
      NC := 0
    else
      NC := StrToFloat(NC_S) + 0.007;
    Result.MAT_Pila_Do1 := NC;
  end;
  //Пила ленточная
  DlinI := StrToFloat(Dlin);  // Shir
  if DlinI < 500 then
    DlinI := 500;
  if (DlinI > 500) then
    DlinI := 1250;

  if not Form1.mkQuerySelect1(Form1.ADOQuery2, 'Select * from %s Where   ([№]=' + #39 + '6' + #39 + ') And  ([Длина]=' + #39 + FloatToStr(DlinI) + #39 + ')', ['[Резка Гибка]']) then
    exit;
  NC_S := (Form1.ADOQuery2.FieldByName('Норма').AsString);
  if NC_S = '' then
    NC := 0
  else
    NC := StrToFloat(NC_S);
  Result.MAT_Pila_Do2 := NC + 0.006;
    //Пила ленточная
end;


procedure TForm1.Specif_GKV(Izdel, GP, KO, Zak, BZ, Dat, Tab, Tab2: string; AA: Integer);
var
  XLApp, Sheet: Variant;
  i, j, y, PosTrud, F, A, col, res: integer;
  Izdelie, Izdelie1, idGP, idKO, Zakaz, BZ_, Dat_, Fil, Str, Str2, Obozn, Det_F, Det_Baz, Kol: string;
  Parent, Vid, Elem, Kol_Ed, EI, Typ, Kateg, Prim, Diam, Massa, Dlina, Shir, Dlin_Raz, Shir_Raz, Obem, Kol_Gib, Kanban, Salvagnini, Pokraska, Mater, Kompl_Ved, Trumpf, Gibka, Pila, Trumpf_o, Gibka_O, Pila_O, Nog, Uglorub, Prokat, Naim, Naim_Izdel, Grupp, Rout, Varian, Dir, Dir1, Dir2, Data, Kod, God, Dat2, Mes, SH1, SH2, Razd, Nach_Razd, Kompl, Pokr, Dat1, List, Nam, s, B, H: string;
  Result: Tresult;
  NC_G1, NC_G2, NC_G3, NC_P1, NC_P2, NC_P3, NC_N1, NC_N2, NC_N3, Kol_II, Kol_II2: Double;
begin
  Clear_StringGrid(SG1);
  idGP := GP;
  idKO := KO;
  Naim := Izdel;    //Гибкая вставка Канал-ГКВ-90-50
  s := '0';
  B := '0';
  H := '0';
  Dir := '\\MSS-DC06\V\ОИТ\Cklapana2\Детали из Файла\';
  F := Pos('Гибкая вставка Канал-ГКВ', Naim);
  if F <> 0 then
    Str := Dir + 'Сопроводительный лист Вставка гибкая Канал-ГКВ' + '.xlsm';
  if not FileExists(Str) then
  begin
    j := 0;
    Exit;
  end;
    //Гибкая вставка Канал-ГКВ-90-50
  F := Pos('-', Naim);
  if F <> 0 then
    Delete(Naim, 1, F); // ГКВ-20-60
    //Гибкая вставка Канал-ГКВ-90-50
    //Гибкая вставка Канал-ГКВ-60-35-В
  F := Pos('-', Naim);
  if F <> 0 then
    Delete(Naim, 1, F); // 20-60
    //Гибкая вставка Канал-ГКВ-90-50
   {  }
  F := Pos('-', Naim);
  if F <> 0 then
    List := StringReplace(Naim, '-', 'х', [rfReplaceAll, rfIgnoreCase]); // 200х600

  F := Pos('-', Naim);   // 20х60
  if F <> 0 then
    Insert(s, Naim, F - 1);

  F := Pos('-В', Naim);
  if F <> 0 then
    Delete(Naim, F, 3); // 20-60-В

  Insert(s, Naim, 40);
  F := Pos('-', Naim);   // 20х60
  if F <> 0 then
  begin
    B := Copy(Naim, 1, F - 1);
    Delete(Naim, 1, F);
  end;
  H := Naim;
  Dat1 := FormatDateTime('mm.dd.YYYY', Now);
  XLApp := CreateOleObject('Excel.Application');
  try
    XLApp.Visible := False;
    XLApp.Workbooks.Open(Str);
    for col := 1 to XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Count do
    begin
      Nam := XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[col].Name;
      res := AnsiCompareStr(Nam, List);
      if res = 0 then
      begin
        XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Item[col].Activate;
        Sheet := XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[col];
        Break;
      end;
    end;
    Str := Sheet.Cells[3, 1];

    Obozn := Izdel;    //Гибкая вставка Канал-ГКВ-90-50
    Elem := Izdel;
    Vid := 'Сборочные единицы';
    Kol := '1';
    EI := '';
    Diam := '0';
    Massa := '0';
    Dlina := B;
    Shir := H;
    Dlin_Raz := B;
    Shir_Raz := H;
    Obem := '0';
    Kol_Gib := '0'; //Sheet.Cells[i , 17];
    Mater := '';
    SH1 := '0';
    SH2 := '0';
    if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + idGP + #39 + ') AND (IdКО=' + #39 + idKO + #39 +
    ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 + ') ', [Tab]) then
      exit;
            //
    if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' + #39 + '1' + #39 + ',[Статус]=' + #39 + '1' + #39 + ',[Технолог Обраб]=' + #39 + Dat1 + #39 + ' WHERE ([IdГП]=' + #39 + idGP + #39 + ') AND ([IdКО]=' + #39 + idKO + #39 + ') ', [Tab2]) then
      Exit;
    if ADOQuery2.RecordCount = 0 then
    begin

      if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' + '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
      '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' +
      'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )',
      [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39, #39 + EI + #39,
      #39 + Obozn + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39, #39 + idGP + #39, #39 + Izdel + #39, #39 + Zak + #39, #39 + ConvertDat1(Dat) + #39, #39 + idKO + #39]) then
        exit;

    end;
    for i := 1 to 18 do
    begin
      PB1.Position := 0;
      PB1.Min := 0;
      PB1.Max := 69;
      Elem := '';
      Trumpf := 'False';
      Gibka := 'False';
      Pila := 'False';
      Trumpf_o := '0';
      Gibka_O := '0';
      Pila_O := '0';
           if (I>=4) and (I<6) then  //TRUMPF
           begin
                Vid := 'Детали';
                Elem :=Sheet.Cells[i , 3];
                if Elem='' then
                  Continue;
                  Dlina :=Sheet.Cells[i , 11];
                Str:=  Sheet.Cells[i, 1];
               // Str2:=  Sheet.Cells[i, 6];
                {if col=5 then
                Obozn :=Str+Str2
                Else }
                Obozn :=Str+'.'+Dlina;
                Kol   :=Sheet.Cells[i , 4];
                EI    :='';
                Diam := '0';
                Massa :='0';

                Shir := '0';//Sheet.Cells[3 , 22];
                Dlin_Raz :=Sheet.Cells[i , 11];
                Shir_Raz:= '0';//:= Sheet.Cells[3 , 22];
                Obem := '0';
                Kol_Gib :='0';
                Mater := Sheet.Cells[i , 3];
                SH1:= '0';
                SH2:= '0';
                Pila:='True';
                //Gibka :='True';
                Pila_o:='1';
                Result := Material_Pila(Mater, (Dlin_Raz), (Shir_raz), (sh1), Elem, 1, 0, StrToInt(Dlina), IDGP, StrToFloat(Kol));
                NC_P1 := Result.MAT_Pila_Do1;
                NC_P2 := Result.MAT_Pila_Do2;
                //Gibka_O :='2';
                {Result := Material_Gib(Mater, Dlin_Raz, Shir_raz, Dlina, Shir, SH1, SH2,
                Elem, 1, StrToInt(Kol_Gib), StrToInt(Dlina), IDGP, StrToFloat(Kol));
                NC_G1 := Result.MAT_G_Do1; //Н\Ч из таб 3
                NC_G2 := Result.MAT_G_Do2; // //Кол Отверст
                NC_G3 := Result.MAT_G_Do3; //Н/Ч +Выруб отвер              }
                          //+++++++++++++++++++++++
              if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (Обозначение=' + #39 + Obozn + #39 +
              ') ', ['СпецифОбщая']) then
              exit;

              if ADOQuery2.RecordCount = 0 then
              begin

              if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
              '(Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
              ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
              '[ШиринаРазв], [Пила],[ПилаОч],[Н\ЧПила], [Материал],Изделие,Дата) ' +
              'Values (%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s)',
              ['СпецифОбщая',#39 + 'True' + #39, #39 + Vid + #39, #39 + Elem + #39, #39 + IntToStr(AA) + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39,
               #39 + Pila + #39,#39 + Pila_O + #39, #39 + FloatToStr(Nc_P1) + #39,
                #39 + Mater + #39,
               #39 + Izdel + #39,
               #39 + ConvertDat1(Dat) + #39]) then
              exit;
              end;
                          //
            if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' +
            #39+ '1' + #39 + ',[Статус]=' +
            #39+ '1' + #39 + ',[Технолог Обраб]=' +
            #39+ Dat1 + #39 +
            ' WHERE ([IdГП]=' + #39 + IDGP + #39 +
            ') AND ([IdКО]=' + #39 + IDKO + #39 +
            ') ', [Tab2]) then
            Exit;

            if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + IDGP + #39 +
            ') AND (IdКО=' + #39 + IDKO + #39 +
            ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 +
            ') ', [Tab]) then
            exit;
            if ADOQuery2.RecordCount = 0 then
            begin

              if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
              '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
              ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
              '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' +
              'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )',
              [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39,
               #39 + IDGP + #39, #39 + Izdel + #39, #39 + Zak + #39,
               #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39 ]) then
              exit;

            end;
           end;
      if (i >= 13) and (i < 18) then //Прочие изделия
      begin
        Vid := 'Прочие изделия';
        Elem := Sheet.Cells[i, 2];
        Obozn := '';
        Kol := Sheet.Cells[i, 11];
        EI := Sheet.Cells[i, 12];
        Diam := '0';
        Massa := '0';
        Dlina := '0';
        Shir := '0';
        Dlin_Raz := '0';
        Shir_Raz := '0';
        Obem := '0';
        Kol_Gib := '0';
        Mater := '';
        SH1 := '0';
        SH2 := '0';
      end;
      if Elem = '' then
        Continue;
      if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + idGP + #39 + ') AND (IdКО=' + #39 + idKO + #39 + ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 + ') ', [Tab]) then
        exit;
            //
      if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' + #39 + '1' + #39 + ',[Статус]=' + #39 + '1' + #39 + ',[Технолог Обраб]=' + #39 + Dat1 + #39 + ' WHERE ([IdГП]=' + #39 + idGP + #39 + ') AND ([IdКО]=' + #39 + idKO + #39 + ') ', [Tab2]) then
        Exit;
      if ADOQuery2.RecordCount = 0 then
      begin

        if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' + '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' + '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' + 'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )', [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39, #39 + idGP + #39, #39 + Izdel + #39, #39 + Zak + #39, #39 + ConvertDat1(Dat) + #39, #39 + idKO + #39]) then
          exit;

      end;

      PB1.Position := i;
    end;
  finally
                // Quit Excel
    if not VarIsEmpty(XLApp) then
    begin
      XLApp.DisplayAlerts := False;
      XLApp.Quit;
      XLApp := Unassigned;
      Sheet := Unassigned;

    end;
  end;
  PB1.Position := 0;
end;

procedure TForm1.Specif_Shum_D(Izdel, GP, KO, Zak, BZ, Dat, Tab, Tab2: string; AA: Integer);
var
  XLApp, Sheet: Variant;
  i, j, y, PosTrud, F, A, col, res: integer;
  Izdelie, Izdelie1, idGP, idKO, Zakaz, BZ_, Dat_, Fil, Str, Str2, Obozn, Det_F, Det_Baz, Kol: string;
  Parent, Vid, Elem, Kol_Ed, EI, Typ, Kateg, Prim, Diam, Massa, Dlina, Shir, Dlin_Raz, Shir_Raz, Obem, Kol_Gib, Kanban, Salvagnini, Pokraska, Mater, Kompl_Ved, Trumpf, Gibka, Pila, Nog, Prokat, Svar, Zig, Trumpf_o, Gibka_O, Pila_O, Nog_O, Prokat_O, Svar_O, Zig_o, Uglorub, Naim, Naim_Izdel, Grupp, Rout, Varian, Dir, Dir1, Dir2, Data, Kod, God, Dat2, Mes, SH1, SH2, Razd, Nach_Razd, Kompl, Pokr, Dat1, List, Nam, s: string;
  Result: Tresult;
  NC_G1, NC_G2, NC_G3, NC_P1, NC_P2, NC_P3, NC_N1, NC_N2, NC_N3, Kol_II, Kol_II2: Double;
begin
  Clear_StringGrid(SG1);
  idGP := GP;
  idKO := KO;
  Naim := Izdel;
  s := '0';
  Dir := '\\MSS-DC06\V\ОИТ\Cklapana2\Детали из Файла\';
  F := Pos('Шумоглушитель Канал-ГКД', Naim);
  if F <> 0 then
    Nam := Dir + 'Сопроводительный лист Шумоглушитель ГКД' + '.xlsm';
  if not FileExists(Nam) then
  begin
    j := 0;
    Exit;
  end;
  Dat1 := FormatDateTime('mm.dd.YYYY', Now);
  XLApp := CreateOleObject('Excel.Application');
  try
    XLApp.Visible := False;
    XLApp.Workbooks.Open(Nam);

    XLApp.Workbooks[ExtractFileName(Nam)].WorkSheets.Item[1].Activate;
    Sheet := XLApp.Workbooks[ExtractFileName(Nam)].WorkSheets[1];

      //Шумоглушитель Канал-ГКД-60-35
    F := Pos('-', Naim);
    if F <> 0 then
      Delete(Naim, 1, F); // ГКД-60-35
      //
    F := Pos('-', Naim);
    if F <> 0 then
      Delete(Naim, 1, F); //60-35
      //Заполняем исходные данные
    Sheet.Cells[3, 19] := Naim;
      //
    F := Pos('-', Naim);
    if F <> 0 then
    begin
      Dlina := Copy(Naim, 1, F - 1) + '0';
      Delete(Naim, 1, F); //35
    end;
      //
    Shir := Naim + '0';
      //Заполняем исходные данные
    Sheet.Cells[3, 20] := Dlina + 'x' + Shir;
    Sheet.Cells[3, 21] := Dlina;
    Sheet.Cells[3, 22] := Shir;

    for i := 1 to 11 do
    begin

      Elem := '';
      Trumpf := 'False';
      Gibka := 'False';
      Pila := 'False';
      Nog := 'False';
      Prokat := 'False';
      Svar := 'False';
      Zig := 'False';

      Trumpf_o := '0';
      Gibka_O := '0';
      Pila_O := '0';
      Nog_O := '0';
      Prokat_O := '0';
      Svar_O := '0';
      Zig_o := '0';

           //Dlina :='0';
           //Shir:='0';
      Dlin_Raz := Dlina; //Sheet.Cells[3 , 21];
      Shir_Raz := Shir; // Sheet.Cells[3 , 22];
      if (i >= 3) and (i < 11) then  //TRUMPF+Гибка
      begin

        Vid := 'Детали';
        Str2 := Sheet.Cells[i, 2];
        Str := Sheet.Cells[i, 1];
        if Str = '' then
          Continue;
        Elem := Sheet.Cells[i, 3];
               // Str2:=  Sheet.Cells[i, 2];
        Obozn := Str + Str2;
        Kol := Sheet.Cells[i, 4];
        EI := '';
        Diam := '0';
        Massa := '0';

        Obem := '0';
        Kol_Gib := '0'; //Sheet.Cells[i , 17];
        Mater := Sheet.Cells[i, 11];
        SH1 := '0';
        SH2 := '0';
        SH2 := Sheet.Cells[i, 12];
        if SH2 <> '' then
        begin
          Trumpf := 'True';
          Trumpf_o := '1';
        end;

        SH2 := Sheet.Cells[i, 14];
        if SH2 <> '' then
        begin
          Gibka := 'True';
          Gibka_O := '2';
        end;

        if not Form1.mkQueryDelete(Form1.ADOQuery1, 'DELETE FROM [%s] Where (Элемент= ' + #39 + Elem + #39 + ') AND (Обозначение= ' + #39 + Obozn + #39 + ')', ['СпецифОбщая']) then
          Exit;
                //+++++++++++++++++++++++
        if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (Обозначение=' + #39 + Obozn + #39 + ') ', ['СпецифОбщая']) then
          exit;

        if ADOQuery2.RecordCount = 0 then
        begin

          if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' + '(Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],[ШиринаРазв],[КолГибов],' + '  [Trumph],[TrumphОч],[Гибка],[ГибкаОч],[Вальцы],[ВальцыОч],[Сварка],[СваркаОч],' + '[Материал],Изделие,Дата) ' + 'Values (%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)', ['СпецифОбщая', #39 + 'True' + #39, #39 + Vid + #39, #39 + Elem + #39,
            #39 + IntToStr(AA) + #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Trumpf + #39, #39 + Trumpf_o + #39, #39 + Gibka + #39, #39 + Gibka_O + #39, #39 + Prokat + #39, #39 + Prokat_O + #39, #39 + Svar + #39, #39 + Svar_O + #39, #39 + Mater + #39, #39 + Izdel + #39, #39 + ConvertDat1(Dat) + #39]) then
            exit;
        end;
        if Elem = '' then
          Continue;
        if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + idGP + #39 + ') AND (IdКО=' + #39 + idKO + #39 + ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 + ') ', [Tab]) then
          exit;
            //
        if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' + #39 + '1' + #39 + ',[Статус]=' + #39 + '1' + #39 + ',[Технолог Обраб]=' + #39 + Dat1 + #39 + ' WHERE ([IdГП]=' + #39 + idGP + #39 + ') AND ([IdКО]=' + #39 + idKO + #39 + ') ', [Tab2]) then
          Exit;
        if ADOQuery2.RecordCount = 0 then
        begin

          if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' + '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' + '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' + 'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )', [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39, #39 + idGP + #39, #39 + Izdel + #39, #39 + Zak + #39, #39 + ConvertDat1(Dat) + #39, #39 + idKO + #39]) then
            exit;
        end;
      end;
    end;

      //Сборочные

    XLApp.Workbooks[ExtractFileName(Nam)].WorkSheets.Item[2].Activate;
    Sheet := XLApp.Workbooks[ExtractFileName(Nam)].WorkSheets[2];
    for i := 1 to 8 do
    begin

      if (i >= 4) and (i < 7) then //Сборочные единицы
      begin
        Vid := 'Сборочные единицы';
        Elem := Sheet.Cells[i, 3];
        Str := Sheet.Cells[i, 1];
                //Str2:=  Sheet.Cells[i, 2];
        Obozn := Str;
        Kol := Sheet.Cells[i, 4];
        EI := '';
        Diam := '0';
        Massa := '0';
        Dlina := '0';
        Shir := '0';
        Dlin_Raz := '0';
        Shir_Raz := '0';
        Obem := '0';
        Kol_Gib := '0';
        Mater := '';
        SH1 := '0';
        SH2 := '0';
        if Elem = '' then
          Continue;
        if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + idGP + #39 + ') AND (IdКО=' + #39 + idKO + #39 + ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 + ') ', [Tab]) then
          exit;
            //
        if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' + #39 + '1' + #39 + ',[Статус]=' + #39 + '1' + #39 + ',[Технолог Обраб]=' + #39 + Dat1 + #39 + ' WHERE ([IdГП]=' + #39 + idGP + #39 + ') AND ([IdКО]=' + #39 + idKO + #39 + ') ', [Tab2]) then
          Exit;
        if ADOQuery2.RecordCount = 0 then
        begin

          if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' + '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' + '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' + 'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )', [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39, #39 + idGP + #39, #39 + Izdel + #39, #39 + Zak + #39, #39 + ConvertDat1(Dat) + #39, #39 + idKO + #39]) then
            exit;
        end;
      end;
    end;
      //Сборочные

    XLApp.Workbooks[ExtractFileName(Nam)].WorkSheets.Item[3].Activate;
    Sheet := XLApp.Workbooks[ExtractFileName(Nam)].WorkSheets[3];
    for i := 1 to 11 do
    begin
      if (i >= 4) and (i < 8) then //Прочие изделия
      begin
        Vid := 'Прочие изделия';
        Elem := Sheet.Cells[i, 2];
        Obozn := '';
        Kol := Sheet.Cells[i, 5];
        EI := Sheet.Cells[i, 12];
        Diam := '0';
        Massa := '0';
        Dlina := '0';
        Shir := '0';
        Dlin_Raz := '0';
        Shir_Raz := '0';
        Obem := '0';
        Kol_Gib := '0';
        Mater := '';
        SH1 := '0';
        SH2 := '0';
      end;
      if Elem = '' then
        Continue;
      if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + idGP + #39 + ') AND (IdКО=' + #39 + idKO + #39 + ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 + ') ', [Tab]) then
        exit;
            //
      if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' + #39 + '1' + #39 + ',[Статус]=' + #39 + '1' + #39 + ',[Технолог Обраб]=' + #39 + Dat1 + #39 + ' WHERE ([IdГП]=' + #39 + idGP + #39 + ') AND ([IdКО]=' + #39 + idKO + #39 + ') ', [Tab2]) then
        Exit;
      if ADOQuery2.RecordCount = 0 then
      begin

        if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' + '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' + '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' + 'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )', [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39, #39 + idGP + #39, #39 + Izdel + #39, #39 + Zak + #39, #39 + ConvertDat1(Dat) + #39, #39 + idKO + #39]) then
          exit;
      end;

    end;

  finally
                // Quit Excel
    if not VarIsEmpty(XLApp) then
    begin
      XLApp.DisplayAlerts := False;
      XLApp.Quit;
      XLApp := Unassigned;
      Sheet := Unassigned;

    end;
  end;
  PB1.Position := 0;
end;

procedure TForm1.Specif_Klap_KOL_K(Izdel, GP, KO, Zak, BZ, Dat, Tab, Tab2: string; AA: Integer);
var
  XLApp, Sheet: Variant;
  i, j, y, PosTrud, F, A, col, res: integer;
  Izdelie, Izdelie1, idGP, idKO, Zakaz, BZ_, Dat_, Fil, Str, Str2, Obozn, Det_F, Det_Baz, Kol: string;
  Parent, Vid, Elem, Kol_Ed, EI, Typ, Kateg, Prim, Diam, Massa, Dlina, Shir, Dlin_Raz, Shir_Raz, Obem, Kol_Gib, Kol_G, Kanban, Salvagnini, Pokraska, Mater, Kompl_Ved, Trumpf, Gibka, Pila, Nog, Prokat, Svar, Zig, Trumpf_o, Gibka_O, Pila_O, Nog_O, Prokat_O, Svar_O, Zig_o, Uglorub, Naim, Naim_Izdel, Grupp, Rout, Varian, Dir, Dir1, Dir2, Data, Kod, God, Dat2, Mes, SH1, SH2, Razd, Nach_Razd, Kompl, Pokr, Dat1, List, Nam, s: string;
  Result: Tresult;
  NC_G1, NC_G2, NC_G3, NC_P1, NC_P2, NC_P3, NC_N1, NC_N2, NC_N3, Kol_II, Kol_II2: Double;
begin
  Clear_StringGrid(SG1);
  idGP := GP;
  idKO := KO;
  Naim := Izdel;
  s := '0';
  Dir := '\\MSS-DC06\V\ОИТ\Cklapana2\Детали из Файла\';
  F := Pos('Клапан Канал-КОЛ-К-', Naim);
  if F <> 0 then
    Str := Dir + 'Сопроводительный лист Клапан-Канал-КОЛ' + '.xlsm';
  if not FileExists(Str) then
  begin
    j := 0;
    Exit;
  end;
    //Клапан Канал-КОЛ-К-200
  F := Pos('-', Naim);
  if F <> 0 then
    Delete(Naim, 1, F); // КОЛ-К-200

  Dat1 := FormatDateTime('mm.dd.YYYY', Now);
  XLApp := CreateOleObject('Excel.Application');
  try
    XLApp.Visible := False;
    XLApp.Workbooks.Open(Str);
    for col := 1 to XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Count do
    begin
      Nam := XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[col].Name;
      res := AnsiCompareStr(Nam, Naim);
      if res = 0 then
      begin
        XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Item[col].Activate;
        Sheet := XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[col];
        Break;
      end;
    end;
    Str := Sheet.Cells[3, 1];
    for i := 1 to 25 do
    begin
      PB1.Position := 0;
      PB1.Min := 0;
      PB1.Max := 69;
      Elem := '';
      Trumpf := 'False';
      Gibka := 'False';
      Pila := 'False';
      Nog := 'False';
      Prokat := 'False';
      Svar := 'False';
      Zig := 'False';

      Trumpf_o := '0';
      Gibka_O := '0';
      Pila_O := '0';
      Nog_O := '0';
      Prokat_O := '0';
      Svar_O := '0';
      Zig_o := '0';

      Dlina := '0';
      Shir := '0';
      Dlin_Raz := Dlina; //Sheet.Cells[3 , 21];
      Shir_Raz := Shir; // Sheet.Cells[3 , 22];
      if (i >= 3) and (i < 6) then  //TRUMPF+Гибка
      begin
        Dlina := '0';
        Shir := '0';
        Dlin_Raz := '0';
        Shir_Raz := '0';
        Vid := 'Детали';
        Elem := Sheet.Cells[i, 2];
        Str := Sheet.Cells[i, 1];
               // Str2:=  Sheet.Cells[i, 2];
        Obozn := Str;
        Kol := Sheet.Cells[i, 3];
        EI := '';
        Diam := '0';
        Massa := '0';

        Obem := '0';
        Kol_G := Sheet.Cells[i, 10];
        if Kol_G = '' then
          Kol_Gib := '0'
        else
          Kol_Gib := Sheet.Cells[i, 10];

        Mater := Sheet.Cells[i, 4];
        SH1 := '0';
        SH2 := '0';
        Kol := Sheet.Cells[i, 3];
        SH2 := Sheet.Cells[i, 5];
        if SH2 <> '' then
        begin
          Trumpf := 'True';
          Trumpf_o := '1';
        end;

        SH2 := Sheet.Cells[i, 6];
        if SH2 <> '' then
        begin
          Gibka := 'True';
          Gibka_O := '2';
        end;

        SH2 := Sheet.Cells[i, 7];
        if SH2 <> '' then
        begin
          Pila := 'True';
          Pila_O := '1';
        end;

        SH2 := Sheet.Cells[i, 8];
        if SH2 <> '' then
        begin
          Prokat := 'True';
          Prokat_O := '2';
        end;

        SH2 := Sheet.Cells[i, 9];
        if SH2 <> '' then
        begin
          Svar := 'True';
          Svar_O := '3';
        end;
        if not Form1.mkQueryDelete(Form1.ADOQuery1, 'DELETE FROM [%s] Where (Элемент= ' + #39 + Elem + #39 + ') AND (Обозначение= ' + #39 + Obozn + #39 + ')', ['СпецифОбщая']) then
          Exit;
                //+++++++++++++++++++++++
        if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (Обозначение=' + #39 + Obozn + #39 + ') ', ['СпецифОбщая']) then
          exit;

        if ADOQuery2.RecordCount = 0 then
        begin

          if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' + '(Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],[ШиринаРазв],[КолГибов],' + '  [Trumph],[TrumphОч],[Гибка],[ГибкаОч],[Пила],[ПилаОч],[Вальцы],[ВальцыОч],[Сварка],[СваркаОч],' + '[Материал],Изделие,Дата) ' + 'Values (%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)', ['СпецифОбщая', #39 + 'True' + #39, #39 + Vid +
            #39, #39 + Elem + #39, #39 + IntToStr(AA) + #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Trumpf + #39, #39 + Trumpf_o + #39, #39 + Gibka + #39, #39 + Gibka_O + #39, #39 + Nog + #39, #39 + Nog_O + #39, #39 + Prokat + #39, #39 + Prokat_O + #39, #39 + Svar + #39, #39 + Svar_O + #39, #39 + Mater + #39, #39 + Izdel + #39, #39 + ConvertDat1(Dat) + #39]) then
            exit;
        end;
        if Elem = '' then
          Continue;
        if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + idGP + #39 + ') AND (IdКО=' + #39 + idKO + #39 + ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 + ') ', [Tab]) then
          exit;
            //
        if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' + #39 + '1' + #39 + ',[Статус]=' + #39 + '1' + #39 + ',[Технолог Обраб]=' + #39 + Dat1 + #39 + ' WHERE ([IdГП]=' + #39 + idGP + #39 + ') AND ([IdКО]=' + #39 + idKO + #39 + ') ', [Tab2]) then
          Exit;
        if ADOQuery2.RecordCount = 0 then
        begin

          if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' + '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' + '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' + 'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )', [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39, #39 + idGP + #39, #39 + Izdel + #39, #39 + Zak + #39, #39 + ConvertDat1(Dat) + #39, #39 + idKO + #39]) then
            exit;
        end;
      end;

      if (i = 24) then //Сборочные единицы
      begin
        Vid := 'Сборочные единицы';
        Elem := Sheet.Cells[i, 2];
        Str := Sheet.Cells[i, 1];
                //Str2:=  Sheet.Cells[i, 2];
        Obozn := Str;
        Kol := Sheet.Cells[i, 3];
        EI := '';
        Diam := '0';
        Massa := '0';
        Dlina := '0';
        Shir := '0';
        Dlin_Raz := '0';
        Shir_Raz := '0';
        Obem := '0';
        Kol_Gib := '0';
        Mater := '';
        SH1 := '0';
        SH2 := '0';
        if Elem = '' then
          Continue;
        if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + idGP + #39 + ') AND (IdКО=' + #39 + idKO + #39 + ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 + ') ', [Tab]) then
          exit;
            //
        if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' + #39 + '1' + #39 + ',[Статус]=' + #39 + '1' + #39 + ',[Технолог Обраб]=' + #39 + Dat1 + #39 + ' WHERE ([IdГП]=' + #39 + idGP + #39 + ') AND ([IdКО]=' + #39 + idKO + #39 + ') ', [Tab2]) then
          Exit;
        if ADOQuery2.RecordCount = 0 then
        begin

          if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' + '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' + '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' + 'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )', [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39, #39 + idGP + #39, #39 + Izdel + #39, #39 + Zak + #39, #39 + ConvertDat1(Dat) + #39, #39 + idKO + #39]) then
            exit;
        end;
      end;

      if (i >= 2) and (i < 8) then //Прочие изделия
      begin
        Vid := 'Прочие изделия';
        Elem := Sheet.Cells[i, 13];
        Obozn := '';
        Kol := Sheet.Cells[i, 16];
        EI := Sheet.Cells[i, 17];
        Diam := '0';
        Massa := '0';
        Dlina := '0';
        Shir := '0';
        Dlin_Raz := '0';
        Shir_Raz := '0';
        Obem := '0';
        Kol_Gib := '0';
        Mater := '';
        SH1 := '0';
        SH2 := '0';
      end;
      if Elem = '' then
        Continue;
      if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + idGP + #39 + ') AND (IdКО=' + #39 + idKO + #39 + ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 + ') ', [Tab]) then
        exit;
            //
      if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' + #39 + '1' + #39 + ',[Статус]=' + #39 + '1' + #39 + ',[Технолог Обраб]=' + #39 + Dat1 + #39 + ' WHERE ([IdГП]=' + #39 + idGP + #39 + ') AND ([IdКО]=' + #39 + idKO + #39 + ') ', [Tab2]) then
        Exit;
      if ADOQuery2.RecordCount = 0 then
      begin

        if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' + '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' + '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' + 'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )', [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39, #39 + idGP + #39, #39 + Izdel + #39, #39 + Zak + #39, #39 + ConvertDat1(Dat) + #39, #39 + idKO + #39]) then
          exit;
      end;

      PB1.Position := i;
    end;
  finally
                // Quit Excel
    if not VarIsEmpty(XLApp) then
    begin
      XLApp.DisplayAlerts := False;
      XLApp.Quit;
      XLApp := Unassigned;
      Sheet := Unassigned;

    end;
  end;
  PB1.Position := 0;
end;

procedure TForm1.Specif_Shum_K(Izdel,GP,KO,Zak,BZ,Dat,Tab,Tab2: String;AA:Integer);
var
  XLApp,Sheet: Variant;
  i, j, y, PosTrud,F,A,col,res: integer;
  Izdelie,Izdelie1,idGP,idKO,Zakaz,BZ_,Dat_,Fil,Str,Str2,Obozn,Det_F,Det_Baz,Kol: string;
  Parent, Vid, Elem, Kol_Ed,  EI, Typ, Kateg, Prim, Diam, Massa, Dlina,
  Shir, Dlin_Raz, Shir_Raz, Obem, Kol_Gib, Kanban, Salvagnini, Pokraska, Mater, Kompl_Ved,
  Trumpf,Gibka,Pila,Nog,Prokat,Svar,Zig,
  Trumpf_o,Gibka_O,Pila_O,Nog_O,Prokat_O,Svar_O,Zig_o,
  Uglorub,   Naim, Naim_Izdel, Grupp, Rout, Varian, Dir, Dir1, Dir2,
  Data, Kod, God, Dat2, Mes,  SH1, SH2, Razd, Nach_Razd, Kompl, Pokr,Dat1,List,Nam,s: string;
  Result: Tresult;
  NC_G1, NC_G2, NC_G3, NC_P1, NC_P2, NC_P3, NC_N1, NC_N2, NC_N3,Kol_II,Kol_II2: Double;
begin
    Clear_StringGrid(SG1);
    idGP:=GP;
    idKO :=KO;
    Naim:=Izdel;
    S:='0';
    Dir:= '\\MSS-DC06\V\ОИТ\Cklapana2\Детали из Файла\';
    F:=Pos('Шумоглушитель Канал-ГКК',Naim);
    if F<>0 then
    Str:=Dir+'Сопроводительный лист_Шумоглушитель ГКК(круглый)'+'.xlsm';
    if not FileExists(Str) then
    begin
      J:=0;
      Exit;
    end;
    //Шумоглушитель Канал-ГКК-250-900
    F:=Pos('-',Naim);
    if F<>0 then
    Delete(Naim,1,F);// ГКК-250-900

    Dat1:=FormatDateTime('mm.dd.YYYY',Now);
    XLApp := CreateOleObject('Excel.Application');
    try
                XLApp.Visible := False;
                XLApp.Workbooks.Open(Str);
                for Col := 1 to XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Count do
                begin
                        Nam :=XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[Col].Name;
                        Res := AnsiCompareStr(Nam, Naim);
                        if Res = 0 then
                        begin
                                XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Item[Col].Activate;
                                Sheet :=XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[Col];
                                Break;
                        end;
                end;
               Str:=Sheet.Cells[3, 1];
      for I := 1 to 70 do
      begin
        PB1.Position := 0;
        PB1.Min := 0;
        PB1.Max := 69;
           Elem:='';
           Trumpf:='False';
           Gibka :='False';
           Pila  :='False';
           Nog  :='False';
           Prokat  :='False';
           Svar  :='False';
           Zig  :='False';

           Trumpf_o:='0';
           Gibka_O :='0';
           Pila_O  :='0';
           Nog_O  :='0';
           Prokat_O   :='0';
           Svar_O   :='0';
           Zig_O   :='0';

           Dlina :='0';
           Shir:='0';
           Dlin_Raz :=Dlina;//Sheet.Cells[3 , 21];
           Shir_Raz :=Shir;// Sheet.Cells[3 , 22];
           if (I>=3) and (I<7) then  //TRUMPF+Гибка
           begin
                Dlina :='0';
                Shir := '0';
                Dlin_Raz :='0';
                Shir_Raz := '0';
                Vid := 'Детали';
                Elem :=Sheet.Cells[i , 2];
                Str:=  Sheet.Cells[i, 1];
               // Str2:=  Sheet.Cells[i, 2];
                Obozn :=Str;
                Kol   :=Sheet.Cells[i , 3];
                EI    :='';
                Diam := '0';
                Massa :='0';
                Str2:= Sheet.Cells[i , 11];
                if Str2<>'' then
                begin
                F:=Pos(' ',Str2);
                 if F<>0 then
                 begin
                     Dlina :=Copy(Str2,1,F-1);
                     Delete(Str2,1,F+2);
                 end;

                Shir:=Copy(Str2,1,12);
                Dlin_Raz :=Dlina;//Sheet.Cells[3 , 21];
                Shir_Raz :=Shir;// Sheet.Cells[3 , 22];
                end;
                Obem := '0';
                Kol_Gib :='0';//Sheet.Cells[i , 17];
                Mater := Sheet.Cells[i , 4];
                SH1:= '0';
                SH2:= '0';
                Kol  := Sheet.Cells[i , 3];
                SH2:=Sheet.Cells[i , 5];
                if SH2<>'' then
                begin
                  Trumpf:='True';
                  Trumpf_o:='1';
                end;

                SH2:=Sheet.Cells[i , 6];
                if SH2<>'' then
                begin
                  Nog:='True';
                  Nog_o:='1';
                end;

                SH2:=Sheet.Cells[i , 7];
                if SH2<>'' then
                begin
                  Prokat:='True';
                  Prokat_o:='2';
                end;

                SH2:=Sheet.Cells[i , 8];
                if SH2<>'' then
                begin
                  Svar:='True';
                  Svar_o:='3';
                end;

                //+++++++++++++++++++++++
          if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (Обозначение=' + #39 + Obozn + #39 +
          ') ', ['СпецифОбщая']) then
            exit;

          if ADOQuery2.RecordCount = 0 then
          begin

            if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
            '(Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
            ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],[ШиринаРазв],[КолГибов],' +
            '  [Trumph],[TrumphОч],[Ножницы],[НожницыОч],[Вальцы],[ВальцыОч],[Сварка],[СваркаОч],'+
            '[Материал],Изделие,Дата) ' +
            'Values (%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)',
              ['СпецифОбщая',#39 + 'True' + #39, #39 + Vid + #39, #39 + Elem + #39, #39 + IntToStr(AA) + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39,
               #39 + Trumpf + #39,#39 + Trumpf_O + #39,
               #39 + Nog + #39,#39 + Nog_O + #39,
               #39 + Prokat + #39,#39 + Prokat_O + #39,
               #39 + Svar + #39,#39 + Svar_O + #39,
                #39 + Mater + #39,
               #39 + Izdel + #39,
               #39 + ConvertDat1(Dat) + #39]) then
             exit;
          end;
                    if Elem='' then
            Continue;
          if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + IDGP + #39 +
          ') AND (IdКО=' + #39 + IDKO + #39 +
          ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 +
          ') ', [Tab]) then
            exit;
            //
            if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' +
            #39+ '1' + #39 + ',[Статус]=' +
            #39+ '1' + #39 + ',[Технолог Обраб]=' +
            #39+ Dat1 + #39 +
            ' WHERE ([IdГП]=' + #39 + IDGP + #39 +
            ') AND ([IdКО]=' + #39 + IDKO + #39 +
            ') ', [Tab2]) then
            Exit;
          if ADOQuery2.RecordCount = 0 then
          begin

            if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
            '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
            ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
            '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' +
            'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )',
              [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39,
               #39 + IDGP + #39, #39 + Izdel + #39, #39 + Zak + #39,
               #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39 ]) then
              exit;
          end;
           end;



           if (I>=22) and (I<24) then //Сборочные единицы
           begin
                Vid := 'Сборочные единицы';
                Elem :=Sheet.Cells[i , 2];
                Str:=  Sheet.Cells[i, 1];
                //Str2:=  Sheet.Cells[i, 2];
                Obozn :=Str;
                Kol   :=Sheet.Cells[i , 3];
                EI    :='';
                Diam := '0';
                Massa :='0';
                Dlina :='0';
                Shir := '0';
                Dlin_Raz :='0';
                Shir_Raz := '0';
                Obem := '0';
                Kol_Gib :='0';
                Mater := '';
                SH1:= '0';
                SH2:= '0';
           end;

           if (I>=2) and (I<7) then //Прочие изделия
           begin
                Vid := 'Прочие изделия';
                Elem :=Sheet.Cells[i , 13];
                Obozn :='';
                Kol   :=Sheet.Cells[i , 22];
                EI    :=Sheet.Cells[i , 23];
                Diam := '0';
                Massa :='0';
                Dlina :='0';
                Shir := '0';
                Dlin_Raz :='0';
                Shir_Raz := '0';
                Obem := '0';
                Kol_Gib :='0';
                Mater := '';
                SH1:= '0';
                SH2:= '0';
           end;
          if Elem='' then
            Continue;
          if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + IDGP + #39 +
          ') AND (IdКО=' + #39 + IDKO + #39 +
          ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 +
          ') ', [Tab]) then
            exit;
            //
            if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' +
            #39+ '1' + #39 + ',[Статус]=' +
            #39+ '1' + #39 + ',[Технолог Обраб]=' +
            #39+ Dat1 + #39 +
            ' WHERE ([IdГП]=' + #39 + IDGP + #39 +
            ') AND ([IdКО]=' + #39 + IDKO + #39 +
            ') ', [Tab2]) then
            Exit;
          if ADOQuery2.RecordCount = 0 then
          begin

            if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
            '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
            ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
            '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' +
            'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )',
              [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39,
               #39 + IDGP + #39, #39 + Izdel + #39, #39 + Zak + #39,
               #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39 ]) then
              exit;
          end;

          PB1.Position := i;
      end;
    finally
                // Quit Excel
                if not VarIsEmpty(XLApp) then
                begin
                        XLApp.DisplayAlerts := False;
                        XLApp.Quit;
                        XLAPP := Unassigned;
                        Sheet := Unassigned;

                end;
    end;
    PB1.Position := 0;
end;


procedure TForm1.Specif_EKV_K(Izdel, GP, KO, Zak, BZ, Dat, Tab, Tab2: string; AA: Integer);
var
  XLApp, Sheet: Variant;
  i, j, y, PosTrud, F, A, col, res, Res1, Krug, Karm, Homut, Kol_G: integer;
  Izdelie, Izdelie1, idGP, idKO, Zakaz, BZ_, Dat_, Fil, Str, Str2, Obozn, Det_F, Det_Baz, Kol: string;
  Parent, Vid, Elem, Kol_Ed, EI, Typ, Kateg, Prim, Diam, Massa, Dlina, Shir, Dlin_Raz, Shir_Raz, Obem, Kol_Gib, Kanban, Salvagnini, Pokraska, Mater, Kompl_Ved, Trumpf, Gibka, Pila, Valc, Trumpf_o, Gibka_O, Pila_O, Valc_O, Nog, Uglorub, Prokat, Naim, Naim_Izdel, Grupp, Rout, Varian, Dir, Dir1, Dir2, Data, Kod, God, Dat2, Mes, SH1, SH2, Razd, Nach_Razd, Kompl, Pokr, Dat1, List, Nam, s: string;
  Result: Tresult;
  NC_G1, NC_G2, NC_G3, NC_P1, NC_P2, NC_P3, NC_N1, NC_N2, NC_N3, Kol_II, Kol_II2: Double;
begin
 // Exit;
  Clear_StringGrid(SG1);
  idGP := GP;
  idKO := KO;
  Naim := Izdel;
  Naim_Izdel := '';
  Krug := 0;
  Karm := 0;
  Homut := 0;
  Kol_G := 0;
  Dat1 := FormatDateTime('mm.dd.YYYY', Now);
  s := '0'; ////Воздухонагреватель Канал-ЭКВ-К-100-0,6
  Dir := '\\MSS-DC06\V\ОИТ\Cklapana2\Детали из Файла\ЭКВ';
  res := Pos('-', Naim);
  if (res <> 0) then
  begin
    Delete(Naim, 1, res);
    List := Naim; //ЭКВ-К-100-0,6
  end;
  Nam := Naim; //ЭКВ-К-100-0,6
  {res := Pos('-', Naim);
  if (res <> 0) then
  begin
    Nam := Copy(Naim, 1, res); //ЭКВ-
    Delete(Naim, 1, res); //Канал-ЭКВ-К-100-0,6
  end;
  res := Pos('-', Naim);
  if (res <> 0) then
  begin
    Nam := Copy(Naim, 1, res); //ЭКВ-К-
    Delete(Naim, 1, res); //100-0,6
  end;

  res := Pos('-', Naim);
  if (res <> 0) then
  begin
    Nam := Nam + Copy(Naim, 1, res - 1); //ЭКВ-100-50-
    Delete(Naim, 1, res); //67,5
  end; }
      //Сопроводительный лист Канал-ЭКВ-К-100.xlsm
  Str := Dir + '\Сопроводительный лист Канал-ЭКВ-К-100.xlsm';
  if not FileExists(Str) then
  begin
    j := 0;
    Exit;
  end;
  try
    XLApp := CreateOleObject('Excel.Application');

    XLApp.Workbooks.Open(Str);
    XLApp.Visible := False;
    for i := 1 to XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Count do
    begin
      s := XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[i].Name;
      res := AnsiCompareStr(s, List);
      if res = 0 then
      begin
        XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Item[i].Activate;
        Sheet := XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[i];
        Break;
      end;
    end;
    Sheet.Cells[1, 5] := '1';
    Sheet.Cells[3, 1].Select;
    for i := 1 to 70 do
    begin
      PB1.Position := 0;
      PB1.Min := 0;
      PB1.Max := 69;
      Elem := '';
      Trumpf := 'False';
      Gibka := 'False';
      Pila := 'False'; //
      Valc := 'False';
      Trumpf_o := '0';
      Gibka_O := '0';
      Pila_O := '0';
      Valc_O := '0';

      if (i >= 3) and (i < 15) then  //TRUMPF
      begin
        Vid := 'Детали';
        Elem := Sheet.Cells[i, 2];
        if Elem = '' then
          Continue;
        Str := Sheet.Cells[i, 1];
        Str2 := Sheet.Cells[i, 6];

        Obozn := Str;
        Kol := Sheet.Cells[i, 3];
        EI := '';
        Diam := '0';
        Massa := '0';
        Dlina := '0'; //Sheet.Cells[3 , 21];
        Shir := '0'; //Sheet.Cells[3 , 22];
        Dlin_Raz := '0'; //:=Sheet.Cells[3 , 21];
        Shir_Raz := '0'; //:= Sheet.Cells[3 , 22];
        Obem := '0';

        Kol_Gib := Sheet.Cells[i, 9];
        if Kol_Gib = '' then
          Kol_Gib := '0';
        Mater := Sheet.Cells[i, 4];
        SH1 := '0';
        SH2 := '0';
        Pokr := Sheet.Cells[i, 5];
        if Pokr <> '' then
        begin
          Trumpf := 'True';
          Trumpf_o := '1';
        end;

        Pokr := Sheet.Cells[i, 7];
        if Pokr <> '' then
        begin
          Gibka := 'True';
          Gibka_O := '2';
          Result := Material_Gib(Mater, '1000', '1000', '1000', '1000', SH1, SH2, Elem, 1, StrToInt(Kol_Gib), StrToInt('1000'), idGP, StrToFloat(Kol));
          NC_G1 := Result.MAT_G_Do1; //Н\Ч из таб 3
          NC_G2 := Result.MAT_G_Do2; // //Кол Отверст
          NC_G3 := Result.MAT_G_Do3; //Н/Ч +Выруб отвер
        end;
        Pokr := Sheet.Cells[i, 8];
        if Pokr <> '' then
        begin
          Valc := 'True';
          Valc_O := '2';

        end;

        if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (Обозначение=' + #39 + Obozn + #39 + ') ', ['СпецифОбщая']) then
          exit;

        if ADOQuery2.RecordCount = 0 then
        begin

          if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' + '(Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' + '[ШиринаРазв], [Trumph],[TrumphОч],[Н\ЧГибка], [Гибка],' + '[ГибкаОч],[Вальцы],[ВальцыОч],[Материал],Изделие,Дата) ' + 'Values (%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s)', ['СпецифОбщая', #39 + 'True' + #39, #39 + Vid + #39, #39 + Elem + #39, #39 + IntToStr(AA) +
            #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Trumpf + #39, #39 + Trumpf_o + #39, #39 + FloatToStr(NC_G1) + #39, #39 + Gibka + #39, #39 + Gibka_O + #39, #39 + Valc + #39, #39 + Valc_O + #39, #39 + Mater + #39, #39 + Izdel + #39, #39 + ConvertDat1(Dat) + #39]) then
            exit;
        end;
                          //
        if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' + #39 + '1' + #39 + ',[Статус]=' + #39 + '1' + #39 + ',[Технолог Обраб]=' + #39 + Dat1 + #39 + ' WHERE ([IdГП]=' + #39 + idGP + #39 + ') AND ([IdКО]=' + #39 + idKO + #39 + ') ', [Tab2]) then
          Exit;

        if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + idGP + #39 + ') AND (IdКО=' + #39 + idKO + #39 + ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 + ') ', [Tab]) then
          exit;
        if ADOQuery2.RecordCount = 0 then
        begin

          if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' + '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' + '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' + 'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )', [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39, #39 + idGP + #39, #39 + Izdel + #39, #39 + Zak + #39, #39 + ConvertDat1(Dat) + #39, #39 + idKO + #39]) then
            exit;

        end;
      end;
      PB1.Position := i;
    end;

  finally
                // Quit Excel
    if not VarIsEmpty(XLApp) then
    begin
      XLApp.DisplayAlerts := False;
      XLApp.Quit;
      XLApp := Unassigned;
      Sheet := Unassigned;
    end;
  end;
    //
  Str := Dir + '\Канал-ЭКВ-К-100_Материалы и комплектующие.xlsm';
  if not FileExists(Str) then
  begin
    j := 0;
    Exit;
  end;
  try
    XLApp := CreateOleObject('Excel.Application');

    XLApp.Workbooks.Open(Str);
    XLApp.Visible := False;
    for i := 1 to XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Count do
    begin
      Nam := XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[i].Name;
      res := AnsiCompareStr(Nam, List);
      if res = 0 then
      begin
        XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Item[i].Activate;
        Sheet := XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[i];
        Break;
      end;
    end;

    for i := 1 to 70 do
    begin
      PB1.Position := 0;
      PB1.Min := 0;
      PB1.Max := 69;
      Elem := '';
      Trumpf := 'False';
      Gibka := 'False';
      Pila := 'False'; //
      Valc := 'False';
      Trumpf_o := '0';
      Gibka_O := '0';
      Pila_O := '0';
      Valc_O := '0';

      if (i >= 5) and (i < 37) then  //TRUMPF
      begin
        Vid := 'Стандартные изделия';
        Elem := Sheet.Cells[i, 2];
        if Elem = '' then
          Continue;
               // Str:=  Sheet.Cells[i,1];
               // Str2:=  Sheet.Cells[i, 6];

        Obozn := '';
        Kol := Sheet.Cells[i, 3];
        EI := Sheet.Cells[i, 4];
        Diam := '0';
        Massa := '0';
        Dlina := '0'; //Sheet.Cells[3 , 21];
        Shir := '0'; //Sheet.Cells[3 , 22];
        Dlin_Raz := '0'; //:=Sheet.Cells[3 , 21];
        Shir_Raz := '0'; //:= Sheet.Cells[3 , 22];
        Obem := '0';

                //Kol_Gib := Sheet.Cells[i , 9];
                //if Kol_Gib='' then
        Kol_Gib := '0';
        Mater := '';
        SH1 := '0';
        SH2 := '0';
   //
        if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' + #39 + '1' + #39 + ',[Статус]=' + #39 + '1' + #39 + ',[Технолог Обраб]=' + #39 + Dat1 + #39 + ' WHERE ([IdГП]=' + #39 + idGP + #39 + ') AND ([IdКО]=' + #39 + idKO + #39 + ') ', [Tab2]) then
          Exit;

        if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + idGP + #39 + ') AND (IdКО=' + #39 + idKO + #39 + ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 + ') ', [Tab]) then
          exit;
        if ADOQuery2.RecordCount = 0 then
        begin

          if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' + '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' + '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' + 'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )', [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39, #39 + idGP + #39, #39 + Izdel + #39, #39 + Zak + #39, #39 + ConvertDat1(Dat) + #39, #39 + idKO + #39]) then
            exit;

        end;
      end;
      PB1.Position := i;
    end;

  finally
                // Quit Excel
    if not VarIsEmpty(XLApp) then
    begin
      XLApp.DisplayAlerts := False;
      XLApp.Quit;
      XLApp := Unassigned;
      Sheet := Unassigned;
    end;
  end;
  PB1.Position := 0;
end;

procedure TForm1.Specif_EKV(Izdel,GP,KO,Zak,BZ,Dat,Tab,Tab2: String;AA:Integer);
var
  XLApp,Sheet: Variant;
  i, j, y, PosTrud,F,A,col,res,Res1,Krug,Karm,Homut,Kol_G,G: integer;
  Izdelie,Izdelie1,idGP,idKO,Zakaz,BZ_,Dat_,Fil,Str,Str2,Obozn,Det_F,Det_Baz,Kol: string;
  Parent, Vid, Elem, Kol_Ed,  EI, Typ, Kateg, Prim, Diam, Massa, Dlina,
  Shir, Dlin_Raz, Shir_Raz, Obem, Kol_Gib, Kanban, Salvagnini, Pokraska, Mater, Kompl_Ved,
  Trumpf,Gibka,Pila,Valc,Trumpf_o,Gibka_O,Pila_O,Valc_O, Nog, Uglorub,  Prokat,  Naim, Naim_Izdel, Grupp, Rout, Varian, Dir, Dir1, Dir2,
  Data, Kod, God, Dat2, Mes,  SH1, SH2, Razd, Nach_Razd, Kompl, Pokr,Dat1,List,Nam,s: string;
  Result: Tresult;
  NC_G1, NC_G2, NC_G3, NC_P1, NC_P2, NC_P3, NC_N1, NC_N2, NC_N3,Kol_II,Kol_II2: Double;
begin
    Clear_StringGrid(SG1);
    idGP:=GP;
    idKO :=KO;
    Naim:=Izdel;
    Naim_Izdel:='';
    Krug:=0;
    Karm:=0;
    Homut:=0;
    Kol_G:=0;
    Dat1:=FormatDateTime('mm.dd.YYYY',Now);
    S:='0';////Воздухонагреватель Канал-ЭКВ-100-50-67,5
    Dir:= '\\MSS-DC06\V\ОИТ\Cklapana2\Детали из Файла\ЭКВ';
    Res:=Pos('-',Naim);
    if (Res<>0)  then
    begin
        Delete(Naim,1,Res);
        List:=Naim; //ЭКВ-100-50-67,5
    end;

    Res:=Pos('-',Naim);
    if (Res<>0)  then
    begin
        Nam:=Copy(Naim,1,Res); //ЭКВ-
        Delete(Naim,1,Res); //100-50-67,5
    end;

    Res:=Pos('-',Naim);
    if (Res<>0)  then
    begin
        Nam:=Nam+Copy(Naim,1,Res); //ЭКВ-100-
        Delete(Naim,1,Res); //50-67,5
    end;

    Res:=Pos('-',Naim);
    if (Res<>0)  then
    begin
        Nam:=Nam+Copy(Naim,1,Res-1); //ЭКВ-100-50-
        Delete(Naim,1,Res); //67,5
    end;

    Str:=Dir+'\Сопроводительный лист Канал-'+Nam+'.xlsm';
    if not FileExists(Str) then
    begin
      J:=0;
      Exit;
    end;
    try
    XLApp := CreateOleObject('Excel.Application');

      XLApp.Workbooks.Open(Str);
      XLApp.Visible := False;
      G:=0;
      for I := 1 to XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Count do

                begin

                        S :=
                                XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[i].Name;
                        Res := AnsiCompareStr(S, List);
                        if Res = 0 then
                        begin
                                XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Item[i].Activate;
                                Sheet :=
                                        XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[i];
                                G:=1;
                                Break;
                        end;
                end;
      if G=0 then
      //не нашел лист
      Exit;
           Sheet.Cells[1,5]:='1';
           Sheet.Cells[3,1].Select;
      for I := 1 to 70 do
      begin
        PB1.Position := 0;
        PB1.Min := 0;
        PB1.Max := 69;
           Elem:='';
           Trumpf:='False';
           Gibka :='False';
           Pila  :='False'; //
           Valc  :='False';
           Trumpf_o:='0';
           Gibka_O :='0';
           Pila_O  :='0';
           Valc_O  :='0';

           if (I>=3) and (I<15) then  //TRUMPF
           begin
                Vid := 'Детали';
                Elem :=Sheet.Cells[i , 2];
                if Elem='' then
                  Continue;
                Str:=  Sheet.Cells[i,1];
                Str2:=  Sheet.Cells[i, 6];

                Obozn :=Str;
                Kol   :=Sheet.Cells[i , 3];
                EI    :='';
                Diam := '0';
                Massa :='0';
                Dlina :='0';//Sheet.Cells[3 , 21];
                Shir := '0';//Sheet.Cells[3 , 22];
                Dlin_Raz:= '0';//:=Sheet.Cells[3 , 21];
                Shir_Raz:= '0';//:= Sheet.Cells[3 , 22];
                Obem := '0';

                Kol_Gib := Sheet.Cells[i , 9];
                if Kol_Gib='' then
                  Kol_Gib :='0';
                Mater := Sheet.Cells[i , 4];
                SH1:= '0';
                SH2:= '0';
                Pokr:= Sheet.Cells[i , 5];
                if Pokr<>'' then
                Begin
                  Trumpf:='True';
                  Trumpf_o:='1';
                End;

                Pokr:= Sheet.Cells[i , 8];
                if Pokr<>'' then
                Begin
                  Gibka:='True';
                  Gibka_o:='2';

                Result := Material_Gib(Mater, '1000', '1000', '1000', '1000', SH1, SH2,
                Elem, 1, StrToInt(Kol_Gib), StrToInt('1000'), IDGP, StrToFloat(Kol));
                NC_G1 := Result.MAT_G_Do1; //Н\Ч из таб 3
                NC_G2 := Result.MAT_G_Do2; // //Кол Отверст
                NC_G3 := Result.MAT_G_Do3; //Н/Ч +Выруб отвер
                End;
                //+++++++++++++++++++++++
                Pokr:= Sheet.Cells[i , 7];
                if Pokr<>'' then
                Begin
                Pila :='True';
                Pila_O  :='1';
                Result := Material_Pila(Mater, (Dlin_Raz), (Shir_raz), (sh1), Elem, 1, 0, StrToInt(Dlina), IDGP, StrToFloat(Kol));
                NC_P1 := Result.MAT_Pila_Do1;
                NC_P2 := Result.MAT_Pila_Do2;
                End;

              if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (Обозначение=' + #39 + Obozn + #39 +
              ') ', ['СпецифОбщая']) then
              exit;

              if ADOQuery2.RecordCount = 0 then
              begin

              if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
              '(Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
              ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
              '[ШиринаРазв], [Trumph],[TrumphОч],[Н\ЧГибка], [Гибка],[ГибкаОч],[Пила],[ПилаОч],[Н\ЧПила], [Материал],Изделие,Дата) ' +
              'Values (%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s)',
              ['СпецифОбщая',#39 + 'True' + #39, #39 + Vid + #39, #39 + Elem + #39, #39 + IntToStr(AA) + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39,
               #39 + Trumpf + #39,#39 + Trumpf_O + #39,#39 + FloatToStr(Nc_G1) + #39,
               #39 + Gibka + #39,#39 + Gibka_O + #39,#39 + Pila + #39,#39 + Pila_O + #39, #39 + FloatToStr(Nc_P1) + #39,
                #39 + Mater + #39,
               #39 + Izdel + #39,
               #39 + ConvertDat1(Dat) + #39]) then
              exit;
              end;
                          //
            if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' +
            #39+ '1' + #39 + ',[Статус]=' +
            #39+ '1' + #39 + ',[Технолог Обраб]=' +
            #39+ Dat1 + #39 +
            ' WHERE ([IdГП]=' + #39 + IDGP + #39 +
            ') AND ([IdКО]=' + #39 + IDKO + #39 +
            ') ', [Tab2]) then
            Exit;

            if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + IDGP + #39 +
            ') AND (IdКО=' + #39 + IDKO + #39 +
            ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 +
            ') ', [Tab]) then
            exit;
            if ADOQuery2.RecordCount = 0 then
            begin

              if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
              '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
              ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
              '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' +
              'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )',
              [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39,
               #39 + IDGP + #39, #39 + Izdel + #39, #39 + Zak + #39,
               #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39 ]) then
              exit;

            end;
           end;
        PB1.Position := i;
      end;

    finally
                // Quit Excel
                if not VarIsEmpty(XLApp) then
                begin
                        XLApp.DisplayAlerts := False;
                        XLApp.Quit;
                        XLAPP := Unassigned;
                        Sheet := Unassigned;
                end;
    end;
    //
        Str:=Dir+'\Канал-'+Nam+'_Материалы и комплектующие.xlsm';
    if not FileExists(Str) then
    begin
      J:=0;
      Exit;
    end;
    try
    XLApp := CreateOleObject('Excel.Application');

      XLApp.Workbooks.Open(Str);
      XLApp.Visible := False;
      for I := 1 to XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Count do
                begin
                        Nam :=
                                XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[i].Name;
                        Res := AnsiCompareStr(Nam, List);
                        if Res = 0 then
                        begin
                                XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Item[i].Activate;
                                Sheet :=
                                        XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[i];
                                Break;
                        end;
                end;

      for I := 1 to 70 do
      begin
        PB1.Position := 0;
        PB1.Min := 0;
        PB1.Max := 69;
           Elem:='';
           Trumpf:='False';
           Gibka :='False';
           Pila  :='False'; //
           Valc  :='False';
           Trumpf_o:='0';
           Gibka_O :='0';
           Pila_O  :='0';
           Valc_O  :='0';

           if (I>=5) and (I<48) then  //TRUMPF
           begin
                Vid := 'Стандартные изделия';
                Elem :=Sheet.Cells[i , 2];
                if Elem='' then
                  Continue;
               // Str:=  Sheet.Cells[i,1];
               // Str2:=  Sheet.Cells[i, 6];

                Obozn :='';
                Kol   :=Sheet.Cells[i , 3];
                EI    :=Sheet.Cells[i , 4];
                Diam := '0';
                Massa :='0';
                Dlina :='0';//Sheet.Cells[3 , 21];
                Shir := '0';//Sheet.Cells[3 , 22];
                Dlin_Raz:= '0';//:=Sheet.Cells[3 , 21];
                Shir_Raz:= '0';//:= Sheet.Cells[3 , 22];
                Obem := '0';

                //Kol_Gib := Sheet.Cells[i , 9];
                //if Kol_Gib='' then
                  Kol_Gib :='0';
                Mater := '';
                SH1:= '0';
                SH2:= '0';
   //
            if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' +
            #39+ '1' + #39 + ',[Статус]=' +
            #39+ '1' + #39 + ',[Технолог Обраб]=' +
            #39+ Dat1 + #39 +
            ' WHERE ([IdГП]=' + #39 + IDGP + #39 +
            ') AND ([IdКО]=' + #39 + IDKO + #39 +
            ') ', [Tab2]) then
            Exit;

            if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + IDGP + #39 +
            ') AND (IdКО=' + #39 + IDKO + #39 +
            ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 +
            ') ', [Tab]) then
            exit;
            if ADOQuery2.RecordCount = 0 then
            begin

              if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
              '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
              ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
              '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' +
              'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )',
              [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39,
               #39 + IDGP + #39, #39 + Izdel + #39, #39 + Zak + #39,
               #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39 ]) then
              exit;

            end;
           end;
        PB1.Position := i;
      end;

    finally
                // Quit Excel
                if not VarIsEmpty(XLApp) then
                begin
                        XLApp.DisplayAlerts := False;
                        XLApp.Quit;
                        XLAPP := Unassigned;
                        Sheet := Unassigned;
                end;
    end;
    PB1.Position := 0;
end;


procedure TForm1.Specif_Homut(Izdel,GP,KO,Zak,BZ,Dat,Tab,Tab2: String;AA:Integer);
var
  XLApp,Sheet: Variant;
  i, j, y, PosTrud,F,A,col,res,Res1,Krug,Karm,Homut,Kol_G,Razm: integer;
  Izdelie,Izdelie1,idGP,idKO,Zakaz,BZ_,Dat_,Fil,Str,Str2,Obozn,Det_F,Det_Baz,Kol: string;
  Parent, Vid, Elem, Kol_Ed,  EI, Typ, Kateg, Prim, Diam, Massa, Dlina,
  Shir, Dlin_Raz, Shir_Raz, Obem, Kol_Gib, Kanban, Salvagnini, Pokraska, Mater, Kompl_Ved,
  Trumpf,Gibka,Pila,Valc,Trumpf_o,Gibka_O,Pila_O,Valc_O, Nog, Uglorub,  Prokat,  Naim, Naim_Izdel, Grupp, Rout, Varian, Dir, Dir1, Dir2,
  Data, Kod, God, Dat2, Mes,  SH1, SH2, Razd, Nach_Razd, Kompl, Pokr,Dat1,List,Nam,s,NC: string;
  Result: Tresult;
  NC_G1, NC_G2, NC_G3, NC_P1, NC_P2, NC_P3, NC_N1, NC_N2, NC_N3,Kol_II,Kol_II2: Double;
begin
    Clear_StringGrid(SG1);
    idGP:=GP;
    idKO :=KO;
    Naim:=Izdel;
    Naim_Izdel:='';
    Krug:=0;
    Karm:=0;
    Homut:=0;
    Kol_G:=0;
    S:='0';
    Razm:=0;

    Dir:= '\\MSS-DC06\V\ОИТ\Cklapana2\Детали из Файла\';
    Res:=Pos('Фильтр Канал',Izdel);
    Res1:=Pos('Хомут Канал',Izdel);
    if (Res<>0) or (Res1<>0) then
          begin

          end;
    Str:=Dir+'Сопроводительная на каналку ФКП, ФККК, МК.xlsm';
    if not FileExists(Str) then
    begin
      J:=0;
      Exit;
    end;
    try
    XLApp := CreateOleObject('Excel.Application');

      XLApp.Workbooks.Open(Str);
      XLApp.Visible := False;
      XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Item[1].Activate;
      Sheet :=XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[1];
      //Фильтр Канал-ФКП-20-60

      F:=Pos('Хомут Канал',Naim);
      if F<>0 then
      Begin
      Homut:=1;//
      List:='3';
      End;


      F:=Pos('-',Naim);
      if F<>0 then
      Delete(Naim,1,F);// ФКП-20-60

      F:=Pos('-',Naim);
      if F<>0 then
      Delete(Naim,1,F);// 20-60
      //
      F:=Pos('-',Naim);      //100-50-G4/карманный
      if F<>0 then
      begin
      Naim_Izdel:= Copy(Naim,1,F);
      Delete(Naim,1,F);// 50-G4/карманный
      end;
      //
      F:=Pos('-',Naim);
      if F<>0 then
      begin
      Delete(Naim,F,40);// 20-60
      Naim:= Naim_Izdel+Naim;
      end;

      if  (Homut=1) then//Ячейк
      Begin
       Sheet.Cells[4, 3]:=Naim; //Исходный заполняем
       Razm:=StrToInt(Naim);
       if Razm<=200 then
       NC:='0.067'
       else
       NC:='0.076';
      End;
      Col:=StrToInt(List);
      Dat1:=FormatDateTime('mm.dd.YYYY',Now);
     // XLApp := CreateOleObject('Excel.Application');
      XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Item[Col].Activate;
      Sheet :=XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[Col];
      if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [Н\ч Сборка Клапана]='+#39+NC+#39+
            ' WHERE ([IdГП]=' + #39 + IDGP + #39 +
            ') AND ([IdКО]=' + #39 + IDKO + #39 +
            ') ', [Tab2]) then
            Exit;
      for I := 1 to 70 do
      begin
        PB1.Position := 0;
        PB1.Min := 0;
        PB1.Max := 69;
           Elem:='';
           Trumpf:='False';
           Gibka :='False';
           Pila  :='False'; //
           Valc  :='False';
           Trumpf_o:='0';
           Gibka_O :='0';
           Pila_O  :='0';
           Valc_O  :='0';
           if (I>=11) and (I<16) then  //TRUMPF
           begin
                Vid := 'Детали';
                Elem :=Sheet.Cells[i , 7];
                if Elem='' then
                  Continue;
                Str:=  Sheet.Cells[i, 3];
                Str2:=  Sheet.Cells[i, 6];
                {if col=5 then
                Obozn :=Str+Str2
                Else }
                Obozn :=Str;
                Kol   :=Sheet.Cells[i , 12];
                EI    :='';
                Diam := '0';
                Massa :='0';
                Dlina :='0';//Sheet.Cells[3 , 21];
                Shir := '0';//Sheet.Cells[3 , 22];
                Dlin_Raz:= '0';//:=Sheet.Cells[3 , 21];
                Shir_Raz:= '0';//:= Sheet.Cells[3 , 22];
                Obem := '0';
                Kol_Gib :='0';
                Mater := Sheet.Cells[i , 14];
                SH1:= '0';
                SH2:= '0';
                Trumpf:='True';
                //Gibka :='True';
                Trumpf_o:='1';
                //Gibka_O :='2';
                {Result := Material_Gib(Mater, Dlin_Raz, Shir_raz, Dlina, Shir, SH1, SH2,
                Elem, 1, StrToInt(Kol_Gib), StrToInt(Dlina), IDGP, StrToFloat(Kol));
                NC_G1 := Result.MAT_G_Do1; //Н\Ч из таб 3
                NC_G2 := Result.MAT_G_Do2; // //Кол Отверст
                NC_G3 := Result.MAT_G_Do3; //Н/Ч +Выруб отвер              }
                          //+++++++++++++++++++++++
              if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (Обозначение=' + #39 + Obozn + #39 +
              ') ', ['СпецифОбщая']) then
              exit;

              if ADOQuery2.RecordCount = 0 then
              begin

              if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
              '(Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
              ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
              '[ШиринаРазв], [Trumph],[TrumphОч], [Материал],Изделие,Дата) ' +
              'Values (%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s)',
              ['СпецифОбщая',#39 + 'True' + #39, #39 + Vid + #39, #39 + Elem + #39, #39 + IntToStr(AA) + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39,
               #39 + Trumpf + #39,#39 + Trumpf_O + #39,
                #39 + Mater + #39,
               #39 + Izdel + #39,
               #39 + ConvertDat1(Dat) + #39]) then
              exit;
              end;
                          //
            if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' +
            #39+ '1' + #39 + ',[Статус]=' +
            #39+ '1' + #39 + ',[Технолог Обраб]=' +
            #39+ Dat1 + #39 +
            ' WHERE ([IdГП]=' + #39 + IDGP + #39 +
            ') AND ([IdКО]=' + #39 + IDKO + #39 +
            ') ', [Tab2]) then
            Exit;

            if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + IDGP + #39 +
            ') AND (IdКО=' + #39 + IDKO + #39 +
            ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 +
            ') ', [Tab]) then
            exit;
            if ADOQuery2.RecordCount = 0 then
            begin

              if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
              '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
              ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
              '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' +
              'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )',
              [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39,
               #39 + IDGP + #39, #39 + Izdel + #39, #39 + Zak + #39,
               #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39 ]) then
              exit;

            end;
           end;
        PB1.Position := i;
      end;

      for I := 1 to 70 do
      begin
        Elem :='';
        PB1.Position := 0;
        PB1.Min := 0;
        PB1.Max := 69;
           Trumpf:='False';
           Gibka :='False';
           Pila  :='False'; //
           Trumpf_o:='0';
           Gibka_O :='0';
           Pila_O  :='0';
           //
           if (I>=11) and (I<16) then  //Гибка
           begin
                Vid := 'Детали';

            if (col>2) then
            begin
                Elem :=Sheet.Cells[i , 39];
                if Elem='' then
                  Continue;
                Str:=  Sheet.Cells[i, 35];
                Obozn :=Str;
                Kol   :=Sheet.Cells[i , 44];
                Kol_Gib :=Sheet.Cells[i , 46];
                if Kol_Gib<>'' then

                Kol_g:=StrToInt(Kol_Gib);
                if Kol_G>5 then
                    Kol_Gib:='6';
                Mater := Sheet.Cells[i , 14];
            end;

                EI    :='';
                Diam := '0';
                Massa :='0';
                Dlina :='0';//Sheet.Cells[3 , 21];
                Shir := '0';//Sheet.Cells[3 , 22];
                Dlin_Raz:= '0';//:=Sheet.Cells[3 , 21];
                Shir_Raz:= '0';//:= Sheet.Cells[3 , 22];
                Obem := '0';

                SH1:= '0';
                SH2:= '0';
                //Trumpf:='True';
                Gibka :='True';
                //Trumpf_o:='1';
                Gibka_O :='2';
                Result := Material_Gib(Mater, '1000', '1000', '1000', '1000', SH1, SH2,
                Elem, 1, StrToInt(Kol_Gib), StrToInt('1000'), IDGP, StrToFloat(Kol));
                NC_G1 := Result.MAT_G_Do1; //Н\Ч из таб 3
                NC_G2 := Result.MAT_G_Do2; // //Кол Отверст
                NC_G3 := Result.MAT_G_Do3; //Н/Ч +Выруб отвер
                          //+++++++++++++++++++++++
              if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (Обозначение=' + #39 + Obozn + #39 +
              ') ', ['СпецифОбщая']) then
              exit;

              if ADOQuery2.RecordCount <> 0 then
              begin
                if not Form1.mkQueryUpdate(Form1.ADOQuery1,
                        'UPDATE %s SET КолГибов='+#39 + Kol_Gib + #39+',[Гибка]='+#39 + Gibka + #39+',[ГибкаОч]='+#39 + Gibka_O + #39+
                        ',[Н\ЧГибка]='+#39 + FloatToStr(Nc_G1) + #39+' WHERE [Обозначение]=' + #39 +
                        Obozn+ #39, ['СпецифОбщая'])
                        then
                        Exit;
              end;
                          //
            if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' +
            #39+ '1' + #39 + ',[Статус]=' +
            #39+ '1' + #39 + ',[Технолог Обраб]=' +
            #39+ Dat1 + #39 +
            ' WHERE ([IdГП]=' + #39 + IDGP + #39 +
            ') AND ([IdКО]=' + #39 + IDKO + #39 +
            ') ', [Tab2]) then
            Exit;

            if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + IDGP + #39 +
            ') AND (IdКО=' + #39 + IDKO + #39 +
            ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 +
            ') ', [Tab]) then
            exit;
            if ADOQuery2.RecordCount = 0 then
            begin

              if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
              '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
              ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
              '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' +
              'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )',
              [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39,
               #39 + IDGP + #39, #39 + Izdel + #39, #39 + Zak + #39,
               #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39 ]) then
              exit;

            end;
            if ADOQuery2.RecordCount <> 0 then
              begin
                if not Form1.mkQueryUpdate(Form1.ADOQuery1,
                        'UPDATE %s SET КолГибов='+#39 + Kol_Gib + #39+' WHERE ([Обозначение]=' + #39 +
                        Obozn+ #39+') AND (IdГП=' + #39 +
                        IDGP+ #39+')', [Tab])
                        then
                        Exit;
              end;
           end;
           PB1.Position := i;
      end;

      for I := 1 to 70 do
      begin
        Elem :='';
        PB1.Position := 0;
        PB1.Min := 0;
        PB1.Max := 69;
           Trumpf:='False';
           Gibka :='False';
           Pila  :='False'; //
           Trumpf_o:='0';
           Gibka_O :='0';
           Pila_O  :='0';

           if (I>=11) and (I<16) and (col=3) then  //Ножницы на Хомут и ФКК
           begin
                Vid := 'Детали';
                Elem :=Sheet.Cells[i , 23];
                if Elem='' then
                  Continue;
                Str:=  Sheet.Cells[i, 19];
                Obozn :=Str;
                Kol   :=Sheet.Cells[i , 28];
                EI    :='';
                Diam := '0';
                Massa :='0';
                Dlina :=Sheet.Cells[i , 21];
                Shir := Sheet.Cells[i , 22];
                Dlin_Raz :=Sheet.Cells[i , 21];
                Shir_Raz := Sheet.Cells[i , 22];
                Obem := '0';
                Kol_Gib :='0';
                Mater := '';
                SH1:= '0';
                SH2:= '0';
                if col=2 then
                begin
                    Valc:='True';
                    Valc_o:='2';
                end
                else
                begin
                    Valc:='False';
                    Valc_o:='0';
                end;
                Pila :='True';
                Pila_O  :='1';
                Result := Material_Pila(Mater, (Dlin_Raz), (Shir_raz), (sh1), Elem, 1, 0, StrToInt(Dlina), IDGP, StrToFloat(Kol));
                NC_P1 := Result.MAT_Pila_Do1;
                NC_P2 := Result.MAT_Pila_Do2;
                          //+++++++++++++++++++++++
              if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (Обозначение=' + #39 + Obozn + #39 +
              ') ', ['СпецифОбщая']) then
              exit;

              if ADOQuery2.RecordCount = 0 then
              begin

                if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
                '(Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
                ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
                '[ШиринаРазв], [КолГибов], [Ножницы],[НожницыОч],[Н\чНожницы], [Вальцы],[ВальцыОч], [Материал],Изделие,Дата) ' +
                'Values (%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s)',
                ['СпецифОбщая',#39 + 'True' + #39, #39 + Vid + #39, #39 + Elem + #39, #39 + IntToStr(AA) + #39, #39 + Kol + #39,
                #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39,
               #39 + Pila + #39,#39 + Pila_O + #39, #39 + FloatToStr(Nc_P1) + #39,#39 + Valc + #39,#39 + Valc_O + #39, #39 + Mater + #39,
               #39 + Izdel + #39,
               #39 + ConvertDat1(Dat) + #39]) then
                exit;
              end;
              //
                          //
            if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' +
            #39+ '1' + #39 + ',[Статус]=' +
            #39+ '1' + #39 + ',[Н\ч Сборка Клапана]='+#39+NC+#39+',[Технолог Обраб]=' +
            #39+ Dat1 + #39 +
            ' WHERE ([IdГП]=' + #39 + IDGP + #39 +
            ') AND ([IdКО]=' + #39 + IDKO + #39 +
            ') ', [Tab2]) then
            Exit;

            if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + IDGP + #39 +
            ') AND (IdКО=' + #39 + IDKO + #39 +
            ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 +
            ') ', [Tab]) then
            exit;
            if ADOQuery2.RecordCount = 0 then
            begin

              if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
              '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
              ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
              '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' +
              'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )',
              [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39,
               #39 + IDGP + #39, #39 + Izdel + #39, #39 + Zak + #39,
               #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39 ]) then
              exit;

            end;
           end;
           PB1.Position := i;
      end;

      for I := 1 to 70 do
      begin
        Elem :='';
        PB1.Position := 0;
        PB1.Min := 0;
        PB1.Max := 69;
           if (I>=11) and (I<18) then //Прочие изделия
           begin
                Vid := 'Прочие изделия';


            if (col=3)  then
            Begin
                Elem :=Sheet.Cells[i , 67];
                if Elem='' then
                  Continue;
                Obozn :='';
                Kol   :=Sheet.Cells[i , 78];
                EI    :=Sheet.Cells[i , 80];
            End;
                Diam := '0';
                Massa :='0';
                Dlina :='0';
                Shir := '0';
                Dlin_Raz :='0';
                Shir_Raz := '0';
                Obem := '0';
                Kol_Gib :='0';
                Mater := '';
                SH1:= '0';
                SH2:= '0';
                            //
            if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' +
            #39+ '1' + #39 + ',[Статус]=' +
            #39+ '1' + #39 + ',[Технолог Обраб]=' +
            #39+ Dat1 + #39 +
            ' WHERE ([IdГП]=' + #39 + IDGP + #39 +
            ') AND ([IdКО]=' + #39 + IDKO + #39 +
            ') ', [Tab2]) then
            Exit;

            if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + IDGP + #39 +
            ') AND (IdКО=' + #39 + IDKO + #39 +
            ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 +
            ') ', [Tab]) then
            exit;
            if ADOQuery2.RecordCount = 0 then
            begin

              if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
              '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
              ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
              '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' +
              'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )',
              [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39,
               #39 + IDGP + #39, #39 + Izdel + #39, #39 + Zak + #39,
               #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39 ]) then
              exit;

            end;
           end;
          if Elem='' then
            Continue;
          PB1.Position := i;
      end;
    finally
                // Quit Excel
                if not VarIsEmpty(XLApp) then
                begin
                        XLApp.DisplayAlerts := False;
                        XLApp.Quit;
                        XLAPP := Unassigned;
                        Sheet := Unassigned;

                end;
    end;
    PB1.Position := 0;
end;

 procedure TForm1.Specif_F(Izdel,GP,KO,Zak,BZ,Dat,Tab,Tab2: String;AA:Integer);
var
  XLApp,Sheet: Variant;
  i, j, y, PosTrud,F,A,col,res,Res1,Res2,Res3,Krug,Karm,Homut,Kol_G: integer;
  Izdelie,Izdelie1,idGP,idKO,Zakaz,BZ_,Dat_,Fil,Str,Str2,Obozn,Det_F,Det_Baz,Kol: string;
  Parent, Vid, Elem, Kol_Ed,  EI, Typ, Kateg, Prim, Diam, Massa, Dlina,
  Shir, Dlin_Raz, Shir_Raz, Obem, Kol_Gib, Kanban, Salvagnini, Pokraska, Mater, Kompl_Ved,
  Trumpf,Gibka,Pila,Valc,Trumpf_o,Gibka_O,Pila_O,Valc_O, Nog, Uglorub,  Prokat,  Naim, Naim_Izdel, Grupp, Rout, Varian, Dir, Dir1, Dir2,
  Data, Kod, God, Dat2, Mes,  SH1, SH2, Razd, Nach_Razd, Kompl, Pokr,Dat1,List,Nam,s,AAA,B,G: string;
  Result: Tresult;
  NC_G1, NC_G2, NC_G3, NC_P1, NC_P2, NC_P3, NC_N1, NC_N2, NC_N3,Kol_II,Kol_II2: Double;
begin
    Clear_StringGrid(SG1);
    idGP:=GP;
    idKO :=KO;
    Naim:=Izdel;
    Naim_Izdel:='';
    Krug:=0;
    Karm:=0;
    Homut:=0;
    Kol_G:=0;
    S:='0';//Фильтр Канал-ФКК-125
          // Фильтр Канал-ФКП-100-50-F5
          // Фильтр Канал-ФКП-100-50-G4/карманный
    Dir:= '\\MSS-DC06\V\ОИТ\Cklapana2\Детали из Файла\';

    Str:=Dir+'Сопроводительная на каналку ФКП, ФККК, МК.xlsm';
    if not FileExists(Str) then
    begin
      J:=0;
      Exit;
    end;
    try
      XLApp := CreateOleObject('Excel.Application');

      XLApp.Workbooks.Open(Str);
      XLApp.Visible := false;
      XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Item[1].Activate;
      Sheet :=XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[1];
      //Фильтр Канал-ФКП-20-60

      //Фильтр Канал-ФКК-125
      F:=Pos('ФКК',Naim);   // 200
      if F<>0 then//Круглый
      Begin
       Krug:=1;
       List:='2';
       F:=Pos('-',Naim);
        if F<>0 then
        Delete(Naim,1,F);// ФКК-125

        F:=Pos('-',Naim);      //125
        if F<>0 then
        begin
          Delete(Naim,1,F);

        end;
        AAA:= Naim; //125
       Sheet.Cells[19, 3]:=AAA; //Исходный заполняем
      End;
      /////////////////////////////////
     Res1:=Pos('ФКП',Naim);
     if Res1<>0 then//
     Begin
      F:=Pos('карман',Naim); // Фильтр Канал-ФКП-100-50-G4/карманный
      if F<>0 then
      Begin
        Karm:=1;//  карманный
        List:='5';
      End;
      //
      F:=Pos('-F',Naim); // Фильтр Канал-ФКП-100-50-F5
      if F<>0 then
      Begin
        Karm:=1;//  карманный
        List:='5';
      End;

      if  (Karm=1) then
      Begin
       F:=Pos('-',Naim);
        if F<>0 then
        Delete(Naim,1,F);// ФКП-20-60

        F:=Pos('-',Naim);
        if F<>0 then
        Delete(Naim,1,F);// 20-60

        F:=Pos('-',Naim);      //100-50-G4/карманный
        if F<>0 then
        begin
          AAA:= Copy(Naim,1,F); //100
          Delete(Naim,1,F);// 50-G4/карманный
        end;
        //
        F:=Pos('-',Naim);      //50-G4/карманный
        if F<>0 then
        begin
          B:= Copy(Naim,1,F-1); //50
          Delete(Naim,1,F);// G4/карманный
        end;
        //
        F:=Pos('/',Naim);      //50-G4/карманный
        if F<>0 then
        begin
          Delete(Naim,F,40);// 20-60
        end;
        G:=Naim;
        //
        F:=Pos('F6',Naim);      //F6
        if F<>0 then
        G:='F5';
        //
        F:=Pos('G4',Naim);      //G6
        if F<>0 then
        G:='F5';
        //
        F:=Pos('F8',Naim);      //F8
        if F<>0 then
        G:='F7';
        //
        F:=Pos('F9',Naim);      //F9
        if F<>0 then
        G:='F7';
       Sheet.Cells[14, 3]:=AAA+B; //Исходный заполняем
       Sheet.Cells[14, 7]:=G; //Исходный заполняем
      End;

      if (Karm=0) then//
      Begin   // Фильтр Канал-ФКП-100-50-G4
        F:=Pos('-',Naim);
        if F<>0 then
        Delete(Naim,1,F);// ФКП-20-60

        F:=Pos('-',Naim);
        if F<>0 then
        Delete(Naim,1,F);// 20-60

        F:=Pos('-',Naim);      //100-50-G4/карманный
        if F<>0 then
        begin
          AAA:= Copy(Naim,1,F); //100
          Delete(Naim,1,F);// 50-G4/карманный
        end;
        //
        F:=Pos('-',Naim);      //50-G4/карманный
        if F<>0 then
        begin
          B:= Copy(Naim,1,F-1); //50
          Delete(Naim,1,F);// G4/карманный
        end;
        //
        F:=Pos('/',Naim);      //50-G4/карманный
        if F<>0 then
        begin
          Delete(Naim,F,40);// 20-60
        end;
        G:=Naim;
        G:='G4';
       List:='4';
       Sheet.Cells[9, 3]:=AAA+B; //Исходный заполняем
       Sheet.Cells[9, 7]:=G; //Исходный заполняем
      End;
     End;
      F:=Pos('Хомут',Naim);
      if  (Homut=1) then// Хомут Канал-МК-125
      Begin
        F:=Pos('-',Naim);
        if F<>0 then
        Delete(Naim,1,F);// Канал-МК-125

        F:=Pos('-',Naim);
        if F<>0 then
        Delete(Naim,1,F);// МК-125

        F:=Pos('-',Naim);      //100-50-G4/карманный
        if F<>0 then
        begin
          AAA:= Copy(Naim,1,F); //100
          Delete(Naim,1,F);// 50-G4/карманный
        end;
        //
       Sheet.Cells[4, 3]:=AAA; //Исходный заполняем
      End;


      Col:=StrToInt(List);
      Dat1:=FormatDateTime('mm.dd.YYYY',Now);
     // XLApp := CreateOleObject('Excel.Application');
      XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Item[Col].Activate;
      Sheet :=XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[Col];

      for I := 1 to 70 do
      begin
        PB1.Position := 0;
        PB1.Min := 0;
        PB1.Max := 69;
           Elem:='';
           Trumpf:='False';
           Gibka :='False';
           Pila  :='False'; //
           Valc  :='False';
           Trumpf_o:='0';
           Gibka_O :='0';
           Pila_O  :='0';
           Valc_O  :='0';
           if (I>=11) and (I<16) then  //TRUMPF
           begin
                Vid := 'Детали';
                Elem :=Sheet.Cells[i , 7];
                if Elem='' then
                  Continue;
                Str:=  Sheet.Cells[i, 3];
                Str2:=  Sheet.Cells[i, 6];
                {if col=5 then
                Obozn :=Str+Str2
                Else }
                Obozn :=Str;
                Kol   :=Sheet.Cells[i , 12];
                EI    :='';
                Diam := '0';
                Massa :='0';
                Dlina :='0';//Sheet.Cells[3 , 21];
                Shir := '0';//Sheet.Cells[3 , 22];
                Dlin_Raz:= '0';//:=Sheet.Cells[3 , 21];
                Shir_Raz:= '0';//:= Sheet.Cells[3 , 22];
                Obem := '0';
                Kol_Gib :='0';
                Mater := Sheet.Cells[i , 14];
                SH1:= '0';
                SH2:= '0';
                Trumpf:='True';
                //Gibka :='True';
                Trumpf_o:='1';
                //Gibka_O :='2';
                {Result := Material_Gib(Mater, Dlin_Raz, Shir_raz, Dlina, Shir, SH1, SH2,
                Elem, 1, StrToInt(Kol_Gib), StrToInt(Dlina), IDGP, StrToFloat(Kol));
                NC_G1 := Result.MAT_G_Do1; //Н\Ч из таб 3
                NC_G2 := Result.MAT_G_Do2; // //Кол Отверст
                NC_G3 := Result.MAT_G_Do3; //Н/Ч +Выруб отвер  }
                          //+++++++++++++++++++++++
              if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (Обозначение=' + #39 + Obozn + #39 +
              ') ', ['СпецифОбщая']) then
              exit;

              if ADOQuery2.RecordCount = 0 then
              begin

              if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
              '(Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
              ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
              '[ШиринаРазв], [Trumph],[TrumphОч], [Материал],Изделие,Дата) ' +
              'Values (%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s)',
              ['СпецифОбщая',#39 + 'True' + #39, #39 + Vid + #39, #39 + Elem + #39, #39 + IntToStr(AA) + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39,
               #39 + Trumpf + #39,#39 + Trumpf_O + #39,
                #39 + Mater + #39,
               #39 + Izdel + #39,
               #39 + ConvertDat1(Dat) + #39]) then
              exit;
              end;
                          //
            if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' +
            #39+ '1' + #39 + ',[Статус]=' +
            #39+ '1' + #39 + ',[Технолог Обраб]=' +
            #39+ Dat1 + #39 +
            ' WHERE ([IdГП]=' + #39 + IDGP + #39 +
            ') AND ([IdКО]=' + #39 + IDKO + #39 +
            ') ', [Tab2]) then
            Exit;

            if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + IDGP + #39 +
            ') AND (IdКО=' + #39 + IDKO + #39 +
            ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 +
            ') ', [Tab]) then
            exit;
            if ADOQuery2.RecordCount = 0 then
            begin

              if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
              '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
              ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
              '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' +
              'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )',
              [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39,
               #39 + IDGP + #39, #39 + Izdel + #39, #39 + Zak + #39,
               #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39 ]) then
              exit;

            end;
           end;
        PB1.Position := i;
      end;

      for I := 1 to 70 do
      begin
        Elem :='';
        PB1.Position := 0;
        PB1.Min := 0;
        PB1.Max := 69;
           Trumpf:='False';
           Gibka :='False';
           Pila  :='False'; //
           Trumpf_o:='0';
           Gibka_O :='0';
           Pila_O  :='0';
           //
           if (I>=11) and (I<16) then  //Гибка
           begin
                Vid := 'Детали';
            if (col=2) then
            Begin
                Elem :=Sheet.Cells[i , 55];
                if Elem='' then
                  Continue;
                Str:=  Sheet.Cells[i, 51];
                Obozn :=Str;
                Kol   :=Sheet.Cells[i , 60];
                Kol_Gib :=Sheet.Cells[i , 62];
                if Kol_Gib<>'' then

                Kol_g:=StrToInt(Kol_Gib);
                if Kol_G>5 then
                    Kol_Gib:='6';
                Mater := Sheet.Cells[i , 14];
            End;
            if (col>2) then
            begin
                Elem :=Sheet.Cells[i , 39];
                if Elem='' then
                  Continue;
                Str:=  Sheet.Cells[i, 35];
                Obozn :=Str;
                Kol   :=Sheet.Cells[i , 44];
                Kol_Gib :=Sheet.Cells[i , 46];
                if Kol_Gib<>'' then

                Kol_g:=StrToInt(Kol_Gib);
                if Kol_G>5 then
                    Kol_Gib:='6';
                Mater := Sheet.Cells[i , 14];
            end;

                EI    :='';
                Diam := '0';
                Massa :='0';
                Dlina :='0';//Sheet.Cells[3 , 21];
                Shir := '0';//Sheet.Cells[3 , 22];
                Dlin_Raz:= '0';//:=Sheet.Cells[3 , 21];
                Shir_Raz:= '0';//:= Sheet.Cells[3 , 22];
                Obem := '0';

                SH1:= '0';
                SH2:= '0';
                //Trumpf:='True';
                Gibka :='True';
                //Trumpf_o:='1';
                Gibka_O :='2';
                Result := Material_Gib(Mater, '1000', '1000', '1000', '1000', SH1, SH2,
                Elem, 1, StrToInt(Kol_Gib), StrToInt('1000'), IDGP, StrToFloat(Kol));
                NC_G1 := Result.MAT_G_Do1; //Н\Ч из таб 3
                NC_G2 := Result.MAT_G_Do2; // //Кол Отверст
                NC_G3 := Result.MAT_G_Do3; //Н/Ч +Выруб отвер
                          //+++++++++++++++++++++++
              if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (Обозначение=' + #39 + Obozn + #39 +
              ') ', ['СпецифОбщая']) then
              exit;

              if ADOQuery2.RecordCount <> 0 then
              begin
                if not Form1.mkQueryUpdate(Form1.ADOQuery1,
                        'UPDATE %s SET КолГибов='+#39 + Kol_Gib + #39+',[Гибка]='+#39 + Gibka + #39+',[ГибкаОч]='+#39 + Gibka_O + #39+
                        ',[Н\ЧГибка]='+#39 + FloatToStr(Nc_G1) + #39+' WHERE [Обозначение]=' + #39 +
                        Obozn+ #39, ['СпецифОбщая'])
                        then
                        Exit;
              end;
                          //
            if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' +
            #39+ '1' + #39 + ',[Статус]=' +
            #39+ '1' + #39 + ',[Технолог Обраб]=' +
            #39+ Dat1 + #39 +
            ' WHERE ([IdГП]=' + #39 + IDGP + #39 +
            ') AND ([IdКО]=' + #39 + IDKO + #39 +
            ') ', [Tab2]) then
            Exit;

            if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + IDGP + #39 +
            ') AND (IdКО=' + #39 + IDKO + #39 +
            ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 +
            ') ', [Tab]) then
            exit;
            if ADOQuery2.RecordCount = 0 then
            begin

              if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
              '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
              ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
              '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' +
              'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )',
              [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39,
               #39 + IDGP + #39, #39 + Izdel + #39, #39 + Zak + #39,
               #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39 ]) then
              exit;

            end;
            if ADOQuery2.RecordCount <> 0 then
              begin
                if not Form1.mkQueryUpdate(Form1.ADOQuery1,
                        'UPDATE %s SET КолГибов='+#39 + Kol_Gib + #39+' WHERE ([Обозначение]=' + #39 +
                        Obozn+ #39+') AND (IdГП=' + #39 +
                        IDGP+ #39+')', [Tab])
                        then
                        Exit;
              end;
           end;
           PB1.Position := i;
      end;

      for I := 1 to 70 do
      begin
        Elem :='';
        PB1.Position := 0;
        PB1.Min := 0;
        PB1.Max := 69;
           Trumpf:='False';
           Gibka :='False';
           Pila  :='False'; //
           Trumpf_o:='0';
           Gibka_O :='0';
           Pila_O  :='0';

           if (I>=11) and (I<16) and (col<4) then  //Ножницы на Хомут и ФКК
           begin
                Vid := 'Детали';
                Elem :=Sheet.Cells[i , 39];
                if Elem='' then
                  Continue;
                Str:=  Sheet.Cells[i, 35];
                Str2:=  Sheet.Cells[i, 67];
                //Valc
                Obozn :=Str;
                Kol   :=Sheet.Cells[i , 44];
                EI    :='';
                Diam := '0';
                Massa :='0';
                Dlina :=Sheet.Cells[i , 37];
                Shir := Sheet.Cells[i , 38];
                Dlin_Raz :=Sheet.Cells[i , 37];
                Shir_Raz := Sheet.Cells[i , 38];
                Obem := '0';
                Kol_Gib :='0';
                Mater := Sheet.Cells[i , 46];;
                SH1:= '0';
                SH2:= '0';
                if col=2 then
                begin
                    Valc:='True';
                    Valc_o:='2';
                end
                else
                begin
                    Valc:='False';
                    Valc_o:='0';
                end;
                Pila :='True';
                Pila_O  :='1';
                Result := Material_Pila(Mater, (Dlin_Raz), (Shir_raz), (sh1), Elem, 1, 0, StrToInt(Dlina), IDGP, StrToFloat(Kol));
                NC_P1 := Result.MAT_Pila_Do1;
                NC_P2 := Result.MAT_Pila_Do2;
                          //+++++++++++++++++++++++
              if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (Обозначение=' + #39 + Obozn + #39 +
              ') ', ['СпецифОбщая']) then
              exit;

              if ADOQuery2.RecordCount = 0 then
              begin

                if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
                '(Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
                ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
                '[ШиринаРазв], [КолГибов], [Ножницы],[НожницыОч],[Н\чНожницы], [Вальцы],[ВальцыОч], [Материал],Изделие,Дата) ' +
                'Values (%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s)',
                ['СпецифОбщая',#39 + 'True' + #39, #39 + Vid + #39, #39 + Elem + #39, #39 + IntToStr(AA) + #39, #39 + Kol + #39,
                #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39,
               #39 + Pila + #39,#39 + Pila_O + #39, #39 + FloatToStr(Nc_P1) + #39,#39 + Valc + #39,#39 + Valc_O + #39, #39 + Mater + #39,
               #39 + Izdel + #39,
               #39 + ConvertDat1(Dat) + #39]) then
                exit;
              end;
              //
                          //
            if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' +
            #39+ '1' + #39 + ',[Статус]=' +
            #39+ '1' + #39 + ',[Технолог Обраб]=' +
            #39+ Dat1 + #39 +
            ' WHERE ([IdГП]=' + #39 + IDGP + #39 +
            ') AND ([IdКО]=' + #39 + IDKO + #39 +
            ') ', [Tab2]) then
            Exit;

            if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + IDGP + #39 +
            ') AND (IdКО=' + #39 + IDKO + #39 +
            ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 +
            ') ', [Tab]) then
            exit;
            if ADOQuery2.RecordCount = 0 then
            begin

              if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
              '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
              ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
              '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' +
              'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )',
              [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39,
               #39 + IDGP + #39, #39 + Izdel + #39, #39 + Zak + #39,
               #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39 ]) then
              exit;

            end;
           end;
           PB1.Position := i;
      end;

         {  if (I>=32) and (I<34) then //Сборочные единицы
           begin
                Vid := 'Сборочные единицы';
                Elem :=Sheet.Cells[i , 3];
                Str:=  Sheet.Cells[i, 1];
                Str2:=  Sheet.Cells[i, 2];
                Obozn :=Str+Str2;
                Kol   :=Sheet.Cells[i , 4];
                EI    :='';
                Diam := '0';
                Massa :='0';
                Dlina :=Sheet.Cells[3 , 21];
                Shir := Sheet.Cells[3 , 22];
                Dlin_Raz :=Sheet.Cells[3 , 21];
                Shir_Raz := Sheet.Cells[3 , 22];
                Obem := '0';
                Kol_Gib :='0';
                Mater := '';
                SH1:= '0';
                SH2:= '0';
           end;   }
      for I := 1 to 70 do
      begin
        Elem :='';
        PB1.Position := 0;
        PB1.Min := 0;
        PB1.Max := 69;
           if (I>=11) and (I<18) then //Прочие изделия
           begin
                Vid := 'Прочие изделия';
            if (col=2)  then
            Begin
                Elem :=Sheet.Cells[i , 83];
                if Elem='' then
                  Continue;
                Obozn :='';
                Kol   :=Sheet.Cells[i , 94];
                EI    :=Sheet.Cells[i , 96];
            End;

            if (col>2)  then
            Begin
                Elem :=Sheet.Cells[i , 67];
                if Elem='' then
                  Continue;
                Obozn :='';
                Kol   :=Sheet.Cells[i , 78];
                EI    :=Sheet.Cells[i , 80];
            End;
                Diam := '0';
                Massa :='0';
                Dlina :='0';
                Shir := '0';
                Dlin_Raz :='0';
                Shir_Raz := '0';
                Obem := '0';
                Kol_Gib :='0';
                Mater := '';
                SH1:= '0';
                SH2:= '0';
                            //
            if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' +
            #39+ '1' + #39 + ',[Статус]=' +
            #39+ '1' + #39 + ',[Технолог Обраб]=' +
            #39+ Dat1 + #39 +
            ' WHERE ([IdГП]=' + #39 + IDGP + #39 +
            ') AND ([IdКО]=' + #39 + IDKO + #39 +
            ') ', [Tab2]) then
            Exit;

            if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + IDGP + #39 +
            ') AND (IdКО=' + #39 + IDKO + #39 +
            ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 +
            ') ', [Tab]) then
            exit;
            if ADOQuery2.RecordCount = 0 then
            begin

              if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
              '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
              ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
              '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' +
              'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )',
              [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39,
               #39 + IDGP + #39, #39 + Izdel + #39, #39 + Zak + #39,
               #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39 ]) then
              exit;

            end;
           end;
          if Elem='' then
            Continue;
          PB1.Position := i;
      end;
    finally
                // Quit Excel
                if not VarIsEmpty(XLApp) then
                begin
                        XLApp.DisplayAlerts := False;
                        XLApp.Quit;
                        XLAPP := Unassigned;
                        Sheet := Unassigned;

                end;
    end;
    PB1.Position := 0;
end;


procedure TForm1.Specif(Izdel, GP, KO, Zak, BZ, Dat, Tab, Tab2: string; AA: Integer);
var
  XL: Variant;
  i, j, y, PosTrud, F, A: integer;
  Izdelie, Izdelie1, idGP, idKO, Zakaz, BZ_, Dat_, Fil, Str, Str2, Obozn, Det_F, Det_Baz, Kol: string;
  Parent, Vid, Elem, Kol_Ed, EI, Typ, Kateg, Prim, Diam, Massa, Dlina, Shir, Dlin_Raz, Shir_Raz, Obem, Kol_Gib, Kanban, Salvagnini, Pokraska, Mater, Kompl_Ved, Trumpf, Nog, Uglorub, Gibka, Prokat, Pila, Naim, Naim_Izdel, Grupp, Rout, Varian, Dir, Dir1, Dir2, Data, Kod, God, Dat2, Mes, SH1, SH2, Razd, Nach_Razd, Kompl, Pokr, Dat1: string;
begin
  Clear_StringGrid(SG1);
  idGP := GP;
  idKO := KO;
  Dir := '\\MSS-DC06\V\ОИТ\Cklapana2\Детали из Файла\';
  Str := Dir + Izdel + '.xlsx';
    {if OpenDialog1.Execute  then
    Begin
      Str := OpenDialog1.FileName;
      Xls_To_StringGrid(SG1, Str, 'Лист1');
    end; }
  Dat1 := FormatDateTime('mm.dd.YYYY', Now);
  if not FileExists(Str) then
  begin
    j := 0;
    Exit;
  end
  else
    Xls_To_StringGrid(SG1, Str, 'Лист1');
  Izdelie1 := SG1.Cells[0, 0];
  F := AnsiCompareStr(Izdelie1, Izdel);
  if F <> 0 then
  begin
    MessageDlg('Первая строка файла не совпадает с именем файла!', mtError, [mbOk], 0);
    Exit;
  end;
  Memo20.Lines.Clear;
  for i := 1 to SG1.RowCount do
  begin
    Str := SG1.Cells[1, i + 1];
    if Str = '' then
    begin
      j := i;
      Break;
    end;
  end;
  SG1.RowCount := j;
  if AA = 1 then
  begin
    APB1.Min := 0;
    APB1.Max := SG1.RowCount - 2;
  end
  else
  begin
    APB2.Min := 0;
    APB2.Max := SG1.RowCount - 2;
  end;
  for i := 1 to SG1.RowCount do
  begin
   {   Str2 := 'EXEC	[dbo].[pdm_ПолучПарамВыкатДет]' + #39 + Obozn + #39 + ',' +
        #39 + '0'+ #39 ;
      ADOQuery1.Close;
      ADOQuery1.SQL.Clear;
      ADOQuery1.SQL.Add(Str2);
      Memo2.Lines.Add(Str2);
      ADOQuery1.Open;
      Memo2.Lines.Add(Obozn);
      Memo2.Lines.Add(IntToStr(ADOQuery1.RecordCount));

    if ADOQuery1.RecordCount = 0 then
    Memo20.Lines.Add(Obozn+'  '+Det_F)
    Else
    if ADOQuery1.RecordCount <> 0 then
    begin
        F:=1;
        Vid := ADOQuery1.FieldByName('ВидЭлемента').AsString;
        Elem := ADOQuery1.FieldByName('Элемент').AsString;
        //Kol_ed := ADOQuery1.FieldByName('КолНаЕд').AsString;
        //Kol := ADOQuery1.FieldByName('Количество').AsString;
        //EI := ADOQuery1.FieldByName('ЕИ').AsString;
        Obozn := ADOQuery1.FieldByName('Обозначение').AsString;
        Typ := ADOQuery1.FieldByName('Тип').AsString;
        Diam := ADOQuery1.FieldByName('Диаметр').AsString;
        Massa := ADOQuery1.FieldByName('Масса').AsString;
        Dlina := ADOQuery1.FieldByName('Длина').AsString;
        Shir := ADOQuery1.FieldByName('Ширина').AsString;
        Dlin_Raz := ADOQuery1.FieldByName('ДлинаРазв').AsString;
        Shir_Raz := ADOQuery1.FieldByName('ШиринаРазв').AsString;
        //Obem := ADOQuery1.FieldByName('Объем').AsString;
        Kol_Gib := ADOQuery1.FieldByName('КолГибов').AsString;
        Kanban := ADOQuery1.FieldByName('Канбан').AsString;
        Mater := ADOQuery1.FieldByName('Материал').AsString;
    End;
        }
    Str := SG1.Cells[1, i + 1];
    if Str = '' then
      Continue;
    Vid := SG1.Cells[0, i + 1];
    Elem := SG1.Cells[1, i + 1];
    Obozn := SG1.Cells[2, i + 1];
    Kol := SG1.Cells[3, i + 1];
    EI := SG1.Cells[4, i + 1];
    Diam := SG1.Cells[5, i + 1];
    Massa := SG1.Cells[6, i + 1];
    Dlina := SG1.Cells[7, i + 1];
    Shir := SG1.Cells[8, i + 1];
    Dlin_Raz := SG1.Cells[9, i + 1];
    Shir_Raz := SG1.Cells[10, i + 1];
    Obem := SG1.Cells[11, i + 1];
    Kol_Gib := SG1.Cells[12, i + 1];
    Mater := SG1.Cells[13, i + 1];
    SH1 := SG1.Cells[14, i + 1];
    SH2 := SG1.Cells[15, i + 1];

    if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + idGP + #39 + ') AND (IdКО=' + #39 + idKO + #39 + ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 + ') ', [Tab]) then
      exit;

    if ADOQuery2.RecordCount = 0 then
    begin

      if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' + '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' + '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' + 'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )', [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39, #39 + idGP + #39, #39 + Izdel + #39, #39 + Zak + #39, #39 + ConvertDat1(Dat) + #39, #39 + idKO + #39]) then
        exit;
            //
      if not Form1.mkQueryUpdate2(Form1.ADOQuery2, 'UPDATE [%s] SET [СтатусФ]=' + #39 + '1' + #39 + ',[Статус]=' + #39 + '1' + #39 + ',[Технолог Обраб]=' + #39 + Dat1 + #39 + ' WHERE ([IdГП]=' + #39 + idGP + #39 + ') AND ([IdКО]=' + #39 + idKO + #39 + ') ', [Tab2]) then
        Exit;
    end;
          //+++++++++++++++++++++++
    if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (Обозначение=' + #39 + Obozn + #39 + ') ', ['СпецифОбщая']) then
      exit;

    if ADOQuery2.RecordCount = 0 then
    begin

      if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' + '(Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' + '[ШиринаРазв], [КолГибов], [Канбан], [Материал],Изделие,Дата) ' + 'Values (%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s)', ['СпецифОбщая', #39 + 'False' + #39, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Kanban + #39, #39 + Mater + #39, #39 + Izdel + #39, #39 + ConvertDat1(Dat) + #39]) then
        exit;
    end;

    if AA = 1 then
      APB1.Position := i
    else
      APB2.Position := i;
  end;
  if AA = 1 then
    APB1.Position := 0
  else
    APB2.Position := 0;

  {if (Memo20.Lines.Count<>0) AND (F=1) then
  begin
            Str2:=Memo20.Text;
            if not Form1.mkQueryUpdate2(Form1.ADOQuery2, 'UPDATE %s SET [СтатусФ]=' +
            #39+ '2' + #39 +',[СписокФ]=' +
            #39+ Str2 + #39 +
            ' WHERE (Изделие=' + #39 + Izdelie + #39 +') AND ([IdГП]=' + #39 + IDGP + #39 +
            ') AND ([IdКО]=' + #39 + IDKO + #39 +
            ') ', [Tab2]) then
            Exit;
  end;}
end;

procedure TForm1.N80Click(Sender: TObject);
begin  //Издел,ГП,КО,Заказ,БЗ,Дата
  Specif(StringGrid10.Cells[5, StringGrid10.Row], StringGrid10.Cells[15, StringGrid10.Row], StringGrid10.Cells[16, StringGrid10.Row], StringGrid10.Cells[2, StringGrid10.Row], StringGrid10.Cells[11, StringGrid10.Row], StringGrid10.Cells[1, StringGrid10.Row], 'Специф', 'Klapana', 1);
end;

procedure TForm1.N81Click(Sender: TObject);
begin //Издел,ГП,КО,Заказ,БЗ,Дата
  Specif(SGL.Cells[5, SGL.Row], SGL.Cells[15, SGL.Row], SGL.Cells[21, SGL.Row], SGL.Cells[2, SGL.Row], StringGrid6.Cells[23, StringGrid6.Row], SGL.Cells[1, SGL.Row], 'СпецифВозд', 'KlapanaZap', 2);

end;

procedure TForm1.N82Click(Sender: TObject);
begin
  if MessageDlg('Подумай! Удалить?', mtConfirmation, [mbYes, mbNo], 0) = mrNo then
    Exit
  else
  begin
    if not Form1.mkQueryDelete(Form1.ADOQuery1, 'DELETE FROM [%s] Where (IdГП= ' + #39 + SG10.Cells[21, SG10.Row] + #39 + ') AND ((IdКО= ' + #39 + SG10.Cells[22, SG10.Row] + #39 + ') OR (IdКО= ' + #39 + #39 + '))', ['Специф750']) then
      Exit;
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE [%s] SET [Статус]=' + #39 + '0' + #39 + ',[СтатусФ]=' + #39 + '0' + #39 + ',[Технолог Обраб]= NULL' + ' WHERE ([IdГП]=' + #39 + SG10.Cells[21, SG10.Row] + #39 + ') AND (IdКО= ' + #39 + SG10.Cells[22, SG10.Row] + #39 + ')', ['750']) then
      Exit;

  end;
end;

procedure TForm1.N83Click(Sender: TObject);
var
  E, i, J, X, X1, Res, Priv, Kol_Zap, Kount, Res1, Res2: Integer;
  Vn_DAt, Dir, God, mes, Nom, Priv_Str, IDGP, Idko, Izd, Izdel, OboznSh, Obozn: string;
  ar: array[0..7750, 0..6] of string;
  Ar1: array[0..10500, 0..12] of string;
  Ar2: array of array of string;
  SR: TSearchRec; // поисковая переменная
  FindRes: Integer; // переменная для записи результата поиска
  Str, Dir_Ser, Str1, Str2, Str3, A, B, fileName, fullFilePath, Put: string;
  h: hwnd;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
//for X1 := 0 to SG4.RowCount-1 do
//Begin
  Nom := SG4.Cells[13, SG4.Row]; //ZSG.Cells[0, ZSG.Row];
  if Nom = '' then
    Exit;
  //Nom := ZCV.Cells[0, ZCV.Row];

  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + Nom +
  #39 + ') AND (Отмена IS NULL) Order By Заказ ', ['ЛЮК']) then
    exit;
  Kount := ADOQuery2.RecordCount;
  if Form1.ADOQuery2.RecordCount <> 0 then
  begin

    for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
    begin
      Izd := Form1.ADOQuery2.FieldByName('Изделие').AsString;
      Izdel := Form1.ADOQuery2.FieldByName('Изделие').AsString;
      ar[i, 0] := Form1.ADOQuery2.FieldByName('Заказ').AsString;
      ar[i, 1] := Form1.ADOQuery2.FieldByName('Кол во').AsString;
      ar[i, 2] := Nom;
      ar[i, 3] := Izdel;
     // ar[i, 4] := Form1.ADOQuery2.FieldByName('МодПривода').AsString;
      ar[i, 5] := Form1.ADOQuery2.FieldByName('IdГП').AsString;
      //ar[i, 6] := Form1.ADOQuery2.FieldByName('IdКО').AsString;
      Form1.ADOQuery2.Next;
    end;
  end;
  for i := 0 to Kount do
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + ar[i, 5] + #39 +
    ')  AND (ВидЭлемента=' + #39 + 'Детали' + #39 + ') Order By Обозначение ', ['СпецифЛЮК']) then
      exit;

    if ar[i, 1] = '' then
      Break;
    Kol_Zap := StrToInt(ar[i, 1]);
                //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    for J := 0 to ADOQuery2.RecordCount do
    begin

      OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
                        {Res:=Pos('-',OboznSh);
                        if Res<>0 Then
                        Delete(OboznSh,Res,30);
                        if not Form1.mkQuerySelect66(Form1.ADOQuery4,
                        'Select * from %s Where   (ОбозначениеШ=' + #39 +
                        OboznSh + #39 +') AND ((Trumph='+#39+'True'+#39+') or (Ножницы='+#39+'True'+#39+')) AND (Технолог='+#39+'True'+#39+')  ', ['ШаблонВоз']) then
                        exit; }                                     // or (Ножницы='+#39+'True'+#39+')
      if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение=' + #39 + OboznSh + #39 +
      ') AND ((Trumph=' + #39 + 'True' + #39 + ') ) AND (Технолог=' + #39 + 'True' + #39 + ')  ', ['СпецифОбщая']) then
        exit;
      if ADOQuery4.RecordCount <> 0 then
      begin

        Ar1[X, 0] := IntToStr(Kol_Zap * StrToInt(ADOQuery2.FieldByName('Количество').AsString));
        Obozn := ADOQuery4.FieldByName('Обозначение').AsString;
        Ar1[X, 1] := ADOQuery2.FieldByName('Обозначение').AsString;
        Ar1[X, 2] := ADOQuery2.FieldByName('Элемент').AsString;
        Ar1[X, 3] := ADOQuery2.FieldByName('Изделие').AsString;
        Ar1[X, 4] := ADOQuery2.FieldByName('Длина').AsString;
        Ar1[X, 5] := ADOQuery2.FieldByName('Ширина').AsString;
        Ar1[X, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
        Ar1[X, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
        Ar1[X, 8] := ADOQuery2.FieldByName('Заказ').AsString;
        Ar1[X, 9] := ADOQuery2.FieldByName('IDГП').AsString;
        Ar1[X, 10] := ADOQuery2.FieldByName('Материал').AsString;
       // Ar1[X, 11] :=ADOQuery2.FieldByName('IDКО').AsString;
        Inc(X);
      end;
      Form1.ADOQuery2.Next;
    end;
  end;
//End;
  {Izd:= SG5.Cells[3,0];
      //Люк дымоудаления Л-К-02-1300*1300-C-2*PLS30-З
      Res1:=Pos(' ', Izd );
      if Res1<>0 then
      Delete(Izd,1,Res1);  //дымоудаления Л-К-02-1300*1300-C-2*PLS30-З

      Res1:=Pos(' ', Izd );
      if Res1<>0 then
      Delete(Izd,1,Res1);  //Л-К-02-1300*1300-C-2*PLS30-З

      Res1:=Pos('-', Izd );
      if Res1<>0 then
      begin
        Str1:=Copy(Izd,1,Res1);
        Delete(Izd,1,Res1+1); //К-02-1300*1300-C-2*PLS30-З
      end;

      Res1:=Pos('-', Izd );
      if Res1<>0 then
      begin
        Str2:=Copy(Izd,1,Res1);
        Delete(Izd,1,Res1+1); //02-1300*1300-C-2*PLS30-З
      end;

      Res1:=Pos('-', Izd );
      if Res1<>0 then
      begin
        Str3:=Copy(Izd,1,Res1);
        Delete(Izd,1,Res1+1); //1300*1300-C-2*PLS30-З
      end;

      Res1:=Pos('*', Izd );
      if Res1<>0 then
      begin
        A:=Copy(Izd,1,Res1);
        Delete(Izd,1,Res1+1); //1300-C-2*PLS30-З
      end;

      Res1:=Pos('-', Izd );
      if Res1<>0 then
      begin
        A:=Copy(Izd,1,Res1);
        Delete(Izd,1,Res1+1); //C-2*PLS30-З
      end; }
  Nom := SG4.Cells[13, SG4.Row];
  Dir := Put_KTO + '\Кондратьев\Programm\LUK\' + God;
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\LUK\' + God + '\' + mes + '\';
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\LUK\' + God + '\' + mes + '\' + Nom + '\';
  CreateDir(Dir);

  {XL2 := CreateOleObject('Excel.Application');
  CopyFile(PWideChar(Put_KTO + '\CKlapana\2013\Programm_Vozd.xlsx'), PWideChar(Dir + '\' + Nom + '.xlsx'), False);

  XL2.Workbooks.Open(Dir + '\' + Nom + '.xlsx');
  XL2.Application.EnableEvents := false;  }
        //-----------------------------------------------
  Memo7.Lines.Clear;
  Memo15.Lines.Clear;
  for i := 0 to High(Ar1) do
  begin
    if Ar1[E, 3] = '' then
      Break;
    {XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 4] := Ar1[E, 8]; //Zakaz
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 5] := IntToStr(E + 1);
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 6] := Ar1[E, 3]; //Klapan
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 7] := Ar1[E, 2]; //Element
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 8] := Ar1[E, 0]; //Kol-vo
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 9] := Ar1[E, 6]; //DlinRazv
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 10] := Ar1[E, 7]; //ShirRazv
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 12] := Ar1[E, 10]; //Mat
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 13] := Ar1[E, 1]; //Chert }
    //+++++++++++++++++++
    Str := Ar1[E, 1]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
                //+++++++++++++++++++
    Str := ConvertRus(Str);
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str1 := StringReplace(Str1, ' ', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo7.Lines.Add(Str3);
    Memo15.Lines.Add(Ar1[E, 8] + '  ' + Ar1[E, 3]);
    Inc(E);
  end;

  Memo9.Clear;
  Memo8.Clear;
  for i := 0 to Memo7.Lines.Count - 0 do
  begin
    F := 0;
    //Люк дымоудаления Л-К-02-1300*1300-C-2*PLS30-З
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);

    Res := Pos('ОЗОР', Memo15.Lines.Strings[i]);
   // Res := Pos('ДЫМОЗОР', Memo15.Lines.Strings[i]);
    if Res <> 0 then
      Dir_Ser := Put + 'КТО\_Развертки new\ДЫМОЗОРЫ\'
    else
      Dir_Ser := Put + 'КТО\_Развертки new\Люки ДУ\';
    if Memo7.Lines.Strings[i] <> '' then
      fileName := Memo7.Lines.Strings[i] + '.dxf';
    fullFilePath := FileSearch(fileName, Dir_Ser);
    if fullFilePath <> '' then
    begin
      Memo9.Lines.Add(fullFilePath);
      CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
    end
    else
    begin
      Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
    end;
  end;

  if Memo8.Lines.Strings[0] <> '' then
  begin
    Memo8.Lines.SaveToFile('123.txt');
    Str := ExtractFileDir(ParamStr(0)) + '\123.txt';
    ShellExecute(Form1.Handle, nil, PChar(Str), nil, nil, SW_SHOWNORMAL);
  end;
        {if (FlagDolg=9) or (FlagDolg=1) then
        begin

        end;
  XL2.ActiveWorkBook.WorkSheets[1].Cells[12, 2] := Nom;
        //XL2.ActiveWorkBook.WorkSheets[1].SaveAs(Dir + '\' + nom + '.xlsx');
  XL2.Visible := True;
  XL2 := UnAssigned;}
  ShellExecute(h, 'open', PWideChar(Dir), nil, nil, SW_SHOW);
end;

procedure TForm1.N84Click(Sender: TObject);
begin
  if SG5.Cells[5, SG5.Row] = '' then
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Срочно]=' + #39 + 'True' + #39 + ' WHERE ([Заказ]=' + #39 + SG5.Cells[2, SG5.Row] + #39 + ') ', ['ЗапускЛЮК']) then
      Exit;

  if SG5.Cells[5, SG5.Row] <> '' then
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Срочно]=' + #39 + 'True' + #39 + ' WHERE ([БЗ]=' + #39 + SG5.Cells[3, SG5.Row] + #39 + ') ', ['ЗапускЛЮК']) then
      Exit;
  btn45.Click;
end;

procedure TForm1.N85Click(Sender: TObject);
begin
  if SG5.Cells[5, SG5.Row] = '' then
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Срочно]=' + #39 + 'False' + #39 + ' WHERE ([Заказ]=' + #39 + SG5.Cells[2, SG5.Row] + #39 + ') ', ['ЗапускЛЮК']) then
      Exit;

  if SG5.Cells[5, SG5.Row] <> '' then
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Срочно]=' + #39 + 'False' + #39 + ' WHERE ([БЗ]=' + #39 + SG5.Cells[3, SG5.Row] + #39 + ') ', ['ЗапускЛЮК']) then
      Exit;
  btn45.Click;
end;

procedure TForm1.N86Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Срочно]=' + #39 + 'True' + #39 + ' WHERE ([Заказ]=' + #39 + SG215.Cells[2, SG215.Row] + #39 + ') ', ['ЗапускСТАМ']) then
    Exit;
  btn5.Click;
end;

procedure TForm1.N87Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Срочно]=' + #39 + 'False' + #39 + ' WHERE ([Заказ]=' + #39 + SG215.Cells[2, SG215.Row] + #39 + ') ', ['ЗапускСТАМ']) then
    Exit;
  btn5.Click;
end;

procedure TForm1.N88Click(Sender: TObject);
var
  E, i, J, X, X3, X1, Res, Priv, Kol_Zap, Kount, DlinaI, Res_KPU, Sten_G, Sten_V, Res_Detal, hh, F2: Integer;
  Vn_DAt, Dir, God, mes, Nom, Priv_Str, IDGP, OboznSh, Obozn, Dlina, Elem, k, Mat: string;
  ar: array[0..50, 0..7] of string;
  Ar1: array[0..500, 0..13] of string;
  Ar3: array[0..500, 0..13] of string;
  Ar2: array of array of string;
  SR: TSearchRec; // поисковая переменная
  FindRes, Res1: Integer; // переменная для записи результата поиска
  Str, Dir_Ser, Str1, Str2, Str3, fileName, fullFilePath, Put, ko: string;
  h: hwnd;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
  for X1 := 0 to SG212.RowCount - 1 do
  begin
    Nom := StringGrid10.Cells[I_FN_SGP + 2, X1 + 1];
    ko := StringGrid10.Cells[I_FN_SGP + 3, X1 + 1];
  // Nom='' then
  //       Continue;
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + Nom + #39 + ') AND (IdКО=' + #39 + ko + #39 + ') AND  (Отмена IS NULL) Order By Заказ ', ['Klapana']) then
      exit;
    Kount := ADOQuery2.RecordCount;
    if Form1.ADOQuery2.RecordCount <> 0 then
    begin

      for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
      begin
        ar[i, 0] := Form1.ADOQuery2.FieldByName('Заказ').AsString;
        ar[i, 1] := Form1.ADOQuery2.FieldByName('Кол во запущенных').AsString;
        ar[i, 2] := Nom;
        ar[i, 3] := Form1.ADOQuery2.FieldByName('Изделие').AsString;
        ar[i, 4] := Form1.ADOQuery2.FieldByName('МодПривода').AsString;
        ar[i, 5] := Form1.ADOQuery2.FieldByName('IdГП').AsString;
        ar[i, 6] := Form1.ADOQuery2.FieldByName('IdКО').AsString;
        Form1.ADOQuery2.Next;
      end;
    end;
    for i := 0 to Kount do
    begin                                   //  AND (Trumph='+#39+'True'+#39+')
      if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + ar[i, 5] + #39 + ')  AND (IdКО=' + #39 + ko + #39 + ') AND (ВидЭлемента=' + #39 + 'Детали' + #39 + ')  Order By Обозначение ', ['Специф']) then
        exit;
      if ar[i, 1] = '' then
        Break;
      Kol_Zap := StrToInt(ar[i, 1]);
      Res_KPU := Pos('КПУ', ar[i, 3]);
      F2 := Pos('2*ф', ar[i, 3]);
                //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

      for J := 0 to ADOQuery2.RecordCount - 1 do
      begin
        Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
        OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
        if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение=' + #39 + OboznSh + #39 + ') AND ((Фрезерный=' + #39 + 'True' + #39 + ') ) AND (Технолог=' + #39 + 'True' + #39 + ')  ', ['СпецифОбщая']) then
          exit;

        if ADOQuery4.RecordCount <> 0 then
        begin
          Mat := ADOQuery2.FieldByName('Материал').AsString;
          Res := Pos('x10', Mat);
          if Res <> 0 then
          begin
            k := ADOQuery2.FieldByName('Количество').AsString;
            Ar1[X, 0] := IntToStr(Kol_Zap * StrToInt(k));
            Obozn := ADOQuery4.FieldByName('Обозначение').AsString;
            Ar1[X, 1] := ADOQuery4.FieldByName('Обозначение').AsString;
            Ar1[X, 11] := ADOQuery2.FieldByName('Обозначение').AsString;
            Ar1[X, 2] := ADOQuery2.FieldByName('Элемент').AsString;
            Ar1[X, 3] := ar[i, 3]; //ADOQuery4.FieldByName('Изделие').AsString;
            Ar1[X, 4] := ADOQuery2.FieldByName('Длина').AsString;
            Ar1[X, 5] := ADOQuery2.FieldByName('Ширина').AsString;
            Ar1[X, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
            Ar1[X, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
            Ar1[X, 8] := ADOQuery2.FieldByName('Заказ').AsString;
            Ar1[X, 9] := ADOQuery2.FieldByName('IDГП').AsString;
            Ar1[X, 10] := ADOQuery2.FieldByName('Материал').AsString;
            Ar1[X, 12] := ADOQuery2.FieldByName('idКО').AsString;
            Inc(X);
          end
          else
          begin
            k := ADOQuery2.FieldByName('Количество').AsString;
            Ar3[X3, 0] := IntToStr(Kol_Zap * StrToInt(k));
            Obozn := ADOQuery4.FieldByName('Обозначение').AsString;
            Ar3[X3, 1] := ADOQuery4.FieldByName('Обозначение').AsString;
            Ar3[X3, 11] := ADOQuery2.FieldByName('Обозначение').AsString;
            Ar3[X3, 2] := ADOQuery2.FieldByName('Элемент').AsString;
            Ar3[X3, 3] := ar[i, 3]; //ADOQuery4.FieldByName('Изделие').AsString;
            Ar3[X3, 4] := ADOQuery2.FieldByName('Длина').AsString;
            Ar3[X3, 5] := ADOQuery2.FieldByName('Ширина').AsString;
            Ar3[X3, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
            Ar3[X3, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
            Ar3[X3, 8] := ADOQuery2.FieldByName('Заказ').AsString;
            Ar3[X3, 9] := ADOQuery2.FieldByName('IDГП').AsString;
            Ar3[X3, 10] := ADOQuery2.FieldByName('Материал').AsString;
            Ar3[X3, 12] := ADOQuery2.FieldByName('idКО').AsString;
            Inc(X3);
          end;
          Form1.ADOQuery4.Next;
        end;
        Form1.ADOQuery2.Next;
      end;
    end;
  end;
  Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God;
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\';
  CreateDir(Dir);
 // Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\' + Nom + '\';
 // CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\' + Nom + 'Фрезерный\';
  CreateDir(Dir);

  //XL2 := CreateOleObject('Excel.Application');
  //CopyFile(PWideChar(Put_KTO +'\CKlapana\2013\Programm_Pogar.xlsx'), PWideChar(Dir + '\' + Nom + '.xlsx'), False);
  //-----------------------------------------------
  Memo7.Lines.Clear;
  Memo15.Lines.Clear;
  for i := 0 to High(Ar1) do
  begin
    if Ar1[E, 3] = '' then
      Break;

      //+++++++++++++++++++
    Str := Ar1[E, 11]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 5);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
    Str := ConvertRus(Str);
                //+++++++++++++++++++
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo7.Lines.Add(Str3);
    Memo15.Lines.Add(Ar1[E, 8] + '  ' + Ar1[E, 3]);
    Inc(E);
  end;
    //-----------------------------------------------
  Memo23.Lines.Clear;
  Memo24.Lines.Clear;
  E := 0;
  for i := 0 to High(Ar3) do
  begin
    if Ar3[E, 3] = '' then
      Break;

      //+++++++++++++++++++
    Str := Ar3[E, 11]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 5);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
    Str := ConvertRus(Str);
                //+++++++++++++++++++
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo23.Lines.Add(Str3);
    Memo24.Lines.Add(Ar3[E, 8] + '  ' + Ar3[E, 3]);
    Inc(E);
  end;

  Memo9.Clear;
  Memo8.Clear;
  for i := 0 to Memo7.Lines.Count - 0 do
  begin
    F := 0;
    //Dir_Ser := Put_KTO + '\Мингалиев\Вите\Programm1\Pogar';
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Клапаны\Воздушные';
    if Memo7.Lines.Strings[i] <> '' then
      fileName := Memo7.Lines.Strings[i] + '.dxf';
    fullFilePath := FileSearch(fileName, Dir_Ser);
    if fullFilePath <> '' then
    begin
      Memo9.Lines.Add(fullFilePath);
      Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\' + Nom + 'Фрезерный\10\';
      CreateDir(Dir);
      CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
    end
    else
    begin
      Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
    end;
  end;
//
  for i := 0 to Memo23.Lines.Count - 0 do
  begin
    F := 0;
    //Dir_Ser := Put_KTO + '\Мингалиев\Вите\Programm1\Pogar';
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Клапаны\Воздушные';
    if Memo23.Lines.Strings[i] <> '' then
      fileName := Memo23.Lines.Strings[i] + '.dxf';
    fullFilePath := FileSearch(fileName, Dir_Ser);
    if fullFilePath <> '' then
    begin
      Memo9.Lines.Add(fullFilePath);
      Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\' + Nom + 'Фрезерный\12\';
      CreateDir(Dir);
      CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
    end
    else
    begin
      Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
    end;
  end;
  if Memo8.Lines.Strings[0] <> '' then
  begin
    Memo8.Lines.SaveToFile('123.txt');
    Str := ExtractFileDir(ParamStr(0)) + '\123.txt';
    ShellExecute(Form1.Handle, nil, PChar(Str), nil, nil, SW_SHOWNORMAL);
  end;
  ShellExecute(h, 'open', PWideChar(Dir), nil, nil, SW_SHOW);
end;

procedure TForm1.N89Click(Sender: TObject);
var
  //XL2: Variant;
  E, i, J, X, X1, X3, Res, Priv, Kol_Zap, Kount, DlinaI, Res_KPU, Sten_G, Sten_V, Res_Detal, hh, F2, Res1, Res2: Integer;
  Vn_DAt, Dir, God, mes, Nom, Priv_Str, IDGP, OboznSh, Obozn, Dlina, Elem, Izdel, S, K, Mat: string;
  ar: array[0..7750, 0..7] of string;
  Ar1: array[0..1500, 0..13] of string;
  Ar3: array[0..100, 0..13] of string;
  Ar2: array of array of string;
  SR: TSearchRec; // поисковая переменная
  FindRes: Integer; // переменная для записи результата поиска
  Str, Dir_Ser, Str1, Str2, Str3, fileName, fullFilePath, Put: string;
  h: hwnd;
  FindFile: TSearchRec;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
  for X1 := 0 to SG212.RowCount - 1 do
  begin
    Nom := SG212.Cells[0, X1]; //ZSG.Cells[0, ZSG.Row];
    if Nom = '' then
      Continue;
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (Номер=' + #39 + Nom + #39 + ') AND (Отмена IS NULL) Order By Заказ ', ['Запуск']) then
      exit;
    Kount := ADOQuery2.RecordCount;
    if Form1.ADOQuery2.RecordCount <> 0 then
    begin

      for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
      begin
        ar[i, 0] := Form1.ADOQuery2.FieldByName('Заказ').AsString;
        ar[i, 1] := Form1.ADOQuery2.FieldByName('Кол во запущенных').AsString;
        ar[i, 2] := Nom;
        ar[i, 3] := Form1.ADOQuery2.FieldByName('Изделие').AsString;
        ar[i, 4] := Form1.ADOQuery2.FieldByName('МодПривода').AsString;
        ar[i, 5] := Form1.ADOQuery2.FieldByName('IdГП').AsString;
        ar[i, 6] := Form1.ADOQuery2.FieldByName('IdКО').AsString;
        Form1.ADOQuery2.Next;
      end;
    end;
    for i := 0 to Kount do
    begin                                   //  AND (Trumph='+#39+'True'+#39+')
      if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + ar[i, 5] + #39 + ') AND  (IdКО=' + #39 + ar[i, 6] + #39 + ') AND (ВидЭлемента=' + #39 + 'Детали' + #39 + ')  Order By Обозначение ', ['Специф']) then
        exit;
      if ar[i, 1] = '' then
        Break;
      Kol_Zap := StrToInt(ar[i, 1]);
      Res_KPU := Pos('КПУ', ar[i, 3]);
      F2 := Pos('2*ф', ar[i, 3]);
    //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

      for J := 0 to ADOQuery2.RecordCount - 1 do
      begin
        Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
        OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
        if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение=' + #39 + OboznSh + #39 + ') AND ((Фрезерный=' + #39 + 'True' + #39 + ') ) AND (Технолог=' + #39 + 'True' + #39 + ')  ', ['СпецифОбщая']) then
          exit;
        if ADOQuery4.RecordCount <> 0 then
        begin

          Mat := ADOQuery2.FieldByName('Материал').AsString;
          Res := Pos('х10', Mat);
          if Res <> 0 then
          begin
            K := ADOQuery2.FieldByName('Количество').AsString;
            Ar1[X, 0] := IntToStr(Kol_Zap * StrToInt(K));
            Obozn := ADOQuery4.FieldByName('Обозначение').AsString;
            Ar1[X, 1] := ADOQuery4.FieldByName('Обозначение').AsString;
            Ar1[X, 11] := ADOQuery2.FieldByName('Обозначение').AsString;
            Ar1[X, 2] := ADOQuery2.FieldByName('Элемент').AsString;
            Ar1[X, 3] := ar[i, 3]; //ADOQuery4.FieldByName('Изделие').AsString;
            Ar1[X, 4] := ADOQuery2.FieldByName('Длина').AsString;
            Ar1[X, 5] := ADOQuery2.FieldByName('Ширина').AsString;
            Ar1[X, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
            Ar1[X, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
            Ar1[X, 8] := ADOQuery2.FieldByName('Заказ').AsString;
            Ar1[X, 9] := ADOQuery2.FieldByName('IDГП').AsString;
            Ar1[X, 10] := ADOQuery2.FieldByName('Материал').AsString;
            Ar1[X, 12] := ADOQuery2.FieldByName('idКО').AsString;
            Inc(X);
          end
          else
          begin
            K := ADOQuery2.FieldByName('Количество').AsString;
            Ar3[X3, 0] := IntToStr(Kol_Zap * StrToInt(K));
            Obozn := ADOQuery4.FieldByName('Обозначение').AsString;
            Ar3[X3, 1] := ADOQuery4.FieldByName('Обозначение').AsString;
            Ar3[X3, 11] := ADOQuery2.FieldByName('Обозначение').AsString;
            Ar3[X3, 2] := ADOQuery2.FieldByName('Элемент').AsString;
            Ar3[X3, 3] := ar[i, 3]; //ADOQuery4.FieldByName('Изделие').AsString;
            Ar3[X3, 4] := ADOQuery2.FieldByName('Длина').AsString;
            Ar3[X3, 5] := ADOQuery2.FieldByName('Ширина').AsString;
            Ar3[X3, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
            Ar3[X3, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
            Ar3[X3, 8] := ADOQuery2.FieldByName('Заказ').AsString;
            Ar3[X3, 9] := ADOQuery2.FieldByName('IDГП').AsString;
            Ar3[X3, 10] := ADOQuery2.FieldByName('Материал').AsString;
            Ar3[X3, 12] := ADOQuery2.FieldByName('idКО').AsString;
            Inc(X3);
          end;
          Form1.ADOQuery4.Next;
        end;
        Form1.ADOQuery2.Next;
      end;
    end;
  end;
  Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God;
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\';
  CreateDir(Dir);
  //Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\' + Nom + '\';
  //CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\' + Nom + 'Фрезерный\';
  CreateDir(Dir);
        //-----------------------------------------------
  Memo7.Lines.Clear;
  Memo15.Lines.Clear;
  for i := 0 to High(Ar1) do
  begin
    if Ar1[E, 3] = '' then
      Break;
        //ВГ 410.00.01.002-400 меняем на ВГ 410.00.01.001-400  Гапова 21.01.2019
    Izdel := ar[E, 3];
    Res1 := Pos('КЭД-', Izdel);
    Res2 := Pos('-2*ф-', Izdel);
    Obozn := Ar1[E, 11];
                //+++++++++++++++++++
    Str := Obozn; //Ar1[E, 11]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 5);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
    Str := ConvertRus(Str);
                //+++++++++++++++++++
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo7.Lines.Add(Str3);
    Memo15.Lines.Add(Ar1[E, 8] + '  ' + Ar1[E, 3]);
    Inc(E);
  end;

     //-----------------------------------------------
  Memo23.Lines.Clear;
  Memo24.Lines.Clear;
  E := 0;
  for i := 0 to High(Ar3) do
  begin
    if Ar3[E, 3] = '' then
      Break;

      //+++++++++++++++++++
    Str := Ar3[E, 11]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 5);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
    Str := ConvertRus(Str);
                //+++++++++++++++++++
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo23.Lines.Add(Str3);
    Memo24.Lines.Add(Ar3[E, 8] + '  ' + Ar3[E, 3]);
    Inc(E);
  end;

  Memo9.Clear;
  Memo8.Clear;
  for i := 0 to Memo7.Lines.Count - 1 do
  begin
    F := 0;
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Клапаны\Пожарные\';
    //Dir_Ser := Put + 'ОИТ\';
    if Memo7.Lines.Strings[i] <> '' then
      fileName := Memo7.Lines.Strings[i] + '.dxf';
     // FindFile.name := Memo7.Lines.Strings[i] + '.dxf';
    //fullFilePath := FileSearch(fileName, Dir_Ser);
    //if fullFilePath <> '' then
    {if FindFirst(Dir_Ser, faAnyFile, FindFile)=0 then
    begin
      Memo9.Lines.Add(fullFilePath);
            Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\' + Nom + 'Фрезерный\10\';
      CreateDir(Dir);
      CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
    end }

    if FindFirst(Dir_Ser + fileName, faDirectory, FindFile) = 0 then
      repeat
        if FindFile.Name[1] = '.' then
          continue;
        fullFilePath := (Dir_Ser + FindFile.Name);
        Memo9.Lines.Add(fullFilePath);
        Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\' + Nom + 'Фрезерный\10\';
        CreateDir(Dir);
        CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
        Memo2.Lines.Add('CopyFile1  ' + fullFilePath);
      until FindNext(FindFile) <> 0
    else
    begin
      Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
      Memo2.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
    end;
  end;
 //
  for i := 0 to Memo23.Lines.Count - 1 do
  begin
    F := 0;
    //Dir_Ser := Put_KTO + '\Мингалиев\Вите\Programm1\Pogar';
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Клапаны\Пожарные\';
    //Dir_Ser := Put + 'ОИТ\';
    if Memo23.Lines.Strings[i] <> '' then
      fileName := Memo23.Lines.Strings[i] + '.dxf';
   { fullFilePath := FileSearch(fileName, Dir_Ser);
    if fullFilePath <> '' then
    begin
      Memo9.Lines.Add(fullFilePath);
      Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\' + Nom + 'Фрезерный\12\';
      CreateDir(Dir);
      CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
    end }
    if FindFirst(Dir_Ser + fileName, faDirectory, FindFile) = 0 then
      repeat
        if FindFile.Name[1] = '.' then
          continue;
        fullFilePath := (Dir_Ser + FindFile.Name);
        Memo9.Lines.Add(fullFilePath);
        Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\' + Nom + 'Фрезерный\12\';
        CreateDir(Dir);
        CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
        Memo2.Lines.Add('CopyFile2  ' + fullFilePath);
      until FindNext(FindFile) <> 0
    else
    begin
      Memo8.Lines.Add(Memo24.Lines.Strings[i] + '  ' + fileName);
      Memo2.Lines.Add(Memo24.Lines.Strings[i] + '  ' + fileName);
    end;
  end;

  if Memo8.Lines.Strings[0] <> '' then
  begin
    Memo8.Lines.SaveToFile('123.txt');
    Str := ExtractFileDir(ParamStr(0)) + '\123.txt';
    ShellExecute(Form1.Handle, nil, PChar(Str), nil, nil, SW_SHOWNORMAL);
  end;
  ShellExecute(h, 'open', PWideChar(Dir), nil, nil, SW_SHOW);
end;

procedure TForm1.N8Click(Sender: TObject);
begin
  FNewSbor.ShowModal;
end;

procedure TForm1.ZSGSelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
var
  R: TRect;
begin
  CheckBox1.Visible := False;
  ComboBox6.Visible := False;
  if ((ACol = 16) and (ARow <> 0) and (ZSG.Cells[I_FN_KOL_ZAP + 5, ZSG.Row] = '')) and ((FlagDolg = 4) or (FlagDolg = 10) or (FlagDolg = 7)) then
  begin
                {Ширина и положение ComboBox должно соответствовать ячейке StringGrid}
    R := ZSG.CellRect(ACol, ARow);
    R.Left := R.Left + ZSG.Left;
    R.Right := R.Right + ZSG.Left;
    R.Top := R.Top + ZSG.Top;
    R.Bottom := R.Bottom + ZSG.Top;
    ComboBox6.Left := R.Left + 1;
    ComboBox6.Top := R.Top + 1;
    ComboBox6.Width := (R.Right + 1) - R.Left;
    ComboBox6.Height := (R.Bottom + 1) - R.Top; {Покажем combobox}
    ComboBox6.Visible := True;
  end;
  TmpCol := ACol;
  TmpRow := ARow;
end;

procedure TForm1.ComboBox6Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [%s]=%s WHERE ([Заказ]=%s) AND (Изделие=%s)', ['Klapana', 'Сборщик', #39 + ComboBox6.Items[ComboBox6.ItemIndex] + #39, #39 + ZSG.Cells[2, ZSG.Row] + #39, #39 + ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.Row] + #39]) then
    Exit;
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [%s]=%s WHERE ([Номер]=%s) AND (Изделие=%s) AND (ID=%s)', ['Запуск', 'Сборщик', #39 + ComboBox6.Items[ComboBox6.ItemIndex] + #39, #39 + ZSG.Cells[0, ZSG.Row] + #39, #39 + ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.Row] + #39, #39 + ZSG.Cells[I_FN_KOL_ZAP + 14, ZSG.Row] + #39]) then
    Exit;
  ZSG.Cells[I_FN_KOL_ZAP + 12, ZSG.Row] := ComboBox6.Items[ComboBox6.ItemIndex];
  ComboBox6.Visible := False;
end;

procedure TForm1.Button36Click(Sender: TObject);
var
  I, Y, Kol, Kol_Zap, Kol_Kl, Res, X, Res_: Integer;
  Zag, Zap, OTK, Sbor, Str_e4, Str, Str1, Str2, Str3, Str4, Str5, Str6, Str7, Str8, Str9, Str10, sb_s, sv_S: string;
  SV, SB, SV_O, SB_o: Double;
begin
  if (Edit4.Text = '') and (Edit5.Text = '') and (Edit31.Text = '') and (Edit36.Text = '') then
    Exit;
  Flag_Poisk := 1;
  if Edit4.Text <> '' then
  begin
    Str := Edit4.Text;
    Str_SQL_Poisk := 'Номер LIKE' + #39 + '%' + Str + '%' + #39;
  end;
  //=========================   S1:=  ' AND ([БЗ] LIKE' + #39 + Edit17.Text+'%' + #39 + ') ';
  if Edit5.Text <> '' then
  begin
    Str := Edit5.Text;
    Str_SQL_Poisk := '(Заказ LIKE ' + #39 + '%' + Str + '%' + #39 + ')';
  end;
  //=========================
  if Edit31.Text <> '' then
  begin
    Str := Edit31.Text;
    Str_SQL_Poisk := 'НачНомер LIKE ' + #39 + '%' + Str + '%' + #39;
  end;
  //=========================
  if ComboBox8.Text <> '' then
  begin
    Str := ComboBox8.Text;
    Str_SQL_Poisk := 'Сборщик LIKE ' + #39 + '%' + Str + '%' + #39;
  end;
  //=========================
  if Edit36.Text <> '' then
  begin
    Str := Edit36.Text;
    Str_SQL_Poisk := 'Изделие LIKE ' + #39 + '%' + Str + '%' + #39;
  end;
  Button22.Click;

end;

procedure TForm1.Edit40Click(Sender: TObject);
begin
  Edit38.Text := '';
  Edit37.Text := '';
end;

procedure TForm1.Edit40KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then
    Button68Click(nil);
end;

procedure TForm1.Edit4Click(Sender: TObject);
begin
  ComboBox8.Text := '';
  Edit5.Text := '';
  Edit31.Text := '';
  Edit36.Text := '';
end;

procedure TForm1.ComboBox8Click(Sender: TObject);
begin
  Edit4.Text := '';
  Edit5.Text := '';
end;

procedure TForm1.ComboBox8Select(Sender: TObject);
begin
  Edit4.Text := '';
  Edit5.Text := '';
end;

procedure TForm1.Button37Click(Sender: TObject);
begin
  FBriket.Show;
  FBriket.Label1.Caption := '';
end;

procedure TForm1.Button38Click(Sender: TObject);
begin
  FBrigada.Label276.caption:=Form1.Label276.caption;
  FBrigada.Label277.caption:=Form1.Label277.caption;
  FBrigada.Label278.caption:=Form1.Label278.caption;
  FBrigada.Label279.caption:=Form1.Label279.caption;
  FBrigada.Label280.caption:=Form1.Label280.caption;
  FBrigada.Label281.caption:=Form1.Label281.caption;
  FBrigada.Memo1.Text:=Memo32.Text;
  FBrigada.ShowModal;
end;

procedure TForm1.Button39Click(Sender: TObject);
var
  Kod, Otmena, i, PosZ, j, Otgr: Integer;
  StrDat1, Dat1: string;
  Date1: TDateTime;
begin
  StrDat1 := SG1.Cells[2, 0];
  if StrDat1 = '' then
    Dat1 := ''
  else
  begin
    Delete(StrDat1, 1, 8);
    PosZ := AnsiPos(',', StrDat1);
    Delete(StrDat1, PosZ, 40);
    Date1 := StrToDate(StrDat1);
    Dat1 := FormatDateTime('mm.dd.yyyy', Date1);
  end;
  for i := 0 to SG1.RowCount - 1 do
  begin

    Otmena := Pos('Отмененные', SG1.Cells[1, i]);

    if Otmena <> 0 then
    begin
      try
        Kod := StrToInt(SG1.Cells[1, i + 1]);
      except
        Continue;
      end;

      for j := i + 1 to SG1.RowCount - 1 do
      begin
        Otgr := Pos('отгрузки', SG1.Cells[1, j]);
        if Otgr <> 0 then
          Break;
        if not mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Отмена]=NULL' +                                        //#39 + Dat1 + #39 +
          ',[' + FN_OSOBEN + ']=' + #39 + SG1.Cells[15, j] + #39 + ' WHERE ([' + FN_NAM + ']=' + #39 + SG1.Cells[7, j] + #39 + ') AND (Заказ=' + #39 + SG1.Cells[3, j] + #39 + ') ', ['Klapana']) then
          Exit;
        if not mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Отмена]=NULL' +                                        //#39 + Dat1 + #39 +
          ',[' + FN_OSOBEN + ']=' + #39 + SG1.Cells[15, j] + #39 + ' WHERE ([' + FN_NAM + ']=' + #39 + SG1.Cells[7, j] + #39 + ') AND (Заказ=' + #39 + SG1.Cells[3, j] + #39 + ') ', ['Запуск']) then
          Exit;
      end;
    end;
  end;
end;

procedure TForm1.Edit4KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and (Button36.Enabled) then
    Button36Click(nil);
end;

procedure TForm1.ComboBox8KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and (Button36.Enabled) then
    Button36Click(nil);
end;

procedure TForm1.Edit5KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and (Button36.Enabled) then
    Button36Click(nil);
end;

procedure TForm1.Edit5Click(Sender: TObject);
begin
  ComboBox8.Text := '';
  Edit4.Text := '';
  Edit31.Text := '';
  Edit36.Text := '';
end;

procedure TForm1.Button40Click(Sender: TObject);
var
  I: Integer;
  S: string;
begin
  Poisk_Vosd := 1;
  Str_SQL_Poisk := '(Заказ LIKE ' + #39 + Edit3.Text + #39 + ')';
  Button16.Click;
  Exit;
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where ([Х] IS NULL) AND (Заказ=' + #39 + Edit3.Text + #39 + ')' + Order, ['Klapana']) then
    exit;
  StringGrid10.ColCount := 16;
  StringGrid10.Cells[0, 0] := '№';
  StringGrid10.ColWidths[0] := 20;
  StringGrid10.Cells[I_FN_DAT, 0] := FN_DAT;
  StringGrid10.Cells[I_FN_ZAK, 0] := FN_ZAK;
  StringGrid10.Cells[I_FN_KOL, 0] := FN_KOL;
  StringGrid10.Cells[I_FN_KOL_ZAP, 0] := 'в пакете';
  StringGrid10.Cells[I_FN_NAM, 0] := FN_NAM;
  StringGrid10.Cells[I_FN_A, 0] := FN_A;
  StringGrid10.Cells[I_FN_B, 0] := FN_B;
  StringGrid10.Cells[I_FN_MOD_PRIVOD, 0] := FN_MOD_PRIVOD;
  StringGrid10.Cells[I_FN_PLAN_DATA, 0] := FN_PLAN_DATA;
  StringGrid10.Cells[I_FN_PLAN_NED, 0] := FN_PLAN_NED;
  StringGrid10.Cells[I_FN_ZAKAZCHIK, 0] := FN_ZAKAZCHIK;
  StringGrid10.Cells[I_FN_PR, 0] := FN_PR;
  StringGrid10.Cells[I_FN_SGP, 0] := FN_SGP;
  StringGrid10.Cells[I_FN_SGP + 1, 0] := 'КТО';
  StringGrid10.Cells[I_FN_SGP + 2, 0] := 'IdГП';
  StringGrid10.ColWidths[I_FN_SGP + 2] := 20;
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++SG6
            //
  SG6.ColCount := 31;
  SG6.Cells[I_FN_NOM, 0] := 'Номер раз';
  SG6.Cells[I_FN_RAS_DATA_GOTOVN, 0] := FN_RAS_DATA_GOTOVN;
  SG6.Cells[I_FN_BRIKET, 0] := 'Кол-во Приводов';
  SG6.Cells[I_FN_TEHNOLOG, 0] := FN_TEHNOLOG;
  SG6.Cells[I_FN_TEHNOLOG_GOTOV, 0] := FN_TEHNOLOG_GOTOV;
  SG6.Cells[I_FN_TEHNOLOG_PRIM, 0] := FN_TEHNOLOG_PRIM;
  SG6.Cells[I_FN_ZAG_ZAP, 0] := FN_ZAG_ZAP;
  SG6.Cells[I_FN_ZAG, 0] := FN_ZAG;
  SG6.Cells[I_FN_SBOR_ZAP, 0] := FN_SBOR_ZAP;
  SG6.Cells[I_FN_SBOR, 0] := FN_SBOR;
  SG6.Cells[I_FN_SBOR_PRIM, 0] := FN_SBOR_PRIM;
  SG6.Cells[I_FN_PR_OTK, 0] := FN_PR_OTK;
  SG6.Cells[I_FN_PR_OTK_PRIM, 0] := FN_PR_OTK_PRIM;
  SG6.Cells[I_FN_DAT_OTGRUZ, 0] := FN_DAT_OTGRUZ;
  SG6.Cells[I_FN_OSOBEN, 0] := FN_OSOBEN;
  SG6.ColWidths[I_FN_OSOBEN] := 0;
  SG6.Cells[I_FN_SBOR_KLAP_NC, 0] := FN_SBOR_KLAP_NC;
  SG6.Cells[I_FN_SVARKA_NC, 0] := FN_SVARKA_NC;

  SG6.Cells[I_FN_KOL_RAZ, 0] := FN_KOL_RAZ;
  SG6.Cells[I_FN_NOMER_RAZ, 0] := FN_NOM;
  SG6.Cells[I_FN_OTMENA, 0] := FN_OTMENA;
  SG6.Cells[I_FN_OTMENA + 1, 0] := 'Статус';
  SG6.Cells[I_FN_OTMENA + 2, 0] := FN_RASKR_LOP;

  SG6.Cells[I_FN_OTMENA + 3, 0] := 'СтатусНормы';
  SG6.Cells[I_FN_OTMENA + 4, 0] := 'Канбан';
  SG6.Cells[I_FN_OTMENA + 5, 0] := 'Трумпф';
  SG6.Cells[I_FN_OTMENA + 6, 0] := 'Гибка';
  SG6.Cells[I_FN_OTMENA + 7, 0] := 'Ножницы';
  SG6.Cells[I_FN_OTMENA + 8, 0] := 'Пила';
  SG6.ColWidths[6] := 0;
  SG6.ColWidths[8] := 0;
  SG6.ColWidths[9] := 0;
  SG6.ColWidths[11] := 0;
  SG6.ColWidths[21] := 0;
  SG6.ColWidths[19] := 0;
  SG6.ColWidths[20] := 0;
  SG6.ColWidths[23] := 0;
  SG6.ColWidths[22] := 0;
  SG6.ColWidths[I_FN_OTMENA + 2] := 40;
  if ADOQuery1.RecordCount = 0 then
  begin
    Clear_StringGrid(StringGrid10);
    StringGrid10.RowCount := 2;
    Clear_StringGrid(StringGrid9);
    StringGrid9.RowCount := 2;
    Clear_StringGrid(SG6);
    SG6.RowCount := 2;

    exit;
  end;

  StatusBar1.Panels[2].Text := IntToStr(ADOQuery1.RecordCount);
  StringGrid10.RowCount := ADOQuery1.RecordCount + 1;
  StringGrid9.RowCount := ADOQuery1.RecordCount + 1;
  SG6.RowCount := ADOQuery1.RecordCount + 1;
  StringGrid10.FixedRows := 1;
  StringGrid9.FixedRows := 1;
  SG6.FixedRows := 1;
  ADOQuery1.First;
  for I := 0 to ADOQuery1.RecordCount - 1 do
  begin
    StringGrid10.Cells[0, I + 1] := IntToStr(I + 1);

    StringGrid10.Cells[I_FN_DAT, I + 1] := ADOQuery1.FieldByName(FN_DAT).AsString;
    StringGrid10.Cells[I_FN_ZAK, I + 1] := ADOQuery1.FieldByName(FN_ZAK).AsString;
    StringGrid10.Cells[I_FN_KOL, I + 1] := ADOQuery1.FieldByName(FN_KOL).AsString;
    StringGrid10.Cells[I_FN_KOL_ZAP, I + 1] := ADOQuery1.FieldByName(FN_KOL_ZAP).AsString;
    StringGrid10.Cells[I_FN_NAM, I + 1] := ADOQuery1.FieldByName(FN_NAM).AsString;
    StringGrid10.Cells[I_FN_A, I + 1] := ADOQuery1.FieldByName(FN_A).AsString;
    StringGrid10.Cells[I_FN_B, I + 1] := ADOQuery1.FieldByName(FN_B).AsString;
    StringGrid10.Cells[I_FN_MOD_PRIVOD, I + 1] := ADOQuery1.FieldByName(FN_MOD_PRIVOD).AsString;
    StringGrid10.Cells[I_FN_PLAN_DATA, I + 1] := ADOQuery1.FieldByName(FN_PLAN_DATA).AsString;
    StringGrid10.Cells[I_FN_PLAN_NED, I + 1] := ADOQuery1.FieldByName(FN_PLAN_NED).AsString;
    StringGrid10.Cells[I_FN_ZAKAZCHIK, I + 1] := ADOQuery1.FieldByName(FN_ZAKAZCHIK).AsString;
    StringGrid10.Cells[I_FN_PR, I + 1] := ADOQuery1.FieldByName(FN_PR).AsString;
    StringGrid10.Cells[I_FN_SGP, I + 1] := ADOQuery1.FieldByName(FN_SGP).AsString; //ПДО
    StringGrid10.Cells[I_FN_SGP + 1, I + 1] := ADOQuery1.FieldByName('№Поз').AsString; //KTO
    StringGrid10.Cells[I_FN_SGP + 2, I + 1] := ADOQuery1.FieldByName('IdГП').AsString;
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++SG6
    SG6.Cells[I_FN_NOM, I + 1] := ADOQuery1.FieldByName(FN_NOMER_RAZ).AsString;
    SG6.Cells[I_FN_RAS_DATA_GOTOVN, I + 1] := ADOQuery1.FieldByName(FN_RAS_DATA_GOTOVN).AsString;
    SG6.Cells[I_FN_BRIKET, I + 1] := ADOQuery1.FieldByName('Привод').AsString;
    S := ADOQuery1.FieldByName(FN_TEHNOLOG).AsString;
    SG6.Cells[I_FN_TEHNOLOG, I + 1] := ADOQuery1.FieldByName(FN_TEHNOLOG).AsString;
    SG6.Cells[I_FN_TEHNOLOG_GOTOV, I + 1] := ADOQuery1.FieldByName(FN_TEHNOLOG_GOTOV).AsString;
    SG6.Cells[I_FN_TEHNOLOG_PRIM, I + 1] := ADOQuery1.FieldByName(FN_TEHNOLOG_PRIM).AsString;
    SG6.Cells[I_FN_ZAG_ZAP, I + 1] := ADOQuery1.FieldByName(FN_ZAG_ZAP).AsString;
    SG6.Cells[I_FN_ZAG, I + 1] := ADOQuery1.FieldByName('Запуск').AsString + '/' + ADOQuery1.FieldByName(FN_ZAG).AsString;
    SG6.Cells[I_FN_SBOR_ZAP, I + 1] := ADOQuery1.FieldByName(FN_SBOR_ZAP).AsString;
    SG6.Cells[I_FN_SBOR, I + 1] := ADOQuery1.FieldByName('Запуск1').AsString + '/' + ADOQuery1.FieldByName(FN_SBOR).AsString;
    SG6.Cells[I_FN_SBOR_PRIM, I + 1] := ADOQuery1.FieldByName(FN_SBOR_PRIM).AsString;
    SG6.Cells[I_FN_PR_OTK, I + 1] := ADOQuery1.FieldByName(FN_PR_OTK).AsString;
    SG6.Cells[I_FN_PR_OTK_PRIM, I + 1] := ADOQuery1.FieldByName(FN_PR_OTK_PRIM).AsString;
    SG6.Cells[I_FN_DAT_OTGRUZ, I + 1] := ADOQuery1.FieldByName('Упаковка').AsString;

    SG6.Cells[I_FN_OSOBEN, I + 1] := ADOQuery1.FieldByName(FN_OSOBEN).AsString;
    SG6.Cells[I_FN_SBOR_KLAP_NC, I + 1] := ADOQuery1.FieldByName(FN_SBOR_KLAP_NC).AsString;
    SG6.Cells[I_FN_SVARKA_NC, I + 1] := ADOQuery1.FieldByName(FN_SVARKA_NC).AsString;
    SG6.Cells[I_FN_KOL_RAZ, I + 1] := ADOQuery1.FieldByName(FN_KOL_RAZ).AsString;
    SG6.Cells[I_FN_NOMER_RAZ, I + 1] := ADOQuery1.FieldByName(FN_NOM).AsString;
    SG6.Cells[I_FN_OTMENA, I + 1] := ADOQuery1.FieldByName(FN_OTMENA).AsString;
    SG6.Cells[I_FN_OTMENA + 1, I + 1] := ADOQuery1.FieldByName('Статус').AsString;
    SG6.Cells[I_FN_OTMENA + 2, I + 1] := ADOQuery1.FieldByName(FN_RASKR_LOP).AsString;
    SG6.Cells[I_FN_OTMENA + 3, I + 1] := ADOQuery1.FieldByName('СтатусНормы').AsString;
    SG6.Cells[I_FN_OTMENA + 4, I + 1] := ADOQuery1.FieldByName('Канбан').AsString;
    SG6.Cells[I_FN_OTMENA + 5, I + 1] := ADOQuery1.FieldByName('Трумпф').AsString;
    SG6.Cells[I_FN_OTMENA + 6, I + 1] := ADOQuery1.FieldByName('Гибка').AsString;
    SG6.Cells[I_FN_OTMENA + 7, I + 1] := ADOQuery1.FieldByName('Ножницы').AsString;
    SG6.Cells[I_FN_OTMENA + 8, I + 1] := ADOQuery1.FieldByName('Пила').AsString;
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++SG6
    ADOQuery1.Next;
  end;
end;

procedure TForm1.N90Click(Sender: TObject);
var
  Vn_DAt, Vn_DAt1, God, mes, Nom, Prim, Dir1: string;
  D: TDate;
  C: Integer;
begin
  Vn_DAt := SG215.Cells[8, SG215.Row]; // Планирование
  D := StrToDate(Vn_DAt);
  Vn_DAt1 := FormatDateTime('mm.dd.yyyy', D);
  God := FormatDateTime('yyyy', D);
  mes := FormatDateTime('mmmm', D);
  Nom := SG215.Cells[0, SG215.Row];
  C := 0; //StrToInt(SG215.Cells[I_FN_KOL_ZAP + 28, SG215.Row]);//Цвет
  Prim := SG215.Cells[9, SG215.Row]; //Примечание
  Dir1 := '\Суточные задания\';
  Form1.SUT(Vn_DAt, Nom, Dir1, 0, C, Prim); //ZZZZZZZZZZZZZZZZZZZZZZ
end;

procedure TForm1.N91Click(Sender: TObject);
begin
  Xls_To_DBO(SG1, '\\Mss-dc06\v\ОИТ\Cklapana2\2013\Перечень деталей токарка  -  Веза-Миасс (1).xlsx', '', 0, 0);
end;

procedure TForm1.N92Click(Sender: TObject);
var
  XL2: Variant;
  E, i, J, X, X1, Res, Priv, Kol_Zap, Kount: Integer;
  Vn_DAt, Dir, God, mes, Nom, Nom1, Priv_Str, IDGP, Idko, OboznSh, Obozn, LINI: string;
  ar: array[0..7750, 0..6] of string;
  Ar1: array[0..1050, 0..12] of string;
  Ar2: array of array of string;
  SR: TSearchRec; // поисковая переменная
  FindRes: Integer; // переменная для записи результата поиска
  Str, Dir_Ser, Str1, Str2, Str3, fileName, fullFilePath, Put, Dat_s, Elem, Err: string;
  h: hwnd;
  Dat: TDate;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);

  Dat_s := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 3, zclrstrngrd1.Row];
  Dat := StrToDate(Dat_s);
  Dat_s := FormatDateTime('mm.dd.yyyy', Dat);
  Nom := zclrstrngrd1.Cells[0, zclrstrngrd1.Row];
  Nom1 := zclrstrngrd1.Cells[0, zclrstrngrd1.Row];

  Conn_Klap := Connect_Miass_Klap.Create();
  Memo25.Lines.Clear;
  Memo26.Lines.Clear;
  Nom := '';
  Nom := ' AND ((Номер=' + #39 + zclrstrngrd1.Cells[0, zclrstrngrd1.Row] + #39 + ')';
  for i := 0 to StringGrid9.RowCount - 1 do
  begin
    if StringGrid9.Cells[0, i] <> '' then
      Memo26.Lines.Add(zclrstrngrd1.Cells[0, i])
  end;
  if Memo26.Lines.Strings[0] <> '' then
  begin
    Nom := ' AND ((Номер=' + #39 + Memo26.Lines.Strings[0] + #39 + ')';
    for i := 0 to Memo26.Lines.Count - 1 do
    begin
      if Memo26.Lines.Strings[i + 1] <> '' then
        Nom := Nom + ' OR (Номер=' + #39 + Memo26.Lines.Strings[i + 1] + #39 + ')';
    end;
  end;
    //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  SetConnectTemp(ADOQueryTemp);
    //Создание временной таблицы
  ADOQueryTemp := TADOQuery.Create(nil);
  ADOQueryTemp.Connection := ADOConnectionTemp;
  //(Элемент,Обозначение,Изделие,Длина,Ширина,ДлинаРазв,ШиринаРазв,Заказ,IDГП,Материал,IDКО)
  ADOQueryTemp.SQL.Text := 'CREATE TABLE #ClientToDBFL (Элемент nvarchar(350),Kol float ,' + 'Обозначение nvarchar(350),Изделие nvarchar(350),Длина nvarchar(350),Ширина nvarchar(350),' + 'ДлинаРазв nvarchar(350),ШиринаРазв nvarchar(350),Заказ nvarchar(350),IDГП nvarchar(350),Материал nvarchar(350),IDКО nvarchar(350))';

  ADOQueryTemp.ExecSQL;
  if not mkQuerySelect(Form1.ADOQuery2, 'Select Станок,Обозначение, Элемент,Заготовка,Изделие,Sum(Количество) As c ,' + 'Sum(КолКлап) as KK   From %s Where (' + 'Планирование' + '=' + #39 + '%s' + #39 + ') %s' + ') AND (Станок=' + #39 + 'Trumph' + #39 + ') %s  Group BY Станок,Обозначение, Элемент,Заготовка,Изделие', ['Заготовка', Dat_s, Nom, LINI]) then //Заготовка
    exit;
  for J := 0 to ADOQuery2.RecordCount - 1 do
  begin
    Memo25.Lines.Add(ADOQuery2.FieldByName('Изделие').AsString);
  end;                                                                       //  ,Изделие
  if not mkQuerySelect(Form1.ADOQuery2, 'Select Станок,Обозначение, Элемент,Заготовка,Sum(Количество) As c ,' + 'Sum(КолКлап) as KK   From %s Where (' + 'Планирование' + '=' + #39 + '%s' + #39 + ') %s' +                                                     //  ,Изделие
    ') AND (Станок=' + #39 + 'Trumph' + #39 + ') %s  Group BY Станок,Обозначение, Элемент,Заготовка', ['Заготовка', Dat_s, Nom, LINI]) then //Заготовка
    exit;
  for J := 0 to ADOQuery2.RecordCount - 1 do
  begin

    Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
    OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
    if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение=' + #39 + OboznSh + #39 + ') ORDER BY Дата ', ['Специф750']) then
      exit;
    if ADOQuery4.RecordCount <> 0 then
    begin
      ADOQuery4.Last;
        //SetConnectTemp(ADOQueryTemp);
      ADOQueryTemp.SQL.Text := 'INSERT INTO #ClientToDBFL ' + '(Элемент,Обозначение,Изделие,Длина,Ширина,ДлинаРазв,ШиринаРазв,Заказ,IDГП,Материал,IDКО,Kol) Values (' + #39 + ADOQuery2.FieldByName('Элемент').AsString + #39 + ',' + #39 + ADOQuery2.FieldByName('Обозначение').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('Изделие').AsString + #39 +        //','+#39+Memo25.Lines[0]+#39+
        ',' + #39 + ADOQuery4.FieldByName('Длина').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('Ширина').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('ДлинаРазв').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('ШиринаРазв').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('Заказ').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('IDГП').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('Материал').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('IDКО').AsString + #39 + ',' + #39 + ADOQuery2.FieldByName('c').AsString + #39 + ')';
      try
        ADOQueryTemp.ExecSQL;
      except
        Err := '1222';
      end;
      Form1.ADOQuery4.Next;
    end;
    Form1.ADOQuery2.Next;
  end;
  ADOQueryTemp.SQL.Text := 'Select * from #ClientToDBFL ORDER BY Материал ';
  ADOQueryTemp.Open;
  for i := 0 to ADOQueryTemp.RecordCount - 1 do
  begin
    Ar1[X, 0] := ADOQueryTemp.FieldByName('Kol').AsString;
    Obozn := ADOQueryTemp.FieldByName('Обозначение').AsString;
    Ar1[X, 1] := ADOQueryTemp.FieldByName('Обозначение').AsString;
    Ar1[X, 11] := ADOQueryTemp.FieldByName('Обозначение').AsString;
    Ar1[X, 2] := ADOQueryTemp.FieldByName('Элемент').AsString;
    Ar1[X, 3] := ADOQueryTemp.FieldByName('Изделие').AsString;
    Ar1[X, 4] := ADOQueryTemp.FieldByName('Длина').AsString;
    Ar1[X, 5] := ADOQueryTemp.FieldByName('Ширина').AsString;
    Ar1[X, 6] := ADOQueryTemp.FieldByName('ДлинаРазв').AsString;
    Ar1[X, 7] := ADOQueryTemp.FieldByName('ШиринаРазв').AsString;
    Ar1[X, 8] := ADOQueryTemp.FieldByName('Заказ').AsString;
    Ar1[X, 9] := ADOQueryTemp.FieldByName('IDГП').AsString;
    Ar1[X, 10] := ADOQueryTemp.FieldByName('Материал').AsString;
    Ar1[X, 12] := ADOQueryTemp.FieldByName('IDКО').AsString;
    Inc(X);
    ADOQueryTemp.Next;
  end;

//Nom := SG212.Cells[0,0];
  Dir := Put_KTO + '\Кондратьев\Programm\Kanalka\' + God;
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Kanalka\' + God + '\' + mes + '\';
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Kanalka\' + God + '\' + mes + '\' + Nom1 + '\';
  CreateDir(Dir);

  XL2 := CreateOleObject('Excel.Application');
  CopyFile(PWideChar(Put_KTO + '\CKlapana\2013\Programm_Vozd.xlsx'), PWideChar(Dir + '\' + Nom1 + '.xlsx'), False);

  XL2.Workbooks.Open(Dir + '\' + Nom1 + '.xlsx');
  XL2.Application.EnableEvents := false;

        //-----------------------------------------------
  Memo7.Lines.Clear;
  Memo15.Lines.Clear;
  E := 0;
  for i := 0 to High(Ar1) do
  begin
    if Ar1[E, 3] = '' then
      Break;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 4] := Ar1[E, 8]; //Zakaz
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 5] := IntToStr(E + 1);
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 6] := Ar1[E, 3]; //Klapan
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 7] := Ar1[E, 2]; //Element
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 8] := Ar1[E, 0]; //Kol-vo
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 9] := Ar1[E, 6]; //DlinRazv
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 10] := Ar1[E, 7]; //ShirRazv
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 12] := Ar1[E, 10]; //Mat
                //+++++++++++++++++++
    Str := Ar1[E, 1]; //Element
    {Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
                //+++++++++++++++++++
    Str := ConvertRus(Str);
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str1 := StringReplace(Str1, ' ', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница) }
    //XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 13] := Str3+ '.Geo'; //Chert
                //+++++++++++++++++++
    Memo7.Lines.Add(Str);
    Memo15.Lines.Add(Ar1[E, 8] + '  ' + Ar1[E, 3]);
    Inc(E);
  end;

  Memo9.Clear;
  Memo8.Clear;
  E := 0;
  for i := 0 to Memo7.Lines.Count - 0 do
  begin
    F := 0;
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Канальная вентиляция\';
    if Memo7.Lines.Strings[i] <> '' then
    begin
      fileName := Memo7.Lines.Strings[i];
      ResultStr := '';
      FindWithLevel(Dir_Ser, fileName);
      fullFilePath := ResultStr;
   // fullFilePath := FileSearch(fileName, Dir_Ser);
      if fullFilePath <> '' then
      begin
        Memo9.Lines.Add(fullFilePath);
        XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 13] := fullFilePath + '.Geo'; //Chert
        Inc(E);
        CopyFile(PWideChar(ResultPatch + fullFilePath), PWideChar(Dir + fullFilePath), False);
      //CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
      end
      else
      begin
        Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
      end;
    end;
  end;
  if Memo8.Lines.Strings[0] <> '' then
  begin
    Memo8.Lines.SaveToFile('123.txt');
    Str := ExtractFileDir(ParamStr(0)) + '\123.txt';
    ShellExecute(Form1.Handle, nil, PChar(Str), nil, nil, SW_SHOWNORMAL);
  end;
        {if (FlagDolg=9) or (FlagDolg=1) then
        begin

        end;}
  XL2.ActiveWorkBook.WorkSheets[1].Cells[12, 2] := Nom;
        //XL2.ActiveWorkBook.WorkSheets[1].SaveAs(Dir + '\' + nom + '.xlsx');
 // XL2.Visible := True;

  XL2.ActiveWorkBook.Save;
  XL2.ActiveWorkBook.Close;
  XL2.Application.Quit;
  XL2 := UnAssigned;
  ShellExecute(h, 'open', PWideChar(Dir), nil, nil, SW_SHOW);
end;

procedure TForm1.N93Click(Sender: TObject);
var
  fileName, Vn_Dat, Nom, GP, IDGP, IDKO, Kol_Otv, Izdel, Zakaz, Zak, Id, P, ID1: string;
  X, J: Integer;
begin
  IDGP := SG.Cells[13, SG.Row];
  IDKO := '0';
  Kol_Otv := SG.Cells[5, SG.Row]; //кол завес
  Izdel := SG.Cells[3, SG.Row];
  Zakaz := SG.Cells[2, SG.Row];
  Zak := Zakaz;
  GP := IDGP;
  UOsnova_Main := Osnova_Main.Create();
  fileName := '';//ExtractFileDir(ParamStr(0)); //+'\Klapan.EXE';
  Vn_Dat := '01.01.2000';
  Nom := '-2';
  UOsnova_Main.Flag_Error := 0;
  Form1.Memo2.Lines.Add('Osnova');
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');

  UOsnova_Main.Osnova(Vn_Dat, '[ЗапускСТАМ]', 'СпецифСТАМ', #39 + Nom + #39, fileName, 1, StrToInt(IDGP));
                        //++++++++++++++++++++++++++++++++++++++++++++++++++
  if UOsnova_Main.Flag_Error = 2 then //ДЕТАЛИ НЕ ВСЕ
  begin
    Form1.Memo2.Lines.Add('UOsnova_Main.Osnova( ДЕТАЛИ НЕ ВСЕ,ЗапускСТАМ,СпецифСТАМ,' + Nom + ',' + fileName + ' )UOsnova_Main.Flag_Error =2');
    Exit;
  end;
  MessageDlg('Ok! 01.01.2000', mtError, [mbOk], 0);
end;

procedure TForm1.N94Click(Sender: TObject);
var
  E, i, J, X, X3, X1, Res, Priv, Kol_Zap, Kount, DlinaI, Res_KPU, Sten_G, Sten_V, Res_Detal, hh, F2: Integer;
  Vn_DAt, Dir, God, mes, Nom, Priv_Str, IDGP, OboznSh, Obozn, Dlina, Elem, k, Mat: string;
  ar: array[0..50, 0..7] of string;
  Ar1: array[0..500, 0..13] of string;
  Ar3: array[0..500, 0..13] of string;
  Ar2: array of array of string;
  SR: TSearchRec; // поисковая переменная
  FindRes, Res1, R: Integer; // переменная для записи результата поиска
  Str, Dir_Ser, Str1, Str2, Str3, fileName, fullFilePath, Put, ko, S, Nam: string;
  h: hwnd;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
  R := SGL.Row;
  Nom := SGL.Cells[I_FN_SGP + 2, R];
  ko := SGL.Cells[I_FN_SGP + 8, R];
  F2 := 0;
  // Nom='' then
  //       Continue;
  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + Nom + #39 + ') AND (IdКО=' + #39 + ko + #39 + ') AND  (Отмена IS NULL) Order By Заказ ', ['KlapanaZap']) then
    exit;
  Kount := ADOQuery2.RecordCount;
  if Form1.ADOQuery2.RecordCount <> 0 then
  begin

    for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
    begin
      ar[i, 0] := Form1.ADOQuery2.FieldByName('Заказ').AsString;
      ar[i, 1] := Form1.ADOQuery2.FieldByName('Кол во запущенных').AsString;
      ar[i, 2] := Nom;
      ar[i, 3] := Form1.ADOQuery2.FieldByName('Изделие').AsString;
      Nam := Form1.ADOQuery2.FieldByName('Изделие').AsString;
      ar[i, 4] := Form1.ADOQuery2.FieldByName('МодПривода').AsString;
      ar[i, 5] := Form1.ADOQuery2.FieldByName('IdГП').AsString;
      ar[i, 6] := Form1.ADOQuery2.FieldByName('IdКО').AsString;
      Form1.ADOQuery2.Next;
    end;
  end;
  for i := 0 to Kount do
  begin                                   //  AND (Trumph='+#39+'True'+#39+')
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + ar[i, 5] + #39 + ')  AND (IdКО=' + #39 + ko + #39 + ') AND (ВидЭлемента=' + #39 + 'Детали' + #39 + ')  Order By Обозначение ', ['СпецифВозд']) then
      exit;
    if ar[i, 1] = '' then
      Break;
    Kol_Zap := StrToInt(ar[i, 1]);

                //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    for J := 0 to ADOQuery2.RecordCount - 1 do
    begin
      Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
      OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
      if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение=' + #39 + OboznSh + #39 + ') AND ((Фрезерный=' + #39 + 'True' + #39 + ') ) AND (Технолог=' + #39 + 'True' + #39 + ')  ', ['СпецифОбщая']) then
        exit;
        //Лист СМЛ 1220х2440х10
      if ADOQuery4.RecordCount <> 0 then
      begin
        Mat := ADOQuery2.FieldByName('Материал').AsString;
        Res := Pos('х10', Mat);
        if Res <> 0 then
        begin
          k := ADOQuery2.FieldByName('Количество').AsString;
          Ar1[X, 0] := IntToStr(Kol_Zap * StrToInt(k));
          Obozn := ADOQuery4.FieldByName('Обозначение').AsString;
          Ar1[X, 1] := ADOQuery4.FieldByName('Обозначение').AsString;
          Ar1[X, 11] := ADOQuery2.FieldByName('Обозначение').AsString;
          Ar1[X, 2] := ADOQuery2.FieldByName('Элемент').AsString;
          Ar1[X, 3] := ar[i, 3]; //ADOQuery4.FieldByName('Изделие').AsString;
          Ar1[X, 4] := ADOQuery2.FieldByName('Длина').AsString;
          Ar1[X, 5] := ADOQuery2.FieldByName('Ширина').AsString;
          Ar1[X, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
          Ar1[X, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
          Ar1[X, 8] := ADOQuery2.FieldByName('Заказ').AsString;
          Ar1[X, 9] := ADOQuery2.FieldByName('IDГП').AsString;
          Ar1[X, 10] := ADOQuery2.FieldByName('Материал').AsString;
          Ar1[X, 12] := ADOQuery2.FieldByName('idКО').AsString;
          Inc(X);
        end
        else
        begin
          k := ADOQuery2.FieldByName('Количество').AsString;
          Ar3[X3, 0] := IntToStr(Kol_Zap * StrToInt(k));
          Obozn := ADOQuery4.FieldByName('Обозначение').AsString;
          Ar3[X3, 1] := ADOQuery4.FieldByName('Обозначение').AsString;
          Ar3[X3, 11] := ADOQuery2.FieldByName('Обозначение').AsString;
          Ar3[X3, 2] := ADOQuery2.FieldByName('Элемент').AsString;
          Ar3[X3, 3] := ar[i, 3]; //ADOQuery4.FieldByName('Изделие').AsString;
          Ar3[X3, 4] := ADOQuery2.FieldByName('Длина').AsString;
          Ar3[X3, 5] := ADOQuery2.FieldByName('Ширина').AsString;
          Ar3[X3, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
          Ar3[X3, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
          Ar3[X3, 8] := ADOQuery2.FieldByName('Заказ').AsString;
          Ar3[X3, 9] := ADOQuery2.FieldByName('IDГП').AsString;
          Ar3[X3, 10] := ADOQuery2.FieldByName('Материал').AsString;
          Ar3[X3, 12] := ADOQuery2.FieldByName('idКО').AsString;
          Inc(X3);
        end;
        Form1.ADOQuery4.Next;
      end;
      Form1.ADOQuery2.Next;
    end;
  end;

  //-----------------------------------------------
  Memo7.Lines.Clear;
  Memo15.Lines.Clear;
  for i := 0 to High(Ar1) do
  begin
    if Ar1[E, 3] = '' then
      Break;

      //+++++++++++++++++++
    Str := Ar1[E, 11]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 5);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
    Str := ConvertRus(Str);
                //+++++++++++++++++++
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo7.Lines.Add(Str3);
    Memo15.Lines.Add(Ar1[E, 8] + '  ' + Ar1[E, 3]);
    Inc(E);
  end;
    //-----------------------------------------------
  Memo23.Lines.Clear;
  Memo24.Lines.Clear;
  E := 0;
  for i := 0 to High(Ar3) do
  begin
    if Ar3[E, 3] = '' then
      Break;

      //+++++++++++++++++++
    Str := Ar3[E, 11]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 5);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
    Str := ConvertRus(Str);
                //+++++++++++++++++++
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo23.Lines.Add(Str3);
    Memo24.Lines.Add(Ar3[E, 8] + '  ' + Ar3[E, 3]);
    Inc(E);
  end;

  Memo9.Clear;
  Memo8.Clear;
  S := ExtractFileDir(ParamStr(0));
  Str3 := StringReplace(Nam, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
  Nam := Str3;
  for i := 0 to Memo7.Lines.Count - 0 do
  begin
    F := 0;
    //Dir_Ser := Put_KTO + '\Мингалиев\Вите\Programm1\Pogar';
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Клапаны\Воздушные';
    if Memo7.Lines.Strings[i] <> '' then
      fileName := Memo7.Lines.Strings[i] + '.dxf';
    fullFilePath := FileSearch(fileName, Dir_Ser);
    Memo2.Lines.Add(fullFilePath + '  0');
    if fullFilePath <> '' then
    begin
      F2 := 1;
      Memo2.Lines.Add(fullFilePath + '  1');
      Memo9.Lines.Add(fullFilePath);
      Dir := S + '\' + Nam + '\';
      CreateDir(Dir);
      //
      Dir := S + '\' + Nam + '\Фрезерный\';
      CreateDir(Dir);
      //
      Dir := S + '\' + Nam + '\Фрезерный\10\';
      CreateDir(Dir);
      CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
    end
    else
    begin
      Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
    end;
  end;
//
  for i := 0 to Memo23.Lines.Count - 0 do
  begin
    F := 0;
    //Dir_Ser := Put_KTO + '\Мингалиев\Вите\Programm1\Pogar';
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Клапаны\Воздушные';
    if Memo23.Lines.Strings[i] <> '' then
      fileName := Memo23.Lines.Strings[i] + '.dxf';
    fullFilePath := FileSearch(fileName, Dir_Ser);
    Memo2.Lines.Add(fullFilePath + '  0');
    if fullFilePath <> '' then
    begin
      Memo9.Lines.Add(fullFilePath);
      F2 := 1;
      Memo2.Lines.Add(fullFilePath + '  1');
      Dir := S + '\' + Nam + '\';
      CreateDir(Dir);
      //
      Dir := S + '\' + Nam + '\Фрезерный\';
      CreateDir(Dir);
      //
      Dir := S + '\' + Nam + '\Фрезерный\12\';
      CreateDir(Dir);
      CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
    end
    else
    begin
      Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
    end;
  end;
  if Memo8.Lines.Strings[0] <> '' then
  begin
    Memo8.Lines.SaveToFile('123.txt');
    Str := ExtractFileDir(ParamStr(0)) + '\123.txt';
    ShellExecute(Form1.Handle, nil, PChar(Str), nil, nil, SW_SHOWNORMAL);
  end;   //Клапан ГЕРМИК-С-600*600-Н-1*SM24A-S-1-УХЛ2-0_215200559-04-ОПР
  Dir := S + '\' + Nam + '\';
  CreateDir(Dir);
      //
  Dir := S + '\' + Nam + '\Фрезерный';
  CreateDir(Dir);
      //
  Dir := S + '\' + Nam + '\Фрезерный\10';
  CreateDir(Dir);
  F2 := 1;
  if F2 <> 0 then
    ShellExecute(h, 'open', PWideChar(S + '\' + Nam + '\Фрезерный\'), nil, nil, SW_SHOW);
end;

procedure TForm1.N95Click(Sender: TObject);
var
  //XL2: Variant;
  E, i, J, X, X1, X3, Res, Priv, Kol_Zap, Kount, DlinaI, Res_KPU, Sten_G, Sten_V, Res_Detal, hh, F2, Res1, Res2: Integer;
  Vn_DAt, Dir, God, mes, Nom, Priv_Str, IDGP, OboznSh, Obozn, Dlina, Elem, Izdel, S, K, Mat: string;
  ar: array[0..7750, 0..7] of string;
  Ar1: array[0..1500, 0..13] of string;
  Ar3: array[0..100, 0..13] of string;
  Ar2: array of array of string;
  SR: TSearchRec; // поисковая переменная
  FindRes: Integer; // переменная для записи результата поиска
  Str, Dir_Ser, Str1, Str2, Str3, fileName, fullFilePath, Put: string;
  h: hwnd;
  FindFile: TSearchRec;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
  for X1 := 0 to SG212.RowCount - 1 do
  begin
    Nom := SG212.Cells[0, X1]; //ZSG.Cells[0, ZSG.Row];
    if Nom = '' then
      Continue;
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (Номер=' + #39 + Nom + #39 + ') AND (Отмена IS NULL) Order By Заказ ', ['ЗапускВозд']) then
      exit;
    Kount := ADOQuery2.RecordCount;
    if Form1.ADOQuery2.RecordCount <> 0 then
    begin

      for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
      begin
        ar[i, 0] := Form1.ADOQuery2.FieldByName('Заказ').AsString;
        ar[i, 1] := Form1.ADOQuery2.FieldByName('Кол во запущенных').AsString;
        ar[i, 2] := Nom;
        ar[i, 3] := Form1.ADOQuery2.FieldByName('Изделие').AsString;
        ar[i, 4] := Form1.ADOQuery2.FieldByName('МодПривода').AsString;
        ar[i, 5] := Form1.ADOQuery2.FieldByName('IdГП').AsString;
        ar[i, 6] := Form1.ADOQuery2.FieldByName('IdКО').AsString;
        Form1.ADOQuery2.Next;
      end;
    end;
    for i := 0 to Kount do
    begin                                   //  AND (Trumph='+#39+'True'+#39+')
      if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + ar[i, 5] + #39 + ') AND  (IdКО=' + #39 + ar[i, 6] + #39 + ') AND (ВидЭлемента=' + #39 + 'Детали' + #39 + ')  Order By Обозначение ', ['СпецифВозд']) then
        exit;
      if ar[i, 1] = '' then
        Break;
      Kol_Zap := StrToInt(ar[i, 1]);
    //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

      for J := 0 to ADOQuery2.RecordCount - 1 do
      begin
        Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
        OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
        if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение=' + #39 + OboznSh + #39 + ') AND ((Фрезерный=' + #39 + 'True' + #39 + ') ) AND (Технолог=' + #39 + 'True' + #39 + ')  ', ['СпецифОбщая']) then
          exit;
        if ADOQuery4.RecordCount <> 0 then
        begin

          Mat := ADOQuery2.FieldByName('Материал').AsString;
          Res := Pos('х10', Mat);
          if Res <> 0 then
          begin
            K := ADOQuery2.FieldByName('Количество').AsString;
            Ar1[X, 0] := IntToStr(Kol_Zap * StrToInt(K));
            Obozn := ADOQuery4.FieldByName('Обозначение').AsString;
            Ar1[X, 1] := ADOQuery4.FieldByName('Обозначение').AsString;
            Ar1[X, 11] := ADOQuery2.FieldByName('Обозначение').AsString;
            Ar1[X, 2] := ADOQuery2.FieldByName('Элемент').AsString;
            Ar1[X, 3] := ar[i, 3]; //ADOQuery4.FieldByName('Изделие').AsString;
            Ar1[X, 4] := ADOQuery2.FieldByName('Длина').AsString;
            Ar1[X, 5] := ADOQuery2.FieldByName('Ширина').AsString;
            Ar1[X, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
            Ar1[X, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
            Ar1[X, 8] := ADOQuery2.FieldByName('Заказ').AsString;
            Ar1[X, 9] := ADOQuery2.FieldByName('IDГП').AsString;
            Ar1[X, 10] := ADOQuery2.FieldByName('Материал').AsString;
            Ar1[X, 12] := ADOQuery2.FieldByName('idКО').AsString;
            Inc(X);
          end
          else
          begin
            K := ADOQuery2.FieldByName('Количество').AsString;
            Ar3[X3, 0] := IntToStr(Kol_Zap * StrToInt(K));
            Obozn := ADOQuery4.FieldByName('Обозначение').AsString;
            Ar3[X3, 1] := ADOQuery4.FieldByName('Обозначение').AsString;
            Ar3[X3, 11] := ADOQuery2.FieldByName('Обозначение').AsString;
            Ar3[X3, 2] := ADOQuery2.FieldByName('Элемент').AsString;
            Ar3[X3, 3] := ar[i, 3]; //ADOQuery4.FieldByName('Изделие').AsString;
            Ar3[X3, 4] := ADOQuery2.FieldByName('Длина').AsString;
            Ar3[X3, 5] := ADOQuery2.FieldByName('Ширина').AsString;
            Ar3[X3, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
            Ar3[X3, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
            Ar3[X3, 8] := ADOQuery2.FieldByName('Заказ').AsString;
            Ar3[X3, 9] := ADOQuery2.FieldByName('IDГП').AsString;
            Ar3[X3, 10] := ADOQuery2.FieldByName('Материал').AsString;
            Ar3[X3, 12] := ADOQuery2.FieldByName('idКО').AsString;
            Inc(X3);
          end;
          Form1.ADOQuery4.Next;
        end;
        Form1.ADOQuery2.Next;
      end;
    end;
  end;
  Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God;
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God + '\' + mes + '\';
  CreateDir(Dir);
  //Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\' + Nom + '\';
  //CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God + '\' + mes + '\' + Nom + 'Фрезерный\';
  CreateDir(Dir);
        //-----------------------------------------------
  Memo7.Lines.Clear;
  Memo15.Lines.Clear;
  for i := 0 to High(Ar1) do
  begin
    if Ar1[E, 3] = '' then
      Break;
        //ВГ 410.00.01.002-400 меняем на ВГ 410.00.01.001-400  Гапова 21.01.2019
    Izdel := ar[E, 3];
    Obozn := Ar1[E, 11];
                //+++++++++++++++++++
    Str := Obozn; //Ar1[E, 11]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 5);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
    Str := ConvertRus(Str);
                //+++++++++++++++++++
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo7.Lines.Add(Str3);
    Memo15.Lines.Add(Ar1[E, 8] + '  ' + Ar1[E, 3]);
    Inc(E);
  end;

     //-----------------------------------------------
  Memo23.Lines.Clear;
  Memo24.Lines.Clear;
  E := 0;
  for i := 0 to High(Ar3) do
  begin
    if Ar3[E, 3] = '' then
      Break;

      //+++++++++++++++++++
    Str := Ar3[E, 11]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 5);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
    Str := ConvertRus(Str);
                //+++++++++++++++++++
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo23.Lines.Add(Str3);
    Memo24.Lines.Add(Ar3[E, 8] + '  ' + Ar3[E, 3]);
    Inc(E);
  end;

  Memo9.Clear;
  Memo8.Clear;
  for i := 0 to Memo7.Lines.Count - 1 do
  begin
    F := 0;
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Клапаны\Воздушные\';
    //Dir_Ser := Put + 'ОИТ\';
    if Memo7.Lines.Strings[i] <> '' then
      fileName := Memo7.Lines.Strings[i] + '.dxf';
    if FindFirst(Dir_Ser + fileName, faDirectory, FindFile) = 0 then
      repeat
        if FindFile.Name[1] = '.' then
          continue;
        fullFilePath := (Dir_Ser + FindFile.Name);
        Memo9.Lines.Add(fullFilePath);
        Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God + '\' + mes + '\' + Nom + 'Фрезерный\10\';
        CreateDir(Dir);
        CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
        Memo2.Lines.Add('CopyFile1  ' + fullFilePath);
      until FindNext(FindFile) <> 0
    else
    begin
      Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
      Memo2.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
    end;
  end;
 //
  for i := 0 to Memo23.Lines.Count - 1 do
  begin
    F := 0;
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Клапаны\Воздушные\';
    //Dir_Ser := Put + 'ОИТ\';
    if Memo23.Lines.Strings[i] <> '' then
      fileName := Memo23.Lines.Strings[i] + '.dxf';

    if FindFirst(Dir_Ser + fileName, faDirectory, FindFile) = 0 then
      repeat
        if FindFile.Name[1] = '.' then
          continue;
        fullFilePath := (Dir_Ser + FindFile.Name);
        Memo9.Lines.Add(fullFilePath);
        Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God + '\' + mes + '\' + Nom + 'Фрезерный\12\';
        CreateDir(Dir);
        CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
        Memo2.Lines.Add('CopyFile2  ' + fullFilePath);
      until FindNext(FindFile) <> 0
    else
    begin
      Memo8.Lines.Add(Memo24.Lines.Strings[i] + '  ' + fileName);
      Memo2.Lines.Add(Memo24.Lines.Strings[i] + '  ' + fileName);
    end;
  end;

  if Memo8.Lines.Strings[0] <> '' then
  begin
    Memo8.Lines.SaveToFile('123.txt');
    Str := ExtractFileDir(ParamStr(0)) + '\123.txt';
    ShellExecute(Form1.Handle, nil, PChar(Str), nil, nil, SW_SHOWNORMAL);
  end;
  ShellExecute(h, 'open', PWideChar(Dir), nil, nil, SW_SHOW);
end;

procedure TForm1.N96Click(Sender: TObject);
var
  XL2: Variant;
  E, i, J, X, X1, X2, Res, Priv, Kol_Zap, Kount: Integer;
  Vn_DAt, Dir, God, mes, Nom, Priv_Str, IDGP, Idko, OboznSh, Obozn: string;
  ar: array[0..7750, 0..6] of string;
  Ar1: array[0..10500, 0..12] of string;
  Ar2: array of array of string;
  SR: TSearchRec; // поисковая переменная
  FindRes: Integer; // переменная для записи результата поиска
  Str, Dir_Ser, Str1, Str2, Str3, fileName, fullFilePath, Put: string;
  h: hwnd;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
  X2 := SGL.Row;
//for X1 := 0 to SGL.RowCount-1 do
//Begin
  IDGP := SGL.Cells[I_FN_SGP + 2, X2];
  Idko := SGL.Cells[I_FN_SGP + 8, X2];
 { Nom := SG212.Cells[0,X1];//ZSG.Cells[0, ZSG.Row];
  if Nom='' then
         Continue; }
  //Nom := ZCV.Cells[0, ZCV.Row];

  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + IDGP + #39 + ') AND (IdКО=' + #39 + Idko + #39 + ') AND  (Отмена IS NULL) Order By Заказ ', ['KlapanaZap']) then
    exit;
  Kount := ADOQuery2.RecordCount;
  if Form1.ADOQuery2.RecordCount <> 0 then
  begin

    for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
    begin
      ar[i, 0] := Form1.ADOQuery2.FieldByName('Заказ').AsString;
      ar[i, 1] := Form1.ADOQuery2.FieldByName('Кол во').AsString;
      ar[i, 2] := Nom;
      ar[i, 3] := Form1.ADOQuery2.FieldByName('Изделие').AsString;
      ar[i, 4] := Form1.ADOQuery2.FieldByName('МодПривода').AsString;
      ar[i, 5] := Form1.ADOQuery2.FieldByName('IdГП').AsString;
      ar[i, 6] := Form1.ADOQuery2.FieldByName('IdКО').AsString;
      Form1.ADOQuery2.Next;
    end;
  end;
  for i := 0 to Kount do
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + ar[i, 5] + #39 + ') AND (IDКО=' + #39 + ar[i, 6] + #39 + ') AND (ВидЭлемента=' + #39 + 'Детали' + #39 + ') Order By Обозначение ', ['СпецифВозд']) then
      exit;

    if ar[i, 1] = '' then
      Kol_Zap := 0
    else
      Kol_Zap := StrToInt(ar[i, 1]);
                //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    for J := 0 to ADOQuery2.RecordCount do
    begin

      OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
                        {Res:=Pos('-',OboznSh);
                        if Res<>0 Then
                        Delete(OboznSh,Res,30);
                        if not Form1.mkQuerySelect66(Form1.ADOQuery4,
                        'Select * from %s Where   (ОбозначениеШ=' + #39 +
                        OboznSh + #39 +') AND ((Trumph='+#39+'True'+#39+') or (Ножницы='+#39+'True'+#39+')) AND (Технолог='+#39+'True'+#39+')  ', ['ШаблонВоз']) then
                        exit; }                                     // or (Ножницы='+#39+'True'+#39+')
      if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение=' + #39 + OboznSh + #39 + ') AND ((Trumph=' + #39 + 'True' + #39 + ') ) AND (Технолог=' + #39 + 'True' + #39 + ')  ', ['СпецифОбщая']) then
        exit;
      if ADOQuery4.RecordCount <> 0 then
      begin

        Ar1[X, 0] := ADOQuery2.FieldByName('Количество').AsString;
        Obozn := ADOQuery4.FieldByName('Обозначение').AsString;
        Ar1[X, 1] := ADOQuery2.FieldByName('Обозначение').AsString;
        Ar1[X, 2] := ADOQuery2.FieldByName('Элемент').AsString;
        Ar1[X, 3] := ADOQuery2.FieldByName('Изделие').AsString;
        Ar1[X, 4] := ADOQuery2.FieldByName('Длина').AsString;
        Ar1[X, 5] := ADOQuery2.FieldByName('Ширина').AsString;
        Ar1[X, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
        Ar1[X, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
        Ar1[X, 8] := ADOQuery2.FieldByName('Заказ').AsString;
        Ar1[X, 9] := ADOQuery2.FieldByName('IDГП').AsString;
        Ar1[X, 10] := ADOQuery2.FieldByName('Материал').AsString;
        Ar1[X, 11] := ADOQuery2.FieldByName('IDКО').AsString;
        Inc(X);
      end;
      Form1.ADOQuery2.Next;
    end;
  end;
  //Inc(X2);
//End;
{Nom := SG212.Cells[0,0];
  Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God;
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God + '\' + mes + '\';
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God + '\' + mes + '\' + Nom + '\';
  CreateDir(Dir);

  XL2 := CreateOleObject('Excel.Application');
  CopyFile(PWideChar(Put_KTO + '\CKlapana\2013\Programm_Vozd.xlsx'), PWideChar(Dir + '\' + Nom + '.xlsx'), False);

  XL2.Workbooks.Open(Dir + '\' + Nom + '.xlsx');
  XL2.Application.EnableEvents := false; }
        //-----------------------------------------------
  Memo7.Lines.Clear;
  Memo15.Lines.Clear;
  for i := 0 to High(Ar1) do
  begin
    if Ar1[E, 3] = '' then
      Break;
   { XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 4] := Ar1[E, 8]; //Zakaz
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 5] := IntToStr(E + 1);
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 6] := Ar1[E, 3]; //Klapan
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 7] := Ar1[E, 2]; //Element
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 8] := Ar1[E, 0]; //Kol-vo
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 9] := Ar1[E, 6]; //DlinRazv
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 10] := Ar1[E, 7]; //ShirRazv
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 12] := Ar1[E, 10]; //Mat
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 13] := Ar1[E, 1]; //Chert  }
                //+++++++++++++++++++
    Str := Ar1[E, 1]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
                //+++++++++++++++++++
    Str := ConvertRus(Str);
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str1 := StringReplace(Str1, ' ', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo7.Lines.Add(Str3);
    Memo15.Lines.Add(Ar1[E, 8] + '  ' + Ar1[E, 3]);
    Inc(E);
  end;

  Memo9.Clear;
  Memo8.Clear;
  for i := 0 to Memo7.Lines.Count - 0 do
  begin
    F := 0;
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Клапаны\Воздушные';
    if Memo7.Lines.Strings[i] <> '' then
      fileName := Memo7.Lines.Strings[i] + '.dxf';
    fullFilePath := FileSearch(fileName, Dir_Ser);
    if fullFilePath <> '' then
    begin
      Memo9.Lines.Add(fullFilePath);
      CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
    end
    else
    begin
      Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
    end;
  end;
  if Memo8.Lines.Strings[0] <> '' then
  begin
    Memo8.Lines.SaveToFile('123.txt');
    Str := ExtractFileDir(ParamStr(0)) + '\123.txt';
    ShellExecute(Form1.Handle, nil, PChar(Str), nil, nil, SW_SHOWNORMAL);
  end;
        {if (FlagDolg=9) or (FlagDolg=1) then
        begin

        end;
  XL2.ActiveWorkBook.WorkSheets[1].Cells[12, 2] := Nom;
        //XL2.ActiveWorkBook.WorkSheets[1].SaveAs(Dir + '\' + nom + '.xlsx');
  XL2.Visible := True;
  XL2 := UnAssigned;  }
 // ShellExecute(h, 'open', PWideChar(Dir), nil, nil, SW_SHOW);

end;

procedure TForm1.N97Click(Sender: TObject);
var
 //XL2: Variant;
  E, i, J, X, X1, X3, Res, Priv, Kol_Zap, Kount, DlinaI, Res_KPU, Sten_G, Sten_V, Res_Detal, hh, F2, Res1, Res2: Integer;
  Vn_DAt, Dir, God, mes, Nom, Priv_Str, IDGP, OboznSh, Obozn, Dlina, Elem, Izdel, S, K, Mat: string;
  ar: array[0..7750, 0..7] of string;
  Ar1: array[0..1500, 0..13] of string;
  Ar3: array[0..100, 0..13] of string;
  Ar2: array of array of string;
  SR: TSearchRec; // поисковая переменная
  FindRes: Integer; // переменная для записи результата поиска
  Str, Dir_Ser, Str1, Str2, Str3, fileName, fullFilePath, Put: string;
  h: hwnd;
  FindFile: TSearchRec;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
  for X1 := 0 to SG212.RowCount - 1 do
  begin
    Nom := SG212.Cells[0, X1]; //ZSG.Cells[0, ZSG.Row];
    if Nom = '' then
      Continue;
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (Номер=' + #39 + Nom + #39 + ') AND (Отмена IS NULL) Order By Заказ ', ['ЗапускВозд']) then
      exit;
    Kount := ADOQuery2.RecordCount;
    if Form1.ADOQuery2.RecordCount <> 0 then
    begin

      for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
      begin
        ar[i, 0] := Form1.ADOQuery2.FieldByName('Заказ').AsString;
        ar[i, 1] := Form1.ADOQuery2.FieldByName('Кол во запущенных').AsString;
        ar[i, 2] := Nom;
        ar[i, 3] := Form1.ADOQuery2.FieldByName('Изделие').AsString;
        ar[i, 4] := Form1.ADOQuery2.FieldByName('МодПривода').AsString;
        ar[i, 5] := Form1.ADOQuery2.FieldByName('IdГП').AsString;
        ar[i, 6] := Form1.ADOQuery2.FieldByName('IdКО').AsString;
        Form1.ADOQuery2.Next;
      end;
    end;
    for i := 0 to Kount do
    begin                                   //  AND (Trumph='+#39+'True'+#39+')
      if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + ar[i, 5] + #39 + ') AND  (IdКО=' + #39 + ar[i, 6] + #39 + ') AND (ВидЭлемента=' + #39 + 'Детали' + #39 + ')  Order By Обозначение ', ['СпецифВозд']) then
        exit;
      if ar[i, 1] = '' then
        Break;
      Kol_Zap := StrToInt(ar[i, 1]);
    //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

      for J := 0 to ADOQuery2.RecordCount - 1 do
      begin
        Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
        OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
        if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение=' + #39 + OboznSh + #39 + ') AND ((Trumph=' + #39 + 'True' + #39 + ') ) AND (Технолог=' + #39 + 'True' + #39 + ')  ', ['СпецифОбщая']) then
          exit;
        if ADOQuery4.RecordCount <> 0 then
        begin

          Mat := ADOQuery2.FieldByName('Материал').AsString;

          K := ADOQuery2.FieldByName('Количество').AsString;
          Ar1[X, 0] := IntToStr(Kol_Zap * StrToInt(K));
          Obozn := ADOQuery4.FieldByName('Обозначение').AsString;
          Ar1[X, 1] := ADOQuery4.FieldByName('Обозначение').AsString;
          Ar1[X, 11] := ADOQuery2.FieldByName('Обозначение').AsString;
          Ar1[X, 2] := ADOQuery2.FieldByName('Элемент').AsString;
          Ar1[X, 3] := ar[i, 3]; //ADOQuery4.FieldByName('Изделие').AsString;
          Ar1[X, 4] := ADOQuery2.FieldByName('Длина').AsString;
          Ar1[X, 5] := ADOQuery2.FieldByName('Ширина').AsString;
          Ar1[X, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
          Ar1[X, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
          Ar1[X, 8] := ADOQuery2.FieldByName('Заказ').AsString;
          Ar1[X, 9] := ADOQuery2.FieldByName('IDГП').AsString;
          Ar1[X, 10] := ADOQuery2.FieldByName('Материал').AsString;
          Ar1[X, 12] := ADOQuery2.FieldByName('idКО').AsString;
          Inc(X);

          Form1.ADOQuery4.Next;
        end;
        Form1.ADOQuery2.Next;
      end;
    end;
  end;
  Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God;
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God + '\' + mes + '\';
  CreateDir(Dir);
  //Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\' + Nom + '\';
  //CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God + '\' + mes + '\' + Nom + '\';
  CreateDir(Dir);
        //-----------------------------------------------
  Memo7.Lines.Clear;
  Memo15.Lines.Clear;
  for i := 0 to High(Ar1) do
  begin
    if Ar1[E, 3] = '' then
      Break;
        //ВГ 410.00.01.002-400 меняем на ВГ 410.00.01.001-400  Гапова 21.01.2019
    Izdel := ar[E, 3];
    Obozn := Ar1[E, 11];
                //+++++++++++++++++++
    Str := Obozn; //Ar1[E, 11]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 5);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
    Str := ConvertRus(Str);
                //+++++++++++++++++++
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo7.Lines.Add(Str3);
    Memo15.Lines.Add(Ar1[E, 8] + '  ' + Ar1[E, 3]);
    Inc(E);
  end;

     //-----------------------------------------------


  Memo9.Clear;
  Memo8.Clear;
  for i := 0 to Memo7.Lines.Count - 1 do
  begin
    F := 0;
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Клапаны\Воздушные\';
    //Dir_Ser := Put + 'ОИТ\';
    if Memo7.Lines.Strings[i] <> '' then
      fileName := Memo7.Lines.Strings[i] + '.dxf';
    if FindFirst(Dir_Ser + fileName, faDirectory, FindFile) = 0 then
      repeat
        if FindFile.Name[1] = '.' then
          continue;
        fullFilePath := (Dir_Ser + FindFile.Name);
        Memo9.Lines.Add(fullFilePath);
       // Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God + '\' + mes + '\' + Nom + 'Фрезерный\10\';
        //CreateDir(Dir);
        CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
        Memo2.Lines.Add('CopyFile1  ' + fullFilePath);
      until FindNext(FindFile) <> 0
    else
    begin
      Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
      Memo2.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
    end;
  end;
 //

  if Memo8.Lines.Strings[0] <> '' then
  begin
    Memo8.Lines.SaveToFile('123.txt');
    Str := ExtractFileDir(ParamStr(0)) + '\123.txt';
    ShellExecute(Form1.Handle, nil, PChar(Str), nil, nil, SW_SHOWNORMAL);
  end;
  ShellExecute(h, 'open', PWideChar(Dir), nil, nil, SW_SHOW);
end;

procedure TForm1.N98Click(Sender: TObject);
var
  Zak, Nam, NK, KK, NN, KN, BZ, BRIK, Kol, GP, KO, Tab: string;
  i, y, j: Integer;
begin
  FShtrih.chk1.Checked:=True;
  FShtrih.StringGrid1.Cells[0, 0] := 'Кол во';
  FShtrih.StringGrid1.Cells[1, 0] := 'БЗ';
  FShtrih.StringGrid1.Cells[2, 0] := 'Изделие';
  FShtrih.StringGrid1.Cells[3, 0] := 'Брикет';
  FShtrih.StringGrid1.Cells[4, 0] := 'НачКод';
  FShtrih.StringGrid1.Cells[5, 0] := 'КонКод';
  FShtrih.StringGrid1.Cells[6, 0] := 'НачНомер';
  FShtrih.StringGrid1.Cells[7, 0] := 'КонНомер';
  FShtrih.StringGrid1.Cells[8, 0] := 'ТУ';
  Zak := StringGrid10.Cells[I_FN_ZAK, StringGrid10.Row];
  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (Заказ=' + #39 + Zak + #39 + ') ', ['Klapana']) then
    exit;
  FShtrih.StringGrid1.RowCount := Form1.ADOQuery2.RecordCount + 1;
  for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
  begin
    Kol := Form1.ADOQuery2.FieldByName('Кол во').AsString;
    BZ := Form1.ADOQuery2.FieldByName('БЗ').AsString;
    Nam := Form1.ADOQuery2.FieldByName('Изделие').AsString;
    BRIK := Form1.ADOQuery2.FieldByName('Брикет').AsString;
    NK := Form1.ADOQuery2.FieldByName('НачКод').AsString;
    KK := Form1.ADOQuery2.FieldByName('КонКод').AsString;
    NN := Form1.ADOQuery2.FieldByName('НачНомер').AsString;
    KN := Form1.ADOQuery2.FieldByName('КонНомер').AsString;
    GP := Form1.ADOQuery2.FieldByName('IdГП').AsString;
    KO := Form1.ADOQuery2.FieldByName('IdКО').AsString;
    Tab := '';
   // if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (IdГП=' + #39 + GP + #39 + ') AND (IdКО=' + #39 + KO + #39 + ') AND (Элемент=' + #39 + 'Табличка маркировки' + #39 + ') ', ['Специф']) then
   //   exit;
   // Tab := Form1.ADOQuery4.FieldByName('Обозначение').AsString;
    FShtrih.StringGrid1.Cells[0, i + 1] := Kol;
    FShtrih.StringGrid1.Cells[1, i + 1] := BZ;
    FShtrih.StringGrid1.Cells[2, i + 1] := Nam;
    FShtrih.StringGrid1.Cells[3, i + 1] := BRIK;
    FShtrih.StringGrid1.Cells[4, i + 1] := NK;
    FShtrih.StringGrid1.Cells[5, i + 1] := KK;
    FShtrih.StringGrid1.Cells[6, i + 1] := NN;
    FShtrih.StringGrid1.Cells[7, i + 1] := KN;
    FShtrih.StringGrid1.Cells[8, i + 1] := '11';//Tab;
    Form1.ADOQuery2.Next;
  end;
  FShtrih.Caption := Zak;
  FShtrih.ShowModal;
end;

procedure TForm1.N99Click(Sender: TObject);
var GP,Ko:string;
begin
       GP:=SG10.Cells[21,SG10.Row];
       KO:=SG10.Cells[22,SG10.Row];
       if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE [%s] SET [Отправила]=' + #39 + '1' + #39 +
       ' WHERE ([IdГП]=' + #39 + SG10.Cells[21, SG10.Row] + #39 + ') AND (IdКО= ' + #39 + SG10.Cells[22, SG10.Row] + #39 +
       ')', ['750']) then
      Exit;
      btn55.Click;
end;

procedure TForm1.FindWithLevel(path, FileName: string);
var
  SR: TSearchRec;
  FindRes, r: Integer;
begin
  FindRes := FindFirst(path + '*.*', faAnyFile, SR);
  while FindRes = 0 do
  begin
    if ((SR.Attr and faDirectory) = faDirectory) and ((SR.Name = '.') or (SR.Name = '..')) then
    begin
      FindRes := FindNext(SR);
      Continue;
    end;

    // если найден каталог, то
    if ((SR.Attr and faDirectory) = faDirectory) then
    begin
      // входим в процедуру поиска с параметрами текущего каталога +
      // каталог, что мы нашли
      FindWithLevel(path + SR.Name + '\\', FileName);
      FindRes := FindNext(SR);
      // после осмотра вложенного каталога мы продолжаем поиск
      // в этом каталоге
      Continue; // продолжить цикл
    end;
    r := Pos(FileName, SR.Name);
    if r <> 0 then
    begin
      ResultStr := SR.Name;
      ResultPatch := path;
      Memo2.Lines.Add(SR.Name);
    end;
    FindRes := FindNext(SR);
  end;
  FindClose(SR);
end;

procedure TForm1.N9Click(Sender: TObject);
var
  Sbor, Kol: Integer;
begin
  if not Form1.mkQuerySelect1(Form1.ADOQuery2, 'Select * from %s Where   (Заказ=' + #39 + Label6.Caption + #39 + ') AND (Изделие=' + #39 + Label3.Caption + #39 + ') ', ['Klapana']) then
    exit;
  Sbor := Form1.ADOQuery2.FieldByName('Сборка').AsInteger;
  Kol := StrToInt(ZSG.Cells[I_FN_Kol_ZAP, ZSG.Row]);
  Sbor := Sbor + Kol;
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Сборка Готовность]=NULL,Сборка=' + #39 + IntToStr(Sbor) + #39 + ' WHERE ([' + FN_NAM + ']=' + #39 + ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.Row] + #39 + ') AND (Заказ=' + #39 + ZSG.Cells[I_FN_ZAK, ZSG.Row] + #39 + ') ', ['Klapana']) then
    Exit;
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Сборка Готовность]=NULL' + ' WHERE ([' + FN_NOM + ']=' + #39 + ZSG.Cells[0, ZSG.Row] + #39 + ') AND ([' + FN_NAM + ']=' + #39 + ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.Row] + #39 + ') AND (Заказ=' + #39 + ZSG.Cells[I_FN_ZAK, ZSG.Row] + #39 + ') ', ['Запуск']) then
    Exit;

end;

procedure TForm1.ComboBox5Change(Sender: TObject);
begin
//Form1.Button22.Click;
end;

procedure TForm1.ComboBox5DrawItem(Control: TWinControl; Index: Integer; Rect: TRect; State: TOwnerDrawState);
begin
  with ComboBox5.Canvas.Brush do
  begin
    if Index = 0 then
    begin
      Color := clWhite;
      ComboBox5.Canvas.FillRect(Rect);
      ComboBox5.Canvas.Font.Color := clBlack;
      ComboBox5.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox5.Items[0]);
    end;
    if Index = 1 then
    begin
      Color := RGB(247, 247, 131);
      ComboBox5.Canvas.FillRect(Rect);
      ComboBox5.Canvas.Font.Color := clBlack;
      ComboBox5.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox5.Items[1]);
    end;
    if Index = 2 then
    begin
      Color := RGB(153, 102, 51);
      ComboBox5.Canvas.FillRect(Rect);
      ComboBox5.Canvas.Font.Color := clBlack;
      ComboBox5.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox5.Items[2]);
    end;
    if Index = 3 then
    begin
      Color := RGB(173, 255, 47);
      ComboBox5.Canvas.FillRect(Rect);
      ComboBox5.Canvas.Font.Color := clBlack;
      ComboBox5.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox5.Items[3]);
    end;
    if Index = 4 then
    begin
      Color := RGB(102, 255, 204);
      ComboBox5.Canvas.FillRect(Rect);
      ComboBox5.Canvas.Font.Color := clBlack;
      ComboBox5.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox5.Items[4]);
    end;
    if Index = 5 then
    begin
      Color := RGB(0, 100, 0);
      ComboBox5.Canvas.FillRect(Rect);
      ComboBox5.Canvas.Font.Color := clBlack;
      ComboBox5.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox5.Items[5]);
    end;
    if Index = 6 then
    begin
      Color := RGB(250, 0, 0);
      ComboBox5.Canvas.FillRect(Rect);
      ComboBox5.Canvas.Font.Color := clBlack;
      ComboBox5.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox5.Items[6]);
    end;
    if Index = 7 then
    begin
      Color := RGB(30, 144, 255);
      ComboBox5.Canvas.FillRect(Rect);
      ComboBox5.Canvas.Font.Color := clBlack;
      ComboBox5.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox5.Items[7]);
    end;
    if Index = 8 then
    begin
      Color := clGray;
      ComboBox5.Canvas.FillRect(Rect);
      ComboBox5.Canvas.Font.Color := clBlack;
      ComboBox5.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox5.Items[8]);
    end;
    if Index = 9 then
    begin
      Color := clWhite;
      ComboBox5.Canvas.FillRect(Rect);
      ComboBox5.Canvas.Font.Color := clBlack;
      ComboBox5.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox5.Items[9]);
    end;
    if Index = 10 then
    begin
      Color := clWhite;
      ComboBox5.Canvas.FillRect(Rect);
      ComboBox5.Canvas.Font.Color := clBlack;
      ComboBox5.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox5.Items[10]);
    end;
    if Index = 11 then
    begin
      Color := clWhite;
      ComboBox5.Canvas.FillRect(Rect);
      ComboBox5.Canvas.Font.Color := clBlack;
      ComboBox5.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox5.Items[11]);
    end;
    if Index = 12 then
    begin
      Color := clWhite;
      ComboBox5.Canvas.FillRect(Rect);
      ComboBox5.Canvas.Font.Color := clBlack;
      ComboBox5.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox5.Items[12]);
    end;
    if Index = 13 then
    begin
      Color := clWhite;
      ComboBox5.Canvas.FillRect(Rect);
      ComboBox5.Canvas.Font.Color := clBlack;
      ComboBox5.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox5.Items[13]);
    end;
  end;
end;

procedure TForm1.SpeedButton5Click(Sender: TObject);
begin
  ExportGridtoExcel2(ZSG);
  //Sheet2.Range['N'+IntToStr(E + (6))+':N'+IntToStr(E + (6))].Font.Color:=-16776961 ; //Красный
end;

procedure TForm1.SpeedButton6Click(Sender: TObject);
begin
  ExportGridtoExcel(StringGrid10, SG6);
end;

function Poisk_New(Str_Poisk, Baza, Tab, Pole: string; Ii, q: Integer): TResult; //
//2- База(0-Клапана 1-Цех), 3-Таблица, 4 Поле
var
  Res, Res1, Res2, R, Z, A, B, P, Kol_Pr, DD, Ispol, i: Integer;
  A_S, B_S, aa, bb, Str, S, Priv, Nam, NAM_LIST, SB_1_S, pp, SQL_Str, Ob, IDPOS: string;
  SB_1, D: Double;
begin
  D := 0;
  NAM_LIST := '';
  Nam := Str_Poisk;
  SQL_Str := ' WHERE ' + Pole + ' LIKE ' + #39 + '%' + Str_Poisk + '%' + #39;
  if Ii = 0 then
  begin

    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s  %s ORDER BY Дата', [Tab, SQL_Str]) then
      exit;
  end;
  if Ii = 1 then
  begin
    Form1.ADOConnection1.Connected := False;
    Form1.ADOConnection1.ConnectionString := 'Provider=SQLOLEDB.1;Packet Size = 4096;Password=111;Persist Security Info=True;User Id=testuser;' + 'Initial Catalog=MIASSCEH;Data Source=MSS-APP3;';
    Form1.ADOConnection1.Connected := True;
    Form1.ADOQuery1.SQL.Clear;
    Form1.ADOQuery1.SQL.Add('Select * from ' + Tab + ' Where ' + Pole + ' LIKE ' + #39 + '%' + Str_Poisk + '%' + #39 + ' ORDER BY Дата');
    Form1.ADOQuery1.Open;
  end;

  if Ii = 2 then
  begin
    SQL_Str := ' WHERE ' + Pole + ' LIKE ' + #39 + '%' + Str_Poisk + '%' + #39 + ' ORDER BY Id';
    Form1.SQLConnection1.Connected := True;
    Form1.ADOQuery1.Connection := Form1.SQLConnection1;
    Form1.ADOQuery1.Close;
    Form1.ADOQuery1.SQL.Clear;
    Form1.ADOQuery1.SQL.Text := Format('Select * From [%s]%s', ['СпецификацииДет', SQL_Str]);
    Form1.ADOQuery1.Open;
    Form1.ADOQuery1.Last;
    IDPOS := Form1.ADOQuery1.FieldByName('IdСпец').AsString;
    Nam := (Form1.ADOQuery1.FieldByName('cfnName').AsString);
    Ob := (Form1.ADOQuery1.FieldByName('proMarking').AsString);
            //
                    //Спецификации
    Form1.ADOQuery1.Close;
    Form1.ADOQuery1.SQL.Clear;
    Form1.ADOQuery1.SQL.Text := Format('Select * From [%s] WHERE [IdСпец]=' + #39 + (IDPOS) + #39, ['Спецификации']);
    Form1.ADOQuery1.Open;
    IDPOS := Form1.ADOQuery1.FieldByName('IdПоз').AsString;
        //
    Form1.ADOQuery1.Close;
    Form1.ADOQuery1.SQL.Clear;
    Form1.ADOQuery1.SQL.Text := Format('Select * From [%s] WHERE [IdПоз]=' + #39 + IDPOS + #39 + ' ORDER BY ДатаЗаказа', ['Заказы']);
    Form1.ADOQuery1.Open;
    Priv := Form1.ADOQuery1.FieldByName('ДатаЗаказа').AsString;
    IDPOS := Form1.ADOQuery1.FieldByName('НомерБЗ').AsString;

  end;

        // Заказы
       { Form1.SQLQuery.Close;
        Form1.SQLQuery.SQL.Clear;
        Form1.SQLQuery.SQL.Text:= Format( 'Select * From [%s] WHERE [НомерБЗ]='+#39+FSpecif.Caption+#39
        ,['Заказы'] );
        Form1.SQLQuery.Open;
        IDPOS:=Form1.SQLQuery.FieldByName('IdПоз').AsInteger;
        //Спецификации
        Form1.SQLQuery.Close;
        Form1.SQLQuery.SQL.Clear;
        Form1.SQLQuery.SQL.Text:= Format( 'Select * From [%s] WHERE [IdПоз]='+#39+IntToStr(IDPOS)+#39
        ,['Спецификации'] );
        Form1.SQLQuery.Open;
        RSG1.RowCount:=Form1.SQLQuery.RecordCount;

        for I := 0 to Form1.SQLQuery.RecordCount - 1 do
        begin
                RSG1.Cells[0,I+1]:=IntToStr(Form1.SQLQuery.FieldByName('IdСпец').AsInteger);
                Form1.SQLQuery.Next;
        end;

        //СпецификацииДет
        RSG2.Cells[0,0]:=('IdСпец');
        RSG2.Cells[1,0]:=('cfnAmount');
        RSG2.Cells[2,0]:=('cfnName');
        RSG2.Cells[3,0]:=('cfnDesignation');
        RSG2.Cells[4,0]:=('cfnNote');
        RSG2.Cells[5,0]:=('cfnLevel');
        RSG2.Cells[6,0]:=('proMarking');
        for I := 0 to RSG1.RowCount - 1 do
        begin
                IDSpec:= StrToInt(RSG1.Cells[0,I+1]);
                Form1.SQLQuery.Close;
                Form1.SQLQuery.SQL.Clear;
                Form1.SQLQuery.SQL.Text:= Format( 'Select * From [%s] WHERE [IdСпец]='+#39+IntToStr(IDSpec)+#39
                ,['СпецификацииДет'] );
                Form1.SQLQuery.Open;
                RSG2.RowCount:=RSG2.RowCount+Form1.SQLQuery.RecordCount;

                for j := 0 to Form1.SQLQuery.RecordCount - 1 do
                begin
                        RSG2.Cells[0,Q+1]:=(Form1.SQLQuery.FieldByName('IdСпец').AsString);
                        RSG2.Cells[1,Q+1]:=(Form1.SQLQuery.FieldByName('cfnAmount').AsString);
                        RSG2.Cells[2,Q+1]:=(Form1.SQLQuery.FieldByName('cfnName').AsString);
                        RSG2.Cells[3,Q+1]:=(Form1.SQLQuery.FieldByName('cfnDesignation').AsString);
                        RSG2.Cells[4,Q+1]:=(Form1.SQLQuery.FieldByName('cfnNote').AsString);
                        RSG2.Cells[5,Q+1]:=(Form1.SQLQuery.FieldByName('cfnLevel').AsString);
                        RSG2.Cells[6,Q+1]:=(Form1.SQLQuery.FieldByName('proMarking').AsString);
                        Form1.SQLQuery.Next;
                        Inc(Q);
                end;
        end;}
  if Form1.ADOQuery1.RecordCount = 0 then
    Exit;
  Form1.Memo21.lines.Add(Tab + ' Кол-во ' + IntToStr(Form1.ADOQuery1.RecordCount));

  Form1.ADOQuery1.Last;
                //for I := 0 to Form1.ADOQuery1.RecordCount-1 do
  begin
    if q = 1 then
    begin
      Form1.Memo21.lines.Add(Form1.ADOQuery1.FieldByName('Дата').AsString);
      Form1.Memo21.lines.Add(Form1.ADOQuery1.FieldByName('Заказ').AsString);

      Form1.Memo21.lines.Add(Form1.ADOQuery1.FieldByName('Элемент').AsString);
      Ob := Form1.ADOQuery1.FieldByName('Обозначение').AsString;
      if Ob <> '' then
        Form1.Memo21.lines.Add(Ob);
      Form1.Memo21.lines.Add(Form1.ADOQuery1.FieldByName('Изделие').AsString);
                  //Form1.ADOQuery1.Next;
    end;

    if q = 0 then
    begin
      Form1.Memo21.lines.Add(Priv);
      Form1.Memo21.lines.Add(IDPOS);
      Form1.Memo21.lines.Add(Nam);
      Form1.Memo21.lines.Add(Ob);

                  {Form1.Memo21.lines.Add(Form1.ADOQuery1.FieldByName('Элемент').AsString);
                  Form1.Memo21.lines.Add(Form1.ADOQuery1.FieldByName('Обозначение').AsString);
                  Form1.Memo21.lines.Add(Form1.ADOQuery1.FieldByName('Изделие').AsString); }
                  //Form1.ADOQuery1.Next;
    end;
  end;
  Form1.Memo21.lines.Add('\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\');

end;

procedure TForm1.Button42Click(Sender: TObject);
var
  Result: Tresult;
begin
  //FZapusk.ShowModal;
  //Result:=Poisk_New(Edit34.Text,'Klapan','СпецифОбщая','Обозначение',0,0);
  Form1.Memo21.Lines.Clear;
  Result := Poisk_New(Edit34.Text, 'Klapan', 'Специф', 'Обозначение', 0, 1);
  Result := Poisk_New(Edit34.Text, 'Klapan', 'СпецифВозд', 'Обозначение', 0, 1);
  Result := Poisk_New(Edit34.Text, 'Klapan', 'Специф710', 'Обозначение', 0, 1);
  Result := Poisk_New(Edit34.Text, 'Klapan', 'Специф750', 'Обозначение', 0, 1);
  Result := Poisk_New(Edit34.Text, 'Klapan', 'СпецифЛЮК', 'Обозначение', 0, 1);
  Result := Poisk_New(Edit34.Text, 'Klapan', 'СпецифСТАМ', 'Обозначение', 0, 1);

  Result := Poisk_New(Edit34.Text, 'MIASSCEH', 'СпецифДоп', 'Обозначение', 1, 1);
  Result := Poisk_New(Edit34.Text, 'MIASSCEH', 'СпецифЗавесы', 'Обозначение', 1, 1);
  Result := Poisk_New(Edit34.Text, 'MIASSCEH', 'СпецифЭКО', 'Обозначение', 1, 1);

  Result := Poisk_New(Edit34.Text, 'MIASSCEH', 'СпецифКЦКП', 'proMarking', 2, 0);
  Button56.Click;
end;

procedure TForm1.Button43Click(Sender: TObject);
var
  h: hwnd;

    //Dat_S1,Str:String;
    //    I,A,Res,j:Integer;
begin
  ShellExecute(h, 'open', PWideChar(Put_KTO + '\CKlapana\'), nil, nil, SW_SHOW);
        //Dat_S1:=FormatDateTime('mm.dd.YYYY',Dtp3.DateTime);
        {if RG3.ItemIndex=0 Then
        Str:='Планирование';
        if RG3.ItemIndex=1 Then  }
        {Str:='Заготовка';
        A:=1;
        j:=1;
        Clear_StringGrid(SG5);
        SG5.RowCount:=2;
        if not Conn_Klap.mkQuerySelect('Select * From %s Where ('+Str+'='+#39+'%s'+#39+') AND (Станок<>'+#39+'Канбан'+#39+')' , ['Заготовка',Dat_S1]) then //Заготовка
        exit;
                SG5.Cells[1,0]:='№';
                SG5.Cells[2,0]:='Заказ';
                SG5.Cells[3,0]:='БЗ';
                SG5.Cells[4,0]:='Изделие';
                SG5.Cells[5,0]:='Номер';
                SG5.Cells[6,0]:='Обозначение';
                SG5.Cells[7,0]:='Элемент';
                SG5.Cells[8,0]:='Количество';
                SG5.Cells[9,0]:='Станок';
                SG5.Cells[10,0]:='Очередность';
                SG5.Cells[11,0]:='Длительность';
                SG5.ColWidths[9]:=0;
                SG5.ColWidths[10]:=0;
                SG5.ColWidths[11]:=0;
                SG5.Cells[12,0]:='Нч';

                SG5.Cells[13,0]:='Заготовка';
                SG5.ColWidths[13]:=0;
                SG5.Cells[14,0]:='Планирование';
                SG5.Cells[15,0]:='IdГП';
                SG5.ColWidths[15]:=0;
                SG5.Cells[16,0]:='ДлительностьОбщ';
                for I := 0 to Conn_Klap.AQuery.RecordCount - 1 do
                begin
                        SG5.RowCount:= SG5.RowCount+1 ;
                        if A=1 then
                        begin
                           SG5.Cells[1,A]:='';
                           SG5.RowCount:= SG5.RowCount+1 ;
                           Inc(A);
                        end;


                        Res:=AnsiCompareStr(SG5.Cells[9,A-1],Conn_Klap.AQuery.FieldByName('Станок').AsString) ;
                        if (Res <>0)  then
                        begin
                            SG5.Cells[1,A]:=Conn_Klap.AQuery.FieldByName('Станок').AsString;
                            SG5.RowCount:= SG5.RowCount+1 ;
                            Inc(A);
                        end;
                        SG5.Cells[1,A]:=IntToStr(j);
                        SG5.Cells[2,A]:=Conn_Klap.AQuery.FieldByName('Заказ').AsString;
                        SG5.Cells[3,A]:=Conn_Klap.AQuery.FieldByName('БЗ').AsString;
                        SG5.Cells[4,A]:=Conn_Klap.AQuery.FieldByName('Изделие').AsString;
                        SG5.Cells[5,A]:=Conn_Klap.AQuery.FieldByName('Номер').AsString;

                        SG5.Cells[6,A]:=Conn_Klap.AQuery.FieldByName('Обозначение').AsString;
                        SG5.Cells[7,A]:=Conn_Klap.AQuery.FieldByName('Элемент').AsString;

                        SG5.Cells[8,A]:=Conn_Klap.AQuery.FieldByName('Количество').AsString;


                        SG5.Cells[9,A]:=Conn_Klap.AQuery.FieldByName('Станок').AsString;
                        SG5.Cells[10,A]:=Conn_Klap.AQuery.FieldByName('Очередность').AsString; //Очередность

                        SG5.Cells[11,A]:=Conn_Klap.AQuery.FieldByName('Длительность').AsString;//Длительность

                        SG5.Cells[12,A]:=Conn_Klap.AQuery.FieldByName('Нч').AsString;//Н\ч

                        SG5.Cells[13,A]:=Conn_Klap.AQuery.FieldByName('Заготовка').AsString;

                        SG5.Cells[14,A]:=Conn_Klap.AQuery.FieldByName('Планирование').AsString;
                        SG5.Cells[15,A]:=Conn_Klap.AQuery.FieldByName('IdГП').AsString;
                        SG5.Cells[16,A]:=Conn_Klap.AQuery.FieldByName('ДлительностьОбщ').AsString;
                        Inc(A);
                        Inc(j);
                        Conn_Klap.AQuery.Next;
                End;

                sg5.UnGroup;   }
end;

procedure TForm1.SG6MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
// Эмуляция нажатия мыши
  if Button = mbRight then
    mouse_event(MOUSEEVENTF_LEFTDOWN or MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
end;

procedure TForm1.SG6MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  I, J: Integer;
  myRect: TGridRect;
  Sum: Double;
begin
  Sum := 0;
  myRect := SG6.Selection;
{
  SG6.Cells[I_FN_OTMENA + 4, 0] := 'Сборка лопаток';
  SG6.Cells[I_FN_OTMENA + 5, 0] := 'Сборка тяг';
  SG6.Cells[I_FN_OTMENA + 6, 0] := 'Гибка';
  SG6.Cells[I_FN_OTMENA + 7, 0] := 'Ножницы';
  SG6.Cells[I_FN_OTMENA + 8, 0] := 'Пила';
  SG6.Cells[I_FN_OTMENA + 9, 0] := 'СборкаРЕШ';}
  if (SG6.Col = I_FN_SBOR_KLAP_NC) or (SG6.Col = I_FN_SVARKA_NC) or
  (SG6.Col = I_FN_OTMENA + 4) or (SG6.Col = I_FN_OTMENA + 5) or
  (SG6.Col = I_FN_OTMENA + 6) or (SG6.Col = I_FN_OTMENA + 7) or
  (SG6.Col = I_FN_OTMENA + 8) or
  (SG6.Col = I_FN_OTMENA + 9) then
  begin

    for I := myRect.Left to myRect.Right do
      for J := myRect.Top to myRect.Bottom do
      begin
        try
          Sum := Sum + StrToFloat(SG6.Cells[I, J]);
        except
          Break;
        end;
      end;
    StatusBar2.Panels[2].Text := FloatToStr(Sum);
  end;

end;

procedure TForm1.ZSGMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
// Эмуляция нажатия мыши
  if Button = mbRight then
    mouse_event(MOUSEEVENTF_LEFTDOWN or MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
end;

procedure TForm1.ZSGMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  I, J, X1: Integer;
  myRect: TGridRect;
  Sum: Double;
begin
{  ZSG.Cells[I_FN_KOL_ZAP + 32, 1] := 'Н\ч Лопатка';
  ZSG.Cells[I_FN_KOL_ZAP + 33, 1] := 'СборЛопатка';
 ZSG.ColWidths[I_FN_KOL_ZAP + 33] := 40;
  ZSG.Cells[I_FN_KOL_ZAP + 34, 1] := 'Н\ч Тяга';
  ZSG.Cells[I_FN_KOL_ZAP + 35, 1] := 'СборТяга';
 ZSG.ColWidths[I_FN_KOL_ZAP + 35] := 40;
  ZSG.Cells[I_FN_KOL_ZAP + 36, 1] := 'IdКО';
  ZSG.Cells[I_FN_KOL_ZAP + 37, 1] := 'СборкаРеш';
  ZSG.Cells[I_FN_KOL_ZAP + 38, 1] := 'СборРеш';}
  if (ZSG.Col = 3) or (ZSG.Col = 4) or (ZSG.Col = I_FN_KOL_ZAP + 9) or
  (ZSG.Col = I_FN_KOL_ZAP + 17) or (ZSG.Col = I_FN_KOL_ZAP + 18) or
  (ZSG.Col = I_FN_KOL_ZAP + 32) or (ZSG.Col = I_FN_KOL_ZAP + 34)or
  (ZSG.Col = I_FN_KOL_ZAP + 34) or (ZSG.Col = I_FN_KOL_ZAP + 37) then
  begin
    Sum := 0;
    myRect := ZSG.Selection;
    for I := myRect.Left to myRect.Right do
      for J := myRect.Top to myRect.Bottom do
      begin
        try
          Sum := Sum + StrToFloat(ZSG.Cells[I, J]);
        except
          Break;
        end;
      end;
    StatusBar2.Panels[2].Text := FloattOsTR(Sum);

  end;
  Clear_StringGrid(SG212);
  X1 := 0;
  myRect := ZSG.Selection;
  for I := myRect.Left to myRect.Right do
    for J := myRect.Top to myRect.Bottom do
    begin
      SG212.Cells[0, X1] := ZSG.Cells[0, J]; //Nom
      SG212.Cells[1, X1] := ZSG.Cells[I_FN_KOL_ZAP + 26, J]; //IDGP
      SG212.RowCount := X1 + 1;
      Inc(X1);
    end;

end;

procedure TForm1.N100Click(Sender: TObject);

var GP,Ko:string;
begin
       GP:=SG10.Cells[21,SG10.Row];
       KO:=SG10.Cells[22,SG10.Row];
       if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE [%s] SET [Отправила]=' + #39 + '0' + #39 +
       ' WHERE ([IdГП]=' + #39 + SG10.Cells[21, SG10.Row] + #39 + ') AND (IdКО= ' + #39 + SG10.Cells[22, SG10.Row] + #39 +
       ')', ['750']) then
      Exit;
      btn55.Click;
end;
function Material(Mater, Dlin, Shir, Shir_Pol1, Detal: string; KL: Integer; IDGP: string; Kol_Det: Double): TResult;
var
  I: integer;
  Res_List, Res_Tol, Srav, Klap, Res_Lop, Ugol, Res: Integer;
  Mat, Tol_S, NC_S, NC_S2, NC_S3, Dlin_S, Shir_S, GP, Det: string;
  Res_Tol55, Tol, NC, NC2, NC3, ShirI, DlinI,ShirIi, DlinIi, C, Kol_Ed, Razmet_KPU, Kol_lop: Double;
  Flag_Razb_Klapana: Integer;
begin
        //+ ++++++++++++++++++++++++++++++++++++++++++
        //Лист ДПРНМ 1,0х600х1500 Л63 ГОСТ 931-90
  Mat := Mater;
  Dlin_S := Dlin;
  Shir_S := Shir;
  Klap := KL;
  GP := IDGP;
  Det := Detal;
  Kol_Ed := Kol_Det;
  Result.MAT_Do1 := 0;
  Result.MAT_Do2 := 0;
  Result.MAT_Do3 := 0;
  Res_List := Pos('ФЭЗ', Mat);
  if Res_List <> 0 then
    Mat := '1';
  Res_List := Pos('ДПРНМ', Mat);
  if Res_List <> 0 then
    Mat := '1';

   Res_List := Pos('Сетка Streck R34 Zn 34*20*2,1*1', Mat);
   if Res_List <> 0 then
    Mat := '1.2';

  Res_List := Pos('Круг', Mat);
  if Res_List <> 0 then
    Mat := '1';
  Res := Pos('Шпилька', Mat);
  if (Mat = '') or (Res <> 0) then
    Mat := '0';
  try
        //Лента на шестьдесят НЕРЖ 0,3
    Res_List := Pos('НЕРЖ', Mat);
    if Res_List <> 0 then
      Delete(Mat, 1, Res_List + 4);
    Res_List := Pos('Л', Mat);
    if Res_List <> 0 then
    begin
      Res_Tol := Pos(' ', Mat); // Лента
      Delete(Mat, 1, Res_Tol);
                //
      Res_Tol := Pos(' ', Mat); //ОЦ
      Delete(Mat, 1, Res_Tol);

      Res_Tol := Pos(' ', Mat); //08pc
      Delete(Mat, 1, Res_Tol);

      Res_Tol := Pos('х', Mat); //x
      Delete(Mat, Res_Tol, 50);

      Res_Tol := Pos('*', Mat); //*
      Delete(Mat, Res_Tol, 50);

      Res_Tol := Pos(' ', Mat); //08pc
      Delete(Mat, 1, Res_Tol);
    end
    else
    begin
      Res_Tol := Pos(' ', Mat);
      Delete(Mat, 1, Res_Tol);
    end;
    Res_List := Pos('ОЦ', Mat);
    if Res_List <> 0 then
      Delete(Mat, 1, 2);
        //+++++++++++++++++++++++++++++++++++++++++++++
    Res := Pos('Шпилька', Mat);
    if (Mat = '') or (Res <> 0) then
      Mat := '0';

    Tol := StrToFloat(StringReplace(Mat, ',', '.', [rfReplaceAll, rfIgnoreCase]));
  except
    Mat := '1';
  end;
  Srav := CompareValue(Tol, 0.55);
  if (Srav = 0) or (Srav < 0) then
  begin
    Tol_S := '0.55';
    Res_Tol55 := 0.55;
  end;
  Srav := CompareValue(Tol, 0.7);
  if ((Srav > 0) or (Srav = 0)) and (Tol <= 1) then
  begin
    Tol_S := '0.7';
    Res_Tol55 := 7;
  end;

  Srav := CompareValue(Tol, 1.2);
        //Srav1:= CompareValue(Tol,0.7);
  if ((Srav = 0) or (Srav > 0)) and (Tol <= 2) then
  begin
    Tol_S := '1.2';
    Res_Tol55 := 2;
  end;
  if Tol_S = '' then
    Tol_S := '0';
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if Klap = 0 then
  begin
    DlinI := StrToFloat(Dlin_S);
    ShirI := StrToFloat(Shir_S);
  end
  else
  begin
    DlinI := StrToFloat(Shir_S);
    ShirI := StrToFloat(Dlin_S);
  end;

  if DlinI <= 500 then
    DlinIi := 500;
        //---------------
  if (DlinI > 500) and (DlinI <= 1000) then
    DlinIi := 1000;
        //---------------
  if (DlinI > 1000) and (DlinI <= 1500) then
    DlinIi := 1500;
        //---------------
  if (DlinI > 1500) and (DlinI <= 2000) then
    DlinIi := 2000;
        //---------------
  if (DlinI > 2000) and (DlinI <= 2500) then
    DlinIi := 2500;
  //+====================================
  Res:=Pos('0.55',Tol_S);
  if Res <> 0 then
  begin

    if ShirI <= 50 then
      ShiriI := 50;
                //---------------
    if (ShirI > 50) and (ShirI <= 100) then
      ShirIi := 100;
                //---------------
    if (ShirI > 100) and (ShirI <= 200) then
      ShirIi := 200;
                //---------------
    if (ShirI > 200) and (ShirI <= 500) then
      ShirIi := 500;
                //---------------
    if (ShirI > 500) and (ShirI <= 600) then
      ShirIi := 600;
                //---------------
    if (ShirI > 600) and (ShirI <= 1250) then
      ShirIi := 1250;
  end;
        //+====================================
  if Res_Tol55 = 7 then
  begin

    if ShirI <= 200 then
      ShirIi := 200;
                //---------------
    if (ShirI > 200) and (ShirI <= 500) then
      ShirIi := 500;
                //---------------
    if (ShirI > 500) then
      ShirIi := 1250;
  end;
        //+====================================
  if Res_Tol55 = 2 then
  begin
    if ShirI <= 200 then
      ShirIi := 200;
                //---------------
    if (ShirI > 200) and (ShirI <= 500) then
      ShirIi := 500;
                //---------------
    if (ShirI > 500) then
      ShirIi := 1250;
  end;
        //Ножницы
  if not Form1.mkQuerySelect1(Form1.ADOQuery2,'Select * from %s Where   ([№]=' + #39 + '1' + #39 + ') And ([Толщина]=' + #39 +
  Tol_S + #39 + ') And ([Длина]=' + #39 + FloatToStr(DlinIi) + #39 + ') And ([Высота]=' + #39 +
  FloatToStr(ShirIi) + #39 + ')', ['[Резка Гибка]']) then
    exit;
  NC_S := (Form1.ADOQuery2.FieldByName('Норма').AsString);
  if NC_S = '' then
    NC_S := '0';
  NC := StrToFloat(NC_S);
        //Первый результ  //Ножницы
 // Result.MAT_Do1 := (NC);
  Result.MAT_SL1 := NC_S;
//==============================================================================
  Flag_Razb_Klapana := 0;
        //KL - тип клапана 0-КПУ 1-КПД, 2-Гермик-ДУ, 3-КЭД, 4-
       { if (Klap=0) OR (KLAP=1) OR (KLAP=2) OR (KLAP=3) Then
        begin
                if not FPeredel.Conn_Klap.mkQuerySelect6('Select * from Специф Where (IdГП=' + #39 +
                                GP+ #39 +') AND (Элемент=' + #39 +
                                'Клапан'+ #39 +') AND (Количество>1)',[]) Then
                exit;
                 if FPeredel.Conn_Klap.AQuery6.RecordCount<>0 Then //Проверка на Клапан разбитый на 2
                        Flag_Razb_Klapana:=1;//Клапан разбит на 2
        End; }
//==============================================================================
  if Shir_Pol1 = '' then
    C := 0
  else
    C := StrToFloat(Shir_Pol1);
  Res_Lop := AnsiCompareStr('Стенка лопатки', Det);
  if Flag_Razb_Klapana = 1 then
    Kol_Lop := Kol_Ed / 4
  else
    Kol_Lop := Kol_Ed / 2;
        //+ ++++++++++++++++++++++++++++++++++++++++++Res_KPU
  Res_Lop := AnsiCompareStr('Корпус лопатки', Det);
  if (Klap = 0) and (Res_Lop = 0) and (C < 220) then //4 Ugla
  begin
    Ugol := 4;
  end;
  if (Klap = 0) and (Res_Lop = 0) and ((C >= 220) and (C < 440)) then //6 Uglov
  begin
    Ugol := 6;
  end;
  if (Klap = 0) and (Res_Lop = 0) and (C >= 440) then //8 Uglov
  begin
    Ugol := 8;
  end;
//+++++++++++++++++++++++++++++++++++++++++++++

        //+====================================
  if Res_Tol55 = 0.55 then
  begin

    if ShirI <= 600 then
      ShirIi := 600;
                //---------------
    if (ShirI > 600) then
      ShirIi := 1250;
  end;
        //+====================================
  if Res_Tol55 = 7 then
  begin

    if ShirI <= 500 then
      ShirIi := 500;
                //---------------
    if (ShirI > 500) then
      ShirIi := 1250;

  end;
        //+====================================
  if Res_Tol55 = 2 then
  begin

    if ShirI <= 500 then
      ShirIi := 500;
                //---------------
    if (ShirI > 500) then
      ShirIi := 500;
                //---------------
    if (ShirI > 500) then
      ShirIi := 1250;
  end;
        //Углоруб
  if not Form1.mkQuerySelect1(Form1.ADOQuery2,'Select * from %s Where   ([№]=' + #39 + '11' + #39 + ') And ([Толщина]=' + Tol_S + ') And ([Длина]=' + #39 + FloatToStr(DlinIi) + #39 + ') And ([Высота]=' + #39 + FloatToStr(ShirIi) + #39 + ')', ['[Резка Гибка]']) then
    exit;
  NC_S2 := (Form1.ADOQuery2.FieldByName('Норма').AsString);
  if NC_S2 = '' then
    NC_S2 := '0';
  NC2 := StrToFloat(NC_S2);
  if not Form1.mkQuerySelect1(Form1.ADOQuery2,'Select * from %s Where ([№]=' + #39 + '12' + #39 + ') ', ['[Резка Гибка]']) then
    exit;
  if C > 200 then
    Razmet_KPU :=Form1.ADOQuery2.FieldByName('Норма').AsFloat
  else
    Razmet_KPU := 0;
       //NC:=NC+(((StrToFloat(NC_S2)*Ugol+Razmet_KPU))*Kol_Oboz*Kol_Zap);
  Result.MAT_Do2 := NC2 * Ugol + Razmet_KPU;
  Result.MAT_Do1 := (NC)+NC2 * Ugol + Razmet_KPU;   //Корпус лопатки под привод
  Res_Lop := AnsiCompareStr('Корпус лопатки под привод', Det);
  if (KL=3) AND (Res_Lop = 0) Then //ДЛЯ КЭД
     Result.MAT_Do1 := 0.088;
        //Result.MAT_Do3:=Razmet_KPU;
end;

procedure TForm1.N101Click(Sender: TObject);
VAr idgp,Izdel,Naim,Kompl,Zak,Dat,KOD,IDKO,BZ,Str2,Vid,Elem,Kol2,
Kol_ed,Kol,EI,Obozn,Typ,Diam,Massa,Dlina,Shir,Dlin_Raz, Par,Prim,
Shir_Raz,Pokr,Obem,Kol_Gib,Mater,sh1,sh2,Kompl_Ved:string;
R,I,Y,ID,Res,Res1,A,B,KL,Detal,R_25,Kol_G:Integer;
 B1: Boolean;
    NC_G1, NC_G2, NC_G3, NC_P1, NC_P2, NC_P3, NC_N1, NC_N2, NC_N3,Kol_II,Kol_II2: Double;
   Result:Tresult;
begin
    R:=SG10.Row;
    B1:=StrToBool(SG10.Cells[23, R]);
    if  (B1)  then
      Exit;
    idgp := SG10.Cells[21, R];
    Izdel := SG10.Cells[3, R];
    Naim := SG10.Cells[3, R];
    Kompl := SG10.Cells[2, R];
    Zak := SG10.Cells[2, R];
    Dat := SG10.Cells[1, R];
    KOD  := SG10.Cells[26, R];
    IDKO  := SG10.Cells[22, R];
    BZ:=   SG10.Cells[13, R];
    Res:=Pos('Воздухонагреватель',Izdel);
    if Res<>0 then
    begin
      Res:=Pos(' ',Izdel);
      if Res<>0 then
      Delete(Izdel,1,Res);
    end;
    Str2 := 'EXEC	[dbo].[ПолучСпецКП] @date1 = ' + #39 + Izdel + #39 + ',@s =' +
    #39 + '1'+ #39 +',@s1 =' +
    #39 + '0'+ #39+',@s2 =' +
    #39 + '0'+ #39;
    ADOQuery6.Close;
    ADOQuery6.SQL.Add(Str2);
    Memo1.Lines.Add(Str2);
    ADOQuery6.Open;
    if (ADOQuery6.RecordCount<>0)  then   //   Канал
    Begin
      for y := 0 to ADOQuery6.RecordCount - 1 do
      begin
        {PB2.Position := 0;
        PB2.Min := 0;
        PB2.Max := ADOQuery1.RecordCount - 1; }
        ID := ADOQuery6.FieldByName('ID').AsInteger;
        Par := ADOQuery6.FieldByName('Parent').AsString;
        Vid := ADOQuery6.FieldByName('ВидЭлемента').AsString;
        Elem := ADOQuery6.FieldByName('Элемент').AsString;
        Kol_ed := ADOQuery6.FieldByName('КолНаЕд').AsString;
        Kol := ADOQuery6.FieldByName('Количество').AsString;
       try
       KOL_II:=StrToFloat(Kol);
       except
       KOL_II:=0;
       end;
        EI := ADOQuery6.FieldByName('ЕИ').AsString;
        Obozn := ADOQuery6.FieldByName('Обозначение').AsString;
        Res:=Pos('ВМ-1297.20.002',Obozn);
        if Res<>0 then
           Obozn  :='ВМ-1297.20.002';
        Typ := ADOQuery6.FieldByName('Тип').AsString;
        Prim := ADOQuery6.FieldByName('Примечание').AsString;
        Diam := ADOQuery6.FieldByName('Диаметр').AsString;
        if Diam='' then
        Diam:='0';

        Massa := ADOQuery6.FieldByName('Масса').AsString;
        Dlina := ADOQuery6.FieldByName('Длина').AsString;
        Shir := ADOQuery6.FieldByName('Ширина').AsString;
        Dlin_Raz := ADOQuery6.FieldByName('ДлинаРазв').AsString;
        Shir_Raz := ADOQuery6.FieldByName('ШиринаРазв').AsString;
        Pokr := ADOQuery6.FieldByName('Покрытие').AsString;
        if Dlin_Raz ='' then
          Dlin_Raz:='0';

        if Shir_Raz ='' then
          Shir_Raz:='0';
        if Shir='' then
          Shir:= Shir_Raz;

        if Dlina='' then
          Dlina:= Dlin_Raz;

        Obem := ADOQuery6.FieldByName('Объем').AsString;
        Kol_Gib := ADOQuery6.FieldByName('КолГибов').AsString;
        if   Kol_Gib   ='' then
          Kol_Gib:='0';
        Kol_G:=StrToInt(Kol_Gib);
        Mater := ADOQuery6.FieldByName('Материал').AsString;



        if not Form1.mkQueryUpdate2(Form1.ADOQuery1,'UPDATE [%s] SET [Статус]=' + #39 + '1' + #39 + ' WHERE [IdГП]=' + #39 +
        IDGP + #39, ['750']) then
        Exit;


              //Проверка на дубль
        if not Form1.mkQuerySelect1(Form1.ADOQuery2,'Select * from [%s]  Where (IdГП=' + #39 +
        IDGP + #39 + ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 +
        Obozn + #39 + ') ',
        ['Специф750']) then
        exit;
        if Form1.ADOQuery2.RecordCount = 0 then
        begin
        //Замена материалов
          if not Form1.mkQueryInsert(Form1.ADOQuery1,'Insert Into  [%s]' + '(ID,Parent, [ВидЭлемента],'+
          '[Элемент], [КолНаЕд], [Количество], [ЕИ],'+
          '[Обозначение],' +
          '[Тип], [Примечание], [Диаметр], [Масса], '+
          '[Длина], [Ширина], [ДлинаРазв],' + '[ШиринаРазв], '+
          '[Объем], [КолГибов], [Материал], ' +
          ' IdГП,Изделие,'+
          'Заказ,Дата,IDКо,Группа) ' + 'Values (%s,%s,%s,' +
          '%s,%s,%s,%s,%s,' +
          '%s,%s,%s,%s,%s,%s,%s,%s,' +
          '%s,%s,%s,%s,%s,%s,%s,%s,%s)',
           ['Специф750',
          #39 + IntToStr(ID) + #39, #39 + Par + #39, #39 + Vid + #39, #39
          + Elem + #39, #39 + Kol_Ed + #39, #39 + Kol + #39, #39 + EI + #39, #39 +
          Obozn + #39,  #39 +
          Typ + #39, #39 + Prim + #39, #39 + Diam + #39, #39 + Massa + #39, #39 +
          Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 +
          Obem + #39, #39 + Kol_Gib + #39,  #39 + Mater + #39, #39 + IDGP + #39, #39 + Naim + #39, #39 +
          Zak + #39, #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39, #39 + (Kod) + #39]) then
          Exit;
        end;
                  //================================
        if Form1.ADOQuery2.RecordCount <> 0 then
        begin
             Kol2 := Form1.ADOQuery2.FieldByName('Количество').AsString;
            if Kol2 = '' then
            Kol2 := '0';
            try
              KOL_II2:=StrToFloat(Kol2);
            except
              KOL_II2:=0;
            end;
             if not Form1.mkQueryUpdate2(Form1.ADOQuery1,'UPDATE %s SET [Количество]=+' + #39 + FloatToStr(Kol_II+Kol_II2)+#39+
             ' WHERE ([IdГП]=' + #39 + IDGP + #39+') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 +
             Obozn + #39+')', ['Специф750']) then
            Exit;
        end;

        //+++++++++++++++++++++++++++++++ СпецифОбщая
       Detal := Pos('Детали', Vid);
       if (Detal <> 0) then
       begin
      //)))))))))))))))))))))))))))))))))))))))))))))
        KL:=0;
        A:=1000;
        B:=700;
        sh1:='0';
        sh2:='0';
        Result := Material_Gib(Mater, Dlin_Raz, Shir_raz, Dlina, Shir, sh1, sh2, Elem, kl, StrToInt(Kol_Gib), B, IDGP, StrToFloat(Kol));
        NC_G1 := Result.MAT_G_Do1; //Н\Ч из таб 3
        NC_G2 := Result.MAT_G_Do2; // //Кол Отверст
        NC_G3 := Result.MAT_G_Do3; //Н/Ч +Выруб отвер
                  //----------------------------------------
        Result := Material_Pila(Mater, (Dlin_Raz), (Shir_raz), (sh1), Elem, KL, R_25, B, IDGP, StrToFloat(Kol));
        NC_P1 := Result.MAT_Pila_Do1;
        NC_P2 := Result.MAT_Pila_Do2;

        Result := Material(Mater, (Dlin_Raz), (Shir_raz), (sh1), Elem, KL, IDGP, StrToFloat(Kol));
        NC_N1 := Result.MAT_Do1;
        NC_N2 := Result.MAT_Do2; //Углоруб;

        if not Form1.mkQueryUpdate2(Form1.ADOQuery1,'UPDATE %s SET [Н\ЧГибка]=' + #39 + FloatToStr(Nc_G1) + #39 +
        ',[Н\чПила]=' + #39 + FloatToStr(Nc_P1) + #39 + ',[Н\чПилаЛенточная]=' + #39 + FloatToStr(Nc_P2) + #39 +
        ',[Н\чНожницы]=' + #39 + FloatToStr(Nc_N1) + #39 + ',[Н\чУглоруб]=' + #39 + FloatToStr(Nc_N2) + #39 + ',[ДлинаИ]=' + #39 + FloatToStr(Nc_G3) + #39 + ',[ШиринаИ]=' + #39 + FloatToStr(Nc_G2) + #39 + ',[Длина]=' + #39 + Dlina + #39 + ',[Ширина]=' + #39 + Shir + #39 + ',[ДлинаРазв]=' + #39 + Dlin_Raz + #39 + ',[ШиринаРазв]=' + #39 + Shir_Raz + #39 +
          ',[Количество]=' + #39 + Kol + #39 + ',[КолГибов]=' + #39 + Kol_Gib + #39 + ',[Материал]=' + #39 + Mater + #39 + ',[ШиринаПолки1]=' + #39 + SH1 + #39 + ',[ШиринаПолки2]=' + #39 + SH2 + #39 + ',[Диаметр]=' + #39 + Diam + #39 + ' WHERE [Обозначение]=' + #39 + Obozn + #39,
           ['СпецифОбщая']) then
          Exit;
          /////////////
        if not Form1.mkQuerySelect1(Form1.ADOQuery2,'Select * from %s  Where (Обозначение=' + #39 + Obozn + #39 + ')   ',
         ['[СпецифОбщая]']) then
          exit;
        if Form1.ADOQuery2.RecordCount = 0 then
        begin
            if not Form1.mkQueryInsert(Form1.ADOQuery1,'Insert Into %s ' + '(Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество],'+
            ' [Обозначение],' +
          '[Тип], [Категория], [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
          '[ШиринаРазв], [Объем], [КолГибов], [Материал], [КомплВед],' +               //ДлинаИ-Т, ШиринаИ-Лента
            'Изделие,Дата,[ШиринаПолки1],[ШиринаПолки2],[Н\ЧГибка],[Н\чПила],[Н\чНожницы],[Н\чУглоруб],ДлинаИ,ШиринаИ) ' +
            'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,' +
            '%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)',
             ['СпецифОбщая', #39 + 'False' + #39, #39 + Vid + #39, #39 + Elem + #39, #39 + Kod + #39, #39 + Kol + #39, #39 +
             Obozn + #39, #39 + Typ + #39, #39 + '0' + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 +
             Shir + #39, #39 + Dlin_Raz + #39, #39 +
            Shir_Raz + #39, #39 + POkr + #39, #39 + Kol_Gib + #39, #39 + Mater + #39, #39 +
             Kompl_Ved + #39, #39 + Naim + #39, #39 + ConvertDat1(Dat) + #39, #39 + SH1 + #39, #39 + SH2 + #39, #39 +
             FloatToStr(Nc_G1) + #39, #39 + FloatToStr(Nc_P1) + #39, #39 + FloatToStr(Nc_N1) + #39, #39 +
             FloatToStr(Nc_N2) + #39, #39 + FloatToStr(Nc_G1) + #39, #39 + FloatToStr(Nc_G2) + #39]) then
            exit;

            if not Form1.mkQueryUpdate2(Form1.ADOQuery1,'UPDATE %s SET [Н\ЧГибка]=' + #39 + FloatToStr(Nc_G1) + #39 +
            ',[Н\чПила]=' + #39 + FloatToStr(Nc_P1) + #39 + ',[Н\чПилаЛенточная]=' + #39 + FloatToStr(Nc_P2) + #39 +
            ',[Н\чНожницы]=' + #39 + FloatToStr(Nc_N1) + #39 + ',[Н\чУглоруб]=' + #39 + FloatToStr(Nc_N2) + #39 + ',[ДлинаИ]=' + #39 + FloatToStr(Nc_G3) + #39 + ',[ШиринаИ]=' + #39 + FloatToStr(Nc_G2) + #39 + ',[Длина]=' + #39 + Dlina + #39 + ',[Ширина]=' + #39 + Shir + #39 + ',[ДлинаРазв]=' + #39 + Dlin_Raz + #39 + ',[ШиринаРазв]=' + #39 + Shir_Raz + #39 +
            ',[Количество]=' + #39 + Kol + #39 + ',[КолГибов]=' + #39 + Kol_Gib + #39 + ',[Материал]=' + #39 + Mater + #39 + ',[ШиринаПолки1]=' + #39 + SH1 + #39 + ',[ШиринаПолки2]=' + #39 + SH2 + #39 + ',[Диаметр]=' + #39 + Diam + #39 + ' WHERE [Обозначение]=' + #39 + Obozn + #39,
            ['СпецифОбщая']) then
            Exit;
        end;
       end;
      ADOQuery6.Next;
      End;

    end;
end;

procedure TForm1.N102Click(Sender: TObject);
var
  fileName, Vn_Dat, Nom, GP, IDGP, IDKO, Kol_Otv, Izdel, Zakaz, Zak, Id, P, ID1: string;
  X, J: Integer;
begin
  IDGP := SG4.Cells[13, SG4.Row];
  IDKO := '0';
  Kol_Otv := SG4.Cells[4, SG4.Row]; //кол завес
  Izdel := SG4.Cells[3, SG4.Row];
  Zakaz := SG4.Cells[2, SG4.Row];
  Zak := Zakaz;
  GP := IDGP;
  UOsnova_Main := Osnova_Main.Create();
  fileName := '';//ExtractFileDir(ParamStr(0)); //+'\Klapan.EXE';
  Vn_Dat := '01.01.2000';
  Nom := '-3';
  UOsnova_Main.Flag_Error := 0;
  Form1.Memo2.Lines.Add('Osnova');
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');

  UOsnova_Main.Osnova(Vn_Dat, '[ЛЮК]', 'СпецифЛЮК', #39 + Nom + #39, fileName, 1, StrToInt(IDGP));
                        //++++++++++++++++++++++++++++++++++++++++++++++++++
  if UOsnova_Main.Flag_Error = 2 then //ДЕТАЛИ НЕ ВСЕ
  begin
    Form1.Memo2.Lines.Add('UOsnova_Main.Osnova( ДЕТАЛИ НЕ ВСЕ,ЛЮК,СпецифЛЮК,' + Nom + ',' + fileName + ' )UOsnova_Main.Flag_Error =2');
    Exit;
  end;
  MessageDlg('Ok! 01.01.2000', mtError, [mbOk], 0);
end;

procedure TForm1.N103Click(Sender: TObject);
var
  Zak, Nam, NK, KK, NN, KN, BZ, BRIK, Kol, GP, KO, Tab: string;
  i, y, j: Integer;
begin
FShtrih.chk1.Checked:=False;
  FShtrih.StringGrid1.Cells[0, 0] := 'Кол во';
  FShtrih.StringGrid1.Cells[1, 0] := 'БЗ';
  FShtrih.StringGrid1.Cells[2, 0] := 'Изделие';
  FShtrih.StringGrid1.Cells[3, 0] := 'Брикет';
  FShtrih.StringGrid1.Cells[4, 0] := 'НачКод';
  FShtrih.StringGrid1.Cells[5, 0] := 'КонКод';
  FShtrih.StringGrid1.ColWidths[3]:=0;
  FShtrih.StringGrid1.ColWidths[4]:=0;
  FShtrih.StringGrid1.ColWidths[5]:=0;
  FShtrih.StringGrid1.Cells[6, 0] := 'НачНомер';
  FShtrih.StringGrid1.Cells[7, 0] := 'КонНомер';
  FShtrih.StringGrid1.Cells[8, 0] := 'ТУ';
  Zak := SGL.Cells[I_FN_ZAK, SGL.Row];
  Nam := SGL.Cells[I_FN_NAM, SGL.Row];
  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where  (Изделие=' + #39 + Nam + #39 +
  ') AND  (Заказ=' + #39 + Zak + #39 + ') AND (Отмена IS NULL) ', ['KlapanaZap']) then
    exit;
  FShtrih.StringGrid1.RowCount := Form1.ADOQuery2.RecordCount + 1;
  for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
  begin
    Kol := Form1.ADOQuery2.FieldByName('Кол во').AsString;
    BZ := Form1.ADOQuery2.FieldByName('БЗ').AsString;
    Nam := Form1.ADOQuery2.FieldByName('Изделие').AsString;
    BRIK := Form1.ADOQuery2.FieldByName('Брикет').AsString;
    NK := Form1.ADOQuery2.FieldByName('НачКод').AsString;
    KK := Form1.ADOQuery2.FieldByName('КонКод').AsString;
    NN := Form1.ADOQuery2.FieldByName('НачНомер').AsString;
    KN := Form1.ADOQuery2.FieldByName('КонНомер').AsString;
    GP := Form1.ADOQuery2.FieldByName('IdГП').AsString;
    KO := Form1.ADOQuery2.FieldByName('IdКО').AsString;
    Tab := '';
   { if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (IdГП=' + #39 + GP + #39 + ') AND (IdКО=' + #39 + KO + #39 + ') AND (Элемент=' + #39 + 'Табличка маркировки' + #39 + ') ', ['Специф']) then
      exit;
    Tab := Form1.ADOQuery4.FieldByName('Обозначение').AsString; }
    FShtrih.StringGrid1.Cells[0, i + 1] := Kol;
    FShtrih.StringGrid1.Cells[1, i + 1] := BZ;
    FShtrih.StringGrid1.Cells[2, i + 1] := Nam;
    FShtrih.StringGrid1.Cells[3, i + 1] := BRIK;
    FShtrih.StringGrid1.Cells[4, i + 1] := NK;
    FShtrih.StringGrid1.Cells[5, i + 1] := KK;
    FShtrih.StringGrid1.Cells[6, i + 1] := NN;
    FShtrih.StringGrid1.Cells[7, i + 1] := KN;
    FShtrih.StringGrid1.Cells[8, i + 1] := Tab;
    Form1.ADOQuery2.Next;
  end;
  FShtrih.Caption := Zak;
  FShtrih.ShowModal;
end;

procedure TForm1.N104Click(Sender: TObject);
var
  Zak, Nam, NK, KK, NN, KN, BZ, BRIK, Kol, GP, KO, Tab: string;
  i, y, j: Integer;
begin
FShtrih.chk1.Checked:=False;
  FShtrih.StringGrid1.Cells[0, 0] := 'Кол во';
  FShtrih.StringGrid1.Cells[1, 0] := 'БЗ';
  FShtrih.StringGrid1.Cells[2, 0] := 'Изделие';
  FShtrih.StringGrid1.Cells[3, 0] := 'Брикет';
  FShtrih.StringGrid1.Cells[4, 0] := 'НачКод';
  FShtrih.StringGrid1.Cells[5, 0] := 'КонКод';
  FShtrih.StringGrid1.ColWidths[3]:=0;
  FShtrih.StringGrid1.ColWidths[4]:=0;
  FShtrih.StringGrid1.ColWidths[5]:=0;
  FShtrih.StringGrid1.Cells[6, 0] := 'НачНомер';
  FShtrih.StringGrid1.Cells[7, 0] := 'КонНомер';
  FShtrih.StringGrid1.Cells[8, 0] := 'ТУ';
  Zak := StringGrid10.Cells[I_FN_ZAK, StringGrid10.Row];
  Nam := StringGrid10.Cells[I_FN_NAM, StringGrid10.Row];
  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where  (Изделие=' + #39 + Nam + #39 +
  ') AND  (Заказ=' + #39 + Zak + #39 + ') AND (Отмена IS NULL) ', ['Klapana']) then
    exit;
  FShtrih.StringGrid1.RowCount := Form1.ADOQuery2.RecordCount + 1;
  for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
  begin
    Kol := Form1.ADOQuery2.FieldByName('Кол во').AsString;
    BZ := Form1.ADOQuery2.FieldByName('БЗ').AsString;
    Nam := Form1.ADOQuery2.FieldByName('Изделие').AsString;
    BRIK := Form1.ADOQuery2.FieldByName('Брикет').AsString;
    NK := Form1.ADOQuery2.FieldByName('НачКод').AsString;
    KK := Form1.ADOQuery2.FieldByName('КонКод').AsString;
    NN := Form1.ADOQuery2.FieldByName('НачНомер').AsString;
    KN := Form1.ADOQuery2.FieldByName('КонНомер').AsString;
    GP := Form1.ADOQuery2.FieldByName('IdГП').AsString;
    KO := Form1.ADOQuery2.FieldByName('IdКО').AsString;
    Tab := '';
   { if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (IdГП=' + #39 + GP + #39 + ') AND (IdКО=' + #39 + KO + #39 + ') AND (Элемент=' + #39 + 'Табличка маркировки' + #39 + ') ', ['Специф']) then
      exit;
    Tab := Form1.ADOQuery4.FieldByName('Обозначение').AsString; }
    FShtrih.StringGrid1.Cells[0, i + 1] := Kol;
    FShtrih.StringGrid1.Cells[1, i + 1] := BZ;
    FShtrih.StringGrid1.Cells[2, i + 1] := Nam;
    FShtrih.StringGrid1.Cells[3, i + 1] := BRIK;
    FShtrih.StringGrid1.Cells[4, i + 1] := NK;
    FShtrih.StringGrid1.Cells[5, i + 1] := KK;
    FShtrih.StringGrid1.Cells[6, i + 1] := NN;
    FShtrih.StringGrid1.Cells[7, i + 1] := KN;
    FShtrih.StringGrid1.Cells[8, i + 1] := Tab;
    Form1.ADOQuery2.Next;
  end;
  FShtrih.Caption := Zak;
  FShtrih.ShowModal;
end;

procedure TForm1.N105Click(Sender: TObject);
var
 //XL2: Variant;
  E, i, J, X, X1, X3, Res, Priv, Kol_Zap, Kount, DlinaI, Res_KPU, Sten_G, Sten_V, Res_Detal, hh, F2, Res1, Res2: Integer;
  Vn_DAt, Dir, God, mes, Nom, Priv_Str, IDGP, OboznSh, Obozn, Dlina, Elem, Izdel, S, K, Mat: string;
  ar: array[0..7750, 0..7] of string;
  Ar1: array[0..1500, 0..13] of string;
  Ar3: array[0..100, 0..13] of string;
  Ar2: array of array of string;
  SR: TSearchRec; // поисковая переменная
  FindRes: Integer; // переменная для записи результата поиска
  Str, Dir_Ser, Str1, Str2, Str3, fileName, fullFilePath, Put: string;
  h: hwnd;
  FindFile: TSearchRec;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
  for X1 := 0 to SG212.RowCount - 1 do
  begin
    Nom := SG212.Cells[0, X1]; //ZSG.Cells[0, ZSG.Row];
    if Nom = '' then
      Continue;
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (Номер=' + #39 + Nom + #39 +
    ') AND (Отмена IS NULL) Order By Заказ ', ['Запуск']) then
      exit;
    Kount := ADOQuery2.RecordCount;
    if Form1.ADOQuery2.RecordCount <> 0 then
    begin

      for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
      begin
        ar[i, 0] := Form1.ADOQuery2.FieldByName('Заказ').AsString;
        ar[i, 1] := Form1.ADOQuery2.FieldByName('Кол во запущенных').AsString;
        ar[i, 2] := Nom;
        ar[i, 3] := Form1.ADOQuery2.FieldByName('Изделие').AsString;
        ar[i, 4] := Form1.ADOQuery2.FieldByName('МодПривода').AsString;
        ar[i, 5] := Form1.ADOQuery2.FieldByName('IdГП').AsString;
        ar[i, 6] := Form1.ADOQuery2.FieldByName('IdКО').AsString;
        Form1.ADOQuery2.Next;
      end;
    end;
    for i := 0 to Kount do
    begin                                   //  AND (Trumph='+#39+'True'+#39+')
      if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + ar[i, 5] + #39 +
      ') AND  (IdКО=' + #39 + ar[i, 6] + #39 + ') AND (ВидЭлемента=' + #39 + 'Детали' + #39 +
      ')  Order By Обозначение ', ['Специф']) then
        exit;
      if ar[i, 1] = '' then
        Break;
      Kol_Zap := StrToInt(ar[i, 1]);
    //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

      for J := 0 to ADOQuery2.RecordCount - 1 do
      begin
        Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
        OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
        if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение=' + #39 + OboznSh + #39 +
        ') AND ((Лазер=' + #39 + 'True' + #39 + ') ) AND (Технолог=' + #39 + 'True' + #39 + ')  ', ['СпецифОбщая']) then
          exit;
        if ADOQuery4.RecordCount <> 0 then
        begin

          Mat := ADOQuery2.FieldByName('Материал').AsString;

          K := ADOQuery2.FieldByName('Количество').AsString;
          Ar1[X, 0] := IntToStr(Kol_Zap * StrToInt(K));
          Obozn := ADOQuery4.FieldByName('Обозначение').AsString;
          Ar1[X, 1] := ADOQuery4.FieldByName('Обозначение').AsString;
          Ar1[X, 11] := ADOQuery2.FieldByName('Обозначение').AsString;
          Ar1[X, 2] := ADOQuery2.FieldByName('Элемент').AsString;
          Ar1[X, 3] := ar[i, 3]; //ADOQuery4.FieldByName('Изделие').AsString;
          Ar1[X, 4] := ADOQuery2.FieldByName('Длина').AsString;
          Ar1[X, 5] := ADOQuery2.FieldByName('Ширина').AsString;
          Ar1[X, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
          Ar1[X, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
          Ar1[X, 8] := ADOQuery2.FieldByName('Заказ').AsString;
          Ar1[X, 9] := ADOQuery2.FieldByName('IDГП').AsString;
          Ar1[X, 10] := ADOQuery2.FieldByName('Материал').AsString;
          Ar1[X, 12] := ADOQuery2.FieldByName('idКО').AsString;
          Inc(X);

          Form1.ADOQuery4.Next;
        end;
        Form1.ADOQuery2.Next;
      end;
    end;
  end;
  Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God;
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\';
  CreateDir(Dir);
  //Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\' + Nom + '\';
  //CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\' + Nom + '\';
  CreateDir(Dir);
        //-----------------------------------------------
  Memo7.Lines.Clear;
  Memo15.Lines.Clear;
  for i := 0 to High(Ar1) do
  begin
    if Ar1[E, 3] = '' then
      Break;
        //ВГ 410.00.01.002-400 меняем на ВГ 410.00.01.001-400  Гапова 21.01.2019
    Izdel := ar[E, 3];
    Obozn := Ar1[E, 11];
                //+++++++++++++++++++
    Str := Obozn; //Ar1[E, 11]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 5);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
    Str := ConvertRus(Str);
                //+++++++++++++++++++
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo7.Lines.Add(Str3);
    Memo15.Lines.Add(Ar1[E, 8] + '  ' + Ar1[E, 3]);
    Inc(E);
  end;

     //-----------------------------------------------


  Memo9.Clear;
  Memo8.Clear;
  for i := 0 to Memo7.Lines.Count - 1 do
  begin
    F := 0;
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Клапаны\Пожарные\';
    //Dir_Ser := Put + 'ОИТ\';
    if Memo7.Lines.Strings[i] <> '' then
      fileName := Memo7.Lines.Strings[i] + '.dxf';
    if FindFirst(Dir_Ser + fileName, faDirectory, FindFile) = 0 then
      repeat
        if FindFile.Name[1] = '.' then
          continue;
        fullFilePath := (Dir_Ser + FindFile.Name);
        Memo9.Lines.Add(fullFilePath);
       // Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God + '\' + mes + '\' + Nom + 'Фрезерный\10\';
        //CreateDir(Dir);
        CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
        Memo2.Lines.Add('CopyFile1  ' + fullFilePath);
      until FindNext(FindFile) <> 0
    else
    begin
      Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
      Memo2.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
    end;
  end;
 //

  if Memo8.Lines.Strings[0] <> '' then
  begin
    Memo8.Lines.SaveToFile('123.txt');
    Str := ExtractFileDir(ParamStr(0)) + '\123.txt';
    ShellExecute(Form1.Handle, nil, PChar(Str), nil, nil, SW_SHOWNORMAL);
  end;
  ShellExecute(h, 'open', PWideChar(Dir), nil, nil, SW_SHOW);
end;

procedure TForm1.N106Click(Sender: TObject);
var
 //XL2: Variant;
  E, i, J, X, X1, X3, Res, Priv, Kol_Zap, Kount, DlinaI, Res_KPU, Sten_G, Sten_V, Res_Detal, hh, F2, Res1, Res2: Integer;
  Vn_DAt, Dir, God, mes, Nom, Priv_Str, IDGP, OboznSh, Obozn, Dlina, Elem, Izdel, S, K, Mat: string;
  ar: array[0..7750, 0..7] of string;
  Ar1: array[0..1500, 0..13] of string;
  Ar3: array[0..100, 0..13] of string;
  Ar2: array of array of string;
  SR: TSearchRec; // поисковая переменная
  FindRes: Integer; // переменная для записи результата поиска
  Str, Dir_Ser, Str1, Str2, Str3, fileName, fullFilePath, Put: string;
  h: hwnd;
  FindFile: TSearchRec;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
  for X1 := 0 to SG212.RowCount - 1 do
  begin
    Nom := SG212.Cells[0, X1]; //ZSG.Cells[0, ZSG.Row];
    if Nom = '' then
      Continue;
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (Номер=' + #39 + Nom + #39 + ') AND (Отмена IS NULL) Order By Заказ ', ['ЗапускВозд']) then
      exit;
    Kount := ADOQuery2.RecordCount;
    if Form1.ADOQuery2.RecordCount <> 0 then
    begin

      for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
      begin
        ar[i, 0] := Form1.ADOQuery2.FieldByName('Заказ').AsString;
        ar[i, 1] := Form1.ADOQuery2.FieldByName('Кол во запущенных').AsString;
        ar[i, 2] := Nom;
        ar[i, 3] := Form1.ADOQuery2.FieldByName('Изделие').AsString;
        ar[i, 4] := Form1.ADOQuery2.FieldByName('МодПривода').AsString;
        ar[i, 5] := Form1.ADOQuery2.FieldByName('IdГП').AsString;
        ar[i, 6] := Form1.ADOQuery2.FieldByName('IdКО').AsString;
        Form1.ADOQuery2.Next;
      end;
    end;
    for i := 0 to Kount do
    begin                                   //  AND (Trumph='+#39+'True'+#39+')
      if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + ar[i, 5] + #39 + ') AND  (IdКО=' + #39 + ar[i, 6] + #39 + ') AND (ВидЭлемента=' + #39 + 'Детали' + #39 + ')  Order By Обозначение ', ['СпецифВозд']) then
        exit;
      if ar[i, 1] = '' then
        Break;
      Kol_Zap := StrToInt(ar[i, 1]);
    //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

      for J := 0 to ADOQuery2.RecordCount - 1 do
      begin
        Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
        OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
        if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение=' + #39 + OboznSh + #39 +
        ') AND ((Лазер=' + #39 + 'True' + #39 + ') ) AND (Технолог=' + #39 + 'True' + #39 + ')  ', ['СпецифОбщая']) then
          exit;
        if ADOQuery4.RecordCount <> 0 then
        begin

          Mat := ADOQuery2.FieldByName('Материал').AsString;

          K := ADOQuery2.FieldByName('Количество').AsString;
          Ar1[X, 0] := IntToStr(Kol_Zap * StrToInt(K));
          Obozn := ADOQuery4.FieldByName('Обозначение').AsString;
          Ar1[X, 1] := ADOQuery4.FieldByName('Обозначение').AsString;
          Ar1[X, 11] := ADOQuery2.FieldByName('Обозначение').AsString;
          Ar1[X, 2] := ADOQuery2.FieldByName('Элемент').AsString;
          Ar1[X, 3] := ar[i, 3]; //ADOQuery4.FieldByName('Изделие').AsString;
          Ar1[X, 4] := ADOQuery2.FieldByName('Длина').AsString;
          Ar1[X, 5] := ADOQuery2.FieldByName('Ширина').AsString;
          Ar1[X, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
          Ar1[X, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
          Ar1[X, 8] := ADOQuery2.FieldByName('Заказ').AsString;
          Ar1[X, 9] := ADOQuery2.FieldByName('IDГП').AsString;
          Ar1[X, 10] := ADOQuery2.FieldByName('Материал').AsString;
          Ar1[X, 12] := ADOQuery2.FieldByName('idКО').AsString;
          Inc(X);

          Form1.ADOQuery4.Next;
        end;
        Form1.ADOQuery2.Next;
      end;
    end;
  end;
  Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God;
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God + '\' + mes + '\';
  CreateDir(Dir);
  //Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\' + Nom + '\';
  //CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God + '\' + mes + '\' + Nom + '\';
  CreateDir(Dir);
        //-----------------------------------------------
  Memo7.Lines.Clear;
  Memo15.Lines.Clear;
  for i := 0 to High(Ar1) do
  begin
    if Ar1[E, 3] = '' then
      Break;
        //ВГ 410.00.01.002-400 меняем на ВГ 410.00.01.001-400  Гапова 21.01.2019
    Izdel := ar[E, 3];
    Obozn := Ar1[E, 11];
                //+++++++++++++++++++
    Str := Obozn; //Ar1[E, 11]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 5);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
    Str := ConvertRus(Str);
                //+++++++++++++++++++
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo7.Lines.Add(Str3);
    Memo15.Lines.Add(Ar1[E, 8] + '  ' + Ar1[E, 3]);
    Inc(E);
  end;

     //-----------------------------------------------


  Memo9.Clear;
  Memo8.Clear;
  for i := 0 to Memo7.Lines.Count - 1 do
  begin
    F := 0;
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Клапаны\Воздушные\';
    //Dir_Ser := Put + 'ОИТ\';
    if Memo7.Lines.Strings[i] <> '' then
      fileName := Memo7.Lines.Strings[i] + '.dxf';
    if FindFirst(Dir_Ser + fileName, faDirectory, FindFile) = 0 then
      repeat
        if FindFile.Name[1] = '.' then
          continue;
        fullFilePath := (Dir_Ser + FindFile.Name);
        Memo9.Lines.Add(fullFilePath);
       // Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God + '\' + mes + '\' + Nom + 'Фрезерный\10\';
        //CreateDir(Dir);
        CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
        Memo2.Lines.Add('CopyFile1  ' + fullFilePath);
      until FindNext(FindFile) <> 0
    else
    begin
      Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
      Memo2.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
    end;
  end;
 //

  if Memo8.Lines.Strings[0] <> '' then
  begin
    Memo8.Lines.SaveToFile('123.txt');
    Str := ExtractFileDir(ParamStr(0)) + '\123.txt';
    ShellExecute(Form1.Handle, nil, PChar(Str), nil, nil, SW_SHOWNORMAL);
  end;
  ShellExecute(h, 'open', PWideChar(Dir), nil, nil, SW_SHOW);
end;

procedure TForm1.N107Click(Sender: TObject);
Var
XL:Variant;
Dat1,StrDat5,Vn_Dat,God,Mes,Dir:string;
D:TDate;
begin
  D:=StrToDate(SG215.Cells[8,SG215.Row]);
  God := FormatDateTime('yyyy', D);
  Mes := FormatDateTime('mmmm', F);
  StrDat5 := FormatDateTime('mm.dd.yyyy hh-mm', D);

  Dir := Put_KTO + '\CKlapana\ЛентаСТАМ\';
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\ЛентаСТАМ\' + God + '\';
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\ЛентаСТАМ\' + God + '\' + Mes + '\';
  CreateDir(Dir);

  XL := CreateOleObject('Excel.Application'); //  — копия
  XL.Application.EnableEvents := false;
  XL.Workbooks.Open(Put_KTO + '\CKlapana2\2013\Лента_СТАМ.xls');
Dat1:=ConvertDat1(SG215.Cells[8,SG215.Row]) ;
STAM_Er:=0;
Lenta('Лента уплотнительная', 'СТАМ', Dat1, Dat1, SG215.Cells[8,SG215.Row], 1, XL);
if STAM_Er=1 then
 begin
    XL.Workbooks.Close;
    XL := UnAssigned;
    Exit;
 end;
//==================================================
  XL.Application.ActiveWorkBook.SaveAs(Dir + '\' + Dat1 + '.xls');
  XL.Visible := True;

end;

{function Material_Gib(Mater, Dlin_R, Shir_R, Dlin, Shir, Shir_Pol1, Shir_Pol2, Detal: string; KL, Kol_Gib, BB: Integer; IDGP: string; Kol_Det: Double): TResult;
var
  I: integer;
  Res_List, Res_Tol, Srav, Klap, Res_Lop, Ugol, KolGib, Res_Resh,Resh_RON, Lenta, Kol_LOP_I, B, Res: Integer;
  Mat, Tol_S, NC_S, NC_S2, NC_S3, Dlin_S, Shir_S, GP, Det,S: string;
  Res_Tol55, Tol, NC, NC2, NC3, ShirI, DlinI, DlinD, C, Kol_Ed,
  Razmet_KPU, Kol_lop, A_Lenta, T, DlinII, SH1, SH2,F1,F2: Double;
  Flag_Razb_Klapana,Cel,Des: Integer;
begin
        //+ ++++++++++++++++++++++++++++++++++++++++++
        //Лист ДПРНМ 1,0х600х1500 Л63 ГОСТ 931-90  'Круг 15-h11 ГОСТ 7417-75 /12Х18Н10Т ГОСТ 5949-75'
  Mat := Mater;
  //KL - тип клапана 0-КПУ 1-КПД, 2-Гермик-ДУ, 3-КЭД, 4-
  if Shir_R = '' then
    Shir_R := '0';
  if Dlin_R = '' then
    Dlin_R := '0';
  Dlin_S := Dlin_R;
  Shir_S := Shir_R;

  ShirI := StrToFloat(Shir_R);
  DlinI := StrToFloat(Dlin_R);
        //===============
  if Shir_Pol1 = '' then //До первого отверстия
    Sh1 := 0
  else
    Sh1 := StrToFloat(Shir_Pol1);
        //----------------------
  if Shir_Pol2 = '' then  //ШАГ ()150
    Sh2 := 0
  else
    Sh2 := StrToFloat(Shir_Pol2);
        //====================
  Klap := KL;
  if kl = 0 then
    I := 0;
  GP := IDGP;
  Det := Detal;

  KolGib := Kol_Gib;
  Kol_Ed := Kol_Det;
  Result.MAT_G_Do1 := 0;
  Result.MAT_G_Do2 := 0;
  Result.MAT_G_Do3 := 0;
  B := BB;
  Res_List := Pos('ФЭЗ', Mat);
  if Res_List <> 0 then
    Mat := '1';
  Res_List := Pos('Круг', Mat);
  if Res_List <> 0 then
    Mat := '1';
  Res_List := Pos('ДПРНМ', Mat);
  if Res_List <> 0 then
    Mat := '1';
  Res := Pos('Шпилька', Mat);
  if (Mat = '') or (Res <> 0) then
    Mat := '0';
  try
        //Лента на шестьдесят НЕРЖ 0,3
    Res_List := Pos('НЕРЖ', Mat);
    if Res_List <> 0 then
      Delete(Mat, 1, Res_List + 4);
    Res_List := Pos('Л', Mat);
    if Res_List <> 0 then
    begin
      Res_Tol := Pos(' ', Mat); // Лента
      Delete(Mat, 1, Res_Tol);
                //
      Res_Tol := Pos(' ', Mat); //ОЦ
      Delete(Mat, 1, Res_Tol);

      Res_Tol := Pos(' ', Mat); //08pc
      Delete(Mat, 1, Res_Tol);

      Res_Tol := Pos('х', Mat); //x
      Delete(Mat, Res_Tol, 50);

      Res_Tol := Pos('*', Mat); //*
      Delete(Mat, Res_Tol, 50);

      Res_Tol := Pos(' ', Mat); //08pc
      Delete(Mat, 1, Res_Tol);
    end;

    Res_List := Pos('Прокат', Mat);
    if Res_List <> 0 then
    begin //Прокат 02-0,7х1250х2500
      Res_Tol := Pos(' ', Mat);
      Delete(Mat, 1, Res_Tol);
      //02-0,7х1250х2500
      Res_Tol := Pos('-', Mat);
      Delete(Mat, 1, Res_Tol);
      //0,7х1250х2500
      Res_Tol := Pos('х', Mat);
      Delete(Mat,  Res_Tol,1000);
    end;
    //х/к 08пс 1,0х1250х2500

    Res_List := Pos('х/к', Mat);
    if Res_List <> 0 then
    begin //02-0,7х1250х2500
      Res_Tol := Pos(' ', Mat);
      Delete(Mat, 1, Res_Tol);
      //08пс 1,0х1250х2500
      Res_Tol := Pos(' ', Mat);
      Delete(Mat, 1, Res_Tol);
      //1,0х1250х2500
      Res_Tol := Pos('-', Mat);
      Delete(Mat, 1, Res_Tol);
      //0,7х1250х2500
      Res_Tol := Pos('х', Mat);
      Delete(Mat,  Res_Tol,1000);
    end;
    Res_List := Pos('ОЦ', Mat);
    if Res_List <> 0 then
      Delete(Mat, 1, 2);
        //+++++++++++++++++++++++++++++++++++++++++++++
    Res := Pos('Шпилька', Mat);
    if (Mat = '') or (Res <> 0) then
      Mat := '0';

    Tol := StrToFloat(StringReplace(Mat, ',', '.', [rfReplaceAll, rfIgnoreCase]));
  except
    Mat := '1';
  end;
  if Tol <= 1 then
    Tol_S := '0.55';
  if (Tol > 1) and (Tol <= 2) then
    Tol_S := '2';
  if Tol > 2 then
    Tol_S := '3';
  if DlinI <= 2000 then
    DlinIi := 2000
  else
    DlinIi := 3000;
        //
  if DlinI <= 1000 then
    DlinII := 1000
  else
    DlinII := 1100;
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Lenta := Pos('Лента уплотнительная', Det);
  Res_Resh := Pos('Решетка жалюзийная', Det);
  Resh_RON := Pos('Решетка РОН', Det);
  Res_Lop := AnsiCompareStr('Корпус лопатки', Det);
        //KL - тип клапана 0-КПУ 1-КПД, 2-Гермик-ДУ, 3-КЭД, 4-
  if Res_Lop = 0 then
  begin
                //КПУ
    if KL = 0 then
      Result.MAT_G_Do1 := 0.034*0.85 * 2;
     // Result.MAT_G_Do1 := 0.034 * 2;
    if KL = 2 then
    begin
                //Гермик ДУ
                //Таблица №3+Таблица "66
      if not Form1.Conn_Klap.mkQuerySelect('Select * from %s Where ([№]=' + #39 + '66' + #39 + ')  And ([Длина]=' + #39 + FloatToStr(DlinII) + #39 + ')', ['[Резка Гибка]']) then
        exit;
      NC_S := (Form1.Conn_Klap.AQuery.FieldByName('Норма').AsString);
      if NC_S = '' then
        NC := 0
      else
        NC := StrToFloat(NC_S) + StrToFloat(Form1.Conn_Klap.AQuery.FieldByName('Высота').AsString);

      if not Form1.Conn_Klap.mkQuerySelect('Select * from %s Where ([№]=' + #39 + '3' + #39 + ') And ([Толщина]=' + #39 + (Tol_s) + #39 + ') And ([Длина]=' + #39 + FloatToStr(DlinIi) + #39 + ') And ([Высота]=' + #39 + IntToStr(KolGib) + #39 + ')', ['[Резка Гибка]']) then
      exit;
      NC_S := (Form1.Conn_Klap.AQuery.FieldByName('Норма').AsString);
      if NC_S = '' then
      NC :=NC+ 0
      else
      NC := NC+StrToFloat(NC_S);
      Result.MAT_G_Do1 := NC;
    end;
  end;
        //===========================
  if (Lenta = 0) and (Res_Resh = 0) then
  begin
    if Shir_R = '' then
      Shir_R := '0';
    if Dlin_R = '' then
      Dlin_R := '0';
    ShirI := StrToFloat(Shir_R);
    DlinI := StrToFloat(Dlin_R);
    DlinII := StrToFloat(Dlin_R);

    if DlinI <= 2000 then
      DlinIi := 2000
    else
      DlinIi := 3000;
    if KolGib>13 then
       KolGib:=13;
    if KolGib>10 then
    begin
       F1:=KolGib/10;
       Cel:=Trunc(F1);
       F2:=SimpleRoundTo(Frac(F1),-2);
       S:=FloatToStr(F2);
       Res:=Pos('.',S);
       Delete(S,1,Res);
       Des:=StrToInt(S);
    end;
    if not Form1.Conn_Klap.mkQuerySelect('Select * from %s Where ([№]=' + #39 + '3' + #39 + ') And ([Толщина]=' + #39 + (Tol_s) + #39 + ') And ([Длина]=' + #39 + FloatToStr(DlinIi) + #39 + ') And ([Высота]=' + #39 + IntToStr(KolGib) + #39 + ')', ['[Резка Гибка]']) then
      exit;
    NC_S := (Form1.Conn_Klap.AQuery.FieldByName('Норма').AsString);
    if NC_S = '' then
      NC := 0
    else
      NC := StrToFloat(NC_S);
    Result.MAT_G_Do1 := NC;
  end;
  //================================================================
  KolGib := Kol_Gib;
  if Res_Resh <> 0 then
  begin
    if not Form1.Conn_Klap.mkQuerySelect('Select * from %s Where ([№]=' + #39 + '9' + #39 + ') And ([Толщина]=' + #39 + IntToStr(KolGib) + #39 + ')', ['[Резка Гибка]']) then
      exit;
    NC_S := (Form1.Conn_Klap.AQuery.FieldByName('Высота').AsString);
    if NC_S = '' then
      NC := 0
    else
      NC := StrToFloat(NC_S);
                //Result.MAT_G_Do1:=NC;
                //++++++++++++
    NC_S2 := (Form1.Conn_Klap.AQuery.FieldByName('Длина').AsString);
    if NC_S2 = '' then
      NC2 := 0
    else
      NC2 := StrToFloat(NC_S2);
    Result.MAT_G_Do1 := NC + NC2;
  end;
  //================================================================
  if Resh_RON <> 0 then
  begin
    if DlinI < 1250 then
      DlinIi := 1250
    else
    DlinIi := 2000;
    if not Form1.Conn_Klap.mkQuerySelect('Select * from %s Where ([№]=' + #39 + '77' + #39 + ') And ([Толщина]=' + #39 + IntToStr(KolGib) + #39 +
    ') And ([Длина]=' + #39 + FloatToStr(DlinIi) + #39 + ')', ['[Резка Гибка]']) then
      exit;
    NC_S := (Form1.Conn_Klap.AQuery.FieldByName('Норма').AsString);
    if NC_S = '' then
      NC := 0
    else
      NC := StrToFloat(NC_S);

    Result.MAT_G_Do1 := NC ;
  end;
  //================================================================
  Res_Lop := AnsiCompareStr('Стенка лопатки', Det);
  if Res_Lop = 0 then
  begin
    Kol_lop := Kol_Ed;
  end;
  Lenta := Pos('Лента уплотнительная', Det);
        //Лента уплотнительная ?? 050.00.00.001-600
  if Lenta <> 0 then
  begin
    if Shir = '' then
      Shir := '0';
    if Dlin = '' then
      Dlin := '0';
    Dlin_S := Dlin;
    Shir_S := Shir;

    ShirI := StrToFloat(Shir);
    DlinI := StrToFloat(Dlin);
    if Shir_Pol1 = '' then //До первого отверстия
      Sh1 := 0
    else
      Sh1 := StrToFloat(Shir_Pol1);
          //----------------------
    if Shir_Pol2 = '' then  //ШАГ ()150
      Sh2 := 0
    else
      Sh2 := StrToFloat(Shir_Pol2);

                //B:=StrToInt(Dlin);
    DlinI := StrToFloat(Dlin);

    if DlinI <= 2000 then
      DlinIi := 2000
    else
      DlinIi := 3000;
                //KL - тип клапана 0-КПУ 1-КПД, 2-Гермик-ДУ, 3-КЭД, 4-


    if not Form1.Conn_Klap.mkQuerySelect('Select * from %s Where ([№]=' + #39 + '3' + #39 + ') And ([Толщина]=' + #39 + (Tol_s) + #39 + ') And ([Длина]=' + #39 + FloatToStr(DlinIi) + #39 + ') And ([Высота]=' + #39 + IntToStr(KolGib) + #39 + ')', ['[Резка Гибка]']) then
      exit;
    NC_S := (Form1.Conn_Klap.AQuery.FieldByName('Норма').AsString);
    if NC_S = '' then
      NC := 0
    else
      NC := StrToFloat(NC_S);
    Result.MAT_G_Do1 := NC;
    DlinD := StrToFloat(Dlin);
    A_Lenta := (Sh1); // До Первого отверстия(DlinD-(KOl_Lop/2-1)*150)/2;
    Result.MAT_G_Do2 := A_Lenta;
    if Sh2 <> 0 then

      Kol_lop := (DlinD - ((Sh1 * 2))) / (Sh2) + 1
    else
      Kol_lop :=1;
    Result.MAT_G_Do2 :=Kol_lop ;//Кол Отверст
    T := 0.043 + 0.007 * (KOl_Lop / 2) * Kol_ed + 0.007 * Kol_Ed; //Пробивка отверстий в одной ленте
    Result.MAT_G_Do3 := T;
    Result.MAT_G_Do1 := NC+T;
  end;
end; }

{function Material_Pila(Mater, Dlin, Shir, Shir_Pol1, Detal: string; KL, R_25, BB: Integer; IDGP: string; Kol_Det: Double): TResult;
var
  I: integer;
  Res_List, Res_Tol, Srav, Klap, Res_Lop, Ugol, KolGib, Res_Resh, Lenta, B, R25, Res: Integer;
  Mat, Tol_S, NC_S, NC_S2, NC_S3, Dlin_S, Shir_S, GP, Det: string;
  Res_Tol55, Tol, NC, NC2, NC3,NC_P_L, ShirI, DlinI, DlinD, C, Kol_Ed, Razmet_KPU, Kol_lop, A_Lenta, T, DlinII: Double;
  Flag_Razb_Klapana,Res_Koppus_Lopatki: Integer;
begin
  Mat := Mater;
  Dlin_S := Dlin;
  Shir_S := Shir;
  Klap := KL;
  if kl = 0 then
    I := 0;
  GP := IDGP;
  Det := Detal;
  R25 := R_25;
  Kol_Ed := Kol_Det;
  Result.MAT_Pila_Do1 := 0;
  Result.MAT_Pila_Do2 := 0;
  Result.MAT_Pila_Do3 := 0;
  B := BB;
  Res_List := Pos('ФЭЗ', Mat);
  if Res_List <> 0 then
    Mat := '1';
  Res_List := Pos('ДПРНМ', Mat);
  if Res_List <> 0 then
    Mat := '1';
  Res_List := Pos('Круг', Mat);
  if Res_List <> 0 then
    Mat := '1';
  Res := Pos('Шпилька', Mat);
  if (Mat = '') or (Res <> 0) then
    Mat := '0';
  try
    Res_List := Pos('НЕРЖ', Mat);
    if Res_List <> 0 then
      Delete(Mat, 1, Res_List + 4);
    Res_List := Pos('Л', Mat);
    if Res_List <> 0 then
    begin
      Res_Tol := Pos(' ', Mat); // Лента
      Delete(Mat, 1, Res_Tol);

      Res_Tol := Pos(' ', Mat); //ОЦ
      Delete(Mat, 1, Res_Tol);

      Res_Tol := Pos(' ', Mat); //08pc
      Delete(Mat, 1, Res_Tol);

      Res_Tol := Pos('х', Mat); //x
      Delete(Mat, Res_Tol, 50);

      Res_Tol := Pos('*', Mat); //*
      Delete(Mat, Res_Tol, 50);

      Res_Tol := Pos(' ', Mat); //08pc
      Delete(Mat, 1, Res_Tol);
    end
    else
    begin
      Res_Tol := Pos(' ', Mat);
      Delete(Mat, 1, Res_Tol);
    end;
    Res_List := Pos('ОЦ', Mat);
    if Res_List <> 0 then
      Delete(Mat, 1, 2);
    Res := Pos('Шпилька', Mat);
    if (Mat = '') or (Res <> 0) then
      Mat := '0';
  except
    Mat := '1';
  end;
        //++++++++++++++++++++++++++++++++==
        //KL - тип клапана 0-КПУ 1-КПД, 2-Гермик-ДУ, 3-КЭД, 4-
  Res_Lop := Pos('Лопатка', Det);
  Res_Koppus_Lopatki:= Pos('Корпус лопатки', Det);
  Res_List := R_25; //Pos('20001',Mat);//if R_25 = 1 то Лопатка Р25

  Ugol := Pos('Стенка', Det);
        //++++++++++++++++++++++++++++++++++++++++++++++++
  if (Res_Lop <> 0) and (Res_List <> 0) then
  begin
    DlinI := StrToFloat(Dlin);  // Shir
    if DlinI <= 250 then
      DlinI := 250;
    if (DlinI > 250) and (DlinI <= 500) then
      DlinI := 500;
    if (DlinI > 500) and (DlinI <= 750) then
      DlinI := 750;
    if (DlinI > 750) then
      DlinI := 1000;
    if not Form1.Conn_Klap.mkQuerySelect('Select * from %s Where   ([№]=' + #39 + '8' + #39 + ') And  ([Длина]=' + #39 + FloatToStr(DlinI) + #39 + ')', ['[Резка Гибка]']) then
      exit;
    NC_S := (Form1.Conn_Klap.AQuery.FieldByName('Норма').AsString);
    if NC_S = '' then
      NC := 0
    else
      NC := StrToFloat(NC_S);
    Result.MAT_Pila_Do1 := NC;
  end;
                //++++++++++++++++++++++++++++++++++++++++++++++++ Простая лопатка не Р25
  if ((Res_Lop <> 0) and (Res_List = 0)) or (Ugol<>0) then
  begin
    DlinI := StrToFloat(Dlin);  // Shir
    if DlinI <= 250 then
      DlinI := 250;
    if (DlinI > 250) and (DlinI <= 500) then
      DlinI := 500;
    if (DlinI > 500) and (DlinI <= 750) then
      DlinI := 750;

    if (DlinI > 750) and (DlinI <= 1000) then
      DlinI := 1000;
    if (DlinI > 1000) and (DlinI <= 1250) then
      DlinI := 1250;

    if (DlinI > 1250) and (DlinI <= 2495) then
      DlinI := 2495;

    if  (DlinI > 2495) then
      DlinI := 2500;
    if not Form1.Conn_Klap.mkQuerySelect('Select * from %s Where   ([№]=' + #39 + '13' + #39 + ') And  ([Длина]=' + #39 + FloatToStr(DlinI) + #39 + ')', ['[Резка Гибка]']) then
      exit;
    NC_S := (Form1.Conn_Klap.AQuery.FieldByName('Норма').AsString);
    if NC_S = '' then
      NC := 0
    else
      NC := StrToFloat(NC_S);
    Result.MAT_Pila_Do1 := NC;
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++
  if (Res_Lop = 0) and (Res_List = 0) then
  begin
    DlinI := StrToFloat(Dlin) + 78;
    if DlinI <= 350 then
      DlinI := 350;
    if (DlinI > 350) and (DlinI <= 500) then
      DlinI := 500;
    if (DlinI > 500) and (DlinI <= 750) then
      DlinI := 750;
    if (DlinI > 750) then
      DlinI := 1000;
    if not Form1.Conn_Klap.mkQuerySelect('Select * from %s Where   ([№]=' + #39 + '7' + #39 + ') And  ([Длина]=' + #39 + FloatToStr(DlinI) + #39 + ')', ['[Резка Гибка]']) then
      exit;
    NC_S := (Form1.Conn_Klap.AQuery.FieldByName('Норма').AsString);
    if NC_S = '' then
      NC := 0
    else
      NC := StrToFloat(NC_S) + 0.007;
    Result.MAT_Pila_Do1 := NC;
  end;
  //Пила ленточная
      DlinI := StrToFloat(Dlin);  // Shir
    if DlinI < 500 then
      DlinI := 500;
    if (DlinI > 500)  then
      DlinI := 1250;

    if not Form1.Conn_Klap.mkQuerySelect('Select * from %s Where   ([№]=' + #39 + '6' + #39 +
     ') And  ([Длина]=' + #39 + FloatToStr(DlinI) + #39 + ')', ['[Резка Гибка]']) then
      exit;
    NC_S := (Form1.Conn_Klap.AQuery.FieldByName('Норма').AsString);
    if NC_S = '' then
      NC := 0
    else
      NC := StrToFloat(NC_S);
    Result.MAT_Pila_Do2 := NC+0.006;
    //Пила ленточная
end;  }

procedure TForm1.N10Click(Sender: TObject);
begin
        {if not Form1.mkQueryDelete(Form1.ADOQuery1, 'DELETE FROM %s Where ID='
                + #39 + ZSG.Cells[I_FN_KOL_ZAP + 14, ZSG.Row] + #39,
                ['Запуск']) then
                Exit; }
  if not mkQueryUpdate(Form1.ADOQuery2, 'UPDATE %s SET [Номер]=' + #39 + '1030' + #39 + ', [Номер раз]=' + #39 + '1030' + #39 + '   Where ID=' + #39 + ZSG.Cells[I_FN_KOL_ZAP + 14, ZSG.Row] + #39, ['Запуск']) then
    Exit;
  if not mkQueryUpdate(Form1.ADOQuery2, 'UPDATE %s SET [Номер]=' + #39 + '1030' + #39 + '   Where ID=' + #39 + '2256' + #39, ['Klapana']) then
    Exit;
end;

procedure TForm1.N110Click(Sender: TObject);
var
  XL2: Variant;
  E, i, J, X, X1, X2, Res, Priv, Kol_Zap, Kount: Integer;
  Vn_DAt, Dir, God, mes, Nom, Priv_Str, IDGP, Idko, OboznSh, Obozn: string;
  ar: array[0..7750, 0..6] of string;
  Ar1: array[0..10500, 0..12] of string;
  Ar2: array of array of string;
  SR: TSearchRec; // поисковая переменная
  FindRes: Integer; // переменная для записи результата поиска
  Str, Dir_Ser, Str1, Str2, Str3, fileName, fullFilePath, Put: string;
  h: hwnd;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
  X2 := StringGrid10.Row;
//for X1 := 0 to SGL.RowCount-1 do
//Begin
  IDGP := StringGrid10.Cells[I_FN_SGP + 2, X2];
  Idko := StringGrid10.Cells[I_FN_SGP + 3, X2];


  if not Form1.mkQuerySelect(Form1.ADOQuery2,
  'Select * from %s Where   (IdГП=' + #39 + IDGP + #39 + ') AND (IdКО=' + #39 + Idko + #39 +
  ') AND  (Отмена IS NULL) Order By Заказ ', ['Klapana']) then
    exit;
  Kount := ADOQuery2.RecordCount;
  if Form1.ADOQuery2.RecordCount <> 0 then
  begin

    for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
    begin
      ar[i, 0] := Form1.ADOQuery2.FieldByName('Заказ').AsString;
      ar[i, 1] := Form1.ADOQuery2.FieldByName('Кол во').AsString;
      ar[i, 2] := Nom;
      ar[i, 3] := Form1.ADOQuery2.FieldByName('Изделие').AsString;
      ar[i, 4] := Form1.ADOQuery2.FieldByName('МодПривода').AsString;
      ar[i, 5] := Form1.ADOQuery2.FieldByName('IdГП').AsString;
      ar[i, 6] := Form1.ADOQuery2.FieldByName('IdКО').AsString;
      Form1.ADOQuery2.Next;
    end;
  end;
  for i := 0 to Kount do
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + ar[i, 5] + #39 +
    ') AND (IDКО=' + #39 + ar[i, 6] + #39 + ') AND (ВидЭлемента=' + #39 + 'Детали' + #39 +
    ') Order By Обозначение ', ['Специф']) then
      exit;

    if ar[i, 1] = '' then
      Kol_Zap := 0
    else
      Kol_Zap := StrToInt(ar[i, 1]);
                //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    for J := 0 to ADOQuery2.RecordCount do
    begin

      OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
                        {Res:=Pos('-',OboznSh);
                        if Res<>0 Then
                        Delete(OboznSh,Res,30);
                        if not Form1.mkQuerySelect66(Form1.ADOQuery4,
                        'Select * from %s Where   (ОбозначениеШ=' + #39 +
                        OboznSh + #39 +') AND ((Trumph='+#39+'True'+#39+') or (Ножницы='+#39+'True'+#39+')) AND (Технолог='+#39+'True'+#39+')  ', ['ШаблонВоз']) then
                        exit; }                                     // or (Ножницы='+#39+'True'+#39+')
      if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение=' + #39 + OboznSh + #39 +
      ') AND ((Trumph=' + #39 + 'True' + #39 + ') ) AND (Технолог=' + #39 + 'True' + #39 + ')  ', ['СпецифОбщая']) then
        exit;
      if ADOQuery4.RecordCount <> 0 then
      begin

        Ar1[X, 0] := ADOQuery2.FieldByName('Количество').AsString;
        Obozn := ADOQuery4.FieldByName('Обозначение').AsString;
        Ar1[X, 1] := ADOQuery2.FieldByName('Обозначение').AsString;
        Ar1[X, 2] := ADOQuery2.FieldByName('Элемент').AsString;
        Ar1[X, 3] := ADOQuery2.FieldByName('Изделие').AsString;
        Ar1[X, 4] := ADOQuery2.FieldByName('Длина').AsString;
        Ar1[X, 5] := ADOQuery2.FieldByName('Ширина').AsString;
        Ar1[X, 6] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
        Ar1[X, 7] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
        Ar1[X, 8] := ADOQuery2.FieldByName('Заказ').AsString;
        Ar1[X, 9] := ADOQuery2.FieldByName('IDГП').AsString;
        Ar1[X, 10] := ADOQuery2.FieldByName('Материал').AsString;
        Ar1[X, 11] := ADOQuery2.FieldByName('IDКО').AsString;
        Inc(X);
      end;
      Form1.ADOQuery2.Next;
    end;
  end;

        //-----------------------------------------------
  Memo7.Lines.Clear;
  Memo15.Lines.Clear;
  for i := 0 to High(Ar1) do
  begin
    if Ar1[E, 3] = '' then
      Break;

                //+++++++++++++++++++
    Str := Ar1[E, 1]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 5);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
                //+++++++++++++++++++
    Str := ConvertRus(Str);
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str1 := StringReplace(Str1, ' ', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
                //+++++++++++++++++++
    Memo7.Lines.Add(Str3);
    Memo15.Lines.Add(Ar1[E, 8] + '  ' + Ar1[E, 3]);
    Inc(E);
  end;

  Memo9.Clear;
  Memo8.Clear;
  for i := 0 to Memo7.Lines.Count - 0 do
  begin
    F := 0;
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Клапаны\Пожарные';
    if Memo7.Lines.Strings[i] <> '' then
      fileName := Memo7.Lines.Strings[i] + '.dxf';
    fullFilePath := FileSearch(fileName, Dir_Ser);
    if fullFilePath <> '' then
    begin
      Memo9.Lines.Add(fullFilePath);
      CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
    end
    else
    begin
      Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
    end;
  end;
  if Memo8.Lines.Strings[0] <> '' then
  begin
    Memo8.Lines.SaveToFile('123.txt');
    Str := ExtractFileDir(ParamStr(0)) + '\123.txt';
    ShellExecute(Form1.Handle, nil, PChar(Str), nil, nil, SW_SHOWNORMAL);
  end;
end;

procedure TForm1.N11Click(Sender: TObject);
var
  I, j, x, n, l, C, I_P, X_P, N_P, L_P, C_P, A, A_P: Integer;
  Doc: OleVariant;
  XL1, XL_P, wdDoc, wdRang, b, vstart, vend, Sel: variant;
  Vn_Dat, Dir, Name, Nom, Zav_Nomer, Zakaz, Str: string;
  ZavN1, ZavN2, Res, Kol_Zap, Kol, Kol_P, Kol_Zap_P, Res1, Res2: Integer;
  Buffer: array[0..1000] of string;
  BufferNam: array[0..1000] of string;
  BufferZ: array[0..1000] of string;
  Buffer_P: array[0..1000] of string;
  BufferNam_P: array[0..1000] of string;
  BufferZ_P: array[0..1000] of string;
begin
        //Зав.№: 764697;  Зав.№: 764694..764695;
  Vn_Dat := FormatDateTime('dd.mm.yyyy', NOW);
  Dir := ExtractFileDir(ParamStr(0));
  Nom := ZSG.Cells[0, ZSG.Row];
  Kol := 0;
  x := 0;
  Kol_P := 0;
  X_P := 0;
  for j := 2 to ZSG.RowCount do
  begin
    Res := AnsiCompareStr(Nom, ZSG.Cells[0, j]);
    if Res = 0 then
    begin
      Name := ZSG.Cells[I_FN_KOL_ZAP + 7, j];

      Zakaz := ZSG.Cells[I_FN_ZAK, j];
                        //Zav_Nomer := ZSG.Cells[I_FN_KOL_ZAP + 19, j];
      Res1 := Pos('КПУ', Name);
      Res2 := Pos('КЭД', Name);
      if Res1 <> 0 then
      begin

        Kol_Zap := Kol_Zap + StrToInt(ZSG.Cells[I_FN_KOL_ZAP, j]);
        Kol := StrToInt(ZSG.Cells[I_FN_KOL_ZAP, j]);
        if Kol > 1 then
        begin
          A := 0;
          n := x;
          for l := x to x + Kol - 1 do
          begin
            Buffer[n] := ZSG.Cells[I_FN_ZAK, j];
            BufferNam[n] := ZSG.Cells[I_FN_KOL_ZAP + 7, j];
            if ZSG.Cells[I_FN_KOL_ZAP + 23, j] <> '' then
              ZavN1 := StrToInt(ZSG.Cells[I_FN_KOL_ZAP + 23, j])
            else
              ZavN1 := 0;
            BufferZ[n] := IntToStr(ZavN1 + A);
            Inc(A);
                                                        //ZSG.Cells[I_FN_KOL_ZAP +
                                                                //23, J];
            Inc(n);
          end;
          x := n;
        end
        else
        begin
          Buffer[x] := ZSG.Cells[I_FN_ZAK, j];
          BufferNam[x] := ZSG.Cells[I_FN_KOL_ZAP + 7, j];
          BufferZ[x] := ZSG.Cells[I_FN_KOL_ZAP + 23, j];
          Inc(x);

        end;

      end;
      if Res2 <> 0 then
      begin

        Kol_Zap_P := Kol_Zap_P + StrToInt(ZSG.Cells[I_FN_KOL_ZAP, j]);
        Kol_P := StrToInt(ZSG.Cells[I_FN_KOL_ZAP, j]);
        if Kol_P > 1 then
        begin
          N_P := X_P;
          A_P := 0;
          for L_P := X_P to X_P + Kol_P - 1 do
          begin
            Buffer_P[N_P] := ZSG.Cells[I_FN_ZAK, j];
            BufferNam_P[N_P] := ZSG.Cells[I_FN_KOL_ZAP + 7, j];
                                               // BufferZ_P[n_P] :=ZSG.Cells[I_FN_KOL_ZAP +
                                                //23, J];
            if ZSG.Cells[I_FN_KOL_ZAP + 23, j] <> '' then
              ZavN1 := StrToInt(ZSG.Cells[I_FN_KOL_ZAP + 23, j])
            else
              ZavN1 := 0;
            BufferZ_P[N_P] := IntToStr(ZavN1 + A_P);
            Inc(A_P);
            Inc(N_P);
          end;
          X_P := N_P;
        end
        else
        begin
          Buffer_P[X_P] := ZSG.Cells[I_FN_ZAK, j];
          BufferNam_P[X_P] := ZSG.Cells[I_FN_KOL_ZAP + 7, j];
          BufferZ_P[X_P] := ZSG.Cells[I_FN_KOL_ZAP + 23, j];
          Inc(X_P);

        end;

      end;

    end;
  end;
  if Buffer[0] <> '' then
  begin
    XL1 := CreateOleObject('Excel.Application');
    CopyFile(PWideChar(Dir + '\Заполнения паспорта этикетка КПУ от 15.11.12.xlsx'), PWideChar(Dir + '\Заполнения паспорта этикетка КПУ от 15.11.12(1).xlsx'), False);
    XL1.Workbooks.Open(Dir + '\Заполнения паспорта этикетка КПУ от 15.11.12(1).xlsx');
    XL1.Application.EnableEvents := false;

    for I := 1 to Kol_Zap do
    begin
      XL1.ActiveWorkBook.WorkSheets[23].Cells[I + 3, 2] := Buffer[I - 1];
      XL1.ActiveWorkBook.WorkSheets[23].Cells[I + 3, 3] := BufferNam[I - 1];
      XL1.ActiveWorkBook.WorkSheets[23].Cells[I + 3, 4] := BufferZ[I - 1];
      XL1.ActiveWorkBook.WorkSheets[23].Cells[I + 3, 5] := Vn_Dat;

    end;
    XL1.Visible := True;
    XL1 := Unassigned;
  end;
  if Buffer_P[0] <> '' then
  begin
    XL_P := CreateOleObject('Excel.Application');
    Dir := '\\Mss-dc06\v\ОИТ\Cklapana2';
    CopyFile(PWideChar(Dir + '\Заполнения паспорта этикетка КЭД.xlsx'), PWideChar(Dir + '\Заполнения паспорта этикетка КЭД (1).xlsx'), False);
    XL_P.Workbooks.Open(Dir + '\Заполнения паспорта этикетка КЭД (1).xlsx');
    XL_P.Application.EnableEvents := false;

    for I_P := 1 to Kol_Zap_P do
    begin
      Str := BufferNam_P[I_P - 1];
      Res := Pos('-', Str);
      if Res <> 0 then
        Delete(Str, 1, Res);
      XL_P.ActiveWorkBook.WorkSheets[I_P].Copy(Before := XL_P.ActiveWorkBook.WorkSheets[I_P]);
      XL_P.ActiveWorkBook.WorkSheets[I_P + 1].Cells[14, 4] := Str;
      XL_P.ActiveWorkBook.WorkSheets[I_P + 1].Cells[17, 8] := Buffer_P[I_P - 1];
      XL_P.ActiveWorkBook.WorkSheets[I_P + 1].Cells[19, 10] := BufferZ_P[I_P - 1];
     { XL_P.ActiveWorkBook.WorkSheets[1].Cells[I_P + 3, 2] := Buffer_P[I_P - 1];
      XL_P.ActiveWorkBook.WorkSheets[1].Cells[I_P + 3, 3] := BufferNam_P[I_P - 1];
      XL_P.ActiveWorkBook.WorkSheets[1].Cells[I_P + 3, 4] := BufferZ_P[I_P - 1];
      XL_P.ActiveWorkBook.WorkSheets[1].Cells[I_P + 3, 5] := Vn_Dat;  }
    end;
    XL_P.DisplayAlerts := False;
    XL_P.ActiveWorkBook.WorkSheets[1].Delete;

    XL_P.Visible := True;
    XL_P := Unassigned;
  end;

end;

procedure TForm1.N12Click(Sender: TObject);
var
  Str: string;
  Res: Integer;
begin
  PageControl1.ActivePageIndex := 1;
  Order1 := ' Order By Номер';
  Label2.Caption := StringGrid10.Cells[5, SG6.Row];
  Str := SG6.Cells[I_FN_NOM, SG6.Row];
  Res := Pos(',', Str);
  if Res <> 0 then
  begin
    Delete(Str, Res, 1);
    Insert('+', Str, Res);
  end;
  Res := Pos(',', Str);
  if Res <> 0 then
  begin
    Delete(Str, Res, 1);
    Insert('+', Str, Res);
  end;
  Res := Pos(',', Str);
  if Res <> 0 then
  begin
    Delete(Str, Res, 1);
    Insert('+', Str, Res);
  end;
  Res := Pos(',', Str);
  if Res <> 0 then
  begin
    Delete(Str, Res, 1);
    Insert('+', Str, Res);
  end;
  Res := Pos(',', Str);
  if Res <> 0 then
  begin
    Delete(Str, Res, 1);
    Insert('+', Str, Res);
  end;
  Res := Pos(',', Str);
  if Res <> 0 then
  begin
    Delete(Str, Res, 1);
    Insert('+', Str, Res);
  end;
  Res := Pos(',', Str);
  if Res <> 0 then
  begin
    Delete(Str, Res, 1);
    Insert('+', Str, Res);
  end;
  Res := Pos(',', Str);
  if Res <> 0 then
  begin
    Delete(Str, Res, 1);
    Insert('+', Str, Res);
  end;
  Res := Pos(',', Str);
  if Res <> 0 then
  begin
    Delete(Str, Res, 1);
    Insert('+', Str, Res);
  end;
  Edit4.Text := Str; //SG6.Cells[I_FN_NOMER_RAZ  , SG6.Row];
  Button36.Click;
end;

procedure TForm1.N13Click(Sender: TObject);
var
  Res: Integer;
  S: string;
begin
  Zapusk2 := 1;
  S := SG6.Cells[0, SG6.Row];
  Res := Pos(',', S);
  Delete(S, Res, 500);
  FNewNakl.Label2.Caption := S;

  FNewNakl.ShowModal;
end;

procedure TForm1.N14Click(Sender: TObject);
begin
  PageControl1.ActivePageIndex := 0;
  Order := ' Order By Номер';
  Button16.Click;
  Find_StringGrid(StringGrid10, ZSG.Cells[2, ZSG.Row], 2, ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.Row], 5);
end;

procedure TForm1.N15Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Кол принятых]=' + #39 + '0' + #39 + ',[ОТК]=NULL  WHERE ([' + FN_NAM + ']=' + #39 + ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.Row] + #39 + ') AND (Заказ=' + #39 + ZSG.Cells[I_FN_ZAK, ZSG.Row] + #39 + ') ', ['Klapana']) then
    Exit;
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Кол принятых]=' + #39 + '0' + #39 + ',[ОТК]=NULL WHERE ([' + FN_NOM + ']=' + #39 + ZSG.Cells[0, ZSG.Row] + #39 + ') AND ([' + FN_NAM + ']=' + #39 + ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.Row] + #39 + ') AND (Заказ=' + #39 + ZSG.Cells[I_FN_ZAK, ZSG.Row] + #39 + ') ', ['Запуск']) then
    Exit;
end;

procedure TForm1.N16Click(Sender: TObject);
var
  Str1: string;
begin
  Str1 := StringGrid10.Cells[TmpCol, tmpRow];
  Memo11.Lines.Clear;
  Memo11.Lines.Add(Str1);
  Clipboard.AsText := Memo11.Lines.Strings[0];
end;

procedure TForm1.N17Click(Sender: TObject);
var
  Str1: string;
begin
  Str1 := ZSG.Cells[TmpCol, tmpRow];
  Memo11.Lines.Clear;
  Memo11.Lines.Add(Str1);
  Clipboard.AsText := Memo11.Lines.Strings[0];
end;

procedure TForm1.N18Click(Sender: TObject);
var
  Str1: string;
begin
  Str1 := SG6.Cells[TmpCol, tmpRow];
  Memo11.Lines.Clear;
  Memo11.Lines.Add(Str1);
  Clipboard.AsText := Memo11.Lines.Strings[0];
end;

procedure TForm1.Button11Click(Sender: TObject);
begin
  FPrivod.Fl := 1;
  FPrivod.ShowModal;
end;

procedure TForm1.N20Click(Sender: TObject);
begin
  FPrivod.Fl := 0;
  FPrivod.Caption := ZSG.Cells[0, ZSG.Row];
        //Button20.Click;
  FPrivod.ShowModal;
end;

procedure TForm1.N21Click(Sender: TObject);
var
  kol, Nom: Integer;
begin

  FNewBRAK.Edit1.Text := SG10.Cells[2, SG10.Row]; //Zakaz

  FNewBRAK.Edit2.Text := SG10.Cells[13, SG10.Row]; //BZ

  FNewBRAK.LabGP.Caption := SG10.Cells[21, SG10.Row]; //GP
  FNewBRAK.Labko.Caption := SG10.Cells[22, SG10.Row];
  ; //ko

  FNewBRAK.Edit3.Text := SG10.Cells[12, SG10.Row]; //zavNom

  Nom := StrToInt(SG10.Cells[12, SG10.Row]);
  kol := StrToInt(SG10.Cells[4, SG10.Row]);
  FNewBRAK.Edit4.Text := IntToStr(Nom + kol - 1); //zavNom
  FNewBRAK.LabIndex.Caption := '1';
  FNewBRAK.Caption := SG10.Cells[3, SG10.Row]; //Изделие
  FNewBRAK.Label16.Caption := Regist.Famili;
  FNewBRAK.Doljn := FlagDolg;
    //MessageDlg('Бред!'+#10#13+IntToStr(FlagDolg), mtError, [mbOk], 0);
  FNewBRAK.Plan := FormatDateTime('dd.mm.YYYY', Now);
  FNewBRAK.Nom_G := '0'; // SG10.Cells[0, SG10.Row] ;
  FBRAK.IZD_G := 7;
  FNewBRAK.ShowModal;
end;

procedure TForm1.Button44Click(Sender: TObject);
var
  I, J: Integer;
begin
  if not mkQueryUpdate(Form1.ADOQuery2, 'UPDATE %s SET Х=' + #39 + '1' + #39 + ' WHERE Дата< ' + #39 + '11.11.2014' + #39, ['KlapanaZap']) then
    Exit;
end;

procedure TForm1.SGLDrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
var
  H, Kol, Kol1, Res, x, y, Zag, Sbor, Zap, Zap1, Kol_Dn, Stat, StatF: Integer;
  Str, Str1, S, S1, S2: string;
  Format: Word;
  C: array[0..255] of Char;
  Dat: TDate;
begin
  StatF := 0;
  try
    Rect.Left := Rect.Left - 4;
    if ARow = 0 then
    begin
      H := DrawText(SGL.Canvas.Handle, PChar(SGL.Cells[ACol, ARow]), length(SGL.Cells[ACol, ARow]), Rect, DT_WORDBREAK);
      if H > SGL.RowHeights[ARow] then
      begin
        StringGrid6.RowHeights[ARow] := H;  //увеличиваем
        SGl.RowHeights[ARow] := H;  //увеличиваем
      end;
      SGL.Canvas.Brush.Color := clLtGray;
      SGL.Canvas.FillRect(Rect);
      Inc(Rect.Top, 2);
      Dec(Rect.Bottom, 2);
      Inc(Rect.Left, 2);
      Dec(Rect.Right, 2);
      DrawText(SGL.Canvas.Handle, pChar(SGL.Cells[ACol, ARow]), Length(SGL.Cells[ACol, ARow]), Rect, DT_LEFT or DT_WORDBREAK);
      if Sender = ActiveControl then
        Exit;
      if not (gdSelected in State) then
        Exit;
      with Sender as TStringGrid do
      begin
        Canvas.Brush.Color := clYellow;
        Canvas.Font.Color := Font.Color;
        Canvas.TextRect(Rect, Rect.Left + 2, Rect.Top + 2, Cells[ACol, ARow]);
      end;
    end;
    if ARow <> 0 then
    begin
                        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  + (Rect.Width()   Rect.Height()
                        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      if SGL.Cells[I_FN_KOL, ARow] = '' then
        Kol := 0
      else
        Kol := StrToInt(SGL.Cells[I_FN_KOL, ARow]);
      if SGL.Cells[I_FN_KOL_ZAP, ARow] = '' then
        Kol1 := 0
      else
        Kol1 := StrToInt(SGL.Cells[I_FN_KOL_ZAP, ARow]);
      Str := StringGrid6.Cells[I_FN_ZAG, ARow];
      Res := Pos('/', Str);
      if Res <> 0 then
      begin
        Zag := StrToInt(Copy(Str, Res + 1, 4));
        Zap := StrToInt(Copy(Str, 1, Res - 1));
      end;

      if (Kol1 <> 0) then
      begin
        SGL.canvas.brush.Color := RGB(247, 247, 26);
                                //Желтый (Запущены не все)
        SGL.Canvas.FillRect(Rect);
        SGL.Canvas.TextOut(Rect.Left, Rect.Top, SGL.Cells[ACol, ARow]);
      end;
      if (Kol1 = 0) then
      begin
        SGL.canvas.brush.Color := RGB(255, 255, 255);
                                //Белый
        SGL.Canvas.FillRect(Rect);
        SGL.Canvas.TextOut(Rect.Left, Rect.Top, SGL.Cells[ACol, ARow]);
      end;
      if (Zag < Zap) or (Zag = Zap) and (Zag <> 0) then
                                //Салатовый (Запущены все)
      begin
        SGL.canvas.brush.Color := RGB(183, 251, 132);
        SGL.Canvas.Font.Color := clBlack;
        SGL.Canvas.FillRect(Rect);
        SGL.Canvas.TextOut(Rect.Left, Rect.Top, SGL.Cells[ACol, ARow]);

      end;
      Str := StringGrid6.Cells[I_FN_SBOR_GOT, ARow];
      Res := Pos('/', Str);
      if Res <> 0 then
      begin
        Sbor := StrToInt(Copy(Str, Res + 1, 4));
        Zap1 := StrToInt(Copy(Str, 1, Res - 1));
      end;

      if (Zap1 <> 0) and ((Sbor = 0)) then
                                //Ярко зеленый Сборка готова
      begin
        SGL.canvas.brush.Color := RGB(0, 255, 0);
        SGL.Canvas.Font.Color := clBlack;
        SGL.Canvas.FillRect(Rect);
        SGL.Canvas.TextOut(Rect.Left, Rect.Top, SGL.Cells[ACol, ARow]);
      end;
      if StringGrid6.Cells[I_FN_DAT_OTGRUZ, ARow] <> '' then
                                //Отгрузка
      begin
        SGL.canvas.brush.Color := RGB(100, 149, 237);
        SGL.Canvas.Font.Color := clBlack;
        SGL.Canvas.FillRect(Rect);
        SGL.Canvas.TextOut(Rect.Left, Rect.Top, SGL.Cells[ACol, ARow]);
      end;

      if (StringGrid6.Cells[I_FN_PR_OTK, ARow] <> '') and (Zap1 <> 0) and (Sbor = 0) then //Темно зеленый
      begin
        SGL.canvas.brush.Color := RGB(0, 100, 0);
        SGL.Canvas.Font.Color := clBlack;
        SGL.Canvas.FillRect(Rect);
        SGL.Canvas.TextOut(Rect.Left, Rect.Top, SGL.Cells[ACol, ARow]);
      end;
      if (StringGrid6.Cells[I_FN_PR_OTK, ARow] <> '') and (Zap1 > Sbor) and (Sbor <> 0) and (ACol = I_FN_PR_OTK - 14) then
                                //Темно зеленый
      begin
        SGL.canvas.brush.Color := RGB(0, 100, 0);
        SGL.Canvas.Font.Color := clBlack;
        SGL.Canvas.FillRect(Rect);
        SGL.Canvas.TextOut(Rect.Left, Rect.Top, SGL.Cells[ACol, ARow]);
      end;

                       //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      if (SGL.Cells[I_FN_ZAKAZCHIK, ARow] <> '') and (SGL.Cells[I_FN_SGP, ARow] <> '') and (ACol = I_FN_NAM) then
                //Новый клапан   Фиолетовый
      begin

        SGL.Canvas.brush.Color := RGB(155, 5, 171);
        SGL.Canvas.FillRect(Rect);
        SGL.Canvas.TextOut(Rect.Left, Rect.Top, SGL.Cells[ACol, ARow]);
      end;
      if StringGrid6.Cells[I_FN_OTMENA, ARow] <> '' then
      begin
        SGL.canvas.brush.Color := RGB(128, 128, 128); //Серый
                        //Закрашиваем бэкграунд
        SGL.Canvas.Font.Color := clBlack;
        SGL.Canvas.FillRect(Rect);
        SGL.Canvas.TextOut(Rect.Left, Rect.Top, SGL.Cells[ACol, ARow]);
      end;
      if StringGrid6.Cells[24, ARow] <> '' then
        Stat := StrToInt(StringGrid6.Cells[24, ARow]);

      if Stat = 1 then
      begin
                        //StringGrid10.canvas.brush.Color := RGB(128, 128, 128);
                        //Серый
        SGL.Canvas.Font.Style := [fsBold];
        SGL.Canvas.FillRect(Rect);
        SGL.Canvas.TextOut(Rect.Left, Rect.Top, SGL.Cells[ACol, ARow]);
      end;
      if SGL.Cells[I_FN_SGP + 10, ARow] <> '' then
        StatF := StrToInt(SGL.Cells[I_FN_SGP + 10, ARow]);
      if (StatF = 1) then
      begin
        SGL.Canvas.Font.Style := [fsItalic] + [fsBold];
        SGL.Canvas.FillRect(Rect);
        SGL.Canvas.TextOut(Rect.Left, Rect.Top, SGL.Cells[ACol, ARow]);
      end;
      if (StatF = 2) and (ACol = 5) then
      begin
        SGL.Canvas.Font.Style := [fsItalic] + [fsBold];
        SGL.Canvas.brush.Color := RGB(64, 249, 254);
        SGL.Canvas.FillRect(Rect);
        SGL.Canvas.TextOut(Rect.Left, Rect.Top, SGL.Cells[ACol, ARow]);
      end;
    end;
    if (gdSelected in State) then
    begin
      SGL.Canvas.Brush.Color := clBlack;
      SGL.Canvas.Font.Color := clWhite;
      SGL.Canvas.FillRect(Rect);
      SGL.Canvas.TextOut(Rect.Left, Rect.Top, SGL.Cells[ACol, ARow]);
    end;
    with Sender as TStringGrid do
    begin
      Canvas.Pen.Color := clBlue;

      Canvas.MoveTo(0, Rect.Top);
      Canvas.LineTo(Rect.Right, Rect.Top);

      if ARow = RowCount - 1 then
      begin
        Canvas.MoveTo(0, Rect.Bottom);
        Canvas.LineTo(Rect.Right, Rect.Bottom);
      end;

      Canvas.MoveTo(Rect.Right, Rect.Top);
      Canvas.LineTo(Rect.Right, Rect.Bottom);

      if ACol = 0 then
      begin
        Canvas.MoveTo(Rect.Left, Rect.Top);
        Canvas.LineTo(Rect.Left, Rect.Bottom);
      end;
    end;
  except
    MessageDlg('Не удалось подключиться к базе данных11!', mtError, [mbOk], 0);
  end;
end;

procedure TForm1.StringGrid6DrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
var
  H, Kol, Kol1, Res, x, y, Zag, Sbor, Zap, Zap1, Kol_Dn, Cel: Integer;
  Str, Str1, S, S1, S2: string;
  Format: Word;
  C: array[0..255] of Char;
  Dat: TDate;
begin
  try
    if (ARow = 0) then
    begin
      Rect.Left := Rect.Left - 4;
      H := DrawText(StringGrid6.Canvas.Handle, PChar(StringGrid6.Cells[ACol, ARow]), length(StringGrid6.Cells[ACol, ARow]), Rect, DT_WORDBREAK);
      if H > StringGrid6.RowHeights[ARow] then
      begin
        StringGrid6.RowHeights[ARow] := H;  //увеличиваем
        SGl.RowHeights[ARow] := H;  //увеличиваем
      end;
      StringGrid6.Canvas.Brush.Color := clLtGray;
      StringGrid6.Canvas.FillRect(Rect);

      DrawText(StringGrid6.Canvas.Handle, pChar(StringGrid6.Cells[ACol, ARow]), Length(StringGrid6.Cells[ACol, ARow]), Rect, DT_LEFT or DT_WORDBREAK);
      if Sender = ActiveControl then
        Exit;
      if not (gdSelected in State) then
        Exit;
      with Sender as TStringGrid do
      begin
        Canvas.Brush.Color := clYellow;
        Canvas.Font.Color := Font.Color;
        Canvas.TextRect(Rect, Rect.Left, Rect.Top, Cells[ACol, ARow]);
      end;
    end;
    if ARow <> 0 then
    begin

      Rect.Left := Rect.Left - 4;
                        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  + (Rect.Width()   Rect.Height()
      Cel := StringGrid6.Col;
                        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      if SGL.Cells[I_FN_KOL, ARow] = '' then
        Kol := 0
      else
        Kol := StrToInt(SGL.Cells[I_FN_KOL, ARow]);
      if SGL.Cells[I_FN_KOL_ZAP, ARow] = '' then
        Kol1 := 0
      else
        Kol1 := StrToInt(SGL.Cells[I_FN_KOL_ZAP, ARow]);
      Str := StringGrid6.Cells[I_FN_ZAG, ARow];
      Res := Pos('/', Str);
      if Res <> 0 then
      begin
        Zag := StrToInt(Copy(Str, Res + 1, 4));
        Zap := StrToInt(Copy(Str, 1, Res - 1));
      end;

      if (Kol1 <> 0) then
      begin
        StringGrid6.canvas.brush.Color := RGB(247, 247, 26);
                                //Желтый (Запущены не все)
        StringGrid6.Canvas.FillRect(Rect);
        StringGrid6.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid6.Cells[ACol, ARow]);
      end;
      if (Kol1 = 0) then
      begin
        StringGrid6.canvas.brush.Color := RGB(255, 255, 255);
                                //Белый
        StringGrid6.Canvas.FillRect(Rect);
        StringGrid6.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid6.Cells[ACol, ARow]);
      end;
      if (Zag < Zap) or (Zag = Zap) and (Zag <> 0) then
                                //Салатовый (Запущены все)
      begin
        StringGrid6.canvas.brush.Color := RGB(183, 251, 132);
        StringGrid6.Canvas.Font.Color := clBlack;
        StringGrid6.Canvas.FillRect(Rect);
        StringGrid6.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid6.Cells[ACol, ARow]);

      end;
      Str := StringGrid6.Cells[I_FN_SBOR, ARow];
      Res := Pos('/', Str);
      if Res <> 0 then
      begin
        Sbor := StrToInt(Copy(Str, Res + 1, 4));
        Zap1 := StrToInt(Copy(Str, 1, Res - 1));
      end;

      if (Zap1 <> 0) and ((Sbor = 0)) then
                                //Ярко зеленый Сборка готова
      begin
        StringGrid6.canvas.brush.Color := RGB(0, 255, 0);
        StringGrid6.Canvas.Font.Color := clBlack;
        StringGrid6.Canvas.FillRect(Rect);
        StringGrid6.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid6.Cells[ACol, ARow]);
      end;
      if StringGrid6.Cells[I_FN_DAT_OTGRUZ, ARow] <> '' then
                                //Отгрузка
      begin
        StringGrid6.canvas.brush.Color := RGB(100, 149, 237);
        StringGrid6.Canvas.Font.Color := clBlack;
        StringGrid6.Canvas.FillRect(Rect);
        StringGrid6.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid6.Cells[ACol, ARow]);
      end;

      if (StringGrid6.Cells[I_FN_PR_OTK, ARow] <> '') and (Zap1 <> 0) and (Sbor = 0) then //Темно зеленый
      begin
        StringGrid6.canvas.brush.Color := RGB(0, 100, 0);
        StringGrid6.Canvas.Font.Color := clBlack;
        StringGrid6.Canvas.FillRect(Rect);
        StringGrid6.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid6.Cells[ACol, ARow]);
      end;
      if (StringGrid6.Cells[I_FN_PR_OTK, ARow] <> '') and (Zap1 > Sbor) and (Sbor <> 0) and (ACol = I_FN_PR_OTK - 14) then
                                //Темно зеленый
      begin
        StringGrid6.canvas.brush.Color := RGB(0, 100, 0);
        StringGrid6.Canvas.Font.Color := clBlack;
        StringGrid6.Canvas.FillRect(Rect);
        StringGrid6.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid6.Cells[ACol, ARow]);
      end;

      if StringGrid6.Cells[I_FN_OTMENA, ARow] <> '' then
      begin
        StringGrid6.canvas.brush.Color := RGB(128, 128, 128); //Серый
                                //Закрашиваем бэкграунд
        StringGrid6.Canvas.Font.Color := clBlack;
        StringGrid6.Canvas.FillRect(Rect);
        StringGrid6.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid6.Cells[ACol, ARow]);
      end;
      //BZ
      Res := Pos('rue', SGL.Cells[I_FN_SGP + 9, ARow]);
      if (Res <> 0) AND (ACol=I_FN_TEHNOLOG) then
      begin
      StringGrid6.Canvas.Font.Style := [fsItalic] + [fsBold];
      StringGrid6.Canvas.brush.Color := RGB(64, 249, 254);
      StringGrid6.Canvas.FillRect(Rect);
      StringGrid6.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid6.Cells[ACol, ARow]);
      end;
            //BLF
      Res := Pos('rue', SGL.Cells[I_FN_SGP + 11, ARow]);
      if (Res <> 0) AND (ACol=I_FN_TEHNOLOG+1) then
      begin
      StringGrid6.Canvas.Font.Style := [fsItalic] + [fsBold];
      StringGrid6.Canvas.brush.Color := RGB(26, 177, 212);
      StringGrid6.Canvas.FillRect(Rect);
      StringGrid6.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid6.Cells[ACol, ARow]);
      end;
    end;

    if (gdSelected in State) then
    begin
      StringGrid6.Canvas.Brush.Color := clBlack;
      StringGrid6.Canvas.Font.Color := clWhite;
      StringGrid6.Canvas.FillRect(Rect);
      StringGrid6.Canvas.TextOut(Rect.Left, Rect.Top, StringGrid6.Cells[ACol, ARow]);
    end;
    with Sender as TStringGrid do
    begin
      Canvas.Pen.Color := clBlue;

      Canvas.MoveTo(0, Rect.Top);
      Canvas.LineTo(Rect.Right, Rect.Top);

      if ARow = RowCount - 1 then
      begin
        Canvas.MoveTo(0, Rect.Bottom);
        Canvas.LineTo(Rect.Right, Rect.Bottom);
      end;

      Canvas.MoveTo(Rect.Right, Rect.Top);
      Canvas.LineTo(Rect.Right, Rect.Bottom);

      if ACol = 0 then
      begin
        Canvas.MoveTo(Rect.Left, Rect.Top);
        Canvas.LineTo(Rect.Left, Rect.Bottom);
      end;
    end;
  except
    MessageDlg('Не удалось подключиться к базе данных12!', mtError, [mbOk], 0);
  end;
end;

procedure TForm1.SGLDblClick(Sender: TObject);
var
  Nom_pos, S, Nomer_Raz, Kol_Raz, God, Mes, Zakaz, Dat_s: string;
  kol_zap, kol, kol1, A, B, D, y, F_KPU, F_KPD, Kol_Dn, Pos1: Integer;
  XL, XL1, XL2: Variant;
  Dat: TDate;
begin
  if (Sgl.Col = I_FN_NAM) then
  begin
    FSpec.Caption := Sgl.Cells[I_FN_NAM, SGL.Row];
    FSpec.Label1.Caption := Sgl.Cells[I_FN_SGP + 2, Sgl.Row]; //IDGP
    FSpec.Lbl1.Caption := Sgl.Cells[I_FN_SGP + 8, Sgl.Row]; //IDKO
    Pos1 := AnsiCompareStr('0', Sgl.Cells[I_FN_SGP + 2, Sgl.Row]);
    FSpec.Label2.Caption := '1';
    if Pos1 <> 0 then
      FSpec.ShowModal;
  end;
  Vozduh := 0;
  if (SGL.Col = I_FN_PLAN_DATA) then
  begin
    Dat_s := (SGL.Cells[I_FN_PLAN_DATA, SGL.Row]);

    Dat := StrToDate(Dat_s);
    Kol_Dn := (Trunc(Now) - Trunc(Dat));
    Kol_Dn := (Trunc(Now) - Trunc(Dat));
  end;
        //------------------------------------------------------------------
  kol := StrToInt(SGL.Cells[I_FN_KOL, SGL.Row]);
  S := SGL.Cells[I_FN_KOL_ZAP, SGL.Row];
  if S = '' then
    S := '0';
  kol_zap := StrToInt(S);
        //------------------------------------------------------------------
  if ((SGL.Col = I_FN_A) or (SGL.Col = I_FN_B)) and ((Regist.Doljnost = 1) or (Regist.Doljnost = 2) or (Regist.Doljnost = 3)) then
                {Nam := FNomer.Caption;
        Zak := Label2.Caption;
        BZ := Label7.Caption;
        IDGP:=Label8.Caption;
        IDKO:=Label9.Caption;}
  begin
    FNomer.Label8.Caption := Sgl.Cells[I_FN_SGP + 2, Sgl.Row]; //IDGP
    FNomer.Label9.Caption := Sgl.Cells[I_FN_SGP + 8, Sgl.Row]; // IDKO
    FNomer.Label7.Caption := StringGrid6.Cells[23, Sgl.Row]; //BZ
    FNomer.Caption := SGL.Cells[I_FN_NAM, SGL.Row];
    FNomer.Label2.Caption := SGL.Cells[I_FN_ZAK, SGL.Row];
    FNomer.Label3.Caption := SGL.Cells[SGL.Col, 0];

    FNomer.DateTimePicker1.Visible := False;
    FNomer.Label6.Visible := False;

    FNomer.ComboBox1.Visible := False;
    FNomer.ComboBox2.Visible := False;
    FNomer.Show;
  end;
        //------------------------------------------------------------------
  if (SGL.Col = I_FN_MOD_PRIVOD) and ((Regist.Doljnost = 1) or (Regist.Doljnost = 2) or (Regist.Doljnost = 3)) then
  begin
    FNomer.Label8.Caption := Sgl.Cells[I_FN_SGP + 2, Sgl.Row]; //IDGP
    FNomer.Label9.Caption := Sgl.Cells[I_FN_SGP + 8, Sgl.Row]; // IDKO
    FNomer.Label7.Caption := StringGrid6.Cells[23, Sgl.Row]; //BZ
    FNomer.Caption := SGL.Cells[I_FN_NAM, SGL.Row];
    FNomer.Label2.Caption := SGL.Cells[I_FN_ZAK, SGL.Row];
    FNomer.Label3.Caption := FN_MOD_PRIVOD;
    FNomer.DateTimePicker1.Visible := False;
    FNomer.Label6.Visible := True;
    FNomer.Edit1.Visible := False;
    FNomer.ComboBox1.Visible := True;
    FNomer.ComboBox2.Visible := True;
    FNomer.Label4.Caption := IntToStr(SGL.Row);
    FNomer.Label5.Caption := IntToStr(SGL.Col);
    FNomer.Show;
  end;
  FNomer.Edit1.Text := SGL.Cells[SGL.Col, SGL.Row];
end;

procedure TForm1.Button46Click(Sender: TObject);
var
  God, Mes, I, Y, Kol, Kol_Zap, Kol_Kl, A, B, Kol_Vert, Kol_Gor, Kol_G, Kol_V, Res, Fl, X1, Res_, Kol_Otk, ne_pusto: Integer;
  Zag, Zap, OTK, Sbor, Betwe, Bet1, Dat,
  Dat1, Sql_Str, X, Sb_s, Sv_s, StrDat1, StrDat2, Izdel, Pos1, Pos2,
  Pos3, Pos4, Pos5, Sbor1, Str_e4, Str1, Str2, Str3, Prim_S,
  GP,KO,SB_T,SB_L,SB_R,Raskl: string;
  SB, SV, SB_O, SV_O: Double;
begin
  StrDat2 := FormatDateTime('mm.dd.YYYY', Now);
  Clear_StringGrid(ZCV);
  Clear_StringGrid(SG3);
  Kol_Vert := 0;
  ZCV.ColCount := 47;
  ZCV.Cells[0, 0] := '№';
  ZCV.Cells[1, 0] := FN_DAT;
  ZCV.Cells[2, 0] := FN_ZAK;
  ZCV.Cells[3, 0] := 'БЗ';
  ZCV.Cells[4, 0] := 'Кол во';
  ZCV.ColWidths[4] := 0;
  ZCV.Cells[5, 0] := FN_KOL_ZAP;
  ZCV.MergeCells.AddRectXY(6, 0, 8, 0);
  ZCV.Cells[6, 0] := 'Заготовка';
  ZCV.Cells[6, 1] := 'Запуск';
  ZCV.Cells[7, 1] := 'Готовность';
  ZCV.Cells[8, 1] := 'Планирование';
  ZCV.MergeCells.AddRectXY(9, 0, 11, 0);
  ZCV.Cells[9, 0] := 'Сборка';
  ZCV.Cells[9, 1] := 'Запуск';
  ZCV.Cells[10, 1] := 'Готовность';
  ZCV.Cells[11, 1] := 'Примечание';
  ZCV.Cells[12, 1] := FN_NAM;
  ZCV.MergeCells.AddRectXY(13, 0, 15, 0);
  ZCV.Cells[13, 0] := FN_PR_OTK;
  ZCV.Cells[13, 1] := FN_PR_OTK;
  ZCV.Cells[14, 1] := FN_KOL_OTK;
  ZCV.Cells[15, 1] := FN_PR_OTK_PRIM;
  ZCV.Cells[16, 1] := FN_DAT_OTGRUZ;
  ZCV.Cells[17, 1] := 'Сборщик';
        {ZCV.Cells[18, 1] := 'X';
        ZCV.ColWidths[18] := 0; }
  ZCV.Cells[18, 1] := 'id';
  ZCV.ColWidths[18] := 0;
  ZCV.Cells[19, 1] := 'Отмена';
  ZCV.ColWidths[19] := 0;
  ZCV.Cells[20, 1] := 'план Дата';
  ZCV.Cells[21, 1] := 'Сварка';
  ZCV.Cells[22, 1] := 'Сборка';
  ZCV.Cells[23, 1] := 'ОТКФам';
  ZCV.Cells[24, 1] := 'МодПривода';
  ZCV.Cells[25, 1] := 'Расчетная дата готовности';
  ZCV.Cells[26, 1] := 'Заказчик';
  ZCV.Cells[27, 1] := 'НачНомер';
  ZCV.Cells[28, 1] := 'КонНомер'; //Заводск номер
  ZCV.ColWidths[27] := 40;
  ZCV.ColWidths[28] := 40;
  ZCV.Cells[29, 1] := 'Подсборка';
  ZCV.Cells[30, 1] := 'IdГП';
  ZCV.ColWidths[30] := 0;
  ZCV.Cells[31, 1] := 'IdКО';
  ZCV.ColWidths[31] := 0;
  ZCV.Cells[32, 1] := 'A';
  ZCV.ColWidths[32] := 0;
  ZCV.Cells[33, 1] := 'B';
  ZCV.ColWidths[33] := 0;
  ZCV.Cells[34, 1] := 'ФлагЗаготовки';
  ZCV.ColWidths[34] := 0;
  ZCV.Cells[35, 1] := 'Cvet';
  ZCV.ColWidths[35] := 0;
  ZCV.Cells[36, 1] := 'Срочно';
  ZCV.Cells[37, 1] := 'Расключение';
  ZCV.Cells[38, 1] := 'Сборка лопаток';
  ZCV.Cells[39, 1] := 'Сборка тяг';
  ZCV.Cells[40, 1] := 'СборкаРеш';
  ZCV.Cells[41, 1] := 'Обварка';
  ZCV.Cells[42, 1] := 'Электро';

  ZCV.Cells[43, 1] := 'СборЛопатка';
  ZCV.Cells[44, 1] := 'СборТяга';
  ZCV.Cells[45, 1] := 'Подсборка1';

          //Naimen:= '';
  Sbor1 := '';
  if Edit13.Text <> '' then
    Str_e4 := Edit13.Text;
  if Edit13.Text <> '' then
  begin

    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := ' (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    if X1 = 1 then
      Str1 := Str1 + ' OR (Номер=' + #39 + Str_e4 + #39 + ')'
    else
      Str1 := ' (Номер=' + #39 + Str_e4 + #39 + ')';
    Res_ := Pos('-', Str_e4);
    if Res_ <> 0 then
    begin
      Str2 := Copy(Str_e4, 1, Res_ - 1);
      Delete(Str_e4, 1, Res_);
      Str3 := Str_e4;
      Sbor1 := ' WHERE  ((Номер>=' + #39 + Str2 + #39 + ') AND (Номер<=' + #39 + Str3 + #39 + ')) ';
    end
    else
    begin
      Sbor1 := ' WHERE (' + Str1 + ') ';
    end;
  end;
        //+++++++++++++++++++++++++++++Заказ
  if (Edit12.Text <> '') and (ComboBox23.Text = '') then
  begin
    Sbor1 := ' WHERE  ((Заказ=' + #39 + Edit12.Text + #39 + ')) ';
  end;

  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker4.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker5.Date);
  if Order3 = '' then
    Order3 := ' Order By Номер DESC';

 // if (Edit9.Text = '') and (Edit12.Text = '') and (Edit13.Text = '') then
  begin
    Sbor1 := '';
    if ComboBox23.ItemIndex = 3 then
    begin                                                                        //   AND ([Сборка Готовность] IS NULL)
      X := ' WHERE ' + Sbor1 + ' (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL) ';
      Bet1 := '  AND ([' + ComboBox23.Text + ']  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';

    end;
    if ComboBox23.ItemIndex = 7 then //Упаковка
    begin                                                                         // AND (Брик_нед1 IS NULL)  AND ([Сборка Готовность] IS NULL)
      X := ' WHERE ' + Sbor1 + ' (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL) AND (БЗ =' + #39 + '' + #39 + ')  AND (Упаковка IS NULL)';
      Bet1 := '  AND ([ОТК]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';

    end;
    if ComboBox23.ItemIndex = 8 then //Дата Задания
    begin                                                                         //  AND ([Сборка Готовность] IS NULL)
      X := ' WHERE ' + Sbor1 + ' (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL) ';
      Bet1 := '  AND ([Дата]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';

    end;
    if (ComboBox23.Text <> '') and (ComboBox23.ItemIndex <> 3) and (ComboBox23.ItemIndex <> 7) and (ComboBox23.ItemIndex <> 8) then
    begin
      X := ' WHERE' + Sbor1 + '  (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL) ';
      Bet1 := ' AND ([' + ComboBox23.Text + ']  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';

    end;
    if (ComboBox23.Text = '') then //((((((((((((((((((((((((((((((
      X := ' WHERE' + Sbor1 + '  (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL)  ';
    if ((ComboBox21.ItemIndex = 0) or (ComboBox21.ItemIndex = -1) or (ComboBox21.Text = '')) and (ComboBox20.ItemIndex <> 0) and (ComboBox20.ItemIndex <> -1) and (ComboBox20.Text <> '') then
    begin
      God := StrToInt(ComboBox20.Items[ComboBox20.ItemIndex]);
      Dat := '12.31.' + IntToStr(God - 1);
      Dat1 := '12.31.' + IntToStr(God);
      Betwe := ' AND ((Дата >=' + #39 + Dat + #39 + ') AND (Дата<' + #39 + Dat1 + #39 + ')) ';
    end;
    if (ComboBox20.ItemIndex <> 0) and (ComboBox20.ItemIndex <> -1) and (ComboBox20.Text <> '') and (ComboBox21.ItemIndex <> 0) and (ComboBox21.ItemIndex <> -1) and (ComboBox21.Text <> '') then
    begin
      God := StrToInt(ComboBox20.Items[ComboBox20.ItemIndex]);
      Mes := ComboBox21.ItemIndex;
      Dat := IntToStr(Mes) + '.01' + '.' + IntToStr(God);
      if Mes = 12 then
        Dat1 := '01.01.' + IntToStr(God + 1)
      else
      begin
        if (Mes + 1) < 10 then
          Dat1 := '0' + IntToStr(Mes + 1) + '.01.' + IntToStr(God)
        else
          Dat1 := IntToStr(Mes + 1) + '.01.' + IntToStr(God);
      end;
      Betwe := ' AND ((Дата >=' + #39 + Dat + #39 + ') AND (Дата<' + #39 + Dat1 + #39 + ')) ';
    end;

    Res := Pos('Пусто', ComboBox19.Text);
    ne_pusto := Pos('Не пусто', ComboBox19.Text);
    if (ComboBox19.ItemIndex <> -1) and (ComboBox19.ItemIndex <> 0) and (Res = 0) and (ne_pusto = 0) then
    begin
      Sql_Str := Sql_Str + ' AND (Сборщик=' + #39 + ComboBox19.Text + #39 + ') ';
    end;

    if (Res <> 0) then
      Sql_Str := Sql_Str + ' AND ((Сборщик IS NULL) OR (Сборщик=' + #39 + #39 + '))';
    if (ne_pusto <> 0) then
      Sql_Str := Sql_Str + ' AND ((Not Сборщик IS NULL) AND (Сборщик<>' + #39 + #39 + '))';
    if (ComboBox19.Text = '') then
      Sql_Str := '';
    StrDat2 := FormatDateTime('mm.dd.YYYY', Now);
    if (ComboBox18.ItemIndex <> -1) and (ComboBox18.ItemIndex <> 0) then
    begin
      case ComboBox18.ItemIndex of // AND ([Х] IS NULL)
        1:
          Sql_Str := Sql_Str + ' AND ([Заготовка Готовность] IS NULL) AND (Not [Заготовка Запуск] IS NULL) AND (Отмена IS NULL)  ';
        2:
          Sql_Str := Sql_Str + ' AND (Not [Заготовка Готовность] IS NULL) AND( [Сборка Запуск] IS NULL) AND (Отмена IS NULL)  ';
        3:
          Sql_Str := Sql_Str + ' AND (Not [Сборка Запуск] IS NULL) AND( [Сборка Готовность] IS NULL)  ';
        4:                                                                  // ([' + FN_KOL_OTK + ']=0)
          Sql_Str := Sql_Str + ' AND (Not [Сборка Готовность] IS NULL) AND  ([Кол принятых]<[Кол во запущенных]) AND (Отмена IS NULL)  ';
        5:
          Sql_Str := Sql_Str + ' AND ([' + FN_KOL_OTK + ']=[' + FN_KOL_ZAP + ']) AND (Отмена IS NULL) ';
        6:
          Sql_Str := Sql_Str + ' AND ([' + FN_KOL_OTK + ']<[' + FN_KOL_ZAP + ']) AND ([' + FN_KOL_OTK + ']<>0) AND (Отмена IS NULL)  ';
        7:
          Sql_Str := Sql_Str + ' AND (NOT [' + 'Упаковка' + '] IS NULL) AND (Отмена IS NULL)  ';
        8:
          Sql_Str := Sql_Str + ' AND (Not [Отмена] IS NULL)  ';
        9:
          Sql_Str := Sql_Str + ' AND ([Заготовка Запуск] IS NULL) AND (Отмена IS NULL) ';
        10:
          Sql_Str := Sql_Str + ' AND (([Сборка Готовность] IS NULL) OR ([' + FN_KOL_OTK + ']<[' + FN_KOL_ZAP + ']) AND ([' + FN_KOL_OTK + ']<>0)) AND (Отмена IS NULL)  ';
        11:
          Sql_Str := Sql_Str + ' AND ((([ОТК] IS NULL) OR ([' + FN_KOL_OTK + ']<[' + FN_KOL_ZAP + '])) AND ([План Дата]<' + #39 + StrDat2 + #39 + ')) AND (Отмена IS NULL)  ';
        12:
          Sql_Str := Sql_Str + ' AND (ФлагЗаготовки=' + #39 + 'False' + #39 + ') AND (Отмена IS NULL)  ';
        13:
          Sql_Str := Sql_Str + ' AND (Упаковка IS NULL) AND (Not [ОТК] is null)  AND (Отмена IS NULL) AND (БЗ =' + #39 + '' + #39 + ')  ';
      end;
    end;
  end;

  if (ComboBox23.ItemIndex = 7) and (Edit12.Text = '') then //НЕ Упаковка
  begin                                                                         // AND (Брик_нед1 IS NULL)  AND ([Сборка Готовность] IS NULL)
    X := ' WHERE ' + Sbor1 + ' (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL) AND (БЗ =' + #39 + '' + #39 + ')  AND (Упаковка IS NULL)';
    Bet1 := '  AND ([ОТК]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';
    Sql_Str := '';
  end;
  if (ComboBox23.ItemIndex = 7) and (Edit12.Text <> '') then //НЕ Упаковка
  begin                                                                         // AND (Брик_нед1 IS NULL)  AND ([Сборка Готовность] IS NULL)
    X := ' WHERE ' + Sbor1 + ' (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL) AND (Заказ =' + #39 + Edit12.Text + #39 + ') AND (БЗ =' + #39 + '' + #39 + ')  AND (Упаковка IS NULL)';
    Bet1 := '  AND ([ОТК]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';
    Sql_Str := '';
  end;

  if ComboBox23.ItemIndex = 9 then //Упаковка
  begin                                                                         // AND (Брик_нед1 IS NULL)  AND ([Сборка Готовность] IS NULL)
    X := ' WHERE ' + Sbor1 + ' (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL) AND (БЗ =' + #39 + '' + #39 + ')  AND (not Упаковка IS NULL)';
    Bet1 := '  AND ([Упаковка]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';
    Sql_Str := '';
  end;

  Str1 := 'Select * from %s  ' + Sbor1 + X + Sql_Str + Betwe + Bet1 + Order3;
  if Flag_Poisk = 0 then
  begin
    if not mkQuerySelect(ADOQuery2, Str1, ['ЗапускВозд']) then
      exit;
  end;
        //+++++++++++++++++++++++++++++БЗ

  if Flag_Poisk = 1 then
  begin
    if not mkQuerySelect(ADOQuery2, 'Select * from %s  WHERE %s', ['ЗапускВозд', Str_SQL_Poisk]) then
      exit;
  end;
 { if Edit9.Text <> '' then
  begin
    ADOQuery2.Close;
    ADOQuery2.SQL.Clear;
    Str1 := 'Select * from ЗапускВозд  WHERE  ((БЗ LIKE ' + #39 + Edit9.Text + '%' + #39 + ')) ';
    ADOQuery2.SQL.Text := Str1;
    ADOQuery2.Active := True;
             // Exit;
  end; }

  StatusBar1.Panels[2].Text := IntToStr(ADOQuery2.RecordCount);
  Y := 2;
  ZCV.RowCount := ADOQuery2.RecordCount + 2;
  SG3.RowCount := ADOQuery2.RecordCount + 2;
  StatusBar1.Panels[2].Text := IntToStr(ADOQuery2.RecordCount);
  for I := 2 to ADOQuery2.RecordCount + 1 do
  begin
    ZCV.Cells[0, I] := ADOQuery2.FieldByName(FN_Nom).AsString;
    ZCV.Cells[1, I] := ADOQuery2.FieldByName(FN_DAT).AsString;
    ZCV.Cells[2, I] := ADOQuery2.FieldByName(FN_ZAK).AsString;
    ZCV.Cells[3, I] := ADOQuery2.FieldByName('БЗ').AsString;
                //ZSG.Cells[I_FN_NAM,I] :=ADOQuery2.FieldByName(FN_NAM).AsString;
    ZCV.Cells[4, I] := ADOQuery2.FieldByName(FN_KOL).AsString;
    ZCV.Cells[5, I] := ADOQuery2.FieldByName(FN_KOL_ZAP).AsString;
    ZCV.Cells[6, I] := ADOQuery2.FieldByName('Заготовка Запуск').AsString;
    ZCV.Cells[7, I] := ADOQuery2.FieldByName('Заготовка Готовность').AsString;
    Zag := Prim(ADOQuery2.FieldByName('Планирование').AsString);
    ZCV.Cells[8, I] := Zag;

    ZCV.Cells[9, I] := ADOQuery2.FieldByName('Сборка Запуск').AsString;
    ZCV.Cells[10, I] := ADOQuery2.FieldByName('Сборка Готовность').AsString;
    Zap := Prim(ADOQuery2.FieldByName('Сборка Примечание').AsString);
    ZCV.Cells[11, I] := Zap;

    ZCV.Cells[12, I] := ADOQuery2.FieldByName(FN_NAM).AsString;

    ZCV.Cells[13, I] := ADOQuery2.FieldByName('ОТК').AsString;
    ZCV.Cells[14, I] := ADOQuery2.FieldByName('Кол принятых').AsString;
    OTK := Prim(ADOQuery2.FieldByName('ОТК прим').AsString);
    ZCV.Cells[15, I] := OTK;
    ZCV.Cells[16, I] := ADOQuery2.FieldByName('Упаковка').AsString;
    Sbor := (ADOQuery2.FieldByName('Сборщик').AsString);
    ZCV.Cells[17, I] := Sbor;
                //ZCV.Cells[18, I] :=
                //        ADOQuery2.FieldByName('Х').AsString;
    ZCV.Cells[18, I] := ADOQuery2.FieldByName('ID').AsString;
    ZCV.Cells[19, I] := ADOQuery2.FieldByName('Отмена').AsString;
    ZCV.Cells[20, I] := ADOQuery2.FieldByName('план Дата').AsString;
    ZCV.Cells[21, I] := ADOQuery2.FieldByName('Н\ч Сварка').AsString;
    ZCV.Cells[22, I] := ADOQuery2.FieldByName('Н\ч Сборка Клапана').AsString;
    ZCV.Cells[23, I] := ADOQuery2.FieldByName('ОТКФам').AsString;
                //----------------------------------------------------------
    ZCV.Cells[24, I] := ADOQuery2.FieldByName('МодПривода').AsString;
    ZCV.Cells[25, I] := ADOQuery2.FieldByName('Расчетная дата готовности').AsString;
    ZCV.Cells[26, I] := ADOQuery2.FieldByName('Заказчик').AsString;
    ZCV.Cells[27, I] := ADOQuery2.FieldByName('НачНомер').AsString;
    ZCV.Cells[28, I] := ADOQuery2.FieldByName('КонНомер').AsString;

    ZCV.Cells[29, I] := ADOQuery2.FieldByName('Подсборка').AsString;
    ZCV.Cells[30, I] := ADOQuery2.FieldByName('IdГП').AsString;
    ZCV.Cells[31, I] := ADOQuery2.FieldByName('IdКО').AsString;
    ZCV.Cells[32, I] := ADOQuery2.FieldByName('A').AsString;
    ZCV.Cells[33, I] := ADOQuery2.FieldByName('B').AsString;
    ZCV.Cells[34, I] := ADOQuery2.FieldByName('ФлагЗаготовки').AsString;
    ZCV.Cells[35, I] := ADOQuery2.FieldByName('Cvet').AsString;
    ZCV.Cells[36, I] := ADOQuery2.FieldByName('Срочно').AsString;
    ZCV.Cells[37, I] := ADOQuery2.FieldByName('Расключение').AsString;
    ZCV.Cells[38, I ] := ADOQuery2.FieldByName('Сборка лопаток').AsString;
    ZCV.Cells[39, I ] := ADOQuery2.FieldByName('Сборка тяг').AsString;
    ZCV.Cells[40, I ] := ADOQuery2.FieldByName('СборкаРеш').AsString;
    ZCV.Cells[41, I ] := ADOQuery2.FieldByName('Обварка').AsString;
    ZCV.Cells[42, I ] := ADOQuery2.FieldByName('Электро').AsString;

    ZCV.Cells[43, i] := ADOQuery2.FieldByName('СборЛопатка').AsString;
  ZCV.Cells[44, i] := ADOQuery2.FieldByName('СборТяга').AsString;
  ZCV.Cells[45, i] := ADOQuery2.FieldByName('Подсборка1').AsString;
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    Sb_s := (ADOQuery2.FieldByName(FN_SBOR_KLAP_NC).AsString);
    if Sb_s = '' then
      SB := 0
    else
      SB := StrToFloat(ADOQuery2.FieldByName(FN_SBOR_KLAP_NC).AsString);
    Sv_s := (ADOQuery2.FieldByName(FN_SVARKA_NC).AsString);
    if Sv_s = '' then
      SV := 0
    else
      SV := StrToFloat(ADOQuery2.FieldByName(FN_SVARKA_NC).AsString);
    Kol := StrToInt(ADOQuery2.FieldByName(FN_KOL).AsString);
    Kol_Zap := StrToInt(ADOQuery2.FieldByName(FN_KOL_ZAP).AsString);
    Izdel := ADOQuery2.FieldByName(FN_NAM).AsString;
    Res := Pos('КПУ', Izdel);
    Fl := Pos('2*ф', Izdel);
    if (Res <> 0) and (Fl <> 0) then
    begin

      Res := Pos(' ', Izdel);
      Delete(Izdel, 1, Res);
                        //======================================== KPU
      Res := Pos('-', Izdel);
      Pos1 := Copy(Izdel, 1, Res - 1);
      Delete(Izdel, 1, Res);
                        //======================================== 1 H
      Res := Pos('-', Izdel);
      Pos2 := Copy(Izdel, 1, 1);
      Pos3 := Copy(Izdel, 2, 1);
      Delete(Izdel, 1, Res);
                        //========================================
                        //Клапан КПУ-1Н-О-Н-600*400-2*ф-MB220-сн-0-0-0-0-0-0
                        //========================================
      Res := Pos('-', Izdel);
      Pos4 := Copy(Izdel, 1, Res - 1);
      Delete(Izdel, 1, Res);
                        //========================================
      Res := Pos('-', Izdel);
      Pos5 := Copy(Izdel, 1, Res - 1);
      Delete(Izdel, 1, Res);
                        //========================================

      Res := Pos('*', Izdel);
      A := StrToInt(Copy(Izdel, 1, Res - 1));
      Delete(Izdel, 1, Res);
                        //========================================
      Res := Pos('-', Izdel);
      B := StrToInt(Copy(Izdel, 1, Res - 1));
      Delete(Izdel, 1, Res);

      if (A >= 150) and (A <= 1000) then
      begin
        Kol_G := 2 * Kol;
        Kol_Gor := Kol_Gor + Kol_G;

      end;
      if (B >= 150) and (B <= 1000) then
      begin
        Kol_V := 2 * Kol;
        Kol_Vert := Kol_Vert + Kol_V;

      end;
    end;
    Kol_Kl := Kol_Kl + (Kol_Zap);
    SV_O := SV_O + SV;
    SB_O := SB_O + SB;
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ADOQuery2.Next;
  end;
  Flag_Poisk := 0;
  Label77.Caption := IntToStr(Kol_Kl);
  Label64.Caption := IntToStr(Kol_Gor);
  Label66.Caption := IntToStr(Kol_Vert);
  Label74.Caption := FloatToStr(RoundTo(SB_O, -2));
  Label76.Caption := FloatToStr(RoundTo(SV_O, -2));
  btn28.Click;
 { for I := 2 to ZCV.RowCount-1 do
  Begin

    Kol_Zap:=StrToInt(ZCV.Cells[5, I]);
     GP := ZCV.Cells[30, I];
     KO := ZCV.Cells[31, I];
     if not mkQuerySelect(ADOQuery2, 'Select * from %s Where IdГП='+#39+GP+#39+' AND  IdКО='+#39+KO+#39, ['KlapanaZap']) then
      exit;
      SB_T :=Form1.ADOQuery2.FieldByName('Сборка тяг').AsString;
      SB_L:=Form1.ADOQuery2.FieldByName('Сборка лопаток').AsString;
      SB_R:=Form1.ADOQuery2.FieldByName('СборкаРеш').AsString;
      if SB_r='' then
      SB_R:='0';
      Raskl:=Form1.ADOQuery2.FieldByName('Расключение').AsString;
      SB_T:=FloatToStr(StrToFloat(SB_T)*Kol_Zap);
      SB_L:=FloatToStr(StrToFloat(SB_L)*Kol_Zap);
      SB_R:=FloatToStr(StrToFloat(SB_R)*Kol_Zap);
      Raskl:=FloatToStr(StrToFloat(Raskl)*Kol_Zap);
      if not Form1.mkQueryUpdate(Form1.ADOQuery4,
      'UPDATE %s SET [Расключение]=' + #39+Raskl + #39+
      ',[Сборка лопаток]=' +#39 +SB_L+ #39 +
      ',[Сборка тяг]=' +#39 +SB_T+ #39 +
      ',[СборкаРеш]=' +#39 +SB_R+ #39 +
       ' WHERE ([IDГП]=' + #39 +
      (GP) + #39+') AND ([IDКо]=' + #39 +
      (KO) + #39+') AND (Номер=' + #39 +ZCV.Cells[0, I]+#39+')', ['ЗапускВозд'])
      then
      Exit;
  End;   }

end;

procedure TForm1.Button47Click(Sender: TObject);
begin
  FNaklVoz.ShowModal;
end;

procedure TForm1.Button49Click(Sender: TObject);
var
  XX, J, I, Z: Integer;
  XL: Variant;
  Dat, Dat1, Dat2, Dat3, SS, D, Dir, God, Mes, PP, ZAk, ss1, Err: string;
begin
  Conn_Klap := Connect_Miass_Klap.Create();
  God := FormatDateTime('yyyy', DTP8.DateTime);
  Mes := FormatDateTime('mmmm', DTP8.DateTime);
  Memo9.Lines.LoadFromFile(ExtractFileDir(ParamStr(0)) + '\ConnCEH.ini');
  D := Memo9.Lines.Strings[2];
  Dat2 := FormatDateTime('dd.mm.yyyy', DTP8.DateTime);
  Dat3 := FormatDateTime('dd.mm.yyyy', DTP9.DateTime);

  Dat := FormatDateTime('mm.dd.yyyy', DTP8.DateTime);
  Dat1 := FormatDateTime('mm.dd.yyyy', DTP9.DateTime);
  ss1 := '  BETWEEN ' + #39 + Dat + #39 + ' And ' + #39 + Dat1 + #39;
  XL := CreateOleObject('Excel.Application'); //
  XL.Application.EnableEvents := false;
  XL.Workbooks.Open(D + '\CKlapana\2013\Привода.xlsx');
  XL.ActiveWorkBook.WorkSheets[2].Range['B' + IntToStr(1), 'B' + IntToStr(1)] := Dat2;
  XL.ActiveWorkBook.Sheets.Item[2].Activate;
  //OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
  ZAk := '';
  SS := 'Специф.Элемент LIKE ' + #39 + 'Ось%' + #39;
  if not Conn_Klap.mkQuerySelect('Select Специф.Элемент,Специф.Обозначение,Sum(Специф.Количество*Klapana.[кол во] ) As S ' + 'FROM %s INNER JOIN Klapana ON Специф.IdГП = Klapana.IdГП  Where (Klapana.Дата %s' + ') AND (%s) AND ((Специф.ВидЭлемента= ' + #39 + 'Детали' + #39 + ') OR (Специф.ВидЭлемента= ' + #39 + 'Прочие изделия' + #39 + ')) Group BY Специф.Элемент,Специф.Обозначение', ['Специф', ss1, SS]) then
    exit;

  XX := 5;
        //Создание временной таблицы  idgp,zakaz,Nom
  SetConnectTemp(ADOQueryTemp);
    //Создание временной таблицы
  ADOQueryTemp := TADOQuery.Create(nil);
  ADOQueryTemp.Connection := ADOConnectionTemp;

  ADOQueryTemp.SQL.Text := 'CREATE TABLE #ClientToDBFL (Элемент nvarchar(350),' + 'Обозначение nvarchar(350),Kol float )';
  try
    ADOQueryTemp.ExecSQL;
  except
    Err := '1222';
  end;
  for J := 0 to Conn_Klap.AQuery.RecordCount - 1 do
  begin
        //SetConnectTemp(ADOQueryTemp);
    ADOQueryTemp.SQL.Text := 'INSERT INTO #ClientToDBFL ' + '(Элемент,Обозначение,Kol) Values (' + #39 + Conn_Klap.AQuery.FieldByName('Элемент').AsString + #39 + ',' + #39 + Conn_Klap.AQuery.FieldByName('Обозначение').AsString + #39 + ',' + #39 + Conn_Klap.AQuery.FieldByName('S').AsString + #39 + ')';
    try
      ADOQueryTemp.ExecSQL;
    except
      Err := '1222';
    end;

      {if J<>Conn_Klap.AQuery.RecordCount  then
      Begin
          XL.ActiveWorkBook.Worksheets[2].Range['A4:E4'].Select;
          XL.Selection.Copy;
          XL.ActiveWorkBook.Worksheets[2].Range['A' + IntToStr(XX)].Select;
          XL.ActiveWorkBook.Worksheets[2].Paste;
      End;
          XL.ActiveWorkBook.WorkSheets[2].Cells[ XX,2] :=Conn_Klap.AQuery.FieldByName('Элемент').AsString;
          XL.ActiveWorkBook.WorkSheets[2].Cells[ XX,3] :=Conn_Klap.AQuery.FieldByName('Обозначение').AsString;
          XL.ActiveWorkBook.WorkSheets[2].Cells[ XX,4] :=Conn_Klap.AQuery.FieldByName('S').AsString;
          Zak:='';
          PP:= Conn_Klap.AQuery.FieldByName('Элемент').AsString;
          if not Conn_Klap.mkQuerySelect3( 'Select Специф.Заказ '+
          'FROM %s   Where (Специф.Дата %s '
          +') AND (Специф.Элемент= '+#39+PP+#39+') Group BY Заказ', ['Специф',SS1]) then
          exit;
           for Z := 0 to Conn_Klap.AQuery3.RecordCount - 1 do
            begin
                 Zak:=Zak+','+ Conn_Klap.AQuery3.FieldByName('Заказ').AsString;
                  Conn_Klap.AQuery3.Next;
            end;
            XL.ActiveWorkBook.WorkSheets[2].Cells[ XX,5] :=Zak;
          Inc(XX);}
    Conn_Klap.AQuery.Next;
  end;
   //ppppppppppppppppppppppppppppppppppppppppppppppp
  SS := 'СпецифВозд.Элемент LIKE ' + #39 + 'Ось%' + #39;
  if not Conn_Klap.mkQuerySelect('Select СпецифВозд.Элемент,СпецифВозд.Обозначение,Sum(СпецифВозд.Количество*KlapanaZap.[кол во] ) As S ' + 'FROM %s INNER JOIN KlapanaZap ON СпецифВозд.IdГП = KlapanaZap.IdГП  Where (KlapanaZap.Дата %s ' + ') AND (%s) AND ((СпецифВозд.ВидЭлемента= ' + #39 + 'Детали' + #39 + ') OR (СпецифВозд.ВидЭлемента= ' + #39 + 'Прочие изделия' + #39 + ')) Group BY СпецифВозд.Элемент,СпецифВозд.Обозначение', ['СпецифВозд', ss1, SS]) then
    exit;

  Inc(XX);
  for J := 0 to Conn_Klap.AQuery.RecordCount - 1 do
  begin
    ADOQueryTemp.SQL.Text := 'INSERT INTO #ClientToDBFL ' + '(Элемент,Обозначение,Kol) Values (' + #39 + Conn_Klap.AQuery.FieldByName('Элемент').AsString + #39 + ',' + #39 + Conn_Klap.AQuery.FieldByName('Обозначение').AsString + #39 + ',' + #39 + Conn_Klap.AQuery.FieldByName('S').AsString + #39 + ')';
    try
      ADOQueryTemp.ExecSQL;
    except
      Err := '1222';
    end;
    {  if J<>Conn_Klap.AQuery.RecordCount  then
      Begin
          XL.ActiveWorkBook.Worksheets[2].Range['A4:E4'].Select;
          XL.Selection.Copy;
          XL.ActiveWorkBook.Worksheets[2].Range['A' + IntToStr(XX)].Select;
          XL.ActiveWorkBook.Worksheets[2].Paste;
      End;
          XL.ActiveWorkBook.WorkSheets[2].Cells[ XX,2] :=Conn_Klap.AQuery.FieldByName('Элемент').AsString;
          XL.ActiveWorkBook.WorkSheets[2].Cells[ XX,3] :=Conn_Klap.AQuery.FieldByName('Обозначение').AsString;
          XL.ActiveWorkBook.WorkSheets[2].Cells[ XX,4] :=Conn_Klap.AQuery.FieldByName('S').AsString;
                    Zak:='';
          PP:= Conn_Klap.AQuery.FieldByName('Элемент').AsString;
          if not Conn_Klap.mkQuerySelect3( 'Select СпецифВозд.Заказ '+
          'FROM %s   Where (СпецифВозд.Дата %s '
          +') AND (СпецифВозд.Элемент= '+#39+PP+#39+') Group BY Заказ', ['СпецифВозд',SS1]) then
          exit;
           for Z := 0 to Conn_Klap.AQuery3.RecordCount - 1 do
            begin
                 Zak:=Zak+','+ Conn_Klap.AQuery3.FieldByName('Заказ').AsString;
                  Conn_Klap.AQuery3.Next;
            end;
            XL.ActiveWorkBook.WorkSheets[2].Cells[ XX,5] :=Zak;
          Inc(XX); }
    Conn_Klap.AQuery.Next;
  end;
  ADOQueryTemp.SQL.Text := ('Select Элемент,Обозначение,Sum(Kol ) As S ' + 'FROM #ClientToDBFL  Group BY Элемент,Обозначение');
  ADOQueryTemp.Open;

  //Inc(XX);
  for J := 0 to ADOQueryTemp.RecordCount - 1 do
  begin
    if J <> ADOQueryTemp.RecordCount then
    begin
      XL.ActiveWorkBook.Worksheets[2].Range['A4:E4'].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[2].Range['A' + IntToStr(XX)].Select;
      XL.ActiveWorkBook.Worksheets[2].Paste;
    end;
    XL.ActiveWorkBook.WorkSheets[2].Cells[XX, 2] := ADOQueryTemp.FieldByName('Элемент').AsString;
    XL.ActiveWorkBook.WorkSheets[2].Cells[XX, 3] := ADOQueryTemp.FieldByName('Обозначение').AsString;
    XL.ActiveWorkBook.WorkSheets[2].Cells[XX, 4] := ADOQueryTemp.FieldByName('S').AsString;
    Inc(XX);
    ADOQueryTemp.Next;
  end;
//OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
//OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
    //================================================== Втулка
  XL.ActiveWorkBook.WorkSheets[6].Range['B' + IntToStr(1), 'B' + IntToStr(1)] := Dat2;
  XL.ActiveWorkBook.Sheets.Item[6].Activate;
  //OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
  SS := 'Специф.Элемент LIKE ' + #39 + 'Втулка%' + #39;
  if not Conn_Klap.mkQuerySelect('Select Специф.Элемент,Специф.Обозначение,Sum(Специф.Количество*Klapana.[кол во] ) As S ' + 'FROM %s INNER JOIN Klapana ON Специф.IdГП = Klapana.IdГП  Where (Klapana.Дата %s ' + ') AND (%s) AND ((Специф.ВидЭлемента= ' + #39 + 'Детали' + #39 + ') OR (Специф.ВидЭлемента= ' + #39 + 'Прочие изделия' + #39 + ')) Group BY Специф.Элемент,Специф.Обозначение', ['Специф', ss1, SS]) then
    exit;

  XX := 5;

  for J := 0 to Conn_Klap.AQuery.RecordCount - 1 do
  begin
    if J <> Conn_Klap.AQuery.RecordCount then
    begin
      XL.ActiveWorkBook.Worksheets[6].Range['A4:E4'].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[6].Range['A' + IntToStr(XX)].Select;
      XL.ActiveWorkBook.Worksheets[6].Paste;
    end;
    XL.ActiveWorkBook.WorkSheets[6].Cells[XX, 2] := Conn_Klap.AQuery.FieldByName('Элемент').AsString;
    XL.ActiveWorkBook.WorkSheets[6].Cells[XX, 3] := Conn_Klap.AQuery.FieldByName('Обозначение').AsString;
    XL.ActiveWorkBook.WorkSheets[6].Cells[XX, 4] := Conn_Klap.AQuery.FieldByName('S').AsString;
    Inc(XX);
    Conn_Klap.AQuery.Next;
  end;
   //ppppppppppppppppppppppppppppppppppppppppppppppp
  SS := 'СпецифВозд.Элемент LIKE ' + #39 + 'Втулка%' + #39;
  if not Conn_Klap.mkQuerySelect('Select СпецифВозд.Элемент,СпецифВозд.Обозначение,Sum(СпецифВозд.Количество*KlapanaZap.[кол во] ) As S ' + 'FROM %s INNER JOIN KlapanaZap ON СпецифВозд.IdГП = KlapanaZap.IdГП  Where (KlapanaZap.Дата %s ' + ') AND (%s) AND ((СпецифВозд.ВидЭлемента= ' + #39 + 'Детали' + #39 + ') OR (СпецифВозд.ВидЭлемента= ' + #39 + 'Прочие изделия' + #39 + ')) Group BY СпецифВозд.Элемент,СпецифВозд.Обозначение', ['СпецифВозд', ss1, SS]) then
    exit;

  Inc(XX);
  for J := 0 to Conn_Klap.AQuery.RecordCount - 1 do
  begin
    if J <> Conn_Klap.AQuery.RecordCount then
    begin
      XL.ActiveWorkBook.Worksheets[6].Range['A4:E4'].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[6].Range['A' + IntToStr(XX)].Select;
      XL.ActiveWorkBook.Worksheets[6].Paste;
    end;
    XL.ActiveWorkBook.WorkSheets[6].Cells[XX, 2] := Conn_Klap.AQuery.FieldByName('Элемент').AsString;
    XL.ActiveWorkBook.WorkSheets[6].Cells[XX, 3] := Conn_Klap.AQuery.FieldByName('Обозначение').AsString;
    XL.ActiveWorkBook.WorkSheets[6].Cells[XX, 4] := Conn_Klap.AQuery.FieldByName('S').AsString;
    Inc(XX);
    Conn_Klap.AQuery.Next;
  end;

//OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
//OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
    //================================================== Труба
  XL.ActiveWorkBook.WorkSheets[7].Range['B' + IntToStr(1), 'B' + IntToStr(1)] := Dat2;
  XL.ActiveWorkBook.Sheets.Item[7].Activate;
  //OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
  SS := 'Специф.Элемент LIKE ' + #39 + 'Труба%' + #39;
  if not Conn_Klap.mkQuerySelect('Select Специф.Элемент,Специф.Обозначение,Sum(Специф.Количество*Klapana.[кол во] ) As S ' + 'FROM %s INNER JOIN Klapana ON Специф.IdГП = Klapana.IdГП  Where (Klapana.Дата %s ' + ') AND (%s) AND ((Специф.ВидЭлемента= ' + #39 + 'Детали' + #39 + ') OR (Специф.ВидЭлемента= ' + #39 + 'Прочие изделия' + #39 + ')) Group BY Специф.Элемент,Специф.Обозначение', ['Специф', ss1, SS]) then
    exit;

  XX := 5;

  for J := 0 to Conn_Klap.AQuery.RecordCount - 1 do
  begin
    if J <> Conn_Klap.AQuery.RecordCount then
    begin
      XL.ActiveWorkBook.Worksheets[7].Range['A4:E4'].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[7].Range['A' + IntToStr(XX)].Select;
      XL.ActiveWorkBook.Worksheets[7].Paste;
    end;
    XL.ActiveWorkBook.WorkSheets[7].Cells[XX, 2] := Conn_Klap.AQuery.FieldByName('Элемент').AsString;
    XL.ActiveWorkBook.WorkSheets[7].Cells[XX, 3] := Conn_Klap.AQuery.FieldByName('Обозначение').AsString;
    XL.ActiveWorkBook.WorkSheets[7].Cells[XX, 4] := Conn_Klap.AQuery.FieldByName('S').AsString;
    Inc(XX);
    Conn_Klap.AQuery.Next;
  end;
   //ppppppppppppppppppppppppppppppppppppppppppppppp
  SS := 'СпецифВозд.Элемент LIKE ' + #39 + 'Труба%' + #39;
  if not Conn_Klap.mkQuerySelect('Select СпецифВозд.Элемент,СпецифВозд.Обозначение,Sum(СпецифВозд.Количество*KlapanaZap.[кол во] ) As S ' + 'FROM %s INNER JOIN KlapanaZap ON СпецифВозд.IdГП = KlapanaZap.IdГП  Where (KlapanaZap.Дата %s ' + ') AND (%s) AND ((СпецифВозд.ВидЭлемента= ' + #39 + 'Детали' + #39 + ') OR (СпецифВозд.ВидЭлемента= ' + #39 + 'Прочие изделия' + #39 + ')) Group BY СпецифВозд.Элемент,СпецифВозд.Обозначение', ['СпецифВозд', ss1, SS]) then
    exit;

  Inc(XX);
  for J := 0 to Conn_Klap.AQuery.RecordCount - 1 do
  begin
    if J <> Conn_Klap.AQuery.RecordCount then
    begin
      XL.ActiveWorkBook.Worksheets[7].Range['A4:E4'].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[7].Range['A' + IntToStr(XX)].Select;
      XL.ActiveWorkBook.Worksheets[7].Paste;
    end;
    XL.ActiveWorkBook.WorkSheets[7].Cells[XX, 2] := Conn_Klap.AQuery.FieldByName('Элемент').AsString;
    XL.ActiveWorkBook.WorkSheets[7].Cells[XX, 3] := Conn_Klap.AQuery.FieldByName('Обозначение').AsString;
    XL.ActiveWorkBook.WorkSheets[7].Cells[XX, 4] := Conn_Klap.AQuery.FieldByName('S').AsString;
    Inc(XX);
    Conn_Klap.AQuery.Next;
  end;

//OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
//OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
    //================================================== Элемент Like  '%взрывозащищенная%'
  XL.ActiveWorkBook.WorkSheets[3].Range['B' + IntToStr(1), 'B' + IntToStr(1)] := Dat2;
  XL.ActiveWorkBook.Sheets.Item[3].Activate;
  //OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
  SS := 'Элемент Like   ' + #39 + '%взрывозащищенная%' + #39;
  if not Conn_Klap.mkQuerySelect('Select Элемент,Sum(Cast(Количество As INT)) As S from %s Where (Дата %s ' + ') AND (%s) AND ( (ВидЭлемента= ' + #39 + 'Прочие изделия' + #39 + ')) Group BY Элемент', ['Специф', ss1, SS]) then
    exit;
  XX := 5;

  for J := 0 to Conn_Klap.AQuery.RecordCount - 1 do
  begin
    if J <> Conn_Klap.AQuery.RecordCount then
    begin
      XL.ActiveWorkBook.Worksheets[3].Range['A4:C4'].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[3].Range['A' + IntToStr(XX)].Select;
      XL.ActiveWorkBook.Worksheets[3].Paste;
    end;
    XL.ActiveWorkBook.WorkSheets[3].Cells[XX, 2] := Conn_Klap.AQuery.FieldByName('Элемент').AsString;
    XL.ActiveWorkBook.WorkSheets[3].Cells[XX, 3] := Conn_Klap.AQuery.FieldByName('S').AsString;
    Inc(XX);
    Conn_Klap.AQuery.Next;
  end;
   //ppppppppppppppppppppppppppppppppppppppppppppppp
  if not Conn_Klap.mkQuerySelect('Select Элемент,Sum(Cast(Количество As INT)) As S from %s Where (Дата %s ' + ') AND (%s) AND ( (ВидЭлемента= ' + #39 + 'Прочие изделия' + #39 + ')) Group BY Элемент', ['СпецифВозд', ss1, SS]) then
    exit;
  XX := 5;
  for J := 0 to Conn_Klap.AQuery.RecordCount - 1 do
  begin
    if J <> Conn_Klap.AQuery.RecordCount then
    begin
      XL.ActiveWorkBook.Worksheets[3].Range['F4:H4'].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[3].Range['F' + IntToStr(XX)].Select;
      XL.ActiveWorkBook.Worksheets[3].Paste;
    end;
    XL.ActiveWorkBook.WorkSheets[3].Cells[XX, 7] := Conn_Klap.AQuery.FieldByName('Элемент').AsString;
    XL.ActiveWorkBook.WorkSheets[3].Cells[XX, 8] := Conn_Klap.AQuery.FieldByName('S').AsString;
    Inc(XX);
    Conn_Klap.AQuery.Next;
  end;
    //OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
    //Оси для 1С
    //================================================== ОСИ
  XL.ActiveWorkBook.WorkSheets[4].Range['B' + IntToStr(1), 'B' + IntToStr(1)] := Dat2;
  XL.ActiveWorkBook.Sheets.Item[4].Activate;
  SS := 'Специф.Элемент LIKE ' + #39 + 'Ось%' + #39;
  if not Conn_Klap.mkQuerySelect('Select Специф.Элемент,Специф.Обозначение,Специф.Заказ,Специф.Изделие,Sum(Специф.Количество*Klapana.[кол во] ) As S ' + 'FROM %s INNER JOIN Klapana ON Специф.IdГП = Klapana.IdГП  Where (Klapana.Дата %s ' + ') AND (%s) AND ((Специф.ВидЭлемента= ' + #39 + 'Детали' + #39 + ') OR (Специф.ВидЭлемента= ' + #39 + 'Прочие изделия' + #39 + ')) Group BY Специф.Элемент,Специф.Обозначение,Специф.Заказ,Специф.Изделие', ['Специф', ss1, SS]) then
    exit;
  XX := 5;

  for J := 0 to Conn_Klap.AQuery.RecordCount - 1 do
  begin
    if J <> Conn_Klap.AQuery.RecordCount then
    begin
      XL.ActiveWorkBook.Worksheets[4].Range['A4:F4'].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[4].Range['A' + IntToStr(XX)].Select;
      XL.ActiveWorkBook.Worksheets[4].Paste;
    end;
    XL.ActiveWorkBook.WorkSheets[4].Cells[XX, 1] := IntToStr(J + 1);
    XL.ActiveWorkBook.WorkSheets[4].Cells[XX, 2] := Conn_Klap.AQuery.FieldByName('заказ').AsString;
    XL.ActiveWorkBook.WorkSheets[4].Cells[XX, 3] := Conn_Klap.AQuery.FieldByName('Изделие').AsString;
    XL.ActiveWorkBook.WorkSheets[4].Cells[XX, 4] := Conn_Klap.AQuery.FieldByName('Элемент').AsString;
    XL.ActiveWorkBook.WorkSheets[4].Cells[XX, 5] := Conn_Klap.AQuery.FieldByName('Обозначение').AsString;
    XL.ActiveWorkBook.WorkSheets[4].Cells[XX, 6] := Conn_Klap.AQuery.FieldByName('S').AsString;
    Inc(XX);
    Conn_Klap.AQuery.Next;
  end;
    //Оси для 1С
   //ppppppppppppppppppppppppppppppppppppppppppppppp
  XL.ActiveWorkBook.WorkSheets[5].Range['B' + IntToStr(1), 'B' + IntToStr(1)] := Dat2;
  XL.ActiveWorkBook.Sheets.Item[5].Activate;
  SS := 'СпецифВозд.Элемент LIKE ' + #39 + 'Ось%' + #39;
  if not Conn_Klap.mkQuerySelect('Select СпецифВозд.Элемент,СпецифВозд.Обозначение,СпецифВозд.Заказ,СпецифВозд.Изделие,Sum(СпецифВозд.Количество*KlapanaZap.[кол во] ) As S ' + 'FROM %s INNER JOIN KlapanaZap ON СпецифВозд.IdГП = KlapanaZap.IdГП  Where (KlapanaZap.Дата %s ' + ') AND (%s) AND ((СпецифВозд.ВидЭлемента= ' + #39 + 'Детали' + #39 + ') OR (СпецифВозд.ВидЭлемента= ' + #39 + 'Прочие изделия' + #39 + ')) Group BY СпецифВозд.Элемент,СпецифВозд.Обозначение,СпецифВозд.Заказ,СпецифВозд.Изделие', ['СпецифВозд', ss1, SS]) then
    exit;
  XX := 5;
  for J := 0 to Conn_Klap.AQuery.RecordCount - 1 do
  begin
    if J <> Conn_Klap.AQuery.RecordCount then
    begin
      XL.ActiveWorkBook.Worksheets[5].Range['A4:F4'].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[5].Range['A' + IntToStr(XX)].Select;
      XL.ActiveWorkBook.Worksheets[5].Paste;
    end;
    XL.ActiveWorkBook.WorkSheets[5].Cells[XX, 1] := IntToStr(J + 1);
    XL.ActiveWorkBook.WorkSheets[5].Cells[XX, 2] := Conn_Klap.AQuery.FieldByName('заказ').AsString;
    XL.ActiveWorkBook.WorkSheets[5].Cells[XX, 3] := Conn_Klap.AQuery.FieldByName('Изделие').AsString;
    XL.ActiveWorkBook.WorkSheets[5].Cells[XX, 4] := Conn_Klap.AQuery.FieldByName('Элемент').AsString;
    XL.ActiveWorkBook.WorkSheets[5].Cells[XX, 5] := Conn_Klap.AQuery.FieldByName('Обозначение').AsString;
    XL.ActiveWorkBook.WorkSheets[5].Cells[XX, 6] := Conn_Klap.AQuery.FieldByName('S').AsString;
    Inc(XX);
    Conn_Klap.AQuery.Next;
  end;
//OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
  Dir := (D + '\CKlapana\Привода\');
  CreateDir(Dir);
  Dir := (D + '\CKlapana\Привода\' + God);
  CreateDir(Dir);

  Dir := (D + '\CKlapana\Привода\' + God + '\' + Mes);
  CreateDir(Dir);

  XL.Application.ActiveWorkBook.SaveAs(Dir + '\' + Dat2 + '-' + Dat3 + '.xlsx');
  //XL.Application.ActiveWorkBook.Close;
  XL.Visible := True;
  XL := UnAssigned;

end;

procedure TForm1.TabSheet6Show(Sender: TObject);
begin
  Button28.Click;
end;

procedure TForm1.ZCVDblClick(Sender: TObject);
var
  Kol, Kol_Prin, Flag_Zag: Integer;
  otk,N:TDate;
begin
  Vozduh := 1; // and (ZCV.Cells[I_FN_KOL_ZAP + 5, ZCV.Row] = '')
  Kol := StrToInt(ZCV.Cells[5, ZCV.ROW]);
  Kol_Prin := StrToInt(ZCV.Cells[14, ZCV.ROW]);
  if ZCV.Cells[13, ZCV.ROW]<>'' then
  Begin
    OTK:=StrToDate(ZCV.Cells[13, ZCV.ROW]);
    N:=Now;
  End;
  if (ZCV.Col = 0) and ((FlagDolg = 4) or (FlagDolg = 1) or (FlagDolg = 10) or (FlagDolg = 7) or (FlagDolg = 2)) then
  begin                          //
    if ((Kol=Kol_Prin) AND (N>OTK+2))  AND (FlagDolg <> 1) AND (FlagDolg <> 2) Then  //   (ZSG.Cells[I_FN_KOL_ZAP + 9,ZSG.row]<>'')
    Begin
      MessageDlg('ОТК приняло клапан, запрещенно изменять дату!', mtError, [mbOk], 0);
      exit;
    End;
    FSborAll.Label1.Caption := ZCV.Cells[0, ZCV.Row];
    FSborAll.ComboBox1.Clear;
    FSborAll.CBB1.Clear;
    FSborAll.CBB2.Clear;
    FSborAll.CBB3.Clear;
    FSborAll.ComboBox1.Text := ZCV.Cells[17, ZCV.Row] ;//:= 'Сборщик';
    FSborAll.CBB1.Visible:=True;
    FSborAll.ShowModal;
  end;
  Flag_Zag := Pos('rue', ZCV.Cells[34, ZCV.Row]);
  Kol := StrToInt(ZCV.Cells[5, ZCV.ROW]);
  Kol_Prin := StrToInt(ZCV.Cells[14, ZCV.ROW]);
  Form2.Label3BZ.Caption := ZCV.Cells[3, ZCV.ROW];
  if (ZCV.Col = 6) and (ZCV.Cells[8, ZCV.ROW] <> '') and ((FlagDolg = 1) or (FlagDolg = 7) or (FlagDolg = 8)) then
  begin
    Form2.Label1.Caption := 'Заготовка';
    Form2.Label2.Caption := ZCV.Cells[ZCV.Col, 1];
    Form2.Label3.Caption := ZCV.Cells[12, ZCV.ROW];
                //Nam
    Form2.Label6.Caption := ZCV.Cells[2, ZCV.ROW]; //Zak
    Form2.Label7.Caption := ZCV.Cells[5, ZCV.ROW]; //Kol
    Form2.Label8.Caption := ZCV.Cells[0, ZCV.ROW]; //Nom
    Form2.Label4.Caption := IntToStr(ZCV.Row);
    Form2.Label5.Caption := IntToStr(ZCV.Col);
    Form2.LabGP.Caption := ZCV.Cells[30, ZCV.ROW];
    Form2.LabKO.Caption := ZCV.Cells[31, ZCV.ROW];
    Form2.Caption := ZCV.Cells[0, ZCV.ROW];
    Form2.ShowModal;
  end;
  if (ZCV.Col = 29) and (Flag_Zag <> 0) then //Подсборка
  begin
    Form2.Label1.Caption := 'Подсборка';
    Form2.Label2.Caption := ZCV.Cells[ZCV.Col, 1];
    Form2.Label3.Caption := ZCV.Cells[12, ZCV.ROW];
                //Nam
    Form2.Label6.Caption := ZCV.Cells[2, ZCV.ROW]; //Zak
    Form2.Label7.Caption := ZCV.Cells[5, ZCV.ROW]; //Kol
    Form2.Label8.Caption := ZCV.Cells[0, ZCV.ROW]; //Nom
    Form2.Label4.Caption := IntToStr(ZCV.Row);
    Form2.Label5.Caption := IntToStr(ZCV.Col);
    Form2.LabGP.Caption := ZCV.Cells[30, ZCV.ROW];
    Form2.LabKO.Caption := ZCV.Cells[31, ZCV.ROW];
    Form2.Caption := ZCV.Cells[0, ZCV.ROW];
    Form2.ShowModal;
  end;
  if (FlagDolg = 1) or (FlagDolg = 7) or (FlagDolg = 8) then
  begin
    if (ZCV.Col = 7) and (ZCV.Cells[6, ZCV.Row] <> '') //Заготовка Готова
      then
    begin
      if ZCV.Cells[7, ZCV.Row] <> '' then
        Form2.Label9.Caption := '1'
      else
        Form2.Label9.Caption := '0';
      Form2.Label1.Caption := 'Заготовка';
      Form2.Label2.Caption := ZCV.Cells[ZCV.Col, 1];
      Form2.Label3.Caption := ZCV.Cells[12, ZCV.ROW]; //Nam
      Form2.Label6.Caption := ZCV.Cells[2, ZCV.ROW]; //Zak
      Form2.Label7.Caption := ZCV.Cells[5, ZCV.ROW];
                        //Kol
      Form2.Label8.Caption := ZCV.Cells[0, ZCV.ROW]; //Nom
      Form2.Label10.Caption := ZCV.Cells[7, ZCV.ROW]; //Dat
      Form2.Label4.Caption := IntToStr(ZCV.Row);
      Form2.Label5.Caption := IntToStr(ZCV.Col);
      Form2.LabGP.Caption := ZCV.Cells[30, ZCV.ROW];
      Form2.LabKO.Caption := ZCV.Cells[31, ZCV.ROW];
      Form2.Caption := ZCV.Cells[0, ZCV.ROW];
      Form2.ShowModal;
    end;
  end;
  //
  if (ZCV.Col = 9) and (ZCV.Cells[7, ZCV.Row] <> '') and ((FlagDolg = 10) or (FlagDolg = 1) or (FlagDolg = 7) or (FlagDolg = 4)) then
  begin
    if ZCV.Cells[9, ZCV.Row] <> '' then
      Form2.Label9.Caption := '1'
    else
      Form2.Label9.Caption := '0';
    Form2.Label1.Caption := 'Сборка';
    Form2.Label2.Caption := ZCV.Cells[ZCV.Col, 1];
    Form2.Label3.Caption := ZCV.Cells[12, ZCV.ROW]; //Nam
    Form2.Label6.Caption := ZCV.Cells[2, ZCV.ROW]; //Zak
    Form2.Label7.Caption := ZCV.Cells[5, ZCV.ROW];
                        //Kol
    Form2.Label8.Caption := ZCV.Cells[0, ZCV.ROW]; //Nom
    Form2.Label10.Caption := ZCV.Cells[9, ZCV.ROW]; //Dat
    Form2.Label4.Caption := IntToStr(ZCV.Row);
    Form2.Label5.Caption := IntToStr(ZCV.Col);
    Form2.LabGP.Caption := ZCV.Cells[30, ZCV.ROW];
    Form2.LabKO.Caption := ZCV.Cells[31, ZCV.ROW];
    Form2.Caption := ZCV.Cells[0, ZCV.ROW];
    Form2.ShowModal;
  end;

        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if (ZCV.Col = 10) and (ZCV.Cells[9, ZCV.Row] <> '') and (ZCV.Cells[17, ZCV.Row] <> '') and ((FlagDolg = 10) or (FlagDolg = 4) or (FlagDolg = 7) or (FlagDolg = 1)) then //Трапезников
  begin
    if ZCV.Cells[10, ZCV.Row] <> '' then
      Form2.Label9.Caption := '1'
    else
      Form2.Label9.Caption := '0';
    Form2.Label1.Caption := 'Сборка';
    Form2.Label2.Caption := ZCV.Cells[ZCV.Col, 1];
    Form2.Label3.Caption := ZCV.Cells[12, ZCV.ROW];
                //Nam
    Form2.Label6.Caption := ZCV.Cells[2, ZCV.ROW]; //Zak
    Form2.Label7.Caption := ZCV.Cells[5, ZCV.ROW]; //Kol
    Form2.Label8.Caption := ZCV.Cells[0, ZCV.ROW]; //Nom
    Form2.Label10.Caption := ZCV.Cells[10, ZCV.ROW];
                //Dat
    Form2.Label4.Caption := IntToStr(ZCV.Row);
    Form2.Label5.Caption := IntToStr(ZCV.Col);
    Form2.LabGP.Caption := ZCV.Cells[30, ZCV.ROW];
    Form2.LabKO.Caption := ZCV.Cells[31, ZCV.ROW];
    Form2.Caption := ZCV.Cells[0, ZCV.ROW];
    Form2.ShowModal;
  end;

  if ((ZCV.Col = 14) or (ZCV.Col = 13)) and (ZCV.Cells[10, ZCV.Row]   //Кол ОТК    and (Kol > Kol_Prin)
    <> '') and ((((FlagDolg = 10) or (FlagDolg = 7) or (FlagDolg = 4))) or (FlagDolg = 1)) then
  begin
    if (FlagDolg = 1) or (FlagDolg = 7) then
      FOTK.Button3.Visible := True;
    FOTK.Label2.Caption := ZCV.Cells[0, ZCV.ROW]; //Nom
    FOTK.Label3.Caption := ZCV.Cells[12, ZCV.ROW];
                //Nam
    FOTK.Label4.Caption := ZCV.Cells[2, ZCV.ROW]; //Zak
    FOTK.Label5.Caption := ZCV.Cells[5, ZCV.ROW]; //Kol
    FOTK.Label6.Caption := ZCV.Cells[18, ZCV.ROW];
                //ID
    FOTK.Label10.Caption := ZCV.Cells[10, ZCV.ROW];
                //ОТК
    FOTK.Label7.Caption := IntToStr(ZCV.Row);
    FOTK.Label8.Caption := IntToStr(ZCV.Col);
    FOTK.LabGP.Caption := ZCV.Cells[30, ZCV.ROW];
    FOTK.LabKO.Caption := ZCV.Cells[31, ZCV.ROW];
    FOTK.Caption := ZCV.Cells[0, ZCV.ROW];
    FOTK.Label13.Caption := ZCV.Cells[27, ZCV.ROW]; //Нач Номер
    FOTK.Label15.Caption := ZCV.Cells[28, ZCV.ROW]; //КонНомер
    FOTK.ShowModal;
  end;

  if (ZCV.Col = 16) and ((FlagDolg = 10) or (FlagDolg = 1) or (FlagDolg = 7) or (FlagDolg = 4)) then //Отгрузка
  begin
                //Проверить перед отгрузкой все ли приняло ОТК
                //Form2.Label1.Caption := 'Упаковка';
    Form2.Label2.Caption := ZCV.Cells[ZCV.Col, 1];
    Form2.Label3.Caption := ZCV.Cells[12, ZCV.ROW];
                //Nam
    Form2.Label6.Caption := ZCV.Cells[2, ZCV.ROW]; //Zak
    Form2.Label7.Caption := ZCV.Cells[5, ZCV.ROW]; //Kol
    Form2.Label8.Caption := ZCV.Cells[0, ZCV.ROW]; //Nom
    Form2.Label4.Caption := IntToStr(ZCV.Row);
    Form2.Label5.Caption := IntToStr(ZCV.Col);
    Form2.LabGP.Caption := ZCV.Cells[30, ZCV.ROW];
    Form2.LabKO.Caption := ZCV.Cells[31, ZCV.ROW];
    Form2.Caption := ZCV.Cells[0, ZCV.ROW];
    Form2.ShowModal;
  end;

  {if (ZCV.Col = 8) and (Flag_Zag = 0) and ((FlagDolg = 7) or (FlagDolg = 1)) then
                //Планирование
  begin
    MessageDlg('Не все детали обработаны! Список в папке с накладной.', mtError, [mbOk], 0);
    Exit;
  end;    and (Flag_Zag <> 0)     }
  if (ZCV.Col = 8) and ((FlagDolg = 7) or (FlagDolg = 1)) then
                //Планирование
  begin
    Form2.Label2.Caption := ZCV.Cells[ZCV.Col, 1];
    Form2.Label3.Caption := ZCV.Cells[12, ZCV.ROW];
                //Nam
    Form2.Plan.Caption := Form1.ConvertDat1(ZCV.Cells[ZCV.Col, ZCV.ROW]); //Планирование Дата для удаления
    Form2.Label6.Caption := ZCV.Cells[2, ZCV.ROW]; //Zak
    Form2.Label7.Caption := ZCV.Cells[5, ZCV.ROW]; //Kol
    Form2.Label8.Caption := ZCV.Cells[0, ZCV.ROW]; //Nom
    Form2.Label4.Caption := IntToStr(ZCV.Row);
    Form2.Label5.Caption := IntToStr(ZCV.Col);
    Form2.LabGP.Caption := ZCV.Cells[30, ZCV.ROW];
    Form2.LabKO.Caption := ZCV.Cells[31, ZCV.ROW];
    Form2.Caption := ZCV.Cells[0, ZCV.ROW];
    Form2.LabCVET.Caption := ZCV.Cells[35, ZCV.ROW];
    Form2.ShowModal;
  end;
        {and (ZSG.Cells[I_FN_KOL_ZAP + 12,
                ZSG.Row]
                        <>
                '') }
  if (ZCV.Col = 11) and ((FlagDolg = 4) or (FlagDolg = 1) or (FlagDolg = 7)) then//Примечание
  begin

    Form3.Label1.Caption := 'Сборка';
    Form3.Label2.Caption := ZCV.Cells[ZCV.Col, 1];
    Form3.Label3.Caption := ZCV.Cells[0, ZCV.ROW];
    Form3.Label6.Caption := ZCV.Cells[12, ZCV.ROW];
    Form3.Label7.Caption := ZCV.Cells[I_FN_ZAK, ZCV.ROW];
    Form3.Label4.Caption := IntToStr(ZCV.Row);
    Form3.Label5.Caption := IntToStr(ZCV.Col);
    Form3.Memo1.Text := Form1.ZCV.Cells[11, ZCV.Row];
    Form3.LabGP.Caption := ZCV.Cells[30, ZCV.ROW];
    Form3.LabKO.Caption := ZCV.Cells[31, ZCV.ROW];
    Form3.Caption := ZCV.Cells[0, ZCV.ROW];
    Form3.Show;
  end;

  if (ZCV.Col = 15) and ((FlagDolg = 10) or (FlagDolg = 1) or (FlagDolg = 7) or (FlagDolg = 4)) then //
  begin
    Form3.Label1.Caption := ZCV.Cells[ZCV.Col, 1];
    Form3.Label2.Caption := '0';
    Form3.Label3.Caption := ZCV.Cells[0, ZCV.ROW];
    Form3.Label6.Caption := ZCV.Cells[12, ZCV.ROW];
    Form3.Label7.Caption := ZCV.Cells[I_FN_ZAK, ZCV.ROW];
    Form3.Label4.Caption := IntToStr(ZCV.Row);
    Form3.Label5.Caption := IntToStr(ZCV.Col);
    Form3.Memo1.Text := Form1.ZCV.Cells[15, ZCV.Row];
    Form3.LabGP.Caption := ZCV.Cells[30, ZCV.ROW];
    Form3.LabKO.Caption := ZCV.Cells[31, ZCV.ROW];
    Form3.Caption := ZCV.Cells[0, ZCV.ROW];
    Form3.Show;
  end;
  if (ZCV.Col = 26) and ((FlagDolg = 0) or (FlagDolg = 7) or (FlagDolg = 1)) then
                //Кол в наличии
  begin
    FBriket.Label4.Caption := 'Кол в наличии';
    FBriket.Label1.Caption := IntToStr(27);
    FBriket.Caption := ZCV.Cells[0, ZCV.ROW];
    FBriket.Show;
  end;
  if (ZCV.Col = 27) and ((FlagDolg = 0) or (FlagDolg = 7) or (FlagDolg = 1)) then
                //Кол выданных
  begin
    FBriket.Label4.Caption := 'Кол выданных';
    FBriket.Label1.Caption := IntToStr(28);
    FBriket.Caption := ZCV.Cells[0, ZCV.ROW];
    FBriket.Show;
  end;
        //Button22.Click;
       { if (ZSG.Col = I_FN_KOL_ZAP + 7) then
        begin
                PageControl1.ActivePageIndex := 0;
                Order := ' Order By Номер';
                Button16.Click;
                Find_StringGrid(StringGrid10, ZSG.Cells[2, ZSG.Row], 2,
                        ZSG.Cells[I_FN_KOL_ZAP + 7, ZSG.Row], 5);
                //Edit3.Text := ZSG.Cells[2, ZSG.Row];
                //Label17.Caption := ZSG.Cells[I_FN_KOL_ZAP + 7,
                //        ZSG.Row];
                //Edit3Click(Sender);
        end;  }
end;

procedure TForm1.ZCVDrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
var
  Kol, Kol1, Res, Kol_OTK, Kol_dn, Kol_nal, Kol_Vid: Integer;
  Dat: TDate;
begin

        //try
      {  if ARow > 1 then
        begin
                if ZCV.Cells[4, ARow] = '' then
                        Kol := 0
                else
                        Kol := StrToInt(ZCV.Cells[4, ARow]);
                if ZCV.Cells[5, ARow] = '' then
                        Kol1 := 0
                else
                        Kol1 := StrToInt(ZCV.Cells[5, ARow]);
                ZCV.CellStyle[ACol, ARow].BGColor := clWhite;
                // Заготовка запуск  Желтый
                if (ZCV.Cells[6, ARow] <> '') then
                begin
                        ZCV.CellStyle[ACol, ARow].BGColor := RGB(247,
                                247, 131);
                end;
                // Заготовка готова Оранж
                if (ZCV.Cells[7, ARow] <> '') then
                begin
                        ZCV.CellStyle[ACol, ARow].BGColor := RGB(153,
                                102, 51);
                end;
                //Сборка запуск Светло зеленый
                if (ZCV.Cells[9, ARow] <> '') then
                begin
                        ZCV.CellStyle[ACol, ARow].BGColor := RGB(0, 255,
                                0);

                end;
                // Сборка готова  Зеленый
                if (ZCV.Cells[10, ARow] <> '') then
                begin
                        ZCV.CellStyle[ACol, ARow].BGColor := RGB(102,
                                255, 204);

                end;
                // OTK  Темно зеленый
                if ZCV.Cells[14, ARow] = '' then
                        Kol_Otk := 0
                else
                        Kol_OTK := StrToInt(ZCV.Cells[14, ARow]);
                if (Kol_OTK = Kol1) then
                begin
                        ZCV.CellStyle[ACol, ARow].BGColor := RGB(0, 100,
                                0);

                end;
                if (Kol_OTK < Kol1) and (Kol_OTK <> 0) then //Красный
                begin
                        ZCV.CellStyle[ACol, ARow].BGColor := RGB(250, 0,
                                0);

                end;
                if (ZCV.Cells[16, ARow] <> '') then
                        //Отгрузка синий
                begin
                        ZCV.CellStyle[ACol, ARow].BGColor := RGB(30,
                                144, 255);

                end;
                if (Kol1 = 0) then
                begin
                        ZCV.CellStyle[ACol, ARow].BGColor := clWindow;
                end;
                if ZCV.Cells[20, ARow] <> '' then
                begin
                        Dat := StrToDate(ZCV.Cells[20, ARow]);
                        Kol_Dn := (Trunc(Now) - Trunc(Dat));
                        // Плановая дата истекла

                        if (Kol_Dn > 1) and (ZCV.Cells[10, ARow] =
                                '') and (ACol = 10) then
                        begin

                                ZCV.CellStyle[ACol, ARow].BGColor := RGB(242,
                                        12,
                                        20); //Красный
                        end;

                end;
                if (ZCV.Cells[19, ARow] <> '') then
                        //Отмена Серый
                begin
                        ZCV.CellStyle[ACol, ARow].BGColor := clGray;
                end;
                if ZCV.Cells[26, ARow] = '' then
                        Kol_Nal := 0
                else
                        Kol_nal := StrToInt(ZCV.Cells[26, ARow]);
                if ZCV.Cells[27, ARow] = '' then
                        Kol_Vid := 0
                else
                        Kol_vid := StrToInt(ZCV.Cells[27, ARow]);
                {if (ZCV.Col=I_FN_KOL_ZAP+ 21) AND (Kol_nal=Kol) then
                        //привода В наличии Все синий
                begin
                        ZCV.CellStyle[I_FN_KOL_ZAP+ 21, ARow].BGColor := clActiveCaption;
                end;
                if (ZCV.Col=I_FN_KOL_ZAP+ 21) AND (Kol_Vid=Kol) then
                        //привода Выданнх Все Салатовый
                begin
                        ZCV.CellStyle[I_FN_KOL_ZAP+ 22, ARow].BGColor := clAqua;
                end;
        end; }
        { except
                 Exit;
                 MessageDlg('ZCV.DrawCell!', mtError,
                         [mbOk], 0);
         end; }
end;

procedure TForm1.SpeedButton1Click(Sender: TObject);
begin
  ExportGridtoExcel2(ZCV);
end;

procedure TForm1.ZCVMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
// Эмуляция нажатия мыши
  if Button = mbRight then
    mouse_event(MOUSEEVENTF_LEFTDOWN or MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
end;

procedure TForm1.ZCVMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  I, J, X1: Integer;
  myRect: TGridRect;
  Sum: Double;
begin
{  ZCV.Cells[37, 1] := 'Расключение';
  ZCV.Cells[38, 1] := 'Сборка лопаток';
  ZCV.Cells[39, 1] := 'Сборка тяг';
  ZCV.Cells[40, 1] := 'СборкаРеш';
  ZCV.Cells[41, 1] := 'Обварка';
}
  if (ZCV.Col = 4) or (ZCV.Col = 5) or (ZCV.Col = I_FN_KOL_ZAP + 10)
  or (ZCV.Col = 21) or (ZCV.Col = 22) or (ZCV.Col = 25) or (ZCV.Col = 26)
   or (ZCV.Col = 37) or (ZCV.Col = 38) or (ZCV.Col = 39) or (ZCV.Col = 40) or (ZCV.Col = 41)
   then
  begin
    Sum := 0;
    myRect := ZCV.Selection;
    for I := myRect.Left to myRect.Right do
      for J := myRect.Top to myRect.Bottom do
      begin
        try
          if ZCV.Cells[I, J] <> '' then
            Sum := Sum + StrToFloat(ZCV.Cells[I, J]);
        except
          Break;
        end;
      end;
    StatusBar2.Panels[2].Text := FloattOsTR(Sum);

  end;
  Clear_StringGrid(SG212);
  X1 := 0;
  myRect := ZCV.Selection;
  for I := myRect.Left to myRect.Right do
    for J := myRect.Top to myRect.Bottom do
    begin
      SG212.Cells[0, X1] := ZCV.Cells[0, J]; //Nom
      SG212.Cells[1, X1] := ZCV.Cells[30, J]; //IDGP
      SG212.Cells[2, X1] := ZCV.Cells[31, J]; //IDGP
      SG212.RowCount := X1 + 1;
      Inc(X1);
    end;
end;

procedure TForm1.ZCVSelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
var
  R: TRect;
begin
  ComboBox22.Visible := False;
  if ((ACol = 17) and (ARow <> 0) and (ZCV.Cells[10, ZCV.Row] = '')) and ((FlagDolg = 4) or (FlagDolg = 1) or (FlagDolg = 10) or (FlagDolg = 7)) then
  begin
                {Ширина и положение ComboBox должно соответствовать ячейке StringGrid}
    R := ZCV.CellRect(ACol, ARow);
    R.Left := R.Left + ZCV.Left;
    R.Right := R.Right + ZCV.Left;
    R.Top := R.Top + ZCV.Top;
    R.Bottom := R.Bottom + ZCV.Top;
    ComboBox22.Left := R.Left + 1;
    ComboBox22.Top := R.Top + 1;
    ComboBox22.Width := (R.Right + 1) - R.Left;
    ComboBox22.Height := (R.Bottom + 1) - R.Top; {Покажем combobox}
    ComboBox22.Visible := True;
  end;
  TmpColVoz := ACol;
  TmpRowVoz := ARow;
end;

procedure TForm1.ComboBox22Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [%s]=%s WHERE ([IDГП]=%s) AND (IDКО=%s)', ['KlapanaZap', 'Сборщик', #39 + ComboBox22.Items[ComboBox22.ItemIndex] + #39, #39 + ZCV.Cells[30, ZCV.Row] + #39, #39 + ZCV.Cells[31, ZCV.Row] + #39]) then
    Exit;
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [%s]=%s WHERE ([IDГП]=%s) AND (IDКО=%s) AND (Id=%s)', ['ЗапускВозд', 'Сборщик', #39 + ComboBox22.Items[ComboBox22.ItemIndex] + #39, #39 + ZCV.Cells[30, ZCV.Row] + #39, #39 + ZCV.Cells[31, ZCV.Row] + #39, #39 + ZCV.Cells[18, ZCV.Row] + #39]) then
    Exit;
  ZCV.Cells[17, ZCV.Row] := ComboBox22.Items[ComboBox22.ItemIndex];
  ComboBox22.Visible := False;
end;

procedure TForm1.N22Click(Sender: TObject);
begin
  Zapusk2 := 1;
  FNewNakl.Label2.Caption := ZSG.Cells[0, ZSG.Row];
  FNewNakl.ShowModal;

end;

function TForm1.SUT_Kanal_GKV(Dat3, Nom3, Dir1: string; qq, Cvet: Integer; Prim: string): string;
var
  XL2, Sheet1, Sheet2, Sheet3, Rang: Variant;
  E, E1, i, Res, Priv, Kol_Zap, u, r, uu, ff, ff1, j: Integer;
  Vn_DAt, Vn_DAt1, Dir, God, mes, Nom, S_Svar, S_Sbor, Sbor_Lop, Sbor_Tyag, Priv_Str, idgp, IDKO, Zak, Izdel, Leg, Kol_S, Stan, Oboz, Elem, Mat, Err, id_lop, s, S1, Lop, Dir2, Tab1, Tab2, Tab3, BZ, Brik, SS_SS, SS_SS1, Str, A_S, B_S, F_S, Prim1, Mod_Priv, K, P, Nom1: string;
  Svar_o, Sbor_o, Kol_D, Kol1, Kol2, Kol3, Kol4, Kol5, Kol6, Kol7, Kol8, Kol_T, F, F1, s_L, S_T, Ten, Ten_Priv, P_K, P_P: Double;
  Res_Nog, Res_Trumph, Res_Gib, Res_Pila, Kanban, Val, Svark, Rotor, Pokr, Kol_LOP, fff, FFF1, gggg, G1, q, Q1, A, B, Zvez, Kanal, I2, E2, Kol_Klap, Kol_Ten, H: Integer;
  BZ1: Boolean;
  d: TDate;
begin
  Kol1 := 0;
  Q1 := 1;
  Kol2 := 0;
  Kol3 := 0;
  Kol4 := 0;
  Kol5 := 0;
  Kol6 := 0;
  Kol7 := 0;
  Kol8 := 0;
  Kol_T := 0;
  Kol_Ten := 0;
  Kol_Klap := 0;
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  q := qq;
  if q = 0 then
  begin
    Tab1 := 'Запуск';
    Tab2 := 'Специф';
    Tab3 := 'Klapana';
  end;
  if q = 1 then
  begin
    Tab1 := 'ЗапускВозд';
    Tab2 := 'СпецифВозд';
    Tab3 := 'KlapanaZap';
  end;
  if q = 2 then
  begin
    Tab1 := '[Запуск750]';
    Tab2 := '[Специф750]';
    Tab3 := '[750]';
  end;
  B := 0;
  H := 0;
  Dir2 := Dir1;
  Vn_DAt := Dat3; //dd.mm/YYYY//FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  d := StrToDate(Vn_DAt);
  Vn_DAt1 := FormatDateTime('mm.dd.yyyy', d);
  God := FormatDateTime('yyyy', d);
  mes := FormatDateTime('mmmm', d);
  for I2 := 0 to Memo27.Lines.Count - 1 do
  begin
    if Memo27.Lines.Strings[I2] <> '' then
      Nom1 := Nom1 + '_' + Memo27.Lines.Strings[I2];
  end;
  Dir := Put_KTO + '\CKlapana\' + Dir2 + '\';
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\' + Dir2 + '\' + God;
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\' + Dir2 + '\' + God + '\' + mes + '\';
  CreateDir(Dir);

  XL2 := CreateOleObject('Excel.Application');
  CopyFile(PWideChar(Put_KTO + '\CKlapana2\2013\SUT_Kanal_GKV.xlsx'), PWideChar(Dir + '\' + Vn_DAt + ' СутЗадан_Kanal_GKV № ' + Nom1 + '.xlsx'), False);

  XL2.Workbooks.Open(Dir + '\' + Vn_DAt + ' СутЗадан_Kanal_GKV № ' + Nom1 + '.xlsx');
  XL2.Application.EnableEvents := false;
  //XL2.visible:=True;
  u := 6;
  Form1.Clear_StringGrid(SG8);
  Form1.Clear_StringGrid(SG9);
  fff := 0;
  FFF1 := 0;
  E1 := 7;
  E2 := 1;
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  for I2 := 0 to Memo27.Lines.Count - 1 do
  begin
    if Memo27.Lines.Strings[I2] = '' then
      Break;
    Nom := Memo27.Lines.Strings[I2];
    if not mkQuerySelect(ADOQuery2, 'Select * from %s  Where Номер=' + #39 + Nom + #39+' Отмена IS NULL', [Tab1]) then
      exit;
    for E := 1 to ADOQuery2.RecordCount do
    begin
    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

      Kol_Zap := ADOQuery2.FieldByName('Кол во запущенных').AsInteger;
      Kol_Klap := ADOQuery2.FieldByName('Кол во запущенных').AsInteger;
      idgp := ADOQuery2.FieldByName('IdГП').AsString;
      IDKO := ADOQuery2.FieldByName('IdКО').AsString;
      Zak := ADOQuery2.FieldByName('Заказ').AsString;
      Izdel := ADOQuery2.FieldByName('Изделие').AsString;
      Prim1 := ADOQuery2.FieldByName('Сборка Примечание').AsString;

      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 2] := ADOQuery2.FieldByName('Заказ').AsString;
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 3] := ADOQuery2.FieldByName('БЗ').AsString;
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 4] := Izdel; //ADOQuery2.FieldByName('Изделие').AsString;

      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 5] := ADOQuery2.FieldByName('Кол во запущенных').AsString;

      if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 +
      ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ') AND (ВидЭлемента = ' + #39 + '%s' + #39 +
      ') ', [Tab2, 'Сборочные единицы']) then //
        exit;

      if Form1.Qry1.RecordCount <> 0 then
      begin
        B := Qry1.FieldByName('Длина').AsInteger; //
        H := Qry1.FieldByName('Ширина').AsInteger; //
      end;

      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 6] := 'Шинка Е20';
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 7] := IntToStr(B - 30);
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 8] := '4';
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 9] := IntToStr(Kol_Zap * 4);

      inc(E2);
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 6] := 'Шинка Е20';
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 7] := IntToStr(H - 30);
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 8] := '4';
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 9] := IntToStr(Kol_Zap * 4);

      XL2.ActiveWorkBook.WorkSheets[1].Cells[2, 5] := Nom1;
      XL2.ActiveWorkBook.WorkSheets[1].Cells[5, 1] := Nom1;
      XL2.ActiveWorkBook.WorkSheets[1].Cells[13, 1] := Vn_DAt;

      inc(E2);
      ADOQuery2.Next;
    end;
  end;
  XL2.Visible := True;
  XL2 := UnAssigned;
end;

function TForm1.SUT_Kanal(Dat3, Nom3, Dir1: string; qq, Cvet: Integer; Prim: string): string;
var
  XL2, Sheet1, Sheet2, Sheet3, Rang: Variant;
  E, E1, i, Res, Priv, Kol_Zap, u, r, uu, ff, ff1, j: Integer;
  Vn_DAt, Vn_DAt1, Dir, God, mes, Nom, S_Svar, S_Sbor, Sbor_Lop, Sbor_Tyag, Priv_Str, idgp, IDKO, Zak, Izdel, Leg, Kol_S, Stan, Oboz, Elem, Mat, Err, id_lop, s, S1, Lop, Dir2, Tab1, Tab2, Tab3, BZ, Brik, SS_SS, SS_SS1, Str, A_S, B_S, F_S, Prim1, Mod_Priv, K, P, Nom1: string;
  Svar_o, Sbor_o, Kol_D, Kol1, Kol2, Kol3, Kol4, Kol5, Kol6, Kol7, Kol8, Kol_T, F, F1, s_L, S_T, Ten, Ten_Priv, P_K, P_P: Double;
  Res_Nog, Res_Trumph, Res_Gib, Res_Pila, Kanban, Val, Svark, Rotor, Pokr, Kol_LOP, fff, FFF1, gggg, G1, q, Q1, A, B, Zvez, Kanal, I2, E2, Kol_Klap, Kol_Ten: Integer;
  BZ1: Boolean;
  d: TDate;
begin
  Kol1 := 0;
  Q1 := 1;
  Kol2 := 0;
  Kol3 := 0;
  Kol4 := 0;
  Kol5 := 0;
  Kol6 := 0;
  Kol7 := 0;
  Kol8 := 0;
  Kol_T := 0;
  Kol_Ten := 0;
  Kol_Klap := 0;
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  q := qq;
  if q = 0 then
  begin
    Tab1 := 'Запуск';
    Tab2 := 'Специф';
    Tab3 := 'Klapana';
  end;
  if q = 1 then
  begin
    Tab1 := 'ЗапускВозд';
    Tab2 := 'СпецифВозд';
    Tab3 := 'KlapanaZap';
  end;
  if q = 2 then
  begin
    Tab1 := '[Запуск750]';
    Tab2 := '[Специф750]';
    Tab3 := '[750]';
  end;
  Dir2 := Dir1;
  Vn_DAt := Dat3; //dd.mm/YYYY//FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  d := StrToDate(Vn_DAt);
  Vn_DAt1 := FormatDateTime('mm.dd.yyyy', d);
  God := FormatDateTime('yyyy', d);
  mes := FormatDateTime('mmmm', d);
  for I2 := 0 to Memo27.Lines.Count - 1 do
  begin
    if Memo27.Lines.Strings[I2] <> '' then
      Nom1 := Nom1 + '_' + Memo27.Lines.Strings[I2];
  end;
  Dir := Put_KTO + '\CKlapana\' + Dir2 + '\';
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\' + Dir2 + '\' + God;
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\' + Dir2 + '\' + God + '\' + mes + '\';
  CreateDir(Dir);

  XL2 := CreateOleObject('Excel.Application');
  CopyFile(PWideChar(Put_KTO + '\CKlapana2\2013\SUT_Kanal.xlsx'), PWideChar(Dir + '\' + Vn_DAt + ' СутЗадан_Kanal № ' + Nom1 + '.xlsx'), False);

  XL2.Workbooks.Open(Dir + '\' + Vn_DAt + ' СутЗадан_Kanal № ' + Nom1 + '.xlsx');
  XL2.Application.EnableEvents := false;
  //XL2.visible:=True;
  u := 6;
  Form1.Clear_StringGrid(SG8);
  Form1.Clear_StringGrid(SG9);
  fff := 0;
  FFF1 := 0;
  E1 := 7;
  E2 := 1;
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  for I2 := 0 to Memo27.Lines.Count - 1 do
  begin
    if Memo27.Lines.Strings[I2] = '' then
      Break;
    Nom := Memo27.Lines.Strings[I2];
    if not mkQuerySelect(ADOQuery2, 'Select * from %s  Where Номер=' + #39 + Nom + #39+' AND Отмена IS NULL', [Tab1]) then
      exit;
    for E := 1 to ADOQuery2.RecordCount do
    begin
      Form1.Memo2.Lines.Add(ADOQuery2.FieldByName('Н\ч Сварка').AsString);
      Svar_o := RoundTo(Svar_o + StrToFloat(ADOQuery2.FieldByName('Н\ч Сварка').AsString), -2);
      Sbor_o := RoundTo(Sbor_o + StrToFloat(ADOQuery2.FieldByName('Н\ч Сборка Клапана').AsString), -2);
    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      S_Svar := ADOQuery2.FieldByName('Н\ч Сварка').AsString;
      S_Sbor := ADOQuery2.FieldByName('Н\ч Сборка Клапана').AsString;
    //
      Sbor_Lop := ADOQuery2.FieldByName('Сборка лопаток').AsString;
      Sbor_Tyag := ADOQuery2.FieldByName('Сборка тяг').AsString;

      BZ := ADOQuery2.FieldByName('БЗ').AsString;
      Brik := ADOQuery2.FieldByName('Брикет').AsString;
      Priv := ADOQuery2.FieldByName('Привод').AsInteger;
      Mod_Priv := ADOQuery2.FieldByName('МодПривода').AsString;
      Kol_Zap := ADOQuery2.FieldByName('Кол во запущенных').AsInteger;
      Kol_Klap := ADOQuery2.FieldByName('Кол во запущенных').AsInteger;
      idgp := ADOQuery2.FieldByName('IdГП').AsString;
      IDKO := ADOQuery2.FieldByName('IdКО').AsString;
      Zak := ADOQuery2.FieldByName('Заказ').AsString;
      Izdel := ADOQuery2.FieldByName('Изделие').AsString;
      Prim1 := ADOQuery2.FieldByName('Сборка Примечание').AsString;
      Kol_Ten:=0;
      Elem :='';
      Res := Pos(' ', Izdel);
      if Res <> 0 then
        Delete(Izdel, 1, 7);
      Priv_Str := IntToStr(Priv);
      Res := Pos(',', S_Svar);
      Delete(S_Svar, Res, 1);
      if Res <> 0 then
        Insert('.', S_Svar, Res);

      Res := Pos(',', S_Sbor);
      Delete(S_Sbor, Res, 1);
      if Res <> 0 then
        Insert('.', S_Sbor, Res);

      s := '%Нагреватель электрический%';
      if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ') AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //
        exit;

      if Form1.Qry1.RecordCount <> 0 then
      begin
        Elem := Qry1.FieldByName('Элемент').AsString; //Нагреватель электрический ТЭН 205В10/2,5N220_ВМ-1414.00.000

        Res := Pos(' ', Elem);
        if Res <> 0 then
          Delete(Elem, 1, Res);
      //
        Res := Pos(' ', Elem);
        if Res <> 0 then
          Delete(Elem, 1, Res);

        SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');

        s := Qry1.FieldByName('Количество').AsString;
        SS_SS := StringReplace(s, ',', '.', [rfReplaceAll]);
        Kol_Ten := StrToInt(SS_SS) * Kol_Klap;
      end;
   // Leg:=Form1.Qry1.FieldByName('Заказчик').AsString;
   // BZ1:=Form1.Qry1.FieldByName('bz').AsBoolean;
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 2] := ADOQuery2.FieldByName('Заказ').AsString;
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 3] := ADOQuery2.FieldByName('БЗ').AsString;
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 4] := Izdel; //ADOQuery2.FieldByName('Изделие').AsString;
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 5] := ADOQuery2.FieldByName('Брикет').AsString;

    {XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 6] := ADOQuery2.FieldByName('A').AsString;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 7] := ADOQuery2.FieldByName('B').AsString;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 8] := ADOQuery2.FieldByName('МодПривода').AsString; }
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 9] := IntToStr(Kol_Ten);
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 10] := ADOQuery2.FieldByName('Кол во запущенных').AsString;

      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 12] := S_Svar;
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 11] := S_Sbor;
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 13] := Prim1;
      Res := Pos('ЛЕГИОН', AnsiUpperCase(Leg));
      if Res <> 0 then
      begin
        XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 13] := 'Легион';
        XL2.ActiveWorkBook.WorkSheets[1].Range['M' + IntToStr((E2) + (6)) + ':M' + IntToStr((E2) + (6))].Interior.Color := 255; //
      end;
      if BZ1 then
      begin
        XL2.ActiveWorkBook.WorkSheets[1].Cells[(E2) + (6), 14] := 'Не Стандарт';
        XL2.ActiveWorkBook.WorkSheets[1].Range['N' + IntToStr((E2) + (6)) + ':N' + IntToStr((E2) + (6))].Interior.Color := 255; //
      end;
      XL2.ActiveWorkBook.WorkSheets[1].Cells[2, 5] := Nom1;
      XL2.ActiveWorkBook.WorkSheets[1].Cells[5, 1] := Nom1;
      XL2.ActiveWorkBook.WorkSheets[1].Cells[13, 1] := Vn_DAt;
      if Cvet = 1 then
      begin
        XL2.ActiveWorkBook.WorkSheets[1].Range['A2:N2'].Interior.Color := 3010538; //Желтый
        XL2.ActiveWorkBook.WorkSheets[6].Range['A2:N2'].Interior.Color := 3010538; //Желтый
        XL2.ActiveWorkBook.WorkSheets[7].Range['A2:N2'].Interior.Color := 3010538; //Желтый
      end;
      if Cvet = 2 then
      begin
        XL2.ActiveWorkBook.WorkSheets[1].Range['A2:N2'].Interior.Color := 6877993; //Зеленый
        XL2.ActiveWorkBook.WorkSheets[6].Range['A2:N2'].Interior.Color := 6877993; //Зеленый
        XL2.ActiveWorkBook.WorkSheets[7].Range['A2:N2'].Interior.Color := 6877993; //Зеленый
      end;
      if Cvet = 3 then
      begin
        XL2.ActiveWorkBook.WorkSheets[1].Range['A2:N2'].Interior.Color := 16424058; //Синий
        XL2.ActiveWorkBook.WorkSheets[6].Range['A2:N2'].Interior.Color := 16424058; //Синий
        XL2.ActiveWorkBook.WorkSheets[7].Range['A2:N2'].Interior.Color := 16424058; //Синий
      end;
    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Склад
    //Sheet2 := XL2.ActiveWorkBook.WorkSheets[6];//XL2.WorkSheets.Add;
   // Sheet2.Activate;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      j := XL2.ActiveWorkBook.Sheets.Count;
      for i := 1 to j do
        Str := XL2.ActiveWorkBook.WorkSheets[i].Name;
      XL2.ActiveWorkBook.WorkSheets[6].Cells[(E2) + (6), 2] := ADOQuery2.FieldByName('Заказ').AsString;
      XL2.ActiveWorkBook.WorkSheets[6].Cells[(E2) + (6), 3] := ADOQuery2.FieldByName('БЗ').AsString;
      XL2.ActiveWorkBook.WorkSheets[6].Cells[(E2) + (6), 4] := Izdel; //ADOQuery2.FieldByName('Изделие').AsString;
      XL2.ActiveWorkBook.WorkSheets[6].Cells[(E2) + (6), 5] := ADOQuery2.FieldByName('Брикет').AsString;

   { XL2.ActiveWorkBook.WorkSheets[6].Cells[(E2) + (6), 6] := ADOQuery2.FieldByName('A').AsString;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E2) + (6), 7] := ADOQuery2.FieldByName('B').AsString;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E2) + (6), 8] := ADOQuery2.FieldByName('МодПривода').AsString; }
      XL2.ActiveWorkBook.WorkSheets[6].Cells[(E2) + (6), 9] := IntToStr(Kol_Ten);
      XL2.ActiveWorkBook.WorkSheets[6].Cells[(E2) + (6), 10] := ADOQuery2.FieldByName('Кол во запущенных').AsString;

      XL2.ActiveWorkBook.WorkSheets[6].Cells[(E2) + (6), 12] := S_Svar;
      XL2.ActiveWorkBook.WorkSheets[6].Cells[(E2) + (6), 11] := S_Sbor;
      XL2.ActiveWorkBook.WorkSheets[6].Cells[(E2) + (6), 13] := Prim1;
      XL2.ActiveWorkBook.WorkSheets[6].Cells[2, 5] := Nom1;
      XL2.ActiveWorkBook.WorkSheets[6].Cells[5, 1] := Nom1;
      XL2.ActiveWorkBook.WorkSheets[6].Cells[13, 1] := Vn_DAt;

    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ОТК
      Sheet2 := XL2.ActiveWorkBook.WorkSheets[7]; //XL2.WorkSheets.Add;
      Sheet2.Activate;
      XL2.ActiveWorkBook.WorkSheets[7].Cells[(E2) + (6), 2] := ADOQuery2.FieldByName('Заказ').AsString;
      XL2.ActiveWorkBook.WorkSheets[7].Cells[(E2) + (6), 3] := ADOQuery2.FieldByName('БЗ').AsString;
      XL2.ActiveWorkBook.WorkSheets[7].Cells[(E2) + (6), 4] := Izdel; //ADOQuery2.FieldByName('Изделие').AsString;
      XL2.ActiveWorkBook.WorkSheets[7].Cells[(E2) + (6), 5] := ADOQuery2.FieldByName('Брикет').AsString;

   { XL2.ActiveWorkBook.WorkSheets[7].Cells[(E2) + (6), 6] := ADOQuery2.FieldByName('A').AsString;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E2) + (6), 7] := ADOQuery2.FieldByName('B').AsString;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E2) + (6), 8] := ADOQuery2.FieldByName('МодПривода').AsString; }
      XL2.ActiveWorkBook.WorkSheets[7].Cells[(E2) + (6), 9] := IntToStr(Kol_Ten);
      XL2.ActiveWorkBook.WorkSheets[7].Cells[(E2) + (6), 10] := ADOQuery2.FieldByName('Кол во запущенных').AsString;

      XL2.ActiveWorkBook.WorkSheets[7].Cells[(E2) + (6), 12] := S_Svar;
      XL2.ActiveWorkBook.WorkSheets[7].Cells[(E2) + (6), 11] := S_Sbor;
      XL2.ActiveWorkBook.WorkSheets[7].Cells[(E2) + (6), 13] := Prim1;
      XL2.ActiveWorkBook.WorkSheets[7].Cells[2, 5] := Nom1;
      XL2.ActiveWorkBook.WorkSheets[7].Cells[5, 1] := Nom1;
      XL2.ActiveWorkBook.WorkSheets[7].Cells[13, 1] := Vn_DAt;
      Res := Pos('ЛЕГИОН', AnsiUpperCase(Leg));
      if Res <> 0 then
      begin
        XL2.ActiveWorkBook.WorkSheets[7].Cells[(E2) + (6), 13] := 'Легион';
        XL2.ActiveWorkBook.WorkSheets[7].Range['M' + IntToStr((E2) + (6)) + ':M' + IntToStr((E2) + (6))].Interior.Color := 255; //
      end;
      if BZ1 then
      begin
        XL2.ActiveWorkBook.WorkSheets[7].Cells[(E2) + (6), 14] := 'Не Стандарт';
        XL2.ActiveWorkBook.WorkSheets[7].Range['N' + IntToStr((E2) + (6)) + ':N' + IntToStr((E2) + (6))].Interior.Color := 255; //
      end;
      inc(E2);
    //-----------------------------------------------
    //____________Кабель
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Sheet2 := XL2.ActiveWorkBook.WorkSheets[5]; //XL2.WorkSheets.Add;
      Sheet2.Activate;

      XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (17), 9] := IntToStr(Kol_Ten);         //Кабель на клап
      XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (17), 4] := Elem;

      inc(Q1);
      //inc(Q1);

      ADOQuery2.Next;
    end;
  end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++ WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
    //Создание временной таблицы  idgp,zakaz,Nom
 { SetConnectTemp(ADOQueryTemp);
    //Создание временной таблицы
  ADOQueryTemp:=TADOQuery.Create(nil);
  ADOQueryTemp.Connection:=ADOConnectionTemp;

  ADOQueryTemp.SQL.Text:='CREATE TABLE #ClientToDBFL (Elem nvarchar(350),'+
  'Obozn nvarchar(350) ,Mat nvarchar(100),Kol float,'+
  'idgp  nvarchar(100),zakaz nvarchar(100),Nom nvarchar(100)'+
  ',Stan nvarchar(100))';
  try
    ADOQueryTemp.ExecSQL;
  except
  Err:='1222';
  end;
  for ff := 0 to SG9.RowCount - 1 do
    begin
        Elem:=SG9.Cells[0,ff+1];
        if Elem='' then
        Continue;
        Oboz:=SG9.Cells[1,ff+1];
        Kol_S:=StringReplace(SG9.Cells[2,ff+1],',','.',[rfReplaceAll]);
        idgp:=SG9.Cells[4,ff+1];
        Mat:=SG9.Cells[5,ff+1];
        Izdel:=SG9.Cells[6,ff+1];
        Nom:=SG9.Cells[7,ff+1];


        //SetConnectTemp(ADOQueryTemp);
          ADOQueryTemp.SQL.Text:='INSERT INTO #ClientToDBFL '+
          '(Elem,Obozn,Kol,Mat,idgp,zakaz,Nom,stan) Values ('
          +#39+Elem+#39+
        ','+#39+Oboz+#39+
        ','+#39+Kol_S+#39+
        ','+#39+Mat+#39+
        ','+#39+idgp+#39+
        ','+#39+Zak+#39+
        ','+#39+Nom+#39+
        ','+#39+Stan+#39+
        ')';
        try
        ADOQueryTemp.ExecSQL;
        except
        Err:='1222';
        end;
    end;  }
  //
  XL2.Visible := True;
  Sheet1 := UnAssigned;
  Sheet2 := UnAssigned;
  Sheet3 := UnAssigned;
  XL2 := UnAssigned;
end;
//
function TForm1.SUT1(Dat3, Nom3, Dir1: string; qq, Cvet: Integer; Prim: string): string;
var
  XL2, Sheet1, Sheet2, Sheet3, Rang: Variant;
  E, E1, i, Res, Priv, Kol_Zap, u, r, uu, ff, ff1, j: Integer;
  Vn_DAt, Vn_DAt1, Dir, God, mes, Nom, S_Svar, S_Sbor, Sbor_Lop, Sbor_Tyag,
  Priv_Str, idgp, IDKO, Zak, Izdel, Leg, Kol_S, Stan, Oboz, Elem, Mat, Err,
  id_lop, s, S1, Lop, Dir2, Tab1, Tab2, Tab3, BZ, Brik, SS_SS, SS_SS1, Str,
  A_S, B_S, F_S, Prim1, Mod_Priv, K, P,Prov1,Prov2: string;
  Svar_o, Sbor_o, Kol_D, Kol1, Kol2, Kol3, Kol4, Kol5, Kol6, Kol7, Kol8, Kol_T, Kol_Ten, F, F1, s_L, S_T, Ten,
 Kol_LOP, Ten_Priv, P_K, P_P: Double;
  Res_Nog, Res_Trumph, Res_Gib, Res_Pila, Kanban, Val, Svark, Rotor, Pokr,
   fff, FFF1, gggg, G1, q, Q1, A, B, Zvez, Kanal: Integer;
  BZ1: Boolean;
  d: TDate;
begin
  Kol1 := 0;
  Q1 := 1;
  Kol2 := 0;
  Kol3 := 0;
  Kol4 := 0;
  Kol5 := 0;
  Kol6 := 0;
  Kol7 := 0;
  Kol8 := 0;
  Kol_T := 0;
  Kol_Ten := 0;
  Prov1:='';
  Prov2:='';
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  q := qq;
  if q = 0 then
  begin
    Tab1 := 'Запуск';
    Tab2 := 'Специф';
    Tab3 := 'Klapana';
  end;

  Dir2 := Dir1;
  Vn_DAt := Dat3; //dd.mm/YYYY//FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  d := StrToDate(Vn_DAt);
  Vn_DAt1 := FormatDateTime('mm.dd.yyyy', d);
  God := FormatDateTime('yyyy', d);
  mes := FormatDateTime('mmmm', d);
  Nom := Nom3;
  Dir := Put_KTO + '\CKlapana\' + Dir2 + '\';
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\' + Dir2 + '\' + God;
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\' + Dir2 + '\' + God + '\' + mes + '\';
  CreateDir(Dir);

  XL2 := CreateOleObject('Excel.Application');
  CopyFile(PWideChar(Put_KTO + '\CKlapana2\2013\SUT1.xlsx'), PWideChar(Dir + '\' + Vn_DAt + ' СутЗадан_КПУ_КПД № ' + Nom + '.xlsx'), False);

  XL2.Workbooks.Open(Dir + '\' + Vn_DAt + ' СутЗадан_КПУ_КПД № ' + Nom + '.xlsx');
  XL2.Application.EnableEvents := false;
  //XL2.visible:=True;
  u := 6;
  Form1.Clear_StringGrid(SG8);
  Form1.Clear_StringGrid(SG9);
  fff := 0;
  FFF1 := 0;
  E1 := 7;
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  if not mkQuerySelect(ADOQuery2, 'Select * from %s  Where Номер=' + #39 + Nom + #39, [Tab1]) then
    exit;
  for E := 1 to ADOQuery2.RecordCount do
  begin
    Form1.Memo2.Lines.Add(ADOQuery2.FieldByName('Н\ч Сварка').AsString);
    Svar_o := RoundTo(Svar_o + StrToFloat(ADOQuery2.FieldByName('Н\ч Сварка').AsString), -2);
    Sbor_o := RoundTo(Sbor_o + StrToFloat(ADOQuery2.FieldByName('Н\ч Сборка Клапана').AsString), -2);
    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    S_Svar := ADOQuery2.FieldByName('Н\ч Сварка').AsString;
    S_Sbor := ADOQuery2.FieldByName('Н\ч Сборка Клапана').AsString;
    //
    Sbor_Lop := ADOQuery2.FieldByName('Сборка лопаток').AsString;
    Sbor_Tyag := ADOQuery2.FieldByName('Сборка тяг').AsString;

    BZ := ADOQuery2.FieldByName('БЗ').AsString;
    Brik := ADOQuery2.FieldByName('Брикет').AsString;
    Priv := ADOQuery2.FieldByName('Привод').AsInteger;
    Mod_Priv := ADOQuery2.FieldByName('МодПривода').AsString;
    Kol_Zap := ADOQuery2.FieldByName('Кол во запущенных').AsInteger;
    idgp := ADOQuery2.FieldByName('IdГП').AsString;
    IDKO := ADOQuery2.FieldByName('IdКО').AsString;
    Zak := ADOQuery2.FieldByName('Заказ').AsString;
    Izdel := ADOQuery2.FieldByName('Изделие').AsString;
    Prim1 := ADOQuery2.FieldByName('Сборка Примечание').AsString;
    SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
    Res := Pos(' ', Izdel);
    if Res <> 0 then
      Delete(Izdel, 1, 7);
    Priv_Str := IntToStr(Priv);
    Res := Pos(',', S_Svar);
    Delete(S_Svar, Res, 1);
    if Res <> 0 then
      Insert('.', S_Svar, Res);

    Res := Pos(',', S_Sbor);
    Delete(S_Sbor, Res, 1);
    if Res <> 0 then
      Insert('.', S_Sbor, Res);

    if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ') ', [Tab3]) then //
      exit;
    Leg := Form1.Qry1.FieldByName('Заказчик').AsString;
    BZ1 := Form1.Qry1.FieldByName('bz').AsBoolean;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 2] := ADOQuery2.FieldByName('Заказ').AsString;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 3] := ADOQuery2.FieldByName('БЗ').AsString;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 4] := Izdel; //ADOQuery2.FieldByName('Изделие').AsString;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 5] := ADOQuery2.FieldByName('Брикет').AsString;

   // XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 6] := ADOQuery2.FieldByName('A').AsString;
   // XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 7] := ADOQuery2.FieldByName('B').AsString;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 6] := ADOQuery2.FieldByName('МодПривода').AsString;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 7] := Priv_Str;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 8] := ADOQuery2.FieldByName('Кол во запущенных').AsString;

    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 10] := S_Svar;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 9] := S_Sbor;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 11] := Sbor_Tyag;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 12] := Sbor_Lop;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 13] := Prim1;
    Res := Pos('ЛЕГИОН', AnsiUpperCase(Leg));
    if Res <> 0 then
    begin
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 13] := 'Легион';
      XL2.ActiveWorkBook.WorkSheets[1].Range['M' + IntToStr((E) + (6)) + ':M' + IntToStr((E) + (6))].Interior.Color := 255; //
    end;
    if BZ1 then
    begin
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 14] := 'Не Стандарт';
      XL2.ActiveWorkBook.WorkSheets[1].Range['N' + IntToStr((E) + (6)) + ':N' + IntToStr((E) + (6))].Interior.Color := 255; //
    end;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[2, 5] := Nom;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[5, 1] := Nom;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[13, 1] := Vn_DAt;
    if Cvet = 1 then
    begin
      XL2.ActiveWorkBook.WorkSheets[1].Range['A2:N2'].Interior.Color := 3010538; //Желтый
      XL2.ActiveWorkBook.WorkSheets[6].Range['A2:N2'].Interior.Color := 3010538; //Желтый
      XL2.ActiveWorkBook.WorkSheets[7].Range['A2:N2'].Interior.Color := 3010538; //Желтый
    end;
    if Cvet = 2 then
    begin
      XL2.ActiveWorkBook.WorkSheets[1].Range['A2:N2'].Interior.Color := 6877993; //Зеленый
      XL2.ActiveWorkBook.WorkSheets[6].Range['A2:N2'].Interior.Color := 6877993; //Зеленый
      XL2.ActiveWorkBook.WorkSheets[7].Range['A2:N2'].Interior.Color := 6877993; //Зеленый
    end;
    if Cvet = 3 then
    begin
      XL2.ActiveWorkBook.WorkSheets[1].Range['A2:N2'].Interior.Color := 16424058; //Синий
      XL2.ActiveWorkBook.WorkSheets[6].Range['A2:N2'].Interior.Color := 16424058; //Синий
      XL2.ActiveWorkBook.WorkSheets[7].Range['A2:N2'].Interior.Color := 16424058; //Синий
    end;
    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Склад
    //Sheet2 := XL2.ActiveWorkBook.WorkSheets[6];//XL2.WorkSheets.Add;
   // Sheet2.Activate;
    SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
    j := XL2.ActiveWorkBook.Sheets.Count;
    for i := 1 to j do
      Str := XL2.ActiveWorkBook.WorkSheets[i].Name;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 2] := ADOQuery2.FieldByName('Заказ').AsString;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 3] := ADOQuery2.FieldByName('БЗ').AsString;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 4] := Izdel; //ADOQuery2.FieldByName('Изделие').AsString;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 5] := ADOQuery2.FieldByName('Брикет').AsString;

    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 6] := ADOQuery2.FieldByName('A').AsString;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 7] := ADOQuery2.FieldByName('B').AsString;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 8] := ADOQuery2.FieldByName('МодПривода').AsString;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 9] := Priv_Str;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 10] := ADOQuery2.FieldByName('Кол во запущенных').AsString;

    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 12] := S_Svar;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 11] := S_Sbor;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 13] := Prim1;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[2, 5] := Nom;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[5, 1] := Nom;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[13, 1] := Vn_DAt;

    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ОТК
    Sheet2 := XL2.ActiveWorkBook.WorkSheets[7]; //XL2.WorkSheets.Add;
    Sheet2.Activate;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 2] := ADOQuery2.FieldByName('Заказ').AsString;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 3] := ADOQuery2.FieldByName('БЗ').AsString;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 4] := Izdel; //ADOQuery2.FieldByName('Изделие').AsString;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 5] := ADOQuery2.FieldByName('Брикет').AsString;

    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 6] := ADOQuery2.FieldByName('A').AsString;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 7] := ADOQuery2.FieldByName('B').AsString;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 8] := ADOQuery2.FieldByName('МодПривода').AsString;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 9] := Priv_Str;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 10] := ADOQuery2.FieldByName('Кол во запущенных').AsString;

    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 12] := S_Svar;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 11] := S_Sbor;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 13] := Prim1;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[2, 5] := Nom;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[5, 1] := Nom;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[13, 1] := Vn_DAt;
    Res := Pos('ЛЕГИОН', AnsiUpperCase(Leg));
    if Res <> 0 then
    begin
      XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 13] := 'Легион';
      XL2.ActiveWorkBook.WorkSheets[7].Range['M' + IntToStr((E) + (6)) + ':M' + IntToStr((E) + (6))].Interior.Color := 255; //
    end;
    if BZ1 then
    begin
      XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 14] := 'Не Стандарт';
      XL2.ActiveWorkBook.WorkSheets[7].Range['N' + IntToStr((E) + (6)) + ':N' + IntToStr((E) + (6))].Interior.Color := 255; //
    end;
    //-----------------------------------------------
    //____________Кабель
    SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
    Sheet2 := XL2.ActiveWorkBook.WorkSheets[5]; //XL2.WorkSheets.Add;
    Sheet2.Activate;
    s := 'Лента нагревательная саморегулирующаяся 31VR2-Т ТУ 3558-103-33006874-2012';
    if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ') AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //
      exit;

    if Form1.Qry1.RecordCount = 0 then
    begin
      s := 'Кабель нагревательный саморегулирующий 30КСТМ2-Т ТУ 3558-081-33006874-2011';
      if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //
    end;
    if Form1.Qry1.RecordCount = 0 then
    begin
      s := 'Кабель нагревательный%';
      if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //
    end;

    if Form1.Qry1.RecordCount = 0 then
    begin
      s := 'Кабель саморегулируемый греющий 10 BTV2-CT-T6, 230V, 29W/m at 10 C,II 2 G Ex e II T6 и II 2 D Ex td A21 IP66';
      if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //

    end;
//  28.11.22 Головцова
    if Form1.Qry1.RecordCount = 0 then
    begin
      s := 'Кабель саморегулируемый%';
      if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //

    end;
    if Form1.Qry1.RecordCount = 0 then
    begin
      s := 'Кабель саморегулирующийся%';
      if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //

    end;
    if Form1.Qry1.RecordCount <> 0 then
    begin
      Prov1:=Qry1.FieldByName('Элемент').AsString;
      SS_SS := Izdel; //Клапан ГЕРМИК-П-0850-1375-Н-П-04-00-00-У2
      //Клапан ГЕРМИК-С-1000*1000-Н-1*NF230A-1-УХЛ2
      Zvez := Pos('*', Izdel);
      if Zvez <> 0 then
      begin
        Res := Pos('-', SS_SS);
        if Res <> 0 then
          Delete(SS_SS, 1, Res);
      //
        Res := Pos('-', SS_SS);
        if Res <> 0 then
          Delete(SS_SS, 1, Res);
      //
        Res := Pos('*', SS_SS);
        if Res <> 0 then
        try
          A := StrToInt(Copy(SS_SS, 1, Res - 1));
        except
          A := 0;
        end;
      //
        Res := Pos('*', SS_SS);
        if Res <> 0 then
          Delete(SS_SS, 1, Res);
      //
        Res := Pos('-', SS_SS);
        try
          B := StrToInt(Copy(SS_SS, 1, Res - 1));
        except
          B := 0;
        end;
      end
      else
      begin
        Res := Pos('-', SS_SS);
        if Res <> 0 then
          Delete(SS_SS, 1, Res);
      //
        Res := Pos('-', SS_SS);
        if Res <> 0 then
          Delete(SS_SS, 1, Res);
      //
        Res := Pos('-', SS_SS);
        if Res <> 0 then
        try
          A := StrToInt(Copy(SS_SS, 1, Res - 1));
        except
          A := 0;
        end;
      //
        Res := Pos('-', SS_SS);
        if Res <> 0 then
          Delete(SS_SS, 1, Res);
      //
        Res := Pos('-', SS_SS);
        try
          B := StrToInt(Copy(SS_SS, 1, Res - 1));
        except
          B := 0;
        end;
      end;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Priv_Str := IntToStr(Priv);
      s := Qry1.FieldByName('Количество').AsString;
      SS_SS := StringReplace(s, ',', '.', [rfReplaceAll]);
      Kol_Ten := StrToFloat(SS_SS) * 1000;

      s := Qry1.FieldByName('КолНаЕд').AsString;
      SS_SS := StringReplace(s, ',', '.', [rfReplaceAll]);
      Kol_T := StrToFloat(SS_SS) * 1000;

      Ten := Qry1.FieldByName('КолНаЕд').AsFloat;
      Ten_Priv := Qry1.FieldByName('Количество').AsFloat - Qry1.FieldByName('КолНаЕд').AsFloat;
      Kanal := Pos('Канал', Izdel);
      P_K := 0;
      P_P := 0;
      s := 'Кабель КГ-ХЛ%';
      if not Form1.mkQuerySelect1(Form1.ADOQuery1,
      'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 +
      ') AND (Заказ=' + #39 + Zak + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //
        Exit;
      if Form1.ADOQuery1.RecordCount = 0 then
      begin
        s := '%Кабель медный КГВВнг(А)%';
        if not Form1.mkQuerySelect1(Form1.ADOQuery1,
        'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 +
        ') AND (Заказ=' + #39 + Zak + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //
        Exit;
      end;
      if Form1.ADOQuery1.RecordCount = 0 then
      begin
        s := '%Кабель К9РВПМнг(А)%';
        if not Form1.mkQuerySelect1(Form1.ADOQuery1,
        'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 +
        ') AND (Заказ=' + #39 + Zak + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //
        Exit;
      end;
      if Form1.ADOQuery1.RecordCount <> 0 then
      begin
        P_P := ADOQuery1.FieldByName('Количество').AsFloat - ADOQuery1.FieldByName('КолНаЕд').AsFloat;
        P_K := ADOQuery1.FieldByName('КолНаЕд').AsFloat;
        Prov2:=ADOQuery1.FieldByName('Элемент').AsString;
      end;
      //
      //Проверка на двойной клапан
      s := 'Корпус%';
      if not Form1.mkQuerySelect1(Form1.ADOQuery1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //
        Exit;
      if Form1.ADOQuery1.RecordCount <> 0 then
      begin
        B := ADOQuery1.FieldByName('Количество').AsInteger;
      end;
     // if B=1 then
     // begin
      s := Qry1.FieldByName('Количество').AsString;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      SS_SS := StringReplace(s, ',', '.', [rfReplaceAll]);
      F := StrToFloat(SS_SS);
      F1 := F * 1000;
      Res := Pos('-МС', Mod_Priv); //      Электропривод ЭПВ-SFA-S2-L-МС
      if Res <> 0 then
      begin
        SS_SS1 := FloatToStr(F1);   //Греющий кабель внутри привода
           // SS_SS1:=FloatToStr(F1-(600*(Priv/Kol_Zap)));  //
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 6] := SS_SS1; //Кабель на клап
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 7] := '600';  //Провод на клап
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (8), 6] :=Prov1;
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (9), 6] :=Prov2;
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + 7, 6] := 'внутри привода';
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + 7, 7] := '0';
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (8), 6] :=Prov1;
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (9), 6] :=Prov2;
      end
      else
      begin
            //if Kanal<>0 then
           // Begin
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 6] := FloatToStr(Ten * 1000); //Кабель на клап
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 7] := FloatToStr(P_K * 1000);
         //Провод на клап
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + 7, 6] := FloatToStr(Ten_Priv * 1000); //
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + 7, 7] := FloatToStr(P_P * 1000);
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (8), 6] :=Prov1;
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (9), 6] :=Prov2;
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + 7, 8] := IntToStr(1);

      end;

      XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 2] := ADOQuery2.FieldByName('Заказ').AsString;
      XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 3] := ADOQuery2.FieldByName('БЗ').AsString;
      XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 4] := Izdel; //ADOQuery2.FieldByName('Изделие').AsString;
      XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 5] := ADOQuery2.FieldByName('Брикет').AsString;
      s := StringReplace(ADOQuery2.FieldByName('МодПривода').AsString, 'Электропривод', '', [RFReplaceall]);
      Priv_Str := IntToStr(Priv);
      XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 10] := s;
      XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 11] := Priv_Str;
      XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 9] := ADOQuery2.FieldByName('Кол во запущенных').AsString;

      XL2.ActiveWorkBook.WorkSheets[5].Cells[2, 5] := Nom;
      XL2.ActiveWorkBook.WorkSheets[5].Cells[5, 1] := Nom;
      XL2.ActiveWorkBook.WorkSheets[5].Cells[13, 1] := Vn_DAt;
      if Cvet = 1 then
      begin
        XL2.ActiveWorkBook.WorkSheets[5].Range['A2:L2'].Interior.Color := 3010538; //Желтый
        XL2.ActiveWorkBook.WorkSheets[5].Cells[2, 8] := 'Жел';
      end;
      if Cvet = 2 then
      begin
        XL2.ActiveWorkBook.WorkSheets[5].Range['A2:L2'].Interior.Color := 6877993; //Зеленый
        XL2.ActiveWorkBook.WorkSheets[5].Cells[2, 8] := 'Зел';
      end;
      if Cvet = 3 then
      begin
        XL2.ActiveWorkBook.WorkSheets[5].Range['A2:L2'].Interior.Color := 16424058; //Синий
        XL2.ActiveWorkBook.WorkSheets[5].Cells[2, 8] := 'Син';
      end;
      inc(Q1);
      inc(Q1);
      inc(Q1);
      inc(Q1);
    end;
  //____________Кабель
    //+ZZZZZZ

    Zak := ADOQuery2.FieldByName('Заказ').AsString;
    //Izdel:=ADOQuery2.FieldByName('Изделие').AsString;
    //Delete(Izdel,1,7);
    idgp := ADOQuery2.FieldByName('IDГП').AsString;
    IDKO := ADOQuery2.FieldByName('IDКО').AsString;
    //Priv := ADOQuery2.FieldByName('МодПривода').AsInteger;
    Kol_Zap := ADOQuery2.FieldByName('Кол во запущенных').AsInteger;
    Inc(u);
    Sheet2 := XL2.ActiveWorkBook.WorkSheets[4]; //XL2.WorkSheets.Add;

    Sheet2.Activate;
    XL2.ActiveWorkBook.WorkSheets[4].Cells[4, 3] := Vn_DAt;
    if E > 1 then
    begin
      XL2.ActiveWorkBook.WorkSheets[4].Range['A' + IntToStr(u - 1), 'Q' + IntToStr(u - 1)].Borders.LineStyle := 0;
      XL2.ActiveWorkBook.Worksheets[4].Range['A6:Q9'].Select;
      XL2.Selection.Copy;
      XL2.ActiveWorkBook.Worksheets[4].Range['A' + IntToStr(u)].Select;
      XL2.ActiveWorkBook.Worksheets[4].Paste;

      Inc(u);
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      gggg := u;
      Rang := Sheet2.Range['J' + IntToStr(2), emptyparam];
      Rang.value := Vn_DAt;
      Rang := Sheet2.Range['B' + IntToStr(u), emptyparam];
      Rang.value := Nom;
      Rang := Sheet2.Range['D' + IntToStr(u), emptyparam];
      Rang.value := ADOQuery2.FieldByName('Заказ').AsString;
      Rang := Sheet2.Range['E' + IntToStr(u), emptyparam];
      Rang.value := '';
      Rang := Sheet2.Range['F' + IntToStr(u), emptyparam];
      Rang.value := Izdel;
      Rang := Sheet2.Range['K' + IntToStr(u), emptyparam];
      Rang.value := Kol_Zap;
    //
      Rang := Sheet2.Range['L' + IntToStr(u), emptyparam];
      Rang.value := ADOQuery2.FieldByName('Сборка лопаток').AsString;

      Rang := Sheet2.Range['N' + IntToStr(u), emptyparam];
      Rang.value := ADOQuery2.FieldByName('Сборка тяг').AsString;
    //
      Rang := Sheet2.Range['P' + IntToStr(u), emptyparam];
      Rang.value := ADOQuery2.FieldByName('МодПривода').AsString;
      u := u + 3;
    end
    else
    begin
      if Cvet = 1 then
        Sheet2.Range['A2:Q2'].Interior.Color := 3010538; //Желтый
      if Cvet = 2 then
        Sheet2.Range['A2:Q2'].Interior.Color := 6877993; //Зеленый
      if Cvet = 3 then
        Sheet2.Range['A2:Q2'].Interior.Color := 16424058; //Синий

      Rang := Sheet2.Range['J2', emptyparam];

      Rang.value := Vn_DAt;
      Rang := Sheet2.Range['B7', emptyparam];
      Rang.value := Nom;
      Rang := Sheet2.Range['D7', emptyparam];
      Rang.value := ADOQuery2.FieldByName('Заказ').AsString;
      Rang := Sheet2.Range['E7', emptyparam];
      Rang.value := '';
      Rang := Sheet2.Range['F7', emptyparam];
      Rang.value := Izdel;
      Rang := Sheet2.Range['K7', emptyparam];
      Rang.value := Kol_Zap;
    //
      Rang := Sheet2.Range['L' + IntToStr(7), emptyparam];
      Rang.value := ADOQuery2.FieldByName('Сборка лопаток').AsString;

      Rang := Sheet2.Range['N' + IntToStr(7), emptyparam];
      Rang.value := ADOQuery2.FieldByName('Сборка тяг').AsString;
    //
      Rang := Sheet2.Range['P' + IntToStr(7), emptyparam];
      Rang.value := ADOQuery2.FieldByName('МодПривода').AsString;
      u := u + 3;
    end;
    //LOP  ++++++++++++++++++++++++++++++++
    Memo19.Lines.Clear;

    s := '%лопатка%';
    if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ') AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //
      exit;
    for i := 0 to Form1.Qry1.RecordCount - 1 do
    begin
      id_lop := Qry1.FieldByName('ID').AsString;
      if id_lop = '' then
        Continue;
      Memo19.Lines.Add(id_lop);
      Lop := Qry1.FieldByName('Элемент').AsString;
      Kol_LOP := Qry1.FieldByName('Количество').AsFloat;

      XL2.ActiveWorkBook.Worksheets[4].Range['A11:Q11'].Select;
      XL2.Selection.Copy;
      XL2.ActiveWorkBook.Worksheets[4].Range['A' + IntToStr(u + i)].Select;
      XL2.ActiveWorkBook.Worksheets[4].Paste;
      XL2.ActiveWorkBook.Worksheets[4].Rows[u].Font.Bold := True;
      Rang := Sheet2.Range['B' + IntToStr(u + i), emptyparam];
      Rang.value := Lop;

      Rang := Sheet2.Range['K' + IntToStr(u + i), emptyparam];
      Rang.value := Qry1.FieldByName('Обозначение').AsString; //'Сборочная единица';

      Rang := Sheet2.Range['Q' + IntToStr(u + i), emptyparam];
      Rang.value := FloatToStr(Kol_Zap * Kol_LOP);
      u := u + i;
      Inc(u);

      if not Form1.mkQuerySelect1(Form1.ADOQuery1, 'Select *  From %s Where (' + 'Технолог=' + #39 + id_lop + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ') AND (IdГП=' + #39 + idgp + #39 +    //') AND (Изделие='+#39+Izdel+#39+
        ') ', [Tab2]) then //
        exit;

      Inc(u); //Пустая строка
      for uu := 0 to Form1.ADOQuery1.RecordCount - 1 do
      begin

        Elem := Form1.ADOQuery1.FieldByName('Элемент').AsString;
        Oboz := Form1.ADOQuery1.FieldByName('Обозначение').AsString;
        Kol_S := Form1.ADOQuery1.FieldByName('Количество').AsString;
        Kol_D := StrToFloat(StringReplace(Kol_S, ',', '.', [rfReplaceAll]));
        Mat := Form1.ADOQuery1.FieldByName('Материал').AsString;

        XL2.ActiveWorkBook.Worksheets[4].Range['A11:Q11'].Select;
        XL2.Selection.Copy;
        XL2.ActiveWorkBook.Worksheets[4].Range['A' + IntToStr(u)].Select;
        XL2.ActiveWorkBook.Worksheets[4].Paste;

        Rang := Sheet2.Range['A' + IntToStr(u), emptyparam];
        Rang.value := IntToStr(uu + 1);
      //---------------------------------------- КПУ
        Rang := Sheet2.Range['B' + IntToStr(u), emptyparam];
        Rang.value := Elem;
      //----------------------------------------
        Rang := Sheet2.Range['K' + IntToStr(u), emptyparam];
        Rang.value := Oboz;
      //----------------------------------------
        Rang := Sheet2.Range['P' + IntToStr(u), emptyparam];
        Rang.value := (Mat);
      //----------------------------------------
        Rang := Sheet2.Range['Q' + IntToStr(u), emptyparam];
        Rang.value := FloatToStr(Kol_Zap * Kol_D);
        XL2.ActiveWorkBook.WorkSheets[4].Range['A' + IntToStr(u), 'Q' + IntToStr(u)].Borders.LineStyle := 1;
        SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
        inc(u);
        Form1.ADOQuery1.Next;
      end;
      Form1.Qry1.Next;
    end;
   //+++++++++++++++++++++++++++++++++++++++++Исполнительный механизм ЭлектроМагнит
           { El_Mag1:= Pos('Комплект ИМ с электромагнитом', Elem);
        El_Mag2:= Pos('Исполнительный механизм', Elem);
        if (El_Mag1 <> 0) or (El_Mag2 <> 0) then
        begin
          if not Conn_Klap.mkQueryUpdate('UPDATE %s SET [Статус]=' + #39 + '1' + #39 +
          ',МодПривода=' + #39 + Obozn + #39 + ',Привод=' + #39 + Kol + #39 + ' WHERE [IdГП]=' + #39 + IDGP + #39, ['Klapana']) then
            Exit;
        end;  }
    Memo19.Lines.Clear;
    Rang := Sheet2.Range['D' + IntToStr(u), emptyparam];
    Rang.value := ('**************************************************************************************');
    {rang:=Sheet2.Range['K'+IntToStr(u),emptyparam];
      rang.value:=('********************************************'); }
    inc(u);
    //Комплект ИМ с электромагнитом
    s := '%Комплект ИМ с электромагнитом%';
    S1 := '%Исполнительный механизм%';
    if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ') AND ((Элемент LIKE ' + #39 + '%s' + #39 + ') OR (Элемент LIKE ' + #39 + '%s' + #39 + ')) ', [Tab2, s, S1]) then //
      exit;
    for i := 0 to Form1.Qry1.RecordCount - 1 do
    begin
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      id_lop := Qry1.FieldByName('ID').AsString;
      if id_lop = '' then
        Continue;
      Memo19.Lines.Add(id_lop);
      Lop := Qry1.FieldByName('Элемент').AsString;
      Kol_LOP := Qry1.FieldByName('Количество').AsFloat;

      XL2.ActiveWorkBook.Worksheets[4].Range['A11:Q11'].Select;
      XL2.Selection.Copy;
      XL2.ActiveWorkBook.Worksheets[4].Range['A' + IntToStr(u + i)].Select;
      XL2.ActiveWorkBook.Worksheets[4].Paste;
      XL2.ActiveWorkBook.Worksheets[4].Rows[u].Font.Bold := True;
      Rang := Sheet2.Range['B' + IntToStr(u + i), emptyparam];
      Rang.value := Lop;

      Rang := Sheet2.Range['K' + IntToStr(u + i), emptyparam];
      Rang.value := Qry1.FieldByName('Обозначение').AsString; //'Сборочная единица';

      Rang := Sheet2.Range['Q' + IntToStr(u + i), emptyparam];
      Rang.value := FloatToStr(Kol_Zap * Kol_LOP);
      u := u + i;
      Inc(u);
      Form1.Qry1.Next;
    end;

    s := '%Ось%';
    if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ') AND ((Элемент LIKE ' + #39 + '%s' + #39 + ')) ', [Tab2, s]) then //
      exit;
    for i := 0 to Form1.Qry1.RecordCount - 1 do
    begin
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');

      Lop := Qry1.FieldByName('Элемент').AsString;
      Kol_LOP := Qry1.FieldByName('Количество').AsFloat;

      XL2.ActiveWorkBook.Worksheets[4].Range['A11:Q11'].Select;
      XL2.Selection.Copy;
      XL2.ActiveWorkBook.Worksheets[4].Range['A' + IntToStr(u)].Select;
      XL2.ActiveWorkBook.Worksheets[4].Paste;
      XL2.ActiveWorkBook.Worksheets[4].Rows[u].Font.Bold := True;
      Rang := Sheet2.Range['B' + IntToStr(u), emptyparam];
      Rang.value := Lop;

      Rang := Sheet2.Range['K' + IntToStr(u), emptyparam];
      Rang.value := Qry1.FieldByName('Обозначение').AsString; //'Сборочная единица';

      Rang := Sheet2.Range['Q' + IntToStr(u), emptyparam];
      Rang.value := FloatToStr(Kol_Zap * Kol_LOP);
      Inc(u);
      Form1.Qry1.Next;
    end;

    ADOQuery2.Next;
  end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++ WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
    //Создание временной таблицы  idgp,zakaz,Nom
  SetConnectTemp(ADOQueryTemp);
    //Создание временной таблицы
  ADOQueryTemp := TADOQuery.Create(nil);
  ADOQueryTemp.Connection := ADOConnectionTemp;

  ADOQueryTemp.SQL.Text := 'CREATE TABLE #ClientToDBFL (Elem nvarchar(350),' + 'Obozn nvarchar(350) ,Mat nvarchar(100),Kol float,' + 'idgp  nvarchar(100),zakaz nvarchar(100),Nom nvarchar(100)' + ',Stan nvarchar(100))';
  try
    ADOQueryTemp.ExecSQL;
  except
    Err := '1222';
  end;
  for ff := 0 to SG9.RowCount - 1 do
  begin
    Elem := SG9.Cells[0, ff + 1];
    if Elem = '' then
      Continue;
    Oboz := SG9.Cells[1, ff + 1];
    Kol_S := StringReplace(SG9.Cells[2, ff + 1], ',', '.', [rfReplaceAll]);
    idgp := SG9.Cells[4, ff + 1];
    Mat := SG9.Cells[5, ff + 1];
    Izdel := SG9.Cells[6, ff + 1];
    Nom := SG9.Cells[7, ff + 1];


        //SetConnectTemp(ADOQueryTemp);
    ADOQueryTemp.SQL.Text := 'INSERT INTO #ClientToDBFL ' + '(Elem,Obozn,Kol,Mat,idgp,zakaz,Nom,stan) Values (' + #39 + Elem + #39 + ',' + #39 + Oboz + #39 + ',' + #39 + Kol_S + #39 + ',' + #39 + Mat + #39 + ',' + #39 + idgp + #39 + ',' + #39 + Zak + #39 + ',' + #39 + Nom + #39 + ',' + #39 + Stan + #39 + ')';
    try
      ADOQueryTemp.ExecSQL;
    except
      Err := '1222';
    end;
  end;

  //
  Sheet2 := XL2.ActiveWorkBook.WorkSheets[4]; //XL2.WorkSheets.Add;
  Sheet2.Activate;
  r := Sheet2.UsedRange.Rows.Count; //Кол заполненых
  Rang := Sheet2.Range['A1:Q' + IntToStr(r)];

  Sheet2.PageSetup.PrintArea := 'A1:Q' + IntToStr(r + 2);

  Sheet2.PageSetup.Zoom := false;
        {Sheet2.PageSetup.FitToPagesWide:= 1;//1 Страница По ШИРИНЕ

        Sheet2.PageSetup.FitToPagesTall := 1;// 1 Страница ПО ВЫСОТЕ
        if R>40 then
        Begin
        Sheet2.PageSetup.FitToPagesTall := 2;// 2 Страницы ПО ВЫСОТЕ
        Sheet2.PageSetup.PrintTitleRows := '$'+IntToStr(gggg-1)+':$'+IntToStr(gggg); //6 7
        End;  }
  XL2.ActiveWorkBook.WorkSheets[4].PageSetup.FitToPagesWide := 1; //1 Страница По ШИРИНЕ

  XL2.ActiveWorkBook.WorkSheets[4].PageSetup.FitToPagesTall := 1; // 1 Страница ПО ВЫСОТЕ
  if r > 40 then
    XL2.ActiveWorkBook.WorkSheets[4].PageSetup.FitToPagesTall := 2; // 2 Страницы ПО ВЫСОТЕ
  Sheet2.PageSetup.LeftMargin := 0; //Нулевые поля
  Sheet2.PageSetup.RightMargin := 0;
  Sheet2.PageSetup.BottomMargin := 0;
  Sheet2.PageSetup.TopMargin := 0;

  Sheet2.PageSetup.Orientation := 1; //Книжная ориентация

  Sheet3 := XL2.ActiveWorkBook.WorkSheets[3]; //XL2.WorkSheets.Add;
  Sheet3.Activate;
  r := Sheet3.UsedRange.Rows.Count; //Кол заполненых
  Rang := Sheet3.Range['A1:Q' + IntToStr(r)];

  Sheet3.PageSetup.PrintArea := 'A1:Q' + IntToStr(r + 2);

  Sheet3.PageSetup.Zoom := false;
  Sheet3.PageSetup.FitToPagesWide := 1; //1 Страница По ШИРИНЕ

  Sheet3.PageSetup.FitToPagesTall := 1; // 1 Страница ПО ВЫСОТЕ
  if r > 60 then
  begin
    Sheet3.PageSetup.FitToPagesTall := 2; // 2 Страницы ПО ВЫСОТЕ
    Sheet3.PageSetup.PrintTitleRows := '$' + IntToStr(6) + ':$' + IntToStr(G1); //6 7
  end;

  Sheet3.PageSetup.LeftMargin := 0; //Нулевые поля
  Sheet3.PageSetup.RightMargin := 0;
  Sheet3.PageSetup.BottomMargin := 0;
  Sheet3.PageSetup.TopMargin := 0;

  Sheet3.PageSetup.Orientation := 2; //Альбомная ориентация

  XL2.Visible := True;
  Sheet1 := UnAssigned;
  Sheet2 := UnAssigned;
  Sheet3 := UnAssigned;
  XL2 := UnAssigned;
end;
function TForm1.SUT(Dat3, Nom3, Dir1: string; qq, Cvet: Integer; Prim: string): string;
var
  XL2, Sheet1, Sheet2, Sheet3, Rang: Variant;
  E, E1, i, Res, Priv, Kol_Zap, u, r, uu, ff, ff1, j: Integer;
  Vn_DAt, Vn_DAt1, Dir, God, mes, Nom, S_Svar, S_Sbor, Sbor_Lop, Sbor_Tyag,
  Priv_Str, idgp, IDKO, Zak, Izdel, Leg, Kol_S, Stan, Oboz, Elem, Mat, Err,
  id_lop, s, S1, Lop, Dir2, Tab1, Tab2, Tab3, BZ, Brik, SS_SS, SS_SS1, Str,
  A_S, B_S, F_S, Prim1, Mod_Priv, K, P,Prov1,Prov2: string;
  Svar_o, Sbor_o, Kol_D, Kol1, Kol2, Kol3, Kol4, Kol5, Kol6, Kol7, Kol8, Kol_T, Kol_Ten, F, F1, s_L, S_T, Ten,
 Kol_LOP, Ten_Priv, P_K, P_P: Double;
  Res_Nog, Res_Trumph, Res_Gib, Res_Pila, Kanban, Val, Svark, Rotor, Pokr,
   fff, FFF1, gggg, G1, q, Q1, A, B, Zvez, Kanal: Integer;
  BZ1: Boolean;
  d: TDate;
begin
  Kol1 := 0;
  Q1 := 1;
  Kol2 := 0;
  Kol3 := 0;
  Kol4 := 0;
  Kol5 := 0;
  Kol6 := 0;
  Kol7 := 0;
  Kol8 := 0;
  Kol_T := 0;
  Kol_Ten := 0;
  Prov1:='';
  Prov2:='';
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  q := qq;
  if q = 0 then
  begin
    Tab1 := 'Запуск';
    Tab2 := 'Специф';
    Tab3 := 'Klapana';
  end;
  if q = 1 then
  begin
    Tab1 := 'ЗапускВозд';
    Tab2 := 'СпецифВозд';
    Tab3 := 'KlapanaZap';
  end;
  if q = 2 then
  begin
    Tab1 := '[Запуск750]';
    Tab2 := '[Специф750]';
    Tab3 := '[750]';
  end;
  Dir2 := Dir1;
  Vn_DAt := Dat3; //dd.mm/YYYY//FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  d := StrToDate(Vn_DAt);
  Vn_DAt1 := FormatDateTime('mm.dd.yyyy', d);
  God := FormatDateTime('yyyy', d);
  mes := FormatDateTime('mmmm', d);
  Nom := Nom3;
  Dir := Put_KTO + '\CKlapana\' + Dir2 + '\';
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\' + Dir2 + '\' + God;
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\' + Dir2 + '\' + God + '\' + mes + '\';
  CreateDir(Dir);

  XL2 := CreateOleObject('Excel.Application');
  CopyFile(PWideChar(Put_KTO + '\CKlapana2\2013\SUT.xlsx'), PWideChar(Dir + '\' + Vn_DAt + ' СутЗадан_КПУ_КПД № ' + Nom + '.xlsx'), False);

  XL2.Workbooks.Open(Dir + '\' + Vn_DAt + ' СутЗадан_КПУ_КПД № ' + Nom + '.xlsx');
  XL2.Application.EnableEvents := false;
  //XL2.visible:=True;
  u := 6;
  Form1.Clear_StringGrid(SG8);
  Form1.Clear_StringGrid(SG9);
  fff := 0;
  FFF1 := 0;
  E1 := 7;
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  if not mkQuerySelect(ADOQuery2, 'Select * from %s  Where Номер=' + #39 + Nom + #39, [Tab1]) then
    exit;
  for E := 1 to ADOQuery2.RecordCount do
  begin
    Form1.Memo2.Lines.Add(ADOQuery2.FieldByName('Н\ч Сварка').AsString);
    Svar_o := RoundTo(Svar_o + StrToFloat(ADOQuery2.FieldByName('Н\ч Сварка').AsString), -2);
    Sbor_o := RoundTo(Sbor_o + StrToFloat(ADOQuery2.FieldByName('Н\ч Сборка Клапана').AsString), -2);
    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    S_Svar := ADOQuery2.FieldByName('Н\ч Сварка').AsString;
    S_Sbor := ADOQuery2.FieldByName('Н\ч Сборка Клапана').AsString;
    //
    Sbor_Lop := ADOQuery2.FieldByName('Сборка лопаток').AsString;
    Sbor_Tyag := ADOQuery2.FieldByName('Сборка тяг').AsString;

    BZ := ADOQuery2.FieldByName('БЗ').AsString;
    Brik := ADOQuery2.FieldByName('Брикет').AsString;
    Priv := ADOQuery2.FieldByName('Привод').AsInteger;
    Mod_Priv := ADOQuery2.FieldByName('МодПривода').AsString;
    Kol_Zap := ADOQuery2.FieldByName('Кол во запущенных').AsInteger;
    idgp := ADOQuery2.FieldByName('IdГП').AsString;
    IDKO := ADOQuery2.FieldByName('IdКО').AsString;
    Zak := ADOQuery2.FieldByName('Заказ').AsString;
    Izdel := ADOQuery2.FieldByName('Изделие').AsString;
    Prim1 := ADOQuery2.FieldByName('Сборка Примечание').AsString;
    SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
    Res := Pos(' ', Izdel);
    if Res <> 0 then
      Delete(Izdel, 1, 7);
    Priv_Str := IntToStr(Priv);
    Res := Pos(',', S_Svar);
    Delete(S_Svar, Res, 1);
    if Res <> 0 then
      Insert('.', S_Svar, Res);

    Res := Pos(',', S_Sbor);
    Delete(S_Sbor, Res, 1);
    if Res <> 0 then
      Insert('.', S_Sbor, Res);

    if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ') ', [Tab3]) then //
      exit;
    Leg := Form1.Qry1.FieldByName('Заказчик').AsString;
    BZ1 := Form1.Qry1.FieldByName('bz').AsBoolean;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 2] := ADOQuery2.FieldByName('Заказ').AsString;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 3] := ADOQuery2.FieldByName('БЗ').AsString;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 4] := Izdel; //ADOQuery2.FieldByName('Изделие').AsString;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 5] := ADOQuery2.FieldByName('Брикет').AsString;

    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 6] := ADOQuery2.FieldByName('A').AsString;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 7] := ADOQuery2.FieldByName('B').AsString;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 8] := ADOQuery2.FieldByName('МодПривода').AsString;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 9] := Priv_Str;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 10] := ADOQuery2.FieldByName('Кол во запущенных').AsString;

    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 12] := S_Svar;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 11] := S_Sbor;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 13] := Prim1;
    Res := Pos('ЛЕГИОН', AnsiUpperCase(Leg));
    if Res <> 0 then
    begin
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 13] := 'Легион';
      XL2.ActiveWorkBook.WorkSheets[1].Range['M' + IntToStr((E) + (6)) + ':M' + IntToStr((E) + (6))].Interior.Color := 255; //
    end;
    if BZ1 then
    begin
      XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (6), 14] := 'Не Стандарт';
      XL2.ActiveWorkBook.WorkSheets[1].Range['N' + IntToStr((E) + (6)) + ':N' + IntToStr((E) + (6))].Interior.Color := 255; //
    end;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[2, 5] := Nom;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[5, 1] := Nom;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[13, 1] := Vn_DAt;
    if Cvet = 1 then
    begin
      XL2.ActiveWorkBook.WorkSheets[1].Range['A2:N2'].Interior.Color := 3010538; //Желтый
      XL2.ActiveWorkBook.WorkSheets[6].Range['A2:N2'].Interior.Color := 3010538; //Желтый
      XL2.ActiveWorkBook.WorkSheets[7].Range['A2:N2'].Interior.Color := 3010538; //Желтый
    end;
    if Cvet = 2 then
    begin
      XL2.ActiveWorkBook.WorkSheets[1].Range['A2:N2'].Interior.Color := 6877993; //Зеленый
      XL2.ActiveWorkBook.WorkSheets[6].Range['A2:N2'].Interior.Color := 6877993; //Зеленый
      XL2.ActiveWorkBook.WorkSheets[7].Range['A2:N2'].Interior.Color := 6877993; //Зеленый
    end;
    if Cvet = 3 then
    begin
      XL2.ActiveWorkBook.WorkSheets[1].Range['A2:N2'].Interior.Color := 16424058; //Синий
      XL2.ActiveWorkBook.WorkSheets[6].Range['A2:N2'].Interior.Color := 16424058; //Синий
      XL2.ActiveWorkBook.WorkSheets[7].Range['A2:N2'].Interior.Color := 16424058; //Синий
    end;
    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Склад
    //Sheet2 := XL2.ActiveWorkBook.WorkSheets[6];//XL2.WorkSheets.Add;
   // Sheet2.Activate;
    SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
    j := XL2.ActiveWorkBook.Sheets.Count;
    for i := 1 to j do
      Str := XL2.ActiveWorkBook.WorkSheets[i].Name;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 2] := ADOQuery2.FieldByName('Заказ').AsString;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 3] := ADOQuery2.FieldByName('БЗ').AsString;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 4] := Izdel; //ADOQuery2.FieldByName('Изделие').AsString;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 5] := ADOQuery2.FieldByName('Брикет').AsString;

    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 6] := ADOQuery2.FieldByName('A').AsString;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 7] := ADOQuery2.FieldByName('B').AsString;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 8] := ADOQuery2.FieldByName('МодПривода').AsString;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 9] := Priv_Str;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 10] := ADOQuery2.FieldByName('Кол во запущенных').AsString;

    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 12] := S_Svar;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 11] := S_Sbor;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[(E) + (6), 13] := Prim1;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[2, 5] := Nom;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[5, 1] := Nom;
    XL2.ActiveWorkBook.WorkSheets[6].Cells[13, 1] := Vn_DAt;

    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ОТК
    Sheet2 := XL2.ActiveWorkBook.WorkSheets[7]; //XL2.WorkSheets.Add;
    Sheet2.Activate;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 2] := ADOQuery2.FieldByName('Заказ').AsString;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 3] := ADOQuery2.FieldByName('БЗ').AsString;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 4] := Izdel; //ADOQuery2.FieldByName('Изделие').AsString;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 5] := ADOQuery2.FieldByName('Брикет').AsString;

    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 6] := ADOQuery2.FieldByName('A').AsString;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 7] := ADOQuery2.FieldByName('B').AsString;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 8] := ADOQuery2.FieldByName('МодПривода').AsString;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 9] := Priv_Str;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 10] := ADOQuery2.FieldByName('Кол во запущенных').AsString;

    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 12] := S_Svar;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 11] := S_Sbor;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 13] := Prim1;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[2, 5] := Nom;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[5, 1] := Nom;
    XL2.ActiveWorkBook.WorkSheets[7].Cells[13, 1] := Vn_DAt;
    Res := Pos('ЛЕГИОН', AnsiUpperCase(Leg));
    if Res <> 0 then
    begin
      XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 13] := 'Легион';
      XL2.ActiveWorkBook.WorkSheets[7].Range['M' + IntToStr((E) + (6)) + ':M' + IntToStr((E) + (6))].Interior.Color := 255; //
    end;
    if BZ1 then
    begin
      XL2.ActiveWorkBook.WorkSheets[7].Cells[(E) + (6), 14] := 'Не Стандарт';
      XL2.ActiveWorkBook.WorkSheets[7].Range['N' + IntToStr((E) + (6)) + ':N' + IntToStr((E) + (6))].Interior.Color := 255; //
    end;
    //-----------------------------------------------
    //____________Кабель
    SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
    Sheet2 := XL2.ActiveWorkBook.WorkSheets[5]; //XL2.WorkSheets.Add;
    Sheet2.Activate;
    s := 'Лента нагревательная саморегулирующаяся 31VR2-Т ТУ 3558-103-33006874-2012';
    if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ') AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //
      exit;

    if Form1.Qry1.RecordCount = 0 then
    begin
      s := 'Кабель нагревательный саморегулирующий 30КСТМ2-Т ТУ 3558-081-33006874-2011';
      if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //
    end;
    if Form1.Qry1.RecordCount = 0 then
    begin
      s := 'Кабель нагревательный%';
      if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //
    end;

    if Form1.Qry1.RecordCount = 0 then
    begin
      s := 'Кабель саморегулируемый греющий 10 BTV2-CT-T6, 230V, 29W/m at 10 C,II 2 G Ex e II T6 и II 2 D Ex td A21 IP66';
      if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //

    end;
//  28.11.22 Головцова
    if Form1.Qry1.RecordCount = 0 then
    begin
      s := 'Кабель саморегулируемый%';
      if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //

    end;
    if Form1.Qry1.RecordCount = 0 then
    begin
      s := 'Кабель саморегулирующийся%';
      if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //

    end;
    if Form1.Qry1.RecordCount <> 0 then
    begin
      Prov1:=Qry1.FieldByName('Элемент').AsString;
      SS_SS := Izdel; //Клапан ГЕРМИК-П-0850-1375-Н-П-04-00-00-У2
      //Клапан ГЕРМИК-С-1000*1000-Н-1*NF230A-1-УХЛ2
      Zvez := Pos('*', Izdel);
      if Zvez <> 0 then
      begin
        Res := Pos('-', SS_SS);
        if Res <> 0 then
          Delete(SS_SS, 1, Res);
      //
        Res := Pos('-', SS_SS);
        if Res <> 0 then
          Delete(SS_SS, 1, Res);
      //
        Res := Pos('*', SS_SS);
        if Res <> 0 then
        try
          A := StrToInt(Copy(SS_SS, 1, Res - 1));
        except
          A := 0;
        end;
      //
        Res := Pos('*', SS_SS);
        if Res <> 0 then
          Delete(SS_SS, 1, Res);
      //
        Res := Pos('-', SS_SS);
        try
          B := StrToInt(Copy(SS_SS, 1, Res - 1));
        except
          B := 0;
        end;
      end
      else
      begin
        Res := Pos('-', SS_SS);
        if Res <> 0 then
          Delete(SS_SS, 1, Res);
      //
        Res := Pos('-', SS_SS);
        if Res <> 0 then
          Delete(SS_SS, 1, Res);
      //
        Res := Pos('-', SS_SS);
        if Res <> 0 then
        try
          A := StrToInt(Copy(SS_SS, 1, Res - 1));
        except
          A := 0;
        end;
      //
        Res := Pos('-', SS_SS);
        if Res <> 0 then
          Delete(SS_SS, 1, Res);
      //
        Res := Pos('-', SS_SS);
        try
          B := StrToInt(Copy(SS_SS, 1, Res - 1));
        except
          B := 0;
        end;
      end;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Priv_Str := IntToStr(Priv);
      s := Qry1.FieldByName('Количество').AsString;
      SS_SS := StringReplace(s, ',', '.', [rfReplaceAll]);
      Kol_Ten := StrToFloat(SS_SS) * 1000;

      s := Qry1.FieldByName('КолНаЕд').AsString;
      SS_SS := StringReplace(s, ',', '.', [rfReplaceAll]);
      Kol_T := StrToFloat(SS_SS) * 1000;

      Ten := Qry1.FieldByName('КолНаЕд').AsFloat;
      Ten_Priv := Qry1.FieldByName('Количество').AsFloat - Qry1.FieldByName('КолНаЕд').AsFloat;
      Kanal := Pos('Канал', Izdel);
      P_K := 0;
      P_P := 0;
      s := 'Кабель КГ-ХЛ%';
      if not Form1.mkQuerySelect1(Form1.ADOQuery1,
      'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 +
      ') AND (Заказ=' + #39 + Zak + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //
        Exit;
      if Form1.ADOQuery1.RecordCount = 0 then
      begin
        s := '%Кабель медный КГВВнг(А)%';
        if not Form1.mkQuerySelect1(Form1.ADOQuery1,
        'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 +
        ') AND (Заказ=' + #39 + Zak + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //
        Exit;
      end;
      if Form1.ADOQuery1.RecordCount = 0 then
      begin
        s := '%Кабель К9РВПМнг(А)%';
        if not Form1.mkQuerySelect1(Form1.ADOQuery1,
        'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 +
        ') AND (Заказ=' + #39 + Zak + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //
        Exit;
      end;
      if Form1.ADOQuery1.RecordCount <> 0 then
      begin
        P_P := ADOQuery1.FieldByName('Количество').AsFloat - ADOQuery1.FieldByName('КолНаЕд').AsFloat;
        P_K := ADOQuery1.FieldByName('КолНаЕд').AsFloat;
        Prov2:=ADOQuery1.FieldByName('Элемент').AsString;
      end;
      //
      //Проверка на двойной клапан
      s := 'Корпус%';
      if not Form1.mkQuerySelect1(Form1.ADOQuery1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ')  AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //
        Exit;
      if Form1.ADOQuery1.RecordCount <> 0 then
      begin
        B := ADOQuery1.FieldByName('Количество').AsInteger;
      end;
     // if B=1 then
     // begin
      s := Qry1.FieldByName('Количество').AsString;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      SS_SS := StringReplace(s, ',', '.', [rfReplaceAll]);
      F := StrToFloat(SS_SS);
      F1 := F * 1000;
      Res := Pos('-МС', Mod_Priv); //      Электропривод ЭПВ-SFA-S2-L-МС
      if Res <> 0 then
      begin
        SS_SS1 := FloatToStr(F1);   //Греющий кабель внутри привода
           // SS_SS1:=FloatToStr(F1-(600*(Priv/Kol_Zap)));  //
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 6] := SS_SS1; //Кабель на клап
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 7] := '600';  //Провод на клап
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (8), 6] :=Prov1;
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (9), 6] :=Prov2;
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + 7, 6] := 'внутри привода';
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + 7, 7] := '0';
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (8), 6] :=Prov1;
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (9), 6] :=Prov2;
      end
      else
      begin
            //if Kanal<>0 then
           // Begin
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 6] := FloatToStr(Ten * 1000); //Кабель на клап
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 7] := FloatToStr(P_K * 1000);
         //Провод на клап
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + 7, 6] := FloatToStr(Ten_Priv * 1000); //
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + 7, 7] := FloatToStr(P_P * 1000);
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (8), 6] :=Prov1;
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (9), 6] :=Prov2;
        XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + 7, 8] := IntToStr(1);

      end;

      XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 2] := ADOQuery2.FieldByName('Заказ').AsString;
      XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 3] := ADOQuery2.FieldByName('БЗ').AsString;
      XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 4] := Izdel; //ADOQuery2.FieldByName('Изделие').AsString;
      XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 5] := ADOQuery2.FieldByName('Брикет').AsString;
      s := StringReplace(ADOQuery2.FieldByName('МодПривода').AsString, 'Электропривод', '', [RFReplaceall]);
      Priv_Str := IntToStr(Priv);
      XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 10] := s;
      XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 11] := Priv_Str;
      XL2.ActiveWorkBook.WorkSheets[5].Cells[(Q1) + (6), 9] := ADOQuery2.FieldByName('Кол во запущенных').AsString;

      XL2.ActiveWorkBook.WorkSheets[5].Cells[2, 5] := Nom;
      XL2.ActiveWorkBook.WorkSheets[5].Cells[5, 1] := Nom;
      XL2.ActiveWorkBook.WorkSheets[5].Cells[13, 1] := Vn_DAt;
      if Cvet = 1 then
      begin
        XL2.ActiveWorkBook.WorkSheets[5].Range['A2:L2'].Interior.Color := 3010538; //Желтый
        XL2.ActiveWorkBook.WorkSheets[5].Cells[2, 8] := 'Жел';
      end;
      if Cvet = 2 then
      begin
        XL2.ActiveWorkBook.WorkSheets[5].Range['A2:L2'].Interior.Color := 6877993; //Зеленый
        XL2.ActiveWorkBook.WorkSheets[5].Cells[2, 8] := 'Зел';
      end;
      if Cvet = 3 then
      begin
        XL2.ActiveWorkBook.WorkSheets[5].Range['A2:L2'].Interior.Color := 16424058; //Синий
        XL2.ActiveWorkBook.WorkSheets[5].Cells[2, 8] := 'Син';
      end;
      inc(Q1);
      inc(Q1);
      inc(Q1);
      inc(Q1);
    end;
  //____________Кабель
    //+ZZZZZZ

    Zak := ADOQuery2.FieldByName('Заказ').AsString;
    //Izdel:=ADOQuery2.FieldByName('Изделие').AsString;
    //Delete(Izdel,1,7);
    idgp := ADOQuery2.FieldByName('IDГП').AsString;
    IDKO := ADOQuery2.FieldByName('IDКО').AsString;
    //Priv := ADOQuery2.FieldByName('МодПривода').AsInteger;
    Kol_Zap := ADOQuery2.FieldByName('Кол во запущенных').AsInteger;
    Inc(u);
    Sheet2 := XL2.ActiveWorkBook.WorkSheets[4]; //XL2.WorkSheets.Add;

    Sheet2.Activate;
    XL2.ActiveWorkBook.WorkSheets[4].Cells[4, 3] := Vn_DAt;
    if E > 1 then
    begin
      XL2.ActiveWorkBook.WorkSheets[4].Range['A' + IntToStr(u - 1), 'Q' + IntToStr(u - 1)].Borders.LineStyle := 0;
      XL2.ActiveWorkBook.Worksheets[4].Range['A6:Q9'].Select;
      XL2.Selection.Copy;
      XL2.ActiveWorkBook.Worksheets[4].Range['A' + IntToStr(u)].Select;
      XL2.ActiveWorkBook.Worksheets[4].Paste;

      Inc(u);
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      gggg := u;
      Rang := Sheet2.Range['J' + IntToStr(2), emptyparam];
      Rang.value := Vn_DAt;
      Rang := Sheet2.Range['B' + IntToStr(u), emptyparam];
      Rang.value := Nom;
      Rang := Sheet2.Range['D' + IntToStr(u), emptyparam];
      Rang.value := ADOQuery2.FieldByName('Заказ').AsString;
      Rang := Sheet2.Range['E' + IntToStr(u), emptyparam];
      Rang.value := '';
      Rang := Sheet2.Range['F' + IntToStr(u), emptyparam];
      Rang.value := Izdel;
      Rang := Sheet2.Range['K' + IntToStr(u), emptyparam];
      Rang.value := Kol_Zap;
    //
      Rang := Sheet2.Range['L' + IntToStr(u), emptyparam];
      Rang.value := ADOQuery2.FieldByName('Сборка лопаток').AsString;

      Rang := Sheet2.Range['N' + IntToStr(u), emptyparam];
      Rang.value := ADOQuery2.FieldByName('Сборка тяг').AsString;
    //
      Rang := Sheet2.Range['P' + IntToStr(u), emptyparam];
      Rang.value := ADOQuery2.FieldByName('МодПривода').AsString;
      u := u + 3;
    end
    else
    begin
      if Cvet = 1 then
        Sheet2.Range['A2:Q2'].Interior.Color := 3010538; //Желтый
      if Cvet = 2 then
        Sheet2.Range['A2:Q2'].Interior.Color := 6877993; //Зеленый
      if Cvet = 3 then
        Sheet2.Range['A2:Q2'].Interior.Color := 16424058; //Синий

      Rang := Sheet2.Range['J2', emptyparam];

      Rang.value := Vn_DAt;
      Rang := Sheet2.Range['B7', emptyparam];
      Rang.value := Nom;
      Rang := Sheet2.Range['D7', emptyparam];
      Rang.value := ADOQuery2.FieldByName('Заказ').AsString;
      Rang := Sheet2.Range['E7', emptyparam];
      Rang.value := '';
      Rang := Sheet2.Range['F7', emptyparam];
      Rang.value := Izdel;
      Rang := Sheet2.Range['K7', emptyparam];
      Rang.value := Kol_Zap;
    //
      Rang := Sheet2.Range['L' + IntToStr(7), emptyparam];
      Rang.value := ADOQuery2.FieldByName('Сборка лопаток').AsString;

      Rang := Sheet2.Range['N' + IntToStr(7), emptyparam];
      Rang.value := ADOQuery2.FieldByName('Сборка тяг').AsString;
    //
      Rang := Sheet2.Range['P' + IntToStr(7), emptyparam];
      Rang.value := ADOQuery2.FieldByName('МодПривода').AsString;
      u := u + 3;
    end;
    //LOP  ++++++++++++++++++++++++++++++++
    Memo19.Lines.Clear;

    s := '%лопатка%';
    if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ') AND (Элемент LIKE ' + #39 + '%s' + #39 + ') ', [Tab2, s]) then //
      exit;
    for i := 0 to Form1.Qry1.RecordCount - 1 do
    begin
      id_lop := Qry1.FieldByName('ID').AsString;
      if id_lop = '' then
        Continue;
      Memo19.Lines.Add(id_lop);
      Lop := Qry1.FieldByName('Элемент').AsString;
      Kol_LOP := Qry1.FieldByName('Количество').AsFloat;

      XL2.ActiveWorkBook.Worksheets[4].Range['A11:Q11'].Select;
      XL2.Selection.Copy;
      XL2.ActiveWorkBook.Worksheets[4].Range['A' + IntToStr(u + i)].Select;
      XL2.ActiveWorkBook.Worksheets[4].Paste;
      XL2.ActiveWorkBook.Worksheets[4].Rows[u].Font.Bold := True;
      Rang := Sheet2.Range['B' + IntToStr(u + i), emptyparam];
      Rang.value := Lop;

      Rang := Sheet2.Range['K' + IntToStr(u + i), emptyparam];
      Rang.value := Qry1.FieldByName('Обозначение').AsString; //'Сборочная единица';

      Rang := Sheet2.Range['Q' + IntToStr(u + i), emptyparam];
      Rang.value := FloatToStr(Kol_Zap * Kol_LOP);
      u := u + i;
      Inc(u);

      if not Form1.mkQuerySelect1(Form1.ADOQuery1, 'Select *  From %s Where (' + 'Технолог=' + #39 + id_lop + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ') AND (IdГП=' + #39 + idgp + #39 +    //') AND (Изделие='+#39+Izdel+#39+
        ') ', [Tab2]) then //
        exit;

      Inc(u); //Пустая строка
      for uu := 0 to Form1.ADOQuery1.RecordCount - 1 do
      begin

        Elem := Form1.ADOQuery1.FieldByName('Элемент').AsString;
        Oboz := Form1.ADOQuery1.FieldByName('Обозначение').AsString;
        Kol_S := Form1.ADOQuery1.FieldByName('Количество').AsString;
        Kol_D := StrToFloat(StringReplace(Kol_S, ',', '.', [rfReplaceAll]));
        Mat := Form1.ADOQuery1.FieldByName('Материал').AsString;

        XL2.ActiveWorkBook.Worksheets[4].Range['A11:Q11'].Select;
        XL2.Selection.Copy;
        XL2.ActiveWorkBook.Worksheets[4].Range['A' + IntToStr(u)].Select;
        XL2.ActiveWorkBook.Worksheets[4].Paste;

        Rang := Sheet2.Range['A' + IntToStr(u), emptyparam];
        Rang.value := IntToStr(uu + 1);
      //---------------------------------------- КПУ
        Rang := Sheet2.Range['B' + IntToStr(u), emptyparam];
        Rang.value := Elem;
      //----------------------------------------
        Rang := Sheet2.Range['K' + IntToStr(u), emptyparam];
        Rang.value := Oboz;
      //----------------------------------------
        Rang := Sheet2.Range['P' + IntToStr(u), emptyparam];
        Rang.value := (Mat);
      //----------------------------------------
        Rang := Sheet2.Range['Q' + IntToStr(u), emptyparam];
        Rang.value := FloatToStr(Kol_Zap * Kol_D);
        XL2.ActiveWorkBook.WorkSheets[4].Range['A' + IntToStr(u), 'Q' + IntToStr(u)].Borders.LineStyle := 1;
        SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
        inc(u);
        Form1.ADOQuery1.Next;
      end;
      Form1.Qry1.Next;
    end;
   //+++++++++++++++++++++++++++++++++++++++++Исполнительный механизм ЭлектроМагнит
           { El_Mag1:= Pos('Комплект ИМ с электромагнитом', Elem);
        El_Mag2:= Pos('Исполнительный механизм', Elem);
        if (El_Mag1 <> 0) or (El_Mag2 <> 0) then
        begin
          if not Conn_Klap.mkQueryUpdate('UPDATE %s SET [Статус]=' + #39 + '1' + #39 +
          ',МодПривода=' + #39 + Obozn + #39 + ',Привод=' + #39 + Kol + #39 + ' WHERE [IdГП]=' + #39 + IDGP + #39, ['Klapana']) then
            Exit;
        end;  }
    Memo19.Lines.Clear;
    Rang := Sheet2.Range['D' + IntToStr(u), emptyparam];
    Rang.value := ('**************************************************************************************');
    {rang:=Sheet2.Range['K'+IntToStr(u),emptyparam];
      rang.value:=('********************************************'); }
    inc(u);
    //Комплект ИМ с электромагнитом
    s := '%Комплект ИМ с электромагнитом%';
    S1 := '%Исполнительный механизм%';
    if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ') AND ((Элемент LIKE ' + #39 + '%s' + #39 + ') OR (Элемент LIKE ' + #39 + '%s' + #39 + ')) ', [Tab2, s, S1]) then //
      exit;
    for i := 0 to Form1.Qry1.RecordCount - 1 do
    begin
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      id_lop := Qry1.FieldByName('ID').AsString;
      if id_lop = '' then
        Continue;
      Memo19.Lines.Add(id_lop);
      Lop := Qry1.FieldByName('Элемент').AsString;
      Kol_LOP := Qry1.FieldByName('Количество').AsFloat;

      XL2.ActiveWorkBook.Worksheets[4].Range['A11:Q11'].Select;
      XL2.Selection.Copy;
      XL2.ActiveWorkBook.Worksheets[4].Range['A' + IntToStr(u + i)].Select;
      XL2.ActiveWorkBook.Worksheets[4].Paste;
      XL2.ActiveWorkBook.Worksheets[4].Rows[u].Font.Bold := True;
      Rang := Sheet2.Range['B' + IntToStr(u + i), emptyparam];
      Rang.value := Lop;

      Rang := Sheet2.Range['K' + IntToStr(u + i), emptyparam];
      Rang.value := Qry1.FieldByName('Обозначение').AsString; //'Сборочная единица';

      Rang := Sheet2.Range['Q' + IntToStr(u + i), emptyparam];
      Rang.value := FloatToStr(Kol_Zap * Kol_LOP);
      u := u + i;
      Inc(u);
      Form1.Qry1.Next;
    end;

    s := '%Ось%';
    if not Form1.mkQuerySelect66(Form1.Qry1, 'Select *  From %s Where (' + 'IdГП=' + #39 + idgp + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ') AND (Заказ=' + #39 + Zak + #39 + ') AND ((Элемент LIKE ' + #39 + '%s' + #39 + ')) ', [Tab2, s]) then //
      exit;
    for i := 0 to Form1.Qry1.RecordCount - 1 do
    begin
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');

      Lop := Qry1.FieldByName('Элемент').AsString;
      Kol_LOP := Qry1.FieldByName('Количество').AsFloat;

      XL2.ActiveWorkBook.Worksheets[4].Range['A11:Q11'].Select;
      XL2.Selection.Copy;
      XL2.ActiveWorkBook.Worksheets[4].Range['A' + IntToStr(u)].Select;
      XL2.ActiveWorkBook.Worksheets[4].Paste;
      XL2.ActiveWorkBook.Worksheets[4].Rows[u].Font.Bold := True;
      Rang := Sheet2.Range['B' + IntToStr(u), emptyparam];
      Rang.value := Lop;

      Rang := Sheet2.Range['K' + IntToStr(u), emptyparam];
      Rang.value := Qry1.FieldByName('Обозначение').AsString; //'Сборочная единица';

      Rang := Sheet2.Range['Q' + IntToStr(u), emptyparam];
      Rang.value := FloatToStr(Kol_Zap * Kol_LOP);
      Inc(u);
      Form1.Qry1.Next;
    end;

    ADOQuery2.Next;
  end;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++ WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
    //Создание временной таблицы  idgp,zakaz,Nom
  SetConnectTemp(ADOQueryTemp);
    //Создание временной таблицы
  ADOQueryTemp := TADOQuery.Create(nil);
  ADOQueryTemp.Connection := ADOConnectionTemp;

  ADOQueryTemp.SQL.Text := 'CREATE TABLE #ClientToDBFL (Elem nvarchar(350),' + 'Obozn nvarchar(350) ,Mat nvarchar(100),Kol float,' + 'idgp  nvarchar(100),zakaz nvarchar(100),Nom nvarchar(100)' + ',Stan nvarchar(100))';
  try
    ADOQueryTemp.ExecSQL;
  except
    Err := '1222';
  end;
  for ff := 0 to SG9.RowCount - 1 do
  begin
    Elem := SG9.Cells[0, ff + 1];
    if Elem = '' then
      Continue;
    Oboz := SG9.Cells[1, ff + 1];
    Kol_S := StringReplace(SG9.Cells[2, ff + 1], ',', '.', [rfReplaceAll]);
    idgp := SG9.Cells[4, ff + 1];
    Mat := SG9.Cells[5, ff + 1];
    Izdel := SG9.Cells[6, ff + 1];
    Nom := SG9.Cells[7, ff + 1];


        //SetConnectTemp(ADOQueryTemp);
    ADOQueryTemp.SQL.Text := 'INSERT INTO #ClientToDBFL ' + '(Elem,Obozn,Kol,Mat,idgp,zakaz,Nom,stan) Values (' + #39 + Elem + #39 + ',' + #39 + Oboz + #39 + ',' + #39 + Kol_S + #39 + ',' + #39 + Mat + #39 + ',' + #39 + idgp + #39 + ',' + #39 + Zak + #39 + ',' + #39 + Nom + #39 + ',' + #39 + Stan + #39 + ')';
    try
      ADOQueryTemp.ExecSQL;
    except
      Err := '1222';
    end;
  end;

  //
  Sheet2 := XL2.ActiveWorkBook.WorkSheets[4]; //XL2.WorkSheets.Add;
  Sheet2.Activate;
  r := Sheet2.UsedRange.Rows.Count; //Кол заполненых
  Rang := Sheet2.Range['A1:Q' + IntToStr(r)];

  Sheet2.PageSetup.PrintArea := 'A1:Q' + IntToStr(r + 2);

  Sheet2.PageSetup.Zoom := false;
        {Sheet2.PageSetup.FitToPagesWide:= 1;//1 Страница По ШИРИНЕ

        Sheet2.PageSetup.FitToPagesTall := 1;// 1 Страница ПО ВЫСОТЕ
        if R>40 then
        Begin
        Sheet2.PageSetup.FitToPagesTall := 2;// 2 Страницы ПО ВЫСОТЕ
        Sheet2.PageSetup.PrintTitleRows := '$'+IntToStr(gggg-1)+':$'+IntToStr(gggg); //6 7
        End;  }
  XL2.ActiveWorkBook.WorkSheets[4].PageSetup.FitToPagesWide := 1; //1 Страница По ШИРИНЕ

  XL2.ActiveWorkBook.WorkSheets[4].PageSetup.FitToPagesTall := 1; // 1 Страница ПО ВЫСОТЕ
  if r > 40 then
    XL2.ActiveWorkBook.WorkSheets[4].PageSetup.FitToPagesTall := 2; // 2 Страницы ПО ВЫСОТЕ
  Sheet2.PageSetup.LeftMargin := 0; //Нулевые поля
  Sheet2.PageSetup.RightMargin := 0;
  Sheet2.PageSetup.BottomMargin := 0;
  Sheet2.PageSetup.TopMargin := 0;

  Sheet2.PageSetup.Orientation := 1; //Книжная ориентация

  Sheet3 := XL2.ActiveWorkBook.WorkSheets[3]; //XL2.WorkSheets.Add;
  Sheet3.Activate;
  r := Sheet3.UsedRange.Rows.Count; //Кол заполненых
  Rang := Sheet3.Range['A1:Q' + IntToStr(r)];

  Sheet3.PageSetup.PrintArea := 'A1:Q' + IntToStr(r + 2);

  Sheet3.PageSetup.Zoom := false;
  Sheet3.PageSetup.FitToPagesWide := 1; //1 Страница По ШИРИНЕ

  Sheet3.PageSetup.FitToPagesTall := 1; // 1 Страница ПО ВЫСОТЕ
  if r > 60 then
  begin
    Sheet3.PageSetup.FitToPagesTall := 2; // 2 Страницы ПО ВЫСОТЕ
    Sheet3.PageSetup.PrintTitleRows := '$' + IntToStr(6) + ':$' + IntToStr(G1); //6 7
  end;

  Sheet3.PageSetup.LeftMargin := 0; //Нулевые поля
  Sheet3.PageSetup.RightMargin := 0;
  Sheet3.PageSetup.BottomMargin := 0;
  Sheet3.PageSetup.TopMargin := 0;

  Sheet3.PageSetup.Orientation := 2; //Альбомная ориентация

  XL2.Visible := True;
  Sheet1 := UnAssigned;
  Sheet2 := UnAssigned;
  Sheet3 := UnAssigned;
  XL2 := UnAssigned;
end;

procedure TForm1.N23Click(Sender: TObject);
var
  XL2, Sheet1, Sheet2, Sheet3, Rang: Variant;
  E, E1, i, Res, Priv, Kol_Zap, u, r, uu, ff, ff1: Integer;
  Vn_DAt, Vn_DAt1, Dir, God, mes, Nom, S_Svar, S_Sbor, Priv_Str, idgp, idko, Zak, Izdel, Kol_S, Stan, Oboz, Elem, Mat, Err, id_lop, s, Lop, Dir1, Prim: string;
  Svar_o, Sbor_o, Kol_D: Double;
  Res_Nog, Res_Trumph, Res_Gib, Res_Pila, Kanban, Val, Svark, Rotor, Pokr, Kol_LOP, fff, FFF1, gggg, G1, C: Integer;
  d: TDate;
begin
  Vn_DAt := ZSG.Cells[I_FN_KOL_ZAP + 3, ZSG.Row]; //dd.mm/YYYY//FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  d := StrToDate(Vn_DAt);
  Vn_DAt1 := FormatDateTime('mm.dd.yyyy', d);
  God := FormatDateTime('yyyy', d);
  mes := FormatDateTime('mmmm', d);
  Nom := ZSG.Cells[0, ZSG.Row];
  C := StrToInt(ZSG.Cells[I_FN_KOL_ZAP + 28, ZSG.Row]);
  Prim := ZSG.Cells[I_FN_KOL_ZAP + 6, ZSG.Row];
  Dir1 := '\Суточные задания\';
  Form1.SUT1(Vn_DAt, Nom, Dir1, 0, C, Prim); //ZZZZZZZZZZZZZZZZZZZZZZ
end;

procedure TForm1.TabSheet1Show(Sender: TObject);
begin
  Button46.Click;
end;

procedure TForm1.ComboBox18DrawItem(Control: TWinControl; Index: Integer; Rect: TRect; State: TOwnerDrawState);
begin
  with ComboBox18.Canvas.Brush do
  begin
    if Index = 0 then
    begin
      Color := clWhite;
      ComboBox18.Canvas.FillRect(Rect);
      ComboBox18.Canvas.Font.Color := clBlack;
      ComboBox18.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox18.Items[0]);
    end;
    if Index = 1 then
    begin
      Color := RGB(247, 247, 131);
      ComboBox18.Canvas.FillRect(Rect);
      ComboBox18.Canvas.Font.Color := clBlack;
      ComboBox18.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox18.Items[1]);
    end;
    if Index = 2 then
    begin
      Color := RGB(153, 102, 51);
      ComboBox18.Canvas.FillRect(Rect);
      ComboBox18.Canvas.Font.Color := clBlack;
      ComboBox18.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox18.Items[2]);
    end;
    if Index = 3 then
    begin
      Color := RGB(173, 255, 47);
      ComboBox18.Canvas.FillRect(Rect);
      ComboBox18.Canvas.Font.Color := clBlack;
      ComboBox18.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox18.Items[3]);
    end;
    if Index = 4 then
    begin
      Color := RGB(102, 255, 204);
      ComboBox18.Canvas.FillRect(Rect);
      ComboBox18.Canvas.Font.Color := clBlack;
      ComboBox18.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox18.Items[4]);
    end;
    if Index = 5 then
    begin
      Color := RGB(0, 100, 0);
      ComboBox18.Canvas.FillRect(Rect);
      ComboBox18.Canvas.Font.Color := clBlack;
      ComboBox18.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox18.Items[5]);
    end;
    if Index = 6 then
    begin
      Color := RGB(250, 0, 0);
      ComboBox18.Canvas.FillRect(Rect);
      ComboBox18.Canvas.Font.Color := clBlack;
      ComboBox18.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox18.Items[6]);
    end;
    if Index = 7 then
    begin
      Color := RGB(30, 144, 255);
      ComboBox18.Canvas.FillRect(Rect);
      ComboBox18.Canvas.Font.Color := clBlack;
      ComboBox18.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox18.Items[7]);
    end;
    if Index = 8 then
    begin
      Color := clGray;
      ComboBox18.Canvas.FillRect(Rect);
      ComboBox18.Canvas.Font.Color := clBlack;
      ComboBox18.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox18.Items[8]);
    end;
    if Index = 9 then
    begin
      Color := clWhite;
      ComboBox18.Canvas.FillRect(Rect);
      ComboBox18.Canvas.Font.Color := clBlack;
      ComboBox18.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox18.Items[9]);
    end;
    if Index = 10 then
    begin
      Color := clWhite;
      ComboBox18.Canvas.FillRect(Rect);
      ComboBox18.Canvas.Font.Color := clBlack;
      ComboBox18.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox18.Items[10]);
    end;
    if Index = 11 then
    begin
      Color := clWhite;
      ComboBox18.Canvas.FillRect(Rect);
      ComboBox18.Canvas.Font.Color := clBlack;
      ComboBox18.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox18.Items[11]);
    end;
    if Index = 12 then
    begin
      Color := clWhite;
      ComboBox18.Canvas.FillRect(Rect);
      ComboBox18.Canvas.Font.Color := clBlack;
      ComboBox18.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox18.Items[12]);
    end;
  end;
end;

procedure TForm1.N24Click(Sender: TObject);
begin
  if ((Regist.Doljnost = 1) or (Regist.Doljnost = 4)) then//Клап Нов Ставим вторую галку
  begin
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [' + FN_SGP + ']=' + #39 + 'V' + #39 + ' WHERE [IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39, ['Klapana']) then
      Exit;
                        //StringGrid10.Cells[I_FN_ZAKAZCHIK,StringGrid10.Row]:='';
    StringGrid10.Cells[I_FN_SGP, StringGrid10.Row] := 'V';

  end;
end;

procedure TForm1.StringGrid11MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  i, j: integer;
begin

  StringGrid11.MouseToCell(X, Y, i, j);
  FSelectRow(ZSG, StringGrid11.Row);

end;

procedure TForm1.StringGrid11MouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin

  Handled := true;
  StringGrid11.Perform(WM_VSCROLL, SB_LINEDOWN, 0);

end;

procedure TForm1.StringGrid11MouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin

  Handled := true;
  StringGrid11.Perform(WM_VSCROLL, SB_LINEUP, 0);

end;

function Norm_Edit(C1,C2,C3,C4,C5,C6,C7,C8,R,Plus: Integer;S:String): string;
var
I,RES:Integer;
C:Double;
SS:string;
begin
     if Plus=1 then
     Begin                               //Nom                 FN_ZAK         FN_KOL_ZAP                          FN_NAM
     Form1.Memo32.Lines.Add(Form1.ZSG.Cells[0,R]+';'+Form1.ZSG.Cells[2,R]+';'+Form1.ZSG.Cells[4,R]+';'+Form1.ZSG.Cells[11,R]+';');
     C:=StrToFloat(Form1.Label276.caption)+StrToFloat(Form1.ZSG.Cells[C1,R]);
     Form1.Label276.caption:=FloatToStr(C);
     //
     C:=StrToFloat(Form1.Label277.caption)+StrToFloat(Form1.ZSG.Cells[C2,R]);
     Form1.Label277.caption:=FloatToStr(C);
     //
     C:=StrToFloat(Form1.Label278.caption)+StrToFloat(Form1.ZSG.Cells[C3,R]);
     Form1.Label278.caption:=FloatToStr(C);
     //
     C:=StrToFloat(Form1.Label279.caption)+StrToFloat(Form1.ZSG.Cells[C4,R]);
     Form1.Label279.caption:=FloatToStr(C);
     //
     C:=StrToFloat(Form1.Label280.caption)+StrToFloat(Form1.ZSG.Cells[C5,R]);
     Form1.Label280.caption:=FloatToStr(C);
     //
     C:=StrToFloat(Form1.Label281.caption)+StrToFloat(Form1.ZSG.Cells[C6,R]);
     Form1.Label281.caption:=FloatToStr(C);
     //

     End
     else
     begin
     SS:=Form1.ZSG.Cells[0,R]+';'+Form1.ZSG.Cells[2,R]+';'+Form1.ZSG.Cells[4,R]+';'+Form1.ZSG.Cells[11,R]+';';
     for I := 0 to Form1.Memo32.Lines.Count-1 do
     begin
         Res:=AnsiCompareStr(SS,Form1.Memo32.Lines.Strings[i]);
         if RES=0 then
             Form1.Memo32.Lines.Delete(I);
     end;
     C:=StrToFloat(Form1.Label276.caption)-StrToFloat(Form1.ZSG.Cells[C1,R]);
     Form1.Label276.caption:=FloatToStr(C);
     //
     C:=StrToFloat(Form1.Label277.caption)-StrToFloat(Form1.ZSG.Cells[C2,R]);
     Form1.Label277.caption:=FloatToStr(C);
     //
     C:=StrToFloat(Form1.Label278.caption)-StrToFloat(Form1.ZSG.Cells[C3,R]);
     Form1.Label278.caption:=FloatToStr(C);
     //
     C:=StrToFloat(Form1.Label279.caption)-StrToFloat(Form1.ZSG.Cells[C4,R]);
     Form1.Label279.caption:=FloatToStr(C);
     //
     C:=StrToFloat(Form1.Label280.caption)-StrToFloat(Form1.ZSG.Cells[C5,R]);
     Form1.Label280.caption:=FloatToStr(C);
     //
     C:=StrToFloat(Form1.Label281.caption)-StrToFloat(Form1.ZSG.Cells[C6,R]);
     Form1.Label281.caption:=FloatToStr(C);
     end;

end;

procedure TForm1.StringGrid11SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
var
  R: TRect;
  I, Res: Integer;
  Str: string;
begin

  if ((ACol = 0) and (ARow > 1)) then
  begin
    FSelectRow(ZSG, ARow);
    CheckACol9 := ACol;
    CheckARow9 := ARow;
    R := StringGrid11.CellRect(ACol, ARow);
    R.Left := R.Left + StringGrid11.Left;
    R.Right := R.Right + StringGrid11.Left;
    R.Top := R.Top + StringGrid11.Top;
    R.Bottom := R.Bottom + StringGrid11.Top;
    CheckBox1.Left := R.Left + 1;
    CheckBox1.Top := R.Top + 1;
    CheckBox1.Width := (R.Right + 1) - R.Left;
    CheckBox1.Height := (R.Bottom + 1) - R.Top;
    CheckBox1.Visible := True;
    if StringGrid11.Cells[ACol, ARow] <> '' then
    begin
      CheckBox1.Checked := True;

    end
    else
    begin
      CheckBox1.Checked := False;

    end;
  end;

end;

procedure TForm1.StringGrid11TopLeftChanged(Sender: TObject);
begin

  ZSG.TopRow := StringGrid11.TopRow;

end;

procedure TForm1.StringGrid4DblClick(Sender: TObject);
var
  Kol_Ob, Kol15, Kol3, Mat: Double;
  Kol, I, ARow: Integer;
  Str: string;
begin
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  Kol_Ob := 0;
  Kol15 := 0;
  Kol3 := 0;
  ARow := StringGrid4.Row;
  Kol_Ob := StrToFloat(Label248.Caption);
  Mat := StrToFloat(Label245.Caption);
  if StringGrid4.Cells[0, ARow] = '' then
  begin
    StringGrid4.Cells[0, ARow] := 'V';
    Str := StringReplace(zclrstrngrd1.Cells[I_FN_KOL, ARow], ',', '.', []);
    Kol_Ob := Kol_Ob + StrToFloat(Str);

    Str := StringReplace(zclrstrngrd1.Cells[I_FN_KOL_Zap + 18, ARow], ',', '.', []);
    Mat := Mat + StrToFloat(Str);
    {Str := StringReplace(zclrstrngrd1.Cells[11, ARow], ',', '.', []);
    if Mat = 1.5 then
      Kol15 := Kol15 + StrToFloat(Str);
    if Mat = 3 then
      Kol3 := Kol3 + StrToFloat(Str);  }
  end
  else
  begin
    StringGrid4.Cells[0, ARow] := '';

    Str := StringReplace(zclrstrngrd1.Cells[I_FN_KOL, ARow], ',', '.', []);
    Kol_Ob := Kol_Ob - StrToFloat(Str);

    Str := StringReplace(zclrstrngrd1.Cells[I_FN_KOL_Zap + 18, ARow], ',', '.', []);
    Mat := Mat - StrToFloat(Str);
  end;
  Label248.Caption := FloatToStr(Kol_Ob);
  Label245.Caption := FloatToStr(Mat);
  Label152.Caption := FloatToStr(0);
end;

procedure TForm1.CheckBox1Exit(Sender: TObject);
begin
  CheckBox1.Visible := False;
  if StringGrid11.Cells[0, CheckARow9]<>'' then
    Norm_Edit(22,21,36,38,41,43,0,0,CheckARow9,1,'')
  else
    Norm_Edit(22,21,36,38,41,43,0,0,CheckARow9,0,'');
end;

procedure TForm1.CheckBox1Click(Sender: TObject);
begin
  if CheckBox1.Checked = True then
  begin
    StringGrid11.Cells[0, CheckARow9] := 'V';

  end;
  if CheckBox1.Checked = False then
  Begin
    StringGrid11.Cells[0, CheckARow9] := '';

  End;
end;

procedure TForm1.ZSGTopLeftChanged(Sender: TObject);
begin
  StringGrid11.TopRow := ZSG.TopRow;
end;

procedure TForm1.Button53Click(Sender: TObject);
var
  Str: string;
  I, Kod: Integer;
  Str2, Model, IDGP, IDKO, DatZak, Zakaz, BZ, Tip, Grup, Izdel, GrupGP, IzdelGP, Kol, PuskPlan, RasDatGot, NachNom, KonNom, NachKod, KonKod, Prim: string;
begin
  if OpenDialog1.Execute then
  begin
    Str := OpenDialog1.FileName;
    Xls_To_StringGrid(SG1, Str, 'Лист1');
  end;
  for I := 0 to SG1.RowCount do
  begin
    if SG1.Cells[0, I] = '' then
      Continue
    else
      Kod := StrToInt(SG1.Cells[0, I]);
    IDGP := SG1.Cells[15, I];
    IDKO := SG1.Cells[16, I];
    DatZak := SG1.Cells[17, I];
    Zakaz := SG1.Cells[2, I];
    BZ := SG1.Cells[3, I];
    Izdel := SG1.Cells[4, I];
    PuskPlan := SG1.Cells[7, I];
    RasDatGot := SG1.Cells[6, I];
    NachNom := SG1.Cells[11, I];
    KonNom := SG1.Cells[12, I];
    NachKod := SG1.Cells[13, I];
    KonKod := SG1.Cells[14, I];
    if Kod = 310 then
    begin
      if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET ([Расчетная дата готовности ]=' + #39 + ConvertDat1(RasDatGot) + #39 + ') , (ПланЗапуск=' + #39 + PuskPlan + #39 + ') , (НачКод=' + #39 + NachKod + #39 + ')' + ' , (КонКод=' + #39 + KonKod + #39 + ') , (НачНомер=' + #39 + NachNom + #39 + ') , (КонНомер=' + #39 + KonNom + #39 + ') WHERE [IdГП]=' + #39 + IDGP + #39, ['Klapana']) then
        Exit;

    end
    else
    begin
      if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET ([Расчетная дата готовности ]=' + #39 + ConvertDat1(RasDatGot) + #39 + ') , (ПланЗапуск=' + #39 + PuskPlan + #39 + ') , (НачКод=' + #39 + NachKod + #39 + ')' + ' , (КонКод=' + #39 + KonKod + #39 + ') , (НачНомер=' + #39 + NachNom + #39 + ') , (КонНомер=' + #39 + KonNom + #39 + ') WHERE [IdГП]=' + #39 + IDGP + #39, ['KlapanaZap']) then
        Exit;
    end;
  end;
end;

procedure TForm1.Button54Click(Sender: TObject);
var
  Kanban1, Trumph1, Nog1, Ugol1, Gib1, Prok1, Pila1, PilaLent1, Svarka1, HACO1, VALCI1, KROMKA1, TOKARN1, ROTOR1, Dlina1, Kol1, Diam1, Diami1, Elem1, Vid1, Obozn1, Mater1, Kol_Gib1: string;
  Parent, Vid, Elem, Elem_S, Kol_Ed, Kol, EI, Obozn, Typ, Kateg, Prim, Diam, Massa, Dlina, Shir, Dlin_Raz, Shir_Raz, Obem, Kol_Gib, Kanban, Mater, Kompl_Ved, Trumpf, Nog, Uglorub, Gibka, Prokat, Pila, Naim, Naim_Izdel, Izdel, Grupp, Rout, Varian, Str2, IDGP, Str, Kod, Zak, God, Dat, Obozn_Sh, Kompl_Priv, IDKO, DlinS, ShirS, Mat, Izdelie, SH1, SH2, N2: string;
  I, Y, ID, Res, Res_priv, Res1, Res2, Res_El, Res_Lop, Res_Podst, Res_Kpu, Res_Sbor, Res_Lop1, Res_K, Proch_Privod, Res_Krugl_Lop, A, B, Insert_krug, Ugol, DiamI, VG, Richag1, //ВГ 410.00.01.002-400 Пжарные 5 Гибов
Richag2//ТЕКИ 188.04.00.002 Воздушные 3 Гиба
: Integer;
  DlinaI: Double;
  Pos1, Pos2, Pos3, Pos4, Pos5: string;
begin
  if OpenDialog3.Execute then
  begin
    Str := OpenDialog3.FileName;
    God := FormatDateTime('yyyy', Now);
    Xls_To_StringGrid(SG1, Str, 'Лист1');
    for I := 1 to SG1.RowCount do
    begin
      Insert_krug := 0;
      if SG1.Cells[29, I] = '' then
        Continue
      else
        IDGP := SG1.Cells[28, I];
      if SG1.Cells[33, I] = '' then
        IDKO := '0'
      else
        IDKO := SG1.Cells[33, I];

      Parent := SG1.Cells[1, I];
      Vid := SG1.Cells[2, I];
      Elem := SG1.Cells[3, I];
      Kol_Ed := SG1.Cells[4, I];
      Kol := SG1.Cells[5, I];
      EI := SG1.Cells[6, I];
      Obozn := SG1.Cells[7, I]; //Чертеж
      Typ := SG1.Cells[8, I];
      Kateg := SG1.Cells[9, I];
      Prim := SG1.Cells[10, I];
      Diam := SG1.Cells[11, I];
      Massa := SG1.Cells[12, I];
      Dlina := SG1.Cells[13, I];
      if Dlina <> '' then
        DlinaI := StrToFloat(Dlina)
      else
        DlinaI := 0;
      Shir := SG1.Cells[14, I];
      Dlin_Raz := SG1.Cells[15, I];
      Shir_Raz := SG1.Cells[16, I];
      Obem := SG1.Cells[17, I];
      Kol_Gib := SG1.Cells[18, I];
      Richag1 := Pos('ВГ 410.00.01.002', Obozn); // Пжарные 5 Гибов Рычаг
      if Richag1 <> 0 then
        Kol_Gib := '5';
      Richag2 := Pos('ТЕКИ 188.04.00.002', Obozn); // Воздушные 3 Гиба
      if Richag2 <> 0 then
        Kol_Gib := '3';
      Kanban := SG1.Cells[19, I];
      Mater := SG1.Cells[20, I];
      Kompl_Ved := SG1.Cells[21, I];
      Trumpf := SG1.Cells[22, I];
      Nog := SG1.Cells[23, I];
      Uglorub := SG1.Cells[24, I];
      Gibka := SG1.Cells[25, I];
      Prokat := SG1.Cells[26, I];
      Pila := SG1.Cells[27, I];
      Naim := SG1.Cells[29, I];
      Zak := SG1.Cells[30, I];
      Kod := SG1.Cells[31, I];
      Dat := SG1.Cells[32, I];

      if SG1.Cells[34, I] = '' then
        SH1 := '0'
      else
        SH1 := SG1.Cells[34, I];
                //==========================
      if SG1.Cells[35, I] = '' then
        SH2 := '0'
      else
        SH2 := SG1.Cells[35, I];

      Res := StrToInt(Kod);
      Res1 := AnsiCompareStr('Профиль 200018', Mater);
      Res2 := AnsiCompareStr('Лопатка', Elem);
      if (Res1 = 0) and (Res2 = 0) then
      begin
        Mater := 'ФЭЗ.П.0593';
        DlinaI := DlinaI - 5;
        Dlina := FloatToStr(DlinaI);
      end;
                //------------------
      Res1 := AnsiCompareStr('Профиль 200017', Mater);
      Res2 := AnsiCompareStr('Стенка', Elem);
      if (Res1 = 0) and (Res2 = 0) then
      begin
        Mater := 'ФЭЗ.П.0592';
        DlinaI := DlinaI - 5;
        Dlina := FloatToStr(DlinaI);
      end;
      Izdel := SG1.Cells[29, I];
      Res_Kpu := Pos('Лопатка УВК', Elem);
      if Res_Kpu <> 0 then
        Mater := 'PS-100TT';

      if (Res = 310) or (Res = 330) then
      begin
        Izdel := SG1.Cells[29, I];
        Res_Kpu := Pos('КПУ', Izdel);
        if Res_Kpu <> 0 then
        begin
          Res1 := Pos(' ', Izdel);
          Delete(Izdel, 1, Res1);
                        //======================================== KPU
          Res1 := Pos('-', Izdel);
          Pos1 := Copy(Izdel, 1, Res1 - 1);
          Delete(Izdel, 1, Res1);
                        //======================================== 1 H
          Res1 := Pos('-', Izdel);
          N2 := Copy(Izdel, 1, 2);
          Pos2 := Copy(Izdel, 1, 1);
          Pos3 := Copy(Izdel, 2, 1);
          Delete(Izdel, 1, Res1);
                        //========================================
                        //Клапан КПУ-1Н-О-Н-600*400-2*ф-MB220-сн-0-0-0-0-0-0
                        //Клапан КПД-4-01-500*500-1*ф-ЭМП220-вн-0-0
                        //========================================
          Res1 := Pos('-', Izdel);
          Pos4 := Copy(Izdel, 1, Res1 - 1);
          Delete(Izdel, 1, Res1);
                        //========================================
          Res1 := Pos('-', Izdel);
          Pos5 := Copy(Izdel, 1, Res1 - 1);
          Delete(Izdel, 1, Res1);
                        //========================================
                        //Клапан КПУ-2Н-О-Н-200-2*ф-MB220-T-сн-0-0-0-2*100-0-0
                        //Клапан КПУ-1Н-О-Н-200*200-2*ф-MB220-сн-0-с-0-0-0-0
          Res1 := Pos('-', Izdel); //Проверка на круглый если -
          if Res1 > 5 then //200*200- Квадрат
          begin
            Res1 := Pos('*', Izdel);
            A := StrToInt(Copy(Izdel, 1, Res1 - 1));
            Delete(Izdel, 1, Res1);
                                //========================================
            Res1 := Pos('-', Izdel);
            B := StrToInt(Copy(Izdel, 1, Res1 - 1));
            Delete(Izdel, 1, Res1);
          end
          else
          begin
            Res1 := Pos('-', Izdel);
            A := StrToInt(Copy(Izdel, 1, Res1 - 1));
            Delete(Izdel, 1, Res1);
            B := 0;
          end;

        end;
                        //КПУ-1Н-О-Н-125-2*ф-MB24-сн-0-0-0-0-0-0
        Obozn := SG1.Cells[7, I]; //Чертеж
        if Obozn <> '' then
        begin
          VG := Pos('ВГ 463.00.00.003', Obozn);
          if VG <> 0 then
            Obozn := 'ВМ 02.100.01.000' + IntToStr(A);

          Obozn_Sh := Obozn; //Чертеж
          Res_K := Pos('-', Obozn_Sh);
          if Res_K <> 0 then
            Delete(Obozn_Sh, Res_K, 30);
          Res_K := Pos('Детали', Vid);
          if Res_K <> 0 then
          begin
            if not mkQuerySelect(ADOQuery2, 'Select * from %s  Where  (ОбозначениеШ=' + #39 + Obozn_Sh + #39 + ')', ['Шаблон']) then
              exit;
            if ADOQuery2.RecordCount = 0 then
            begin

              if not mkQueryInsert(ADOQuery1, 'Insert Into %s ' + '(ID, Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + '[Тип], [Категория], [Примечание], [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' + '[ШиринаРазв], [Объем], [КолГибов], [Канбан], [Материал], [КомплВед], [Trumph], [Ножницы],' + '[Углоруб], [Гибка], [Прокатка], [Пила],Изделие,ОбозначениеШ,Дата,[ШиринаПолки1],[ШиринаПолки2]) ' + 'Values (%s,%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,' +
                '%s,%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s ,%s,%s)', ['Шаблон', #39 + IntToStr(ID) + #39, #39 + 'False' + #39, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol_Ed + #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Typ + #39, #39 + Kateg + #39, #39 + Prim + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Obem + #39, #39 + Kol_Gib + #39, #39 + Kanban + #39, #39 + Mater + #39, #39 + Kompl_Ved + #39, #39 + Trumpf + #39, #39 + Nog + #39, #39 + Uglorub + #39, #39 + Gibka + #39, #39 + Prokat + #39, #39 + Pila + #39, #39 + Naim + #39, #39 + Obozn_Sh + #39, #39 + ConvertDat1(Dat) + #39, #39 + SH1 + #39, #39 + SH2 + #39]) then
                exit;

            end;
          end;
        end;

        Proch_Privod := Pos('Электропривод', Elem);

        if Proch_Privod <> 0 then
        begin
          Elem_S := Elem;
          Res_K := Pos(' ', Elem_S);
          Delete(Elem_S, 1, Res_K);
        end;
        Res_El := Pos('Электромагнит', Elem);
        if Res_El <> 0 then
        begin
          Elem_S := Elem;
          Res_K := Pos(' ', Elem);
          Delete(Elem, 1, Res_K);
        end;
        if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET [Статус]=' + #39 + '1' + #39 + ' WHERE [IdГП]=' + #39 + IDGP + #39, ['Klapana']) then
          Exit;
        if (Proch_Privod <> 0) or (Res_El <> 0) then
        begin
          if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET [Статус]=' + #39 + '1' + #39 + ',МодПривода=' + #39 + Elem_S + #39 + ',Привод=' + #39 + Kol + #39 + ' WHERE [IdГП]=' + #39 + IDGP + #39, ['Klapana']) then
            Exit;
        end;
        if (Proch_Privod <> 0) or (Res_El <> 0) then
        begin
          if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET МодПривода=' + #39 + Elem_S + #39 + ',Привод=' + #39 + Kol + #39 + ' WHERE [IdГП]=' + #39 + IDGP + #39, ['Запуск']) then
            Exit;
        end;
        Res_Sbor := Pos('Сборочные единицы', Vid);
        Res_Lop := Pos('Лопатка', Elem);
        Res_Lop1 := Pos('Лопатка-заготовка', Elem);
        if ((Res_Lop <> 0) or (Res_Lop1 <> 0)) and (Res_Sbor <> 0) then
        begin
          if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET [Статус]=' + #39 + '1' + #39 + ',РаскрЛопаток=' + #39 + Kol + #39 + ' WHERE [IdГП]=' + #39 + IDGP + #39, ['Klapana']) then
            Exit;
        end;
        if not mkQuerySelect(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + IDGP + #39 + ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 + ')  AND (Количество=' + #39 + Kol + #39 + ')', ['Специф']) then
          exit;

        if ADOQuery2.RecordCount = 0 then
        begin
          Res_Podst := AnsiCompareStr('Подставка под привод', Elem);
          if Res_Podst = 1 then
            Kanban := 'True';
                                //ShirS:=Shir;
                                //DlinS:=Dlina;

          ShirS := ConvertFloat(Shir);
          DlinS := ConvertFloat(Dlina);
          if not mkQueryInsert(ADOQuery1, 'Insert Into %s ' + '(ID, Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + '[Тип], [Категория], [Примечание], [Диаметр], [Масса], [Длина],   [Ширина], [ДлинаРазв],' + '[ШиринаРазв], [Объем], [КолГибов], [Канбан], [Материал], [КомплВед], [Trumph], [Ножницы],' + '[Углоруб], [Гибка], [Прокатка], [Пила],IdГП,Изделие,Заказ,Дата,IDКо,[ДлинаИ],[ШиринаИ],[ШиринаПолки1],[ШиринаПолки2]) ' + 'Values (%s,%s,%s,%s,%s,%s,%s,%s,' +
            '%s,%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s ,%s,%s)', ['Специф', #39 + IntToStr(ID) + #39, #39 + Parent + #39, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol_Ed + #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Typ + #39, #39 + Kateg + #39, #39 + Prim + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Obem + #39, #39 + Kol_Gib + #39, #39 + Kanban + #39, #39
            + Mater + #39, #39 + Kompl_Ved + #39, #39 + Trumpf + #39, #39 + Nog + #39, #39 + Uglorub + #39, #39 + Gibka + #39, #39 + Prokat + #39, #39 + Pila + #39, #39 + IDGP + #39, #39 + Naim + #39, #39 + Zak + #39, #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39, #39 + DlinS + #39, #39 + ShirS + #39, #39 + SH1 + #39, #39 + SH2 + #39]) then
            exit;

        end;
      end;
      if (Res <> 310) and (Res <> 330) and (Res <> 600) then
      begin  //Не Пожарные Электропривод BLE230U-15
        Res_priv := Pos('привод', Elem);
        Res_El := Pos('Привод', Elem);
        Proch_Privod := Pos('Прочие изделия', Vid);
        if ((Res_priv <> 0) or (Res_El <> 0)) and (Proch_Privod <> 0) then
        begin
          if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET [Статус]=' + #39 + '1' + #39 + ',МодПривода=' + #39 + Elem + #39 + ',Привод=' + #39 + Kol + #39 + ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ') AND ([IdКО]=' + #39 + IDKO + #39 + ') ', ['KlapanaZap']) then
            Exit;
        end;
        if ((Res_priv <> 0) or (Res_El <> 0)) and (Proch_Privod <> 0) then
        begin
          if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET МодПривода=' + #39 + Elem + #39 + ',Привод=' + #39 + Kol + #39 + ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ') AND ([IdКО]=' + #39 + IDKO + #39 + ') ', ['ЗапускВозд']) then
            Exit;
        end;
        Res_Lop := Pos('Лопатка', Elem);
        Res_K := Pos('Детали', Vid);
        if (Res_Lop <> 0) and (Res_K <> 0) then
        begin
          if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET [Статус]=' + #39 + '1' + #39 + ',РаскрЛопаток=' + #39 + Kol + #39 + ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ') AND ([IdКО]=' + #39 + IDKO + #39 + ') ', ['KlapanaZap']) then
            Exit;
        end;
        if Obozn <> '' then
        begin

          Obozn_Sh := Obozn;
          Res_K := Pos('-', Obozn_Sh);
          if Res_K <> 0 then
            Delete(Obozn_Sh, Res_K, 30);
          Res_K := Pos('Детали', Vid);
          if Res_K <> 0 then
          begin
            if not mkQuerySelect(ADOQuery2, 'Select * from %s  Where  (ОбозначениеШ=' + #39 + Obozn_Sh + #39 + ')', ['ШаблонВоз']) then
              exit;
            if ADOQuery2.RecordCount = 0 then
            begin
              if not mkQueryInsert(ADOQuery1, 'Insert Into %s ' + '(ID, Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + '[Тип], [Категория], [Примечание], [Диаметр], [Масса], [Длина],   [Ширина], [ДлинаРазв],' + '[ШиринаРазв], [Объем], [КолГибов], [Канбан], [Материал], [КомплВед], [Trumph], [Ножницы],' + '[Углоруб], [Гибка], [Прокатка], [Пила],Изделие,ОбозначениеШ,Дата,[ШиринаПолки1],[ШиринаПолки2]) ' + 'Values (%s,%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,' +
                '%s,%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s ,%s,%s)', ['ШаблонВоз', #39 + IntToStr(ID) + #39, #39 + 'False' + #39, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol_Ed + #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Typ + #39, #39 + Kateg + #39, #39 + Prim + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Obem + #39, #39 + Kol_Gib + #39, #39 + Kanban + #39, #39 + Mater + #39, #39 + Kompl_Ved + #39, #39 + Trumpf + #39, #39 + Nog + #39, #39 + Uglorub + #39, #39 + Gibka + #39, #39 + Prokat + #39, #39 + Pila + #39, #39 + Naim + #39, #39 + Obozn_Sh + #39, #39 + ConvertDat1(Dat) + #39, #39 + SH1 + #39, #39 + SH2 + #39]) then
                exit;

            end;
          end;
                        //+______________________________________

        end;
        if not mkQuerySelect(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + IDGP + #39 + ') And (IdКО=' + #39 + IDKO + #39 + ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Количество=' + #39 + Kol + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 + ')', ['СпецифВозд']) then
          exit;
        if ADOQuery2.RecordCount = 0 then
        begin
          if not mkQueryInsert(ADOQuery1, 'Insert Into %s ' + '(ID, Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + '[Тип], [Категория], [Примечание], [Диаметр], [Масса], [Длина],   [Ширина], [ДлинаРазв],' + '[ШиринаРазв], [Объем], [КолГибов], [Канбан], [Материал], [КомплВед], [Trumph], [Ножницы],' + '[Углоруб], [Гибка], [Прокатка], [Пила],IdГП,Изделие,Заказ,Дата,IdКО,[ШиринаПолки1],[ШиринаПолки2]) ' + 'Values (%s,%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,' +
            '%s,%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s ,%s ,%s ,%s)', ['СпецифВозд', #39 + IntToStr(ID) + #39, #39 + Parent + #39, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol_Ed + #39, #39 + Kol + #39, #39 + EI + #39, #39 + Obozn + #39, #39 + Typ + #39, #39 + Kateg + #39, #39 + Prim + #39, #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39, #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Obem + #39, #39 + Kol_Gib + #39, #39 + Kanban + #39, #39 + Mater + #39, #39 +
            Kompl_Ved + #39, #39 + Trumpf + #39, #39 + Nog + #39, #39 + Uglorub + #39, #39 + Gibka + #39, #39 + Prokat + #39, #39 + Pila + #39, #39 + IDGP + #39, #39 + Naim + #39, #39 + Zak + #39, #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39, #39 + SH1 + #39, #39 + SH2 + #39]) then
            exit;
          if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET [Статус]=' + #39 + '1' + #39 + ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ') AND ([IdКО]=' + #39 + IDKO + #39 + ') ', ['KlapanaZap']) then
            Exit;

        end;
      end;
                {if (Res=600) OR (Res=610)  then  //STAM Стакан монтажный СТАМ213-56-Н
                begin

                  if not mkQuerySelect(ADOQuery2,
                                'Select * from %s  Where (IdГП=' + #39 +  IDGP + #39 +
                                        ') And (IdКО=' + #39 +  IDKO + #39 +
                                        ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 + ')',
                                ['СпецифСТАМ'])
                  then
                                exit;
                        //if ADOQuery2.RecordCount = 0 then
                        //begin
                                if not mkQueryInsert(ADOQuery1, 'Insert Into %s '
                                        +
                                        '(ID, Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
                                        '[Тип], [Категория], [Примечание], [Диаметр], [Масса], [Длина],   [Ширина], [ДлинаРазв],' +
                                        '[ШиринаРазв], [Объем], [КолГибов], [Канбан], [Материал], [КомплВед], [Trumph], [Ножницы],' +
                                        '[Углоруб], [Гибка], [Прокатка], [Пила],IdГП,Изделие,Заказ,Дата,IdКО,[ШиринаПолки1],[ШиринаПолки2]) ' +
                                        'Values (%s,%s,%s,%s,%s,%s,%s,%s,' +
                                        '%s,%s,%s,%s,%s,%s,%s,%s,' +
                                        '%s,%s,%s,%s,%s,%s,%s,%s,' +
                                        '%s,%s,%s,%s,%s,%s,%s,%s ,%s ,%s ,%s)',
                                        ['СпецифСТАМ',
                                        #39 + IntToStr(ID) + #39, #39 + Parent +
                                                #39, #39 + Vid + #39, #39 + Elem + #39,
                                                #39 + Kol_Ed + #39, #39 + Kol + #39, #39
                                                + EI + #39, #39 + Obozn + #39,
                                                #39 + Typ + #39, #39 + Kateg +
                                                        #39, #39 + Prim + #39, #39 + Diam
                                                        + #39, #39 + Massa + #39, #39 +
                                                        Dlina + #39, #39 + Shir + #39,
                                                        #39 + Dlin_Raz + #39,
                                                #39 + Shir_Raz + #39, #39 + Obem
                                                        + #39, #39 + Kol_Gib + #39, #39
                                                        + Kanban + #39, #39 + Mater +
                                                        #39, #39 + Kompl_Ved + #39, #39
                                                        + Trumpf + #39, #39 + Nog + #39,
                                                #39 + Uglorub + #39, #39 + Gibka
                                                        + #39, #39 + Prokat + #39, #39 +
                                                        Pila + #39, #39 + IDGP + #39, #39
                                                        + Naim + #39, #39 + Zak + #39,
                                                        #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39,
                                                #39 + SH1 + #39, #39 + SH2+ #39  ])
                                then
                                        exit;
                        //end;

                       // Res_K:=Pos('Детали',Vid);
                       // Res_Lop:=Pos('Опора',Elem);
                       // if (Res_K<>0) and (Res_Lop<>0) then
                       //              Mat:=Mater ;
                        if not mkQueryUpdate(ADOQuery1,
                                                'UPDATE %s SET [Статус]=' +
                                                #39 + '1' + #39 +', Мат='+#39+Mat+#39+
                                                ' WHERE ([IdГП]=' + #39 + IDGP +
                                                        #39+') AND ([IdКО]=' + #39 + IDKO +
                                                        #39+') ',
                                                ['СТАМ'])
                        then
                        Exit;
                        if Obozn<>'' Then
                        begin

                                Obozn_Sh:=Obozn;
                                Res_K:=Pos('-',Obozn_Sh);
                                if Res_K<>0 Then
                                        Delete(Obozn_Sh,Res_K,30);
                                Res_K:=Pos('Детали',Vid);
                            if Res_k<>0  Then
                            Begin
                                if not mkQuerySelect(ADOQuery2,
                                'Select * from %s  Where  (ОбозначениеШ=' + #39 + Obozn_sh + #39 + ')',
                                ['ШаблонСТАМ']) then
                                exit;
                                if ADOQuery2.RecordCount=0 Then
                                Begin
                                        if not mkQueryInsert(ADOQuery1, 'Insert Into %s '
                                        +
                                        '(ID, Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
                                        '[Тип], [Категория], [Примечание], [Диаметр], [Масса], [Длина],   [Ширина], [ДлинаРазв],' +
                                        '[ШиринаРазв], [Объем], [КолГибов], [Канбан], [Материал], [КомплВед], [Trumph], [Ножницы],' +
                                        '[Углоруб], [Гибка], [Прокатка], [Пила],Изделие,ОбозначениеШ,Дата,[ШиринаПолки1],[ШиринаПолки2]) ' +
                                        'Values (%s,%s,%s,%s,%s,%s,%s,%s,' +
                                        '%s,%s,%s,%s,%s,%s,%s,%s,' +
                                        '%s,%s,%s,%s,%s,%s,%s,%s,' +
                                        '%s,%s,%s,%s,%s,%s,%s ,%s,%s)',
                                        ['ШаблонСТАМ',
                                        #39 + IntToStr(ID) + #39, #39 + 'False' +
                                                #39, #39 + Vid + #39, #39 + Elem + #39,
                                                #39 + Kol_Ed + #39, #39 + Kol + #39, #39
                                                + EI + #39, #39 + Obozn + #39,
                                                #39 + Typ + #39, #39 + Kateg +
                                                        #39, #39 + Prim + #39, #39 + Diam
                                                        + #39, #39 + Massa + #39, #39 +
                                                        Dlina + #39, #39 + Shir + #39,
                                                        #39 + Dlin_Raz + #39,
                                                #39 + Shir_Raz + #39, #39 + Obem
                                                        + #39, #39 + Kol_Gib + #39, #39
                                                        + Kanban + #39, #39 + Mater +
                                                        #39, #39 + Kompl_Ved + #39, #39
                                                        + Trumpf + #39, #39 + Nog + #39,
                                                #39 + Uglorub + #39, #39 + Gibka
                                                        + #39, #39 + Prokat + #39, #39 +
                                                        Pila + #39, #39
                                                        + Naim + #39, #39 + Obozn_Sh + #39,
                                                        #39 + ConvertDat1(Dat) + #39,
                                                #39 + SH1 + #39, #39 + SH2+ #39 ])
                                        then
                                        exit;

                                end;
                            end;
                        End;
                end; }
    end;
  end;
end;

procedure TForm1.Button55Click(Sender: TObject);
var
  Str: string;
begin
  if (Edit12.Text = '') and (Edit13.Text = '') and (Edit9.Text = '') and (Edit32.Text = '') and (Edit39.Text = '') then
  begin
    Flag_Poisk := 0;
    Exit;
  end;
  Flag_Poisk := 1;
  if Edit13.Text <> '' then
  begin
    Str := Edit13.Text;
    Str_SQL_Poisk := '(Номер LIKE ' + #39 + '%' + Str + '%' + #39 + ')';
  end;
  if Edit12.Text <> '' then
  begin
    Str := Edit12.Text;
    Str_SQL_Poisk := '(Заказ LIKE ' + #39 + '%' + Str + '%' + #39 + ')';
  end;
  if Edit9.Text <> '' then
  begin
    Str := Edit9.Text;
    Str_SQL_Poisk := '(БЗ LIKE ' + #39 + '%' + Str + '%' + #39 + ')';
  end;
  if Edit32.Text <> '' then
  begin
    Str := Edit32.Text;
    Str_SQL_Poisk := '(НачНом LIKE ' + #39 + '%' + Str + '%' + #39 + ')';
  end;
  if Edit39.Text <> '' then
  begin
    Str := Edit39.Text;
    Str_SQL_Poisk := '(Изделие LIKE ' + #39 + '%' + Str + '%' + #39 + ')';
  end;
  Button46.Click;
end;

procedure TForm1.btn25Click(Sender: TObject);
var
  Idgp, IDKO, Naim, Izdel, Zak, Dat, Dir, Kod, Data, Vn_Dat, God, Mes: string;
  J, Res, Y, ID, u: Integer;
  XL: Variant;
  H: Hwnd;
begin
  Y := 1;
  u := 0;
  Data := DateTimeToStr(dtp3.DateTime);

  Vn_Dat := FormatDateTime('mm.dd.yyyy ', dtp3.DateTime);
  God := FormatDateTime('yyyy', dtp3.DateTime);
  Mes := FormatDateTime('mmmm', dtp3.DateTime);

  Dir := Put_KTO + '\CKlapana\Обработка клапанов\';
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\Обработка клапанов\' + God;
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\Обработка клапанов\' + God + '\Не обработанные клапана\';
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\Обработка клапанов\' + God + '\Не обработанные клапана\' + Mes + '\';
  CreateDir(Dir);

        //Dir := ExtractFileDir(ParamStr(0)) +
        //        'Не обраб.XLSx';

  XL := CreateOleObject('Excel.Application');
  XL.Application.EnableEvents := false;
  CopyFile(Pchar(Put_KTO + '\CKlapana\2013\122.XLS'), Pchar(Dir + '\' + Vn_Dat + 'Не обраб.XLS'), false);

  XL.Workbooks.Open(Dir + '\' + Vn_Dat + 'Не обраб.XLS');
  J := 0;
  XL.ActiveWorkBook.WorkSheets[1].Cells[J + 1, 1] := 'Idгп';
  XL.ActiveWorkBook.WorkSheets[1].Cells[J + 1, 2] := 'Изделие';
  XL.ActiveWorkBook.WorkSheets[1].Cells[J + 1, 3] := 'Заказ';
  XL.ActiveWorkBook.WorkSheets[1].Cells[J + 1, 4] := 'Дата';
  XL.ActiveWorkBook.WorkSheets[1].Cells[J + 1, 5] := 'Код';
  XL.ActiveWorkBook.WorkSheets[1].Cells[J + 1, 6] := 'IDко';
  Inc(Y);
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where ' + ' ((Статус IS NULL) OR (Статус=' + #39 + '0' + #39 + ')) AND (Дата=' + #39 + Vn_Dat + #39 + ') AND (IdГП<>0)', ['Klapana']) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin

    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      Idgp := ADOQuery1.FieldByName('IdГП').AsString;
      IDKO := ADOQuery1.FieldByName('IdКО').AsString;
      ID := StrToInt(Idgp);

      Naim := ADOQuery1.FieldByName('Изделие').AsString;
      Izdel := ADOQuery1.FieldByName('Изделие').AsString;
      Zak := ADOQuery1.FieldByName('Заказ').AsString;
      Dat := ADOQuery1.FieldByName('Дата').AsString;
      Kod := ADOQuery1.FieldByName('Код').AsString;
      Res := Pos(' ', Izdel);
      Delete(Izdel, 1, Res);
      Memo1.Lines.Add(Izdel);
      XL.ActiveWorkBook.WorkSheets[1].Cells[J + 2, 1] := Idgp;
      XL.ActiveWorkBook.WorkSheets[1].Cells[J + 2, 2] := Izdel;
      XL.ActiveWorkBook.WorkSheets[1].Cells[J + 2, 3] := Zak;
      XL.ActiveWorkBook.WorkSheets[1].Cells[J + 2, 4] := Dat;
      XL.ActiveWorkBook.WorkSheets[1].Cells[J + 2, 5] := Kod;
      XL.ActiveWorkBook.WorkSheets[1].Cells[J + 2, 6] := IDKO;
      Inc(Y);
      Inc(Y);
      Inc(Y);
      ADOQuery1.Next;
    end; //KPU KPD
  end;

        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where ((Статус IS NULL) OR (Статус=' + #39 + '0' + #39 + ')) AND (Дата=' + #39 + Vn_Dat + #39 + ') AND (IdГП<>0)', ['KlapanaZap']) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin

    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      Idgp := ADOQuery1.FieldByName('IdГП').AsString;
      ID := StrToInt(Idgp);
      IDKO := ADOQuery1.FieldByName('IdКО').AsString;
      Naim := ADOQuery1.FieldByName('Изделие').AsString;
      Izdel := ADOQuery1.FieldByName('Изделие').AsString;
      Zak := ADOQuery1.FieldByName('Заказ').AsString;
      Dat := ADOQuery1.FieldByName('Дата').AsString;
      Kod := ADOQuery1.FieldByName('Код').AsString;

      XL.ActiveWorkBook.WorkSheets[1].Cells[Y, 1] := Idgp;
      XL.ActiveWorkBook.WorkSheets[1].Cells[Y, 2] := Naim;
      XL.ActiveWorkBook.WorkSheets[1].Cells[Y, 3] := Zak;
      XL.ActiveWorkBook.WorkSheets[1].Cells[Y, 4] := Dat;
      XL.ActiveWorkBook.WorkSheets[1].Cells[Y, 5] := Kod;
      XL.ActiveWorkBook.WorkSheets[1].Cells[Y, 6] := IDKO;
      Inc(Y);
      ADOQuery1.Next;
    end; //KPU KPD

  end;
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++ STAM
  {if not mkQuerySelect(ADOQuery1, 'Select * from %s Where ((Статус IS NULL) OR (Статус=' + #39 + '0' + #39 + ')) AND (L=0) AND (IdГП<>0)', ['СТАМ']) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin

    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      Idgp := ADOQuery1.FieldByName('IdГП').AsString;
      ID := StrToInt(Idgp);
      IDKO := ADOQuery1.FieldByName('IdКО').AsString;
      Naim := ADOQuery1.FieldByName('Изделие').AsString;
      Izdel := ADOQuery1.FieldByName('Изделие').AsString;
      Zak := ADOQuery1.FieldByName('Заказ').AsString;
      Dat := ADOQuery1.FieldByName('Дата').AsString;
      Kod := ADOQuery1.FieldByName('Код').AsString;

      XL.ActiveWorkBook.WorkSheets[1].Cells[Y, 1] := Idgp;
      XL.ActiveWorkBook.WorkSheets[1].Cells[Y, 2] := Naim;
      XL.ActiveWorkBook.WorkSheets[1].Cells[Y, 3] := Zak;
      XL.ActiveWorkBook.WorkSheets[1].Cells[Y, 4] := Dat;
      XL.ActiveWorkBook.WorkSheets[1].Cells[Y, 5] := Kod;
      XL.ActiveWorkBook.WorkSheets[1].Cells[Y, 6] := IDKO;
      Inc(Y);
      ADOQuery1.Next;
    end; //KPU KPD

  end;
  for J := 0 to StringGrid10.RowCount - 1 do
  begin
    if StringGrid9.Cells[0, J + 1] <> '' then
    begin
      Idgp := StringGrid10.Cells[I_FN_SGP + 2, J + 1];
      ID := StrToInt(Idgp);

      Naim := StringGrid10.Cells[I_FN_Nam, J + 1];
      Izdel := StringGrid10.Cells[I_FN_Nam, J + 1];
      Zak := StringGrid10.Cells[I_FN_ZAK, J + 1];
      Dat := StringGrid10.Cells[I_FN_DAT, J + 1];
      Kod := '310';
      Res := Pos(' ', Izdel);
      Delete(Izdel, 1, Res);
      Memo1.Lines.Add(Izdel);
      XL.ActiveWorkBook.WorkSheets[1].Cells[Y, 1] := Idgp;
      XL.ActiveWorkBook.WorkSheets[1].Cells[Y, 2] := Izdel;
      XL.ActiveWorkBook.WorkSheets[1].Cells[Y, 3] := Zak;
      XL.ActiveWorkBook.WorkSheets[1].Cells[Y, 4] := Dat;
      XL.ActiveWorkBook.WorkSheets[1].Cells[Y, 5] := Kod;
      Inc(Y);

    end;
  end;  }
  XL.DisplayAlerts := False;

  XL.ActiveWorkBook.SaveAs(Dir + Vn_Dat + 'Не обраб.XLS', EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam);
 // XL.ActiveWorkbook.Close(Dir + '\' + Vn_Dat + 'Не обраб.XLS');
  XL.Visible := True;
  XL := UnAssigned;

end;

procedure TForm1.N25Click(Sender: TObject);
var
  Str1: string;
begin
  Str1 := SGl.Cells[TmpCol, tmpRow];
  Memo11.Lines.Clear;
  Memo11.Lines.Add(Str1);
  Clipboard.AsText := Memo11.Lines.Strings[0];

end;

procedure TForm1.Button52Click(Sender: TObject);
var
  Kol_ZAP, Kol, Kol_Zap_Ranee, Res, Nomer, Zak_Int, i, A, B, D, y, F_KPU, F_KPD, xy, Res1, e, Zag, Zap, j, g, k, List, Err, X_kol, Kol1, Kol2, NI24: Integer;
  Zak, Dat, Plan_Dat, Vn_Dat, Nom, Pos_Vst, Pos_Ml, R, Pereh, Privod, Zag_S, Zap_S, Dir_main, God, Mes, Fil, A_S, B_S, N22, n24, n26, n29, n30: string;
  Svar, Sbor, Izdel, Pos1, Pos2, Pos3, Pos4, Pos5, Pos_Isp, Pos_Flan, Pos_Flan1, Pos_Privod, Pos_Sn, Pos_Dop, Pos_Ram, Dir, R1, R2, R3, R4, R5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18: string;
  NC, ND22: Double;
  Dat1, Dat2, Dat3: TDate;
  XL, XL1, XL2, XL_Temp, V1: Variant;
begin
  Clear_StringGrid(SG1);
  if not mkQuerySelect(ADOQuery2, 'Select * from %s WHERE ВидЭлемента=' + #39 + 'Детали' + #39, ['Специф']) then
    exit;
  SG1.RowCount := ADOQuery2.RecordCount + 1;
  for i := 0 to ADOQuery2.RecordCount - 1 do
  begin
    SG1.Cells[1, i] := ADOQuery2.FieldByName('Parent').AsString;
    SG1.Cells[2, i] := ADOQuery2.FieldByName('ВидЭлемента').AsString;
    SG1.Cells[3, i] := ADOQuery2.FieldByName('Элемент').AsString;
    SG1.Cells[4, i] := ADOQuery2.FieldByName('КолНаЕд').AsString;
    SG1.Cells[5, i] := ADOQuery2.FieldByName('Количество').AsString;
    SG1.Cells[6, i] := ADOQuery2.FieldByName('ЕИ').AsString;
    SG1.Cells[7, i] := ADOQuery2.FieldByName('Обозначение').AsString;
    SG1.Cells[8, i] := ADOQuery2.FieldByName('Тип').AsString;
    SG1.Cells[9, i] := ADOQuery2.FieldByName('Категория').AsString;
    SG1.Cells[10, i] := ADOQuery2.FieldByName('Примечание').AsString;
    SG1.Cells[11, i] := ADOQuery2.FieldByName('Диаметр').AsString;
    SG1.Cells[12, i] := ADOQuery2.FieldByName('Масса').AsString;
    SG1.Cells[13, i] := ADOQuery2.FieldByName('Длина').AsString;
    SG1.Cells[14, i] := ADOQuery2.FieldByName('Ширина').AsString;
    SG1.Cells[15, i] := ADOQuery2.FieldByName('ДлинаРазв').AsString;
    SG1.Cells[16, i] := ADOQuery2.FieldByName('ШиринаРазв').AsString;
    SG1.Cells[17, i] := ADOQuery2.FieldByName('Объем').AsString;
    SG1.Cells[18, i] := ADOQuery2.FieldByName('КолГибов').AsString;
    SG1.Cells[19, i] := ADOQuery2.FieldByName('Канбан').AsString;
    SG1.Cells[20, i] := ADOQuery2.FieldByName('Материал').AsString;
    SG1.Cells[21, i] := ADOQuery2.FieldByName('КомплВед').AsString;
    SG1.Cells[22, i] := ADOQuery2.FieldByName('Trumph').AsString;
    SG1.Cells[23, i] := ADOQuery2.FieldByName('Ножницы').AsString;
    SG1.Cells[24, i] := ADOQuery2.FieldByName('Углоруб').AsString;
    SG1.Cells[25, i] := ADOQuery2.FieldByName('Гибка').AsString;
    SG1.Cells[26, i] := ADOQuery2.FieldByName('Прокатка').AsString;
    SG1.Cells[27, i] := ADOQuery2.FieldByName('Пила').AsString;
    SG1.Cells[30, i] := ADOQuery2.FieldByName('Заказ').AsString;
    SG1.Cells[28, i] := ADOQuery2.FieldByName('IdГП').AsString;
    SG1.Cells[29, i] := ADOQuery2.FieldByName('Изделие').AsString;
    SG1.Cells[32, i] := ADOQuery2.FieldByName('Дата').AsString;
    SG1.Cells[31, i] := '310';
    ADOQuery2.Next;
  end;
end;

procedure TForm1.N26Click(Sender: TObject);
var
  Str: string;
begin
  Str := FormatDateTime('mm.dd.yyyy', Now);
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Отмена]=' + #39 + Str + #39 + ' WHERE ([IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39 + ')', ['Klapana']) then
    Exit;
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Отмена]=' + #39 + Str + #39 + ' WHERE ([IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39 + ')', ['Запуск']) then
    Exit;
end;

procedure TForm1.Button56Click(Sender: TObject);
var
  Result: Tresult;
begin
  //Form1.Memo21.Lines.Clear;
  Result := Poisk_New(Edit34.Text, 'Klapan', 'Специф', 'Элемент', 0, 1);
  Result := Poisk_New(Edit34.Text, 'Klapan', 'СпецифВозд', 'Элемент', 0, 1);
  Result := Poisk_New(Edit34.Text, 'Klapan', 'Специф710', 'Элемент', 0, 1);
  Result := Poisk_New(Edit34.Text, 'Klapan', 'Специф750', 'Элемент', 0, 1);
  Result := Poisk_New(Edit34.Text, 'Klapan', 'СпецифЛЮК', 'Элемент', 0, 1);
  Result := Poisk_New(Edit34.Text, 'Klapan', 'СпецифСТАМ', 'Элемент', 0, 1);

  Result := Poisk_New(Edit34.Text, 'MIASSCEH', 'СпецифДоп', 'Элемент', 1, 1);
  Result := Poisk_New(Edit34.Text, 'MIASSCEH', 'СпецифЗавесы', 'Элемент', 1, 1);
  Result := Poisk_New(Edit34.Text, 'MIASSCEH', 'СпецифЭКО', 'Элемент', 1, 1);

  Result := Poisk_New(Edit34.Text, 'MIASSCEH', 'СпецифКЦКП', 'cfnName', 2, 0);
end;

procedure TForm1.Button58Click(Sender: TObject);
var
  Vn_Dat, fileName, Dat, Nom: string;
  I, Y, A, C: Integer;
begin
  UOsnova_Main := Osnova_Main.Create();
  Conn_Klap := Connect_Miass_Klap.Create();
  Conn_Ceh := Connect_Miass_Ceh.Create();

  fileName :='';// ExtractFileDir(ParamStr(0)); //+'\Klapan.EXE';
  Vn_Dat := FormatDateTime('dd.mm.yyyy', DateTimePicker1.Date);
  for I := 0 to SG2.RowCount - 1 do
  begin
    if SG217.Cells[0, I] <> '' then
    begin
      Vn_Dat := SG2.Cells[33333, I];
      C := 0; //StrToInt(ZSG.Cells[I_FN_KOL_ZAP + 28, I]);  Цвет
      //Nom:= SG2.Cells[0, I];
      UOsnova_Main.Flag_Error := 0;
      if not UOsnova_Main.Osnova(Vn_Dat, 'Запуск', 'Специф', #39 + Nom + #39, fileName, 1, C) then
        Exit;
    end;
  end;
end;

procedure TForm1.Button59Click(Sender: TObject);
var
  ThreadBegin: MyThread;
begin
  ThreadBegin := MyThread.Create(False);
  ThreadBegin.Resume;
  ThreadBegin.Priority := tpNormal;
end;

procedure TForm1.StringGrid10MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
// Эмуляция нажатия мыши
  if Button = mbRight then
    mouse_event(MOUSEEVENTF_LEFTDOWN or MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
end;

procedure TForm1.StringGrid10MouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
begin
  if (StringGrid10.Col = 5) then
  begin
    StringGrid10.Hint := 'Изделие';
    StringGrid10.ShowHint := True;
  end;
  if (StringGrid10.Col <> 5) then
  begin
    StringGrid10.Hint := 'Изделие';
    StringGrid10.ShowHint := False;
  end;
end;

procedure TForm1.N60Click(Sender: TObject);
begin
  FPochta.ShowModal;
end;

procedure TForm1.N61Click(Sender: TObject);
var
  S, Dir: string;
  H: HWND;
begin
  S := ExtractFileDir(ParamStr(0));
  Dir := S + '\Почта\';
  ShellExecute(H, 'open', PWideChar(Dir), nil, nil, SW_SHOW);
end;

procedure TForm1.N62Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [bz]=' + #39 + 'True' + #39 + ' WHERE [IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39, ['Klapana']) then
    Exit;
  StringGrid10.Cells[I_FN_SGP + 5, StringGrid10.Row] := 'True';
end;

procedure TForm1.N63Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [bz]=' + #39 + 'False' + #39 + ' WHERE [IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39, ['Klapana']) then
    Exit;
  StringGrid10.Cells[I_FN_SGP + 5, StringGrid10.Row] := 'False';
end;

procedure TForm1.N64Click(Sender: TObject);
var
  IDGP, Idko: string;
  X2: Integer;
begin
  X2 := SGL.Row;
  IDGP := SGL.Cells[I_FN_SGP + 2, X2];
  Idko := SGL.Cells[I_FN_SGP + 8, X2];
  if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET [bz]=' + #39 + 'True' + #39 +
  ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ') AND ([IdКО]=' + #39 + Idko + #39 + ') ', ['KlapanaZap']) then
    Exit;
  SGL.Cells[I_FN_SGP + 9, X2] := 'True';
end;

procedure TForm1.N65Click(Sender: TObject);
var
  IDGP, Idko: string;
  X2: Integer;
begin
  X2 := SGL.Row;
  IDGP := SGL.Cells[I_FN_SGP + 2, X2];
  Idko := SGL.Cells[I_FN_SGP + 8, X2];
  if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET [bz]=' + #39 + 'False' + #39 + ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ') AND ([IdКО]=' + #39 + Idko + #39 + ') ', ['KlapanaZap']) then
    Exit;
  SGL.Cells[I_FN_SGP + 9, X2] := 'False';
end;

procedure TForm1.N66Click(Sender: TObject);
begin
  Clipboard.AsText := SG215.Cells[SG215.Col, SG215.Row];
end;

procedure TForm1.N67Click(Sender: TObject);
begin
  FPolsov.ShowModal;

end;

procedure TForm1.N68Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Срочно]=' + #39 + 'True' + #39 + ' WHERE ([Заказ]=' + #39 + ZSG.Cells[2, ZSG.Row] + #39 + ') ', ['Запуск']) then
    Exit;
  button22.Click;
end;

procedure TForm1.N69Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Срочно]=' + #39 + 'False' + #39 + ' WHERE ([Заказ]=' + #39 + ZSG.Cells[2, ZSG.Row] + #39 + ') ', ['Запуск']) then
    Exit;
  button22.Click;
end;

procedure TForm1.N6Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [' + FN_ZAKAZCHIK + ']=' + #39 + '' + #39 + ',[' + FN_SGP + ']=' + #39 + '' + #39 +                               // ',[ПДО]=' + #39 + ''+ #39+
    ' WHERE [IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39, ['Klapana']) then
    Exit;
end;

procedure TForm1.PageControl1Change(Sender: TObject);
begin
  if PageControl1.TabIndex = 0 then
    Panel1.Visible := True
  else
    Panel1.Visible := False;
  if PageControl1.TabIndex = 1 then
    Button22.Click;
  if PageControl1.TabIndex = 4 then
  begin
    Btn3.Click;
    Btn15.Click;
  end;
  if PageControl1.TabIndex = 5 then
  begin
    if not mkQueryUpdate(ADOQuery1, ' UPDATE Z   Set Z.[Расчетная дата готовности] = S.[Расчетная дата готовности]' + ' FROM ЗапускСТАМ as Z INNER JOIN СТАМ as S' + ' ON  S.IDГП = Z.IDГП', []) then
      Exit;
    Btn21.Click;
    SG216.RowHeights[0] := SG215.RowHeights[0];
  end;
  if PageControl1.TabIndex = 6 then
    Btn36.Click;
  if PageControl1.TabIndex = 7 then
    Btn45.Click;
  if PageControl1.TabIndex = 8 then
    Button7.Click;
  if PageControl1.TabIndex = 9 then
  begin
    Btn55.Click;
   // btn63.Click; //Спец-ция
  end;
  if PageControl1.TabIndex = 10 then
    Button71.Click;

end;

procedure TForm1.Panel15Click(Sender: TObject);
begin

end;

{ var
  AText: string;
  APoint: TPoint;
begin
  with (Control as TPageControl).Canvas do
  begin
      FillRect(Rect);
    AText := TPageControl(Control).Pages[TabIndex].Caption;
    with Control.Canvas do
    begin
      APoint.x := (Rect.Right - Rect.Left) div 2 - TextWidth(AText) div 2;
      APoint.y := (Rect.Bottom - Rect.Top) div 2 - TextHeight(AText) div 2;
      TextRect(Rect, Rect.Left + APoint.x, Rect.Top + APoint.y, AText);
    end;
   if  (TabIndex=9) and (F750<>0) then
   begin
    Brush.Color := RGB(145,203,239);
    FillRect(Rect);
    AText := TPageControl(Control).Pages[TabIndex].Caption;

    with Control.Canvas do
    begin
      APoint.x := (Rect.Right - Rect.Left) div 2 - TextWidth(AText) div 2;
      APoint.y := (Rect.Bottom - Rect.Top) div 2 - TextHeight(AText) div 2;
      TextRect(Rect, Rect.Left + APoint.x, Rect.Top + APoint.y, AText);
    end;
   end;
  //++++++++++++++++++++++++++++++++++++++++++++++
     if  (TabIndex=8) and (FF710<>0) then
   begin
    Brush.Color := RGB(145,203,239);
    FillRect(Rect);
    AText := TPageControl(Control).Pages[TabIndex].Caption;
    with Control.Canvas do
    begin
      APoint.x := (Rect.Right - Rect.Left) div 2 - TextWidth(AText) div 2;
      APoint.y := (Rect.Bottom - Rect.Top) div 2 - TextHeight(AText) div 2;
      TextRect(Rect, Rect.Left + APoint.x, Rect.Top + APoint.y, AText);
    end;
   end;

  end;  }
procedure TForm1.Button3Click(Sender: TObject);
begin
  Spec := 1;
  FSpec.Label2.Caption := '1';
  FSpec.ShowModal;
end;

procedure TForm1.N70Click(Sender: TObject);
begin
  if ZCV.Cells[3, ZCV.Row] = '' then
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Срочно]=' + #39 + 'True' + #39 + ' WHERE ([Заказ]=' + #39 + ZCV.Cells[2, ZCV.Row] + #39 + ') ', ['ЗапускВозд']) then
      Exit;

  if ZCV.Cells[3, ZCV.Row] <> '' then
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Срочно]=' + #39 + 'True' + #39 + ' WHERE ([БЗ]=' + #39 + ZCV.Cells[3, ZCV.Row] + #39 + ') ', ['ЗапускВозд']) then
      Exit;
  button46.Click;
end;

procedure TForm1.N71Click(Sender: TObject);
begin
  if ZCV.Cells[3, ZCV.Row] = '' then
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Срочно]=' + #39 + 'False' + #39 + ' WHERE ([Заказ]=' + #39 + ZCV.Cells[2, ZCV.Row] + #39 + ') ', ['ЗапускВозд']) then
      Exit;

  if ZCV.Cells[3, ZCV.Row] <> '' then
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Срочно]=' + #39 + 'False' + #39 + ' WHERE ([БЗ]=' + #39 + ZCV.Cells[3, ZCV.Row] + #39 + ') ', ['ЗапускВозд']) then
      Exit;
  button46.Click;
end;

procedure TForm1.N72Click(Sender: TObject);
var
  Zak, Nam, NK, KK, NN, KN, BZ, BRIK, Kol, GP, KO, Tab: string;
  i, y, j: Integer;
begin
FShtrih.chk1.Checked:=False;
  FShtrih.StringGrid1.Cells[0, 0] := 'Кол во';
  FShtrih.StringGrid1.Cells[1, 0] := 'БЗ';
  FShtrih.StringGrid1.Cells[2, 0] := 'Изделие';
  FShtrih.StringGrid1.Cells[3, 0] := 'Брикет';
  FShtrih.StringGrid1.Cells[4, 0] := 'НачКод';
  FShtrih.StringGrid1.Cells[5, 0] := 'КонКод';
  FShtrih.StringGrid1.Cells[6, 0] := 'НачНомер';
  FShtrih.StringGrid1.Cells[7, 0] := 'КонНомер';
  FShtrih.StringGrid1.Cells[8, 0] := 'ТУ';
  Zak := StringGrid10.Cells[I_FN_ZAK, StringGrid10.Row];
  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (Заказ=' + #39 + Zak + #39 + ') AND (Отмена IS NULL) ', ['Klapana']) then
    exit;
  FShtrih.StringGrid1.RowCount := Form1.ADOQuery2.RecordCount + 1;
  for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
  begin
    Kol := Form1.ADOQuery2.FieldByName('Кол во').AsString;
    BZ := Form1.ADOQuery2.FieldByName('БЗ').AsString;
    Nam := Form1.ADOQuery2.FieldByName('Изделие').AsString;
    BRIK := Form1.ADOQuery2.FieldByName('Брикет').AsString;
    NK := Form1.ADOQuery2.FieldByName('НачКод').AsString;
    KK := Form1.ADOQuery2.FieldByName('КонКод').AsString;
    NN := Form1.ADOQuery2.FieldByName('НачНомер').AsString;
    KN := Form1.ADOQuery2.FieldByName('КонНомер').AsString;
    GP := Form1.ADOQuery2.FieldByName('IdГП').AsString;
    KO := Form1.ADOQuery2.FieldByName('IdКО').AsString;
    Tab := '';
    if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (IdГП=' + #39 + GP + #39 + ') AND (IdКО=' + #39 + KO + #39 + ') AND (Элемент=' + #39 + 'Табличка маркировки' + #39 + ') ', ['Специф']) then
      exit;
    Tab := Form1.ADOQuery4.FieldByName('Обозначение').AsString;
    FShtrih.StringGrid1.Cells[0, i + 1] := Kol;
    FShtrih.StringGrid1.Cells[1, i + 1] := BZ;
    FShtrih.StringGrid1.Cells[2, i + 1] := Nam;
    FShtrih.StringGrid1.Cells[3, i + 1] := BRIK;
    FShtrih.StringGrid1.Cells[4, i + 1] := NK;
    FShtrih.StringGrid1.Cells[5, i + 1] := KK;
    FShtrih.StringGrid1.Cells[6, i + 1] := NN;
    FShtrih.StringGrid1.Cells[7, i + 1] := KN;
    FShtrih.StringGrid1.Cells[8, i + 1] := Tab;
    Form1.ADOQuery2.Next;
  end;
  FShtrih.Caption := Zak;
  FShtrih.ShowModal;
end;

procedure TForm1.N73Click(Sender: TObject);
var
  Zak, Nam, NK, KK, NN, KN, BZ, BRIK, Kol, GP, KO, Tab: string;
  i, y, j: Integer;
begin
  FShtrih.StringGrid1.Cells[0, 0] := 'Кол во';
  FShtrih.StringGrid1.Cells[1, 0] := 'БЗ';
  FShtrih.StringGrid1.Cells[2, 0] := 'Изделие';
  FShtrih.StringGrid1.Cells[3, 0] := 'Брикет';
  FShtrih.StringGrid1.Cells[4, 0] := 'НачКод';
  FShtrih.StringGrid1.Cells[5, 0] := 'КонКод';
  FShtrih.StringGrid1.Cells[6, 0] := 'НачНомер';
  FShtrih.StringGrid1.Cells[7, 0] := 'КонНомер';
  FShtrih.StringGrid1.Cells[8, 0] := 'ТУ';
  Zak := SGL.Cells[I_FN_ZAK, SGL.Row];
  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (Заказ=' + #39 + Zak + #39 + ') AND (Отмена IS NULL) ', ['KlapanaZap']) then
    exit;
  FShtrih.StringGrid1.RowCount := Form1.ADOQuery2.RecordCount + 1;
  for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
  begin
    Kol := Form1.ADOQuery2.FieldByName('Кол во').AsString;
    BZ := Form1.ADOQuery2.FieldByName('БЗ').AsString;
    Nam := Form1.ADOQuery2.FieldByName('Изделие').AsString;
    BRIK := Form1.ADOQuery2.FieldByName('Брикет').AsString;
    NK := Form1.ADOQuery2.FieldByName('НачКод').AsString;
    KK := Form1.ADOQuery2.FieldByName('КонКод').AsString;
    NN := Form1.ADOQuery2.FieldByName('НачНомер').AsString;
    KN := Form1.ADOQuery2.FieldByName('КонНомер').AsString;
    GP := Form1.ADOQuery2.FieldByName('IdГП').AsString;
    KO := Form1.ADOQuery2.FieldByName('IdКО').AsString;
    Tab := '';
    if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (IdГП=' + #39 + GP + #39 + ') AND (IdКО=' + #39 + KO + #39 + ') AND (Элемент=' + #39 + 'Табличка маркировки' + #39 + ') ', ['СпецифВозд']) then
      exit;
    Tab := Form1.ADOQuery4.FieldByName('Обозначение').AsString;
    FShtrih.StringGrid1.Cells[0, i + 1] := Kol;
    FShtrih.StringGrid1.Cells[1, i + 1] := BZ;
    FShtrih.StringGrid1.Cells[2, i + 1] := Nam;
    FShtrih.StringGrid1.Cells[3, i + 1] := BRIK;
    FShtrih.StringGrid1.Cells[4, i + 1] := NK;
    FShtrih.StringGrid1.Cells[5, i + 1] := KK;
    FShtrih.StringGrid1.Cells[6, i + 1] := NN;
    FShtrih.StringGrid1.Cells[7, i + 1] := KN;
    FShtrih.StringGrid1.Cells[8, i + 1] := Tab;
    Form1.ADOQuery2.Next;
  end;
  FShtrih.Caption := Zak;
  FShtrih.ShowModal;
end;

procedure TForm1.N74Click(Sender: TObject);
var
  Zak, Nam, NK, KK, NN, KN, BZ, BRIK, Kol: string;
  i, y, j: Integer;
begin
  FShtrih.StringGrid1.Cells[0, 0] := 'Кол во';
  FShtrih.StringGrid1.Cells[1, 0] := 'БЗ';
  FShtrih.StringGrid1.Cells[2, 0] := 'Изделие';
  FShtrih.StringGrid1.Cells[3, 0] := 'Брикет';
  FShtrih.StringGrid1.Cells[4, 0] := 'НачКод';
  FShtrih.StringGrid1.Cells[5, 0] := 'КонКод';
  FShtrih.StringGrid1.Cells[6, 0] := 'НачНомер';
  FShtrih.StringGrid1.Cells[7, 0] := 'КонНомер';
  Zak := SG.Cells[2, SG.Row];
  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (Заказ=' + #39 + Zak + #39 + ') AND (Отмена IS NULL) ', ['СТАМ']) then
    exit;
  FShtrih.StringGrid1.RowCount := Form1.ADOQuery2.RecordCount + 1;
  for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
  begin
    Kol := Form1.ADOQuery2.FieldByName('Кол во').AsString;
    BZ := Form1.ADOQuery2.FieldByName('БЗ').AsString;
    Nam := Form1.ADOQuery2.FieldByName('Изделие').AsString;
    BRIK := Form1.ADOQuery2.FieldByName('Брикет').AsString;
    NK := Form1.ADOQuery2.FieldByName('НачКод').AsString;
    KK := Form1.ADOQuery2.FieldByName('КонКод').AsString;
    NN := Form1.ADOQuery2.FieldByName('НачНомер').AsString;
    KN := Form1.ADOQuery2.FieldByName('КонНомер').AsString;

    FShtrih.StringGrid1.Cells[0, i + 1] := Kol;
    FShtrih.StringGrid1.Cells[1, i + 1] := BZ;
    FShtrih.StringGrid1.Cells[2, i + 1] := Nam;
    FShtrih.StringGrid1.Cells[3, i + 1] := BRIK;
    FShtrih.StringGrid1.Cells[4, i + 1] := NK;
    FShtrih.StringGrid1.Cells[5, i + 1] := KK;
    FShtrih.StringGrid1.Cells[6, i + 1] := NN;
    FShtrih.StringGrid1.Cells[7, i + 1] := KN;
    Form1.ADOQuery2.Next;
  end;
  FShtrih.Caption := Zak;
  FShtrih.ShowModal;
end;

procedure TForm1.N75Click(Sender: TObject);
var
  Zak, Nam, NK, KK, NN, KN, BZ, BRIK, Kol: string;
  i, y, j: Integer;
begin
  FShtrih.StringGrid1.Cells[0, 0] := 'Кол во';
  FShtrih.StringGrid1.Cells[1, 0] := 'БЗ';
  FShtrih.StringGrid1.Cells[2, 0] := 'Изделие';
  FShtrih.StringGrid1.Cells[3, 0] := 'Брикет';
  FShtrih.StringGrid1.Cells[4, 0] := 'НачКод';
  FShtrih.StringGrid1.Cells[5, 0] := 'КонКод';
  FShtrih.StringGrid1.Cells[6, 0] := 'НачНомер';
  FShtrih.StringGrid1.Cells[7, 0] := 'КонНомер';
  Zak := SG4.Cells[2, SG4.Row];
  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (Заказ=' + #39 + Zak + #39 + ') AND (Отмена IS NULL) ', ['ЛЮК']) then
    exit;
  FShtrih.StringGrid1.RowCount := Form1.ADOQuery2.RecordCount + 1;
  for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
  begin
    Kol := Form1.ADOQuery2.FieldByName('Кол во').AsString;
    BZ := Form1.ADOQuery2.FieldByName('БЗ').AsString;
    Nam := Form1.ADOQuery2.FieldByName('Изделие').AsString;
    BRIK := Form1.ADOQuery2.FieldByName('Брикет').AsString;
    NK := Form1.ADOQuery2.FieldByName('НачКод').AsString;
    KK := Form1.ADOQuery2.FieldByName('КонКод').AsString;
    NN := Form1.ADOQuery2.FieldByName('НачНомер').AsString;
    KN := Form1.ADOQuery2.FieldByName('КонНомер').AsString;

    FShtrih.StringGrid1.Cells[0, i + 1] := Kol;
    FShtrih.StringGrid1.Cells[1, i + 1] := BZ;
    FShtrih.StringGrid1.Cells[2, i + 1] := Nam;
    FShtrih.StringGrid1.Cells[3, i + 1] := BRIK;
    FShtrih.StringGrid1.Cells[4, i + 1] := NK;
    FShtrih.StringGrid1.Cells[5, i + 1] := KK;
    FShtrih.StringGrid1.Cells[6, i + 1] := NN;
    FShtrih.StringGrid1.Cells[7, i + 1] := KN;
    Form1.ADOQuery2.Next;
  end;
  FShtrih.Caption := Zak;
  FShtrih.ShowModal;
end;

procedure TForm1.N76Click(Sender: TObject);
var
  I, J, Res, L, Res1, F, Pos1: Integer;
  XL: Variant;
  God, mes, Dir, Nam, Nam_S, Zav_Nom, Briket, Tip, Naim1, S, Nom: string;
begin
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
  Dir := Form1.Put_KTO + '\CKlapana\НакладныеСТАМ\';
  CreateDir(Dir);

  Dir := Form1.Put_KTO + '\CKlapana\НакладныеСТАМ\' + God;
  CreateDir(Dir);

  Dir := Form1.Put_KTO + '\CKlapana\НакладныеСТАМ\' + God + '\' + mes + '\';
  CreateDir(Dir);

  XL := CreateOleObject('Excel.Application');
  Nom := SG215.Cells[0, SG215.Row];
  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (Номер=' + #39 + SG215.Cells[0, SG215.Row] + #39 + ') Order By Заказ ', ['ЗапускСТАМ']) then
    exit;
  for I := 0 to ADOQuery2.RecordCount - 1 do
  begin
    Zav_Nom := Form1.ADOQuery2.FieldByName('НачНомер').AsString + '..' + ADOQuery2.FieldByName('КонНомер').AsString;
    Nam_S := Form1.ADOQuery2.FieldByName('Изделие').AsString;
    if Nam_S = '' then
      Continue;
                //S:=SG1.Cells[5, I+1];
    Res := Pos('СТАМ', Nam_S);
    if Res <> 0 then //STAM
    begin
      Briket := StringReplace(Nam_S, 'СТАМ ', 'СТАМ', [rfReplaceAll, rfIgnoreCase]);
      Pos1 := Pos('СТАМ', Briket);
      if Pos1 <> 0 then
        Delete(Briket, 1, Pos1 - 1);

      Pos1 := Pos('-', Briket);
      if Pos1 <> 0 then
      begin
        Tip := Copy(Briket, 1, Pos1 - 1);
        Insert('-', Tip, 5);
      end;

      L := Length(Nam_S);
      Res1 := AnsiCompareStr('Н', Nam_S[L]);
      if Res1 = 0 then
        Nam_S := Nam_S + '-1';

                       // Res1:=AnsiCompareStr('К',Nam_S[L]);
                        //if Res1=0 then
      S := Nam_S;
      Nam_S := StringReplace(S, 'К1', 'К-1', [rfReplaceAll, rfIgnoreCase]);
      Naim1 := StringReplace(Nam_S, 'СТАМ ', 'СТАМ', [rfReplaceAll, rfIgnoreCase]);
      XL.Application.EnableEvents := false;
      XL.Workbooks.Open(Form1.Put_KTO + '\CKlapana\2013\СТАМ (сопроводительные)\' + Tip + '.xlsx');
                        //XL.Application.EnableEvents := false;
                        //Ищем лист SG1.Cells[6, I+1] := Briket; //СТАМ610-35-Н Название ЛИСТА
      F := 0;
      for J := 1 to 260 do
      begin
        Nam := Trim(XL.ActiveWorkBook.WorkSheets[J].Name);

        Res := AnsiCompareStr(Nam, Naim1);
        if Res = 0 then
        begin
          F := 1;
          XL.ActiveWorkBook.WorkSheets[J].Cells[1, 1] := 'Сопроводительная №' + Nom;
          XL.ActiveWorkBook.WorkSheets[J].Cells[1, 6] := Zav_Nom;
          XL.ActiveWorkBook.WorkSheets[J].Cells[1, 3] := Form1.ADOQuery2.FieldByName('Кол во запущенных').AsString;
          XL.ActiveWorkBook.WorkSheets[J].Cells[1, 4] := Form1.ADOQuery2.FieldByName('Заказ').AsString;

                                        //XL.ActiveWorkBook.WorkSheets[j].Cells[8, 1] :='Сопроводительная №' +SG1.Cells[2, i + 1];
          XL.ActiveWorkBook.WorkSheets[J].SaveAs(Dir + '\№ ' + Nom + ' (' + Naim1 + ').xlsx');
          XL.Visible := True;
          XL.ActiveWorkBook.WorkSheets[J].Select;
                                        //XL.ActiveWorkBook.WorkSheets[j].Range('D7').Select;
          Break;
        end;
      end;
      if F = 0 then
      begin
        XL.ActiveWorkbook.Close;
        XL := UnAssigned;
        MessageDlg('Не удалось найти лист с названием ' + Naim1, mtError, [mbOk], 0);
                                {XL.ActiveWorkbook.Close;
                                XL.Application.Quit;
                                XL.Quit; }
        Exit;
      end;
    end;
                //
    Res := Pos('Поддон', Nam_S);
    if Res <> 0 then
    begin
      Briket := Nam_S;
      Res := Pos('-', Briket);
      Tip := Copy(Briket, 1, Res);
      Delete(Briket, 1, Res);
      Res := Pos('-', Briket);
      Tip := Tip + Copy(Briket, 1, Res - 1);  //Поддон ПОД-137.xlsx

      Briket := Nam_S;
      Res := Pos(' ', Briket);
      Delete(Briket, 1, Res); //ПОД-137-Ц-0 Название ЛИСТА

      XL.Workbooks.Open(Form1.Put_KTO + '\CKlapana\2013\Поддоны\' + Tip + '.xlsx');
      XL.Application.EnableEvents := false;    //Поддон ПОД-137.xlsx
                        //Поддона ПОД-137-Ц
                        // Briket; //ПОД-137-Ц-0 Название ЛИСТА
      F := 0;
      for J := 1 to 30 do
      begin

        Nam := XL.ActiveWorkBook.WorkSheets[J].Name;

        Res := AnsiCompareStr(Nam, Briket);
        if Res <> 0 then
          Continue;
        if Res = 0 then
        begin
          F := 1;
          XL.ActiveWorkBook.WorkSheets[J].Cells[1, 1] := 'Сопроводительная №' + Nom;
          XL.ActiveWorkBook.WorkSheets[J].Cells[1, 6] := Zav_Nom;
          XL.ActiveWorkBook.WorkSheets[J].Cells[1, 3] := Form1.ADOQuery2.FieldByName('Кол во запущенных').AsString;
          XL.ActiveWorkBook.WorkSheets[J].Cells[1, 4] := Form1.ADOQuery2.FieldByName('Заказ').AsString;
          XL.ActiveWorkBook.WorkSheets[J].SaveAs(Dir + '\№ ' + Nom + ' (' + Briket + ').xlsx');
          XL.Visible := True;
          XL.ActiveWorkBook.WorkSheets[J].Select;
                                        //XL.ActiveWorkBook.WorkSheets[j].Range('D7').Select;
          Break;
        end;

      end;
      if F = 0 then
      begin
        XL.ActiveWorkbook.Close;
        XL := UnAssigned;
        MessageDlg('Не удалось найти лист с названием ' + Nam_S, mtError, [mbOk], 0);
        Exit;
      end;
    end;
  end;
        //XL.Visible:=True;
  XL := UnAssigned;
end;

procedure TForm1.N77Click(Sender: TObject);
var
  idgp, idko, Nom, Nom_S: string;
  I, c, Kol, Kol_Z: Integer;
begin
  Nom := ZCV.Cells[0, ZCV.Row];
  for I := 1 to ZCV.RowCount do
  begin
    Nom_S := ZCV.Cells[0, I];
    c := AnsiCompareStr(Nom_S, Nom);
    if c = 0 then
    begin
      idgp := ZCV.Cells[30, I];
      idko := ZCV.Cells[31, I];
      Kol_Z := StrToInt(ZCV.Cells[5, I]);
      Kol := StrToInt(ZCV.Cells[4, I]);
      Kol := Kol - Kol_Z;
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET Номер= ' + #39 + '0' + #39 + ',[Кол во запущенных]=' + #39 + IntToStr(Kol) + #39 + ' WHERE ([IdГП]=' + #39 + idgp + #39 + ') AND ([IdКО]=' + #39 + idko + #39 + ')', ['KlapanaZap']) then
        Exit;
    end;
  end;
  if not Form1.mkQueryDelete(Form1.ADOQuery1, 'DELETE FROM %s Where (Номер= ' + #39 + Nom + #39 + ')', ['ЗапускВозд']) then
    Exit;

  if not Form1.mkQueryDelete(Form1.ADOQuery1, 'DELETE FROM %s Where (Номер= ' + #39 + Nom + #39 +
   ') AND (Планирование= ' + #39 + ZCV.Cells[8, I] + #39 + ')', ['Заготовка']) then
    Exit;
end;

procedure TForm1.N78Click(Sender: TObject);
begin
  FBRAK.LabZN.Caption := '1';
  FNewBRAK.Edit1.Text := SG2.Cells[2, SG2.Row]; //Zakaz
   // FNewBRAK.LabZak.Caption:=ZSG.Cells[I_FN_ZAK,ZSG.Row ];//Zakaz

  FNewBRAK.Edit2.Text := SG2.Cells[I_FN_KOL_ZAP + 29, SG2.Row]; //BZ
    //FNewBRAK.LabBZ.Caption:= ZSG.Cells[I_FN_KOL_ZAP + 29,ZSG.Row ]; //BZ

  FNewBRAK.LabGP.Caption := SG2.Cells[24, SG2.Row]; //GP
  FNewBRAK.Labko.Caption := '0'; //ko
    //FNewBRAK.LabZN.Caption:=ZSG.Cells[I_FN_KOL_ZAP + 23, ZSG.Row]; //zavNom
  FNewBRAK.Edit3.Text := SG2.Cells[12, SG2.Row]; //zavNom
  FNewBRAK.LabIndex.Caption := '1'; //Клапана
  FNewBRAK.Caption := SG2.Cells[3, SG2.Row];
  FNewBRAK.Label16.Caption := Regist.Famili;
  FBRAK.IZD_G := 0;
  FNewBRAK.Doljn := FlagDolg;
   // MessageDlg('Бред!'+#10#13+IntToStr(FlagDolg), mtError, [mbOk], 0);
  FNewBRAK.Plan := SG2.Cells[1, SG2.Row];
  FNewBRAK.Nom_G := '0';
  FNewBRAK.ShowModal;
end;

procedure TForm1.N79Click(Sender: TObject);
begin
  if MessageDlg('Подумай! Удалить?', mtConfirmation, [mbYes, mbNo], 0) = mrNo then
    Exit
  else
  begin
    if not Form1.mkQueryDelete(Form1.ADOQuery1, 'DELETE FROM %s Where (IdГП= ' + #39 + SG.Cells[13, SG.Row] + #39 + ') ', ['СпецифСТАМ']) then
      Exit;
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Статус]=' + #39 + '0' + #39 + ' WHERE ([IdГП]=' + #39 + SG.Cells[13, SG.Row] + #39 + ')', ['СТАМ']) then
      Exit;

  end;
end;

procedure TForm1.N7Click(Sender: TObject);
var
  I: Integer;
begin
  if ((Regist.Doljnost = 1) or (Regist.Doljnost = 4) or (Regist.Doljnost = 2)) and (StringGrid10.Cells[I_FN_ZAKAZCHIK, StringGrid10.Row] = '') then //Клап не новый снимает вторую галку (ПДО)
  begin
    for I := 0 to mmoDGP1.Lines.Count - 1 do
    begin
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [' + FN_SGP + ']=' + #39 + '' + #39 +                               // ',[ПДО]=' + #39 + ''+ #39+
        ' WHERE [IdГП]=' + #39 + mmoDGP1.Lines.Strings[I] + #39, ['Klapana']) then
        Exit;
      StringGrid10.Cells[I_FN_SGP, StringGrid10.Row] := '';
    end;

  end;
end;

procedure TForm1.N27Click(Sender: TObject);
begin
  if ((Regist.Doljnost = 1) or (Regist.Doljnost = 4) or (Regist.Doljnost = 2)) then //Клапан прошел первый прогон нормально
        //Снимаем все галки
  begin
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [' + FN_SGP + ']=' + #39 + '' + #39 + ',[№Поз]=' + #39 + '' + #39 + ' WHERE [IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39, ['Klapana']) then
      Exit;
    StringGrid10.Cells[I_FN_SGP, StringGrid10.Row] := '';
    StringGrid10.Cells[I_FN_SGP + 1, StringGrid10.Row] := '';
  end;
end;

procedure TForm1.N30Click(Sender: TObject);
begin
  if ((Regist.Doljnost = 1) or (Regist.Doljnost = 4) or (Regist.Doljnost = 2)) then
  begin
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [№Поз]=' + #39 + 'V' + #39 + ' WHERE [IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39, ['Klapana']) then
      Exit;
    StringGrid10.Cells[I_FN_SGP + 1, StringGrid10.Row] := 'V';

  end;
end;

procedure TForm1.N31Click(Sender: TObject);
begin
  if ((Regist.Doljnost = 1) or (Regist.Doljnost = 4) or (Regist.Doljnost = 2)) then
  begin
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [' + FN_SGP + ']=' + #39 + '' + #39 + ',[№Поз]=' + #39 + '' + #39 + ' WHERE [IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39, ['Klapana']) then
      Exit;
    StringGrid10.Cells[I_FN_SGP, StringGrid10.Row] := '';
    StringGrid10.Cells[I_FN_SGP + 1, StringGrid10.Row] := '';

  end;
end;

procedure TForm1.Alarm1Click(Sender: TObject);
begin
  if ((Regist.Doljnost = 1) or (Regist.Doljnost = 4) or (Regist.Doljnost = 2)) then
  begin
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [' + FN_SGP + ']=' + #39 + '' + #39 +                               // ',[ПДО]=' + #39 + ''+ #39+
      ' WHERE [IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39, ['Klapana']) then
      Exit;
    StringGrid10.Cells[I_FN_SGP, StringGrid10.Row] := '';

  end;
end;

procedure TForm1.N32Click(Sender: TObject);
begin
      { if ((Regist.Doljnost = 1) or (Regist.Doljnost = 2)) then//Клап Нов Ставим две галки
        begin }
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [' + FN_SGP + ']=' + #39 + 'V' + #39 + ',[' + FN_ZAKAZCHIK + ']=' + #39 + 'V' + #39 + ' WHERE [IdГП]=' + #39 + StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row] + #39, ['Klapana']) then
    Exit;
  StringGrid10.Cells[I_FN_ZAKAZCHIK, StringGrid10.Row] := 'V';
  StringGrid10.Cells[I_FN_SGP, StringGrid10.Row] := 'V';

        //end;
end;

procedure TForm1.Button4Click(Sender: TObject);
var
  A_S, B_S, Perim_S, NC_S, Izdel, Nam, IDGP, Pereh, KPU_S, Nazn, Ispol, F, Priv, Term, Razmesh, Klem, Resh, Luk, Ruk, Rama, N1, Hol_Korp, Pos_Isp, Pos1, Pos2, Pos_Flan1, Pos_Flan, Pos_Privod, Pos_Dop, Pos_Sn, Pos_Ram, Kol_S, Elem, Str, Kol_Ed_Str: string;
  A, B, Perim, Perim1, I, J, KPU, KPD, Kol_F, Res, Res1, Res2, Bez_Vilet, S_Vilet, Kol, Kol_Lop, Flag_Razb_Klapana, Klap, EM: Integer;
  NC, NC_OB, NC_Svar, Kol_Ed: Double;
  Result: TResult;
begin
  for I := 0 to StringGrid10.RowCount - 1 do
  begin
    NC := 0;
    NC_Svar := 0;
    if SG6.Cells[I_FN_SVARKA_NC, I + 1] = '0' then
    begin
      IDGP := StringGrid10.Cells[I_FN_SGP + 2, I + 1];
      Izdel := StringGrid10.Cells[5, I + 1];
      Nam := StringGrid10.Cells[5, I + 1];
      if SG6.Cells[I_FN_OTMENA + 2, I + 1] = '' then
        Kol_Lop := 0
      else
        Kol_Lop := StrToInt(SG6.Cells[I_FN_OTMENA + 2, I + 1]);
      KPU := Pos('ГЕРМИК', Izdel);
     { if KPU <> 0 then
      begin
          Result:=Germik_DU(Izdel,IDGP,0,I);
          NC_Svar:=Result.Svarka;

      end; }
      KPU := Pos('КПУ', Izdel);
      if KPU <> 0 then
      begin
        IDGP := StringGrid10.Cells[I_FN_SGP + 2, I + 1];

        Res := Pos(' ', Izdel);
        Delete(Izdel, 1, Res);
                                //======================================== KPU
        Res := Pos('-', Izdel);
        KPU_S := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //======================================== 1 H
        Res := Pos('-', Izdel);
        N1 := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //========================================
                                //Клапан КПУ-1Н-О-Н-600*400-2*ф-MB220-сн-0-0-0-0-0-0
                                //========================================
        Res := Pos('-', Izdel);
        Nazn := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //========================================
        Res := Pos('-', Izdel);
        Ispol := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //========================================
                                //Клапан КПУ-1Н-О-Н-100-2*ф-MB220-сн-0-0-0-0-0-0
                               { Res := Pos('*', Izdel);
                                if Res>5 then
                                        Continue;
                                A := StrToInt(Copy(Izdel, 1, Res - 1));
                                Delete(Izdel, 1, Res);
                                //========================================
                                Res := Pos('-', Izdel);
                                B := StrToInt(Copy(Izdel, 1, Res - 1));
                                Delete(Izdel, 1, Res);  }
                                                        //Клапан КПУ-2Н-О-Н-200-2*ф-MB220-T-сн-0-0-0-2*100-0-0
                        //Клапан КПУ-1Н-О-Н-200*200-2*ф-MB220-сн-0-с-0-0-0-0
        Res1 := Pos('-', Izdel); //Проверка на круглый если -
        if Res1 > 5 then //200*200- Квадрат
        begin
          Res1 := Pos('*', Izdel);
          A := StrToInt(Copy(Izdel, 1, Res1 - 1));
          Delete(Izdel, 1, Res1);
                                //========================================
          Res1 := Pos('-', Izdel);
          B := StrToInt(Copy(Izdel, 1, Res1 - 1));
          Delete(Izdel, 1, Res1);
        end
        else
        begin
          Res1 := Pos('-', Izdel);
          A := StrToInt(Copy(Izdel, 1, Res1 - 1));
          Delete(Izdel, 1, Res1);
          B := 0;
        end;
                                //+++++++++++++++++++++++++++++++++++++++
        Perim := A + B;
        Perim_S := IntToStr(Perim);
                                //========================================
        Res := Pos('-', Izdel);
        F := Copy(Izdel, 1, 1);
        Delete(Izdel, 1, Res);
        if F <> '' then
          Kol_F := StrToInt(F);
                                //========================================
                                                                  // T ?
                                //Клапан КПУ-1Н-О-Н-700*250-2*ф-MV220-сн-0-0-0-0-0-0
        Res := Pos('-', Izdel);
        Priv := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);

                                //========================================
        Res := Pos('T', Izdel);
        if Res <> 0 then
        begin
          Term := Copy(Izdel, 1, Res);
          Delete(Izdel, 1, Res + 1);
        end;
                                //========================================
        Res := Pos('-', Izdel);
        Razmesh := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //======================================== Klem,Resh,luk,Pereh,Ruk,Rama
        Res := Pos('-', Izdel);
        Klem := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //========================================
        Res := Pos('-', Izdel);
        Resh := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //========================================
        Res := Pos('-', Izdel);
        Luk := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //========================================
        Res := Pos('-', Izdel);
        Pereh := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //========================================
                                //Клапан КПУ-1Н-О-Н-700*250-2*ф-MV220-сн-0-0-0-0-0-0
        Res := Pos('-', Izdel);
        Ruk := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //========================================
                                //Клапан КПУ-1Н-О-Н-200*200-2*ф-MB220-сн-0-р-0-0-0-мрп
        Rama := Izdel;
                                //-----------------------------------------------------
        if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + IDGP + #39 + ') ', ['Специф']) then
          exit;
        Flag_Razb_Klapana := 0;
        for J := 0 to Form1.ADOQuery2.RecordCount - 1 do  //Проверка на Клапан разбитый на 2
        begin
          Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
          Kol_Ed_Str := StringReplace(Form1.ADOQuery2.FieldByName('Количество').AsString, '.', ',', [rfReplaceAll]);

          if Kol_Ed_Str = '' then
            Kol_Ed := 0
          else
            Kol_Ed := StrToFloat(Kol_Ed_Str);
          Klap := AnsiCompareStr('Клапан', Elem);
          if (Klap = 0) and (Kol_Ed > 1) then
          begin
            Flag_Razb_Klapana := 1; //Клапан разбит на 2
            Break;
          end;
          Form1.ADOQuery2.Next;
        end;
        if Perim <= 600 then
          Perim1 := 600;

        if (Perim > 600) and (Perim <= 850) then
          Perim1 := 850;

        if (Perim > 850) and (Perim <= 1200) then
          Perim1 := 1200;

        if (Perim > 1200) and (Perim <= 1800) then
          Perim1 := 1800;

        if (Perim > 1800) and (Perim <= 2500) then
          Perim1 := 2500;

        if (Perim > 2500) then
          Perim1 := 2600;
                                //----------------------------------------------
        if (A < 850) and (B < 800) then
          A_S := '800';
                                //-------------------------
        if ((A >= 850) and (A < 1800)) and ((B > 400) and (B <= 1300)) then
          A_S := '850';
                                //-------------------------
        if (A >= 1800) and (B >= 600) then
          A_S := '1800';
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ КПУ 1Н 2Ф
        Res := Pos('1Н', N1);
        if (Kol_F = 2) and (Res <> 0) then
        begin
          Memo13.Lines.Add('Tab 1');
          if not mkQuerySelect(ADOQuery1, 'Select [Норма1] from [%s] Where ([№]=' + #39 + '1' + #39 + ') AND ([Размер]=' + #39 + IntToStr(Perim1) + #39 + ')', ['КПУ_Обварка']) then
            exit;
          NC := ADOQuery1.FieldByName('Норма1').AsFloat;
          Memo13.Lines.Add(FloatToStr(NC));
          NC_Svar := NC_Svar + ADOQuery1.FieldByName('Норма1').AsFloat;
        end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ КПУ 1Н 1Ф
        if (Kol_F = 1) and (Res <> 0) then
        begin
          Memo13.Lines.Add('Tab 5');
          if not mkQuerySelect(ADOQuery1, 'Select [Норма1] from [%s] Where ([№]=' + #39 + '5' + #39 + ') AND ([Размер]=' + #39 + A_S + #39 + ')', ['КПУ_Обварка']) then
            exit;
          NC := ADOQuery1.FieldByName('Норма1').AsFloat;
          Memo13.Lines.Add(FloatToStr(NC));
          NC_Svar := NC_Svar + ADOQuery1.FieldByName('Норма1').AsFloat;
        end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ МРП МРЗ
        Res1 := Pos('мрп', Rama);
        Res2 := Pos('мрз', Rama);
        if (Res1 <> 0) or (Res2 <> 0) then
        begin
          Memo13.Lines.Add('Tab 1');
          if not mkQuerySelect(ADOQuery1, 'Select [Норма1] from [%s] Where ([№]=' + #39 + '3' + #39 + ') AND ([Размер]=' + #39 + IntToStr(Perim1) + #39 + ')', ['КПУ_Обварка']) then
            exit;
          NC := ADOQuery1.FieldByName('Норма1').AsFloat;
          Memo13.Lines.Add(FloatToStr(NC));
          NC_Svar := NC_Svar + ADOQuery1.FieldByName('Норма1').AsFloat;
        end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Корпус холодный
        if not mkQuerySelect(ADOQuery1, 'Select * from %s Where (IdГП=' + #39 + IDGP + #39 + ') AND (Тип=' + #39 + 'Корпус холодный' + #39 + ')', ['Специф']) then
          exit;
        Hol_Korp := ADOQuery1.FieldByName('Обозначение').AsString;
        Bez_Vilet := Pos('ТЕКИ 07.239.06.00.000', Hol_Korp);
        Res1 := Pos('ТЕКИ 876.02.00.00.000', Hol_Korp);
        Res2 := Pos('ТЕКИ 07.239.07.00.000', Hol_Korp);
                                //______________________________________________Без вылета
        S_Vilet := Pos('ТЕКИ 07.239.05.00.000', Hol_Korp);
        Kol_S := ADOQuery1.FieldByName('Количество').AsString;
        if Kol_S = '' then
          Kol_S := '0';
        Kol := StrToInt(Kol_S);
                                //______________________________________________С вылетом

        if (Bez_Vilet <> 0) or (Res1 <> 0) or (Res2 <> 0) then
        begin

          Memo13.Lines.Add('Tab 4');
          if not mkQuerySelect(ADOQuery1, 'Select [Норма2] from [%s] Where ([№]=' + #39 + '4' + #39 + ') AND ([Размер]=' + #39 + IntToStr(Perim1) + #39 + ')', ['КПУ_Обварка']) then
            exit;
          NC := ADOQuery1.FieldByName('Норма2').AsFloat * Kol;
          Memo13.Lines.Add(FloatToStr(NC));
          NC_Svar := NC_Svar + ADOQuery1.FieldByName('Норма2').AsFloat * Kol;
        end;
//-----------------------------------------------------------------------------
        if (S_Vilet <> 0) then
        begin
                                        //Kol:=StrToInt(ADOQuery1.FieldByName('Количество').AsString);
          Memo13.Lines.Add('Tab 4');
          if not mkQuerySelect(ADOQuery1, 'Select [Норма1] from [%s] Where ([№]=' + #39 + '4' + #39 + ') AND ([Размер]=' + #39 + IntToStr(Perim1) + #39 + ')', ['КПУ_Обварка']) then
            exit;
          NC := ADOQuery1.FieldByName('Норма1').AsFloat * Kol;
          Memo13.Lines.Add(FloatToStr(NC));
          NC_Svar := NC_Svar + ADOQuery1.FieldByName('Норма1').AsFloat * Kol;
        end;
        Res := Pos('1Н', N1);
        if (Kol_F = 2) and (Kol_Lop = 4) and (Res <> 0) then
        begin
          NC_Svar := NC_Svar * 1.3;
        end;
        EM := Pos('ЭМ', Priv);
        Res := Pos('З', Nazn);
        if (Kol_F = 2) and (Res <> 0) and (EM <> 0) then
        begin
          NC_Svar := NC_Svar + 0.02;
        end;
        if Flag_Razb_Klapana = 1 then
          NC_Svar := NC_Svar * 2;
      end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++KPD
      KPD := Pos('КПД-4-01', Izdel);
      Res1 := Pos('КПД-4-03', Izdel);
      if (KPD <> 0) or (Res1 <> 0) then
      begin
        Res := Pos(' ', Izdel);
        Delete(Izdel, 1, Res);
                                //========================================
        Res := Pos('-', Izdel);
        Pos1 := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //========================================
        Res := Pos('-', Izdel);
        Pos2 := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //========================================
        Res := Pos('-', Izdel);
        Pos_Isp := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //========================================
        Res := Pos('*', Izdel);
        A := StrToInt(Copy(Izdel, 1, Res - 1));
        Delete(Izdel, 1, Res);
                                //========================================
        Res := Pos('-', Izdel);
        B := StrToInt(Copy(Izdel, 1, Res - 1));
        Delete(Izdel, 1, Res);
                                //========================================
        Res := Pos('*', Izdel);
        Pos_Flan := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //========================================
        Res := Pos('-', Izdel);
        Pos_Flan1 := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //========================================
        Res := Pos('-', Izdel);
        Pos_Privod := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //========================================
        Res := Pos('-', Izdel);
        Pos_Sn := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //========================================
        Res := Pos('-', Izdel);
        Pos_Dop := Copy(Izdel, 1, Res - 1);
        Delete(Izdel, 1, Res);
                                //========================================
        Pos_Ram := Izdel;
                                //========================================
        Perim := A + B;
        if Perim <= 600 then
          Perim1 := 600;

        if (Perim > 600) and (Perim <= 850) then
          Perim1 := 850;

        if (Perim > 850) and (Perim <= 1200) then
          Perim1 := 1200;

        if (Perim > 1200) and (Perim <= 1800) then
          Perim1 := 1800;

        if (Perim > 1800) and (Perim <= 2500) then
          Perim1 := 2500;

        if (Perim > 2500) then
          Perim1 := 2600;

//-----------------------------------------------------------------------------

        Memo13.Lines.Add('Tab 2');
        if not mkQuerySelect(ADOQuery1, 'Select [Норма1] from [%s] Where ([№]=' + #39 + '2' + #39 + ') AND ([Размер]=' + #39 + IntToStr(Perim1) + #39 + ')', ['КПУ_Обварка']) then
          exit;
        NC := ADOQuery1.FieldByName('Норма1').AsFloat;
        Memo13.Lines.Add(FloatToStr(NC));
        NC_Svar := NC_Svar + ADOQuery1.FieldByName('Норма1').AsFloat + (0.012 * Kol_Lop);

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ МРП МРЗ
        Res1 := Pos('мрп', Pos_Ram);
        Res2 := Pos('мрз', Pos_Ram);
        if (Res1 <> 0) or (Res2 <> 0) then
        begin
          Memo13.Lines.Add('Tab 1');
          if not mkQuerySelect(ADOQuery1, 'Select [Норма1] from [%s] Where ([№]=' + #39 + '3' + #39 + ') AND ([Размер]=' + #39 + IntToStr(Perim1) + #39 + ')', ['КПУ_Обварка']) then
            exit;
          NC := ADOQuery1.FieldByName('Норма1').AsFloat;
          Memo13.Lines.Add(FloatToStr(NC));
          NC_Svar := NC_Svar + ADOQuery1.FieldByName('Норма1').AsFloat;
        end;
        if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + IDGP + #39 + ') ', ['Специф']) then
          exit;
        Flag_Razb_Klapana := 0;
        for J := 0 to Form1.ADOQuery2.RecordCount - 1 do  //Проверка на Клапан разбитый на 2
        begin
          Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
          Kol_Ed := Form1.ADOQuery2.FieldByName('Количество').AsFloat;
          Klap := AnsiCompareStr('Клапан', Elem);
          if (Klap = 0) and (Kol_Ed > 1) then
          begin
            Flag_Razb_Klapana := 1; //Клапан разбит на 2
            Break;
          end;
          Form1.ADOQuery2.Next;
        end;
      end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      NC_S := FloatToStr(NC_Svar);

      Res := Pos(',', NC_S);
      Delete(NC_S, Res, 1);
      if Res <> 0 then
        Insert('.', NC_S, Res);

      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Н\ч Сварка]=' + #39 + NC_S + #39 + ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ') ', ['Klapana']) then
        Exit;

      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Н\ч Сварка]=' + #39 + NC_S + #39 + ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ')', ['Запуск']) then
        Exit;
      Form1.SG6.Cells[I_FN_SVARKA_NC, Form1.SG6.Row] := NC_S;
    end;
  end;
end;

procedure TForm1.Image24DblClick(Sender: TObject);
begin
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where (NOT [' + FN_Zakazchik + '] IS NULL) AND ([' + FN_Zakazchik + ']<>' + #39 + #39 + ') ', ['Klapana']) then
    exit;
end;

procedure TForm1.Image27Click(Sender: TObject);
begin
  tmr1.Enabled := True;
end;

procedure TForm1.img28Click(Sender: TObject);
begin
  tmr1.Enabled := False;
     //img28.Visible:=False;
     //img29.Visible:=False;
  img30.Visible := True;
  sndPlaySound(nil, SND_ASYNC);
end;

procedure TForm1.img29Click(Sender: TObject);
begin
  tmr1.Enabled := False;
  img30.Visible := True;
  sndPlaySound(nil, SND_ASYNC);
end;

procedure TForm1.img30Click(Sender: TObject);
begin
  tmr1.Enabled := False;
  img28.Visible := True;
  img29.Visible := True;
  img30.Visible := True;
  sndPlaySound(nil, SND_ASYNC);
end;

procedure TForm1.img30DblClick(Sender: TObject);
var
  S: string;
begin
  S := ExtractFileDir(ParamStr(0));
  S := S + '\flt.wav';
  sndPlaySound(PWideChar(S), SND_ASYNC + SND_LOOP);
end;

procedure TForm1.Edit16Change(Sender: TObject);
begin
  Find_StringGrid(SGL, Edit16.Text, I_FN_ZAK, Label17.Caption, 5);
end;

procedure TForm1.Edit16Click(Sender: TObject);
begin
  Edit17.Text := '';
  Edt4.Text := '';
  Edit23.Text := '';
  Find_StringGrid(SGL, Edit16.Text, I_FN_ZAK, Label17.Caption, 5);
end;

procedure TForm1.Edit16KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and (Button6.Enabled) then
    Button6Click(nil);
end;

procedure TForm1.Edit17Change(Sender: TObject);
begin
  Find_StringGrid2(STringGrid6, Edit17.Text, 23, Label17.Caption, 23);
end;

procedure TForm1.Edit17Click(Sender: TObject);
begin
  Edit16.Text := '';
  Edt4.Text := '';
  Edit23.Text := '';
  Edt4.Text := '';
  Find_StringGrid2(STringGrid6, Edit17.Text, 23, Label17.Caption, 23);
end;

procedure TForm1.Edit17KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and (Button6.Enabled) then
    Button6Click(nil);
end;

procedure TForm1.Edit13Change(Sender: TObject);
begin

  Edit12.Text := '';
  Edit9.Text := '';
  Edit32.Text := '';
  Edit39.Text := '';
end;

procedure TForm1.Edit12Change(Sender: TObject);
begin
  Edit13.Text := '';
  Edit9.Text := '';
  Edit32.Text := '';
  Edit39.Text := '';
end;

procedure TForm1.Edit9Change(Sender: TObject);
begin
  Edit12.Text := '';
  Edit13.Text := '';
  Edit32.Text := '';
  Edit39.Text := '';
end;

procedure TForm1.Edit13KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and (Button55.Enabled) then
    Button55Click(nil);
end;

procedure TForm1.Edit12KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and (Button55.Enabled) then
    Button55Click(nil);
end;

procedure TForm1.Edit9KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and (Button55.Enabled) then
    Button55Click(nil);
end;

function TForm1.Vsriv(Naim:String):string;
var  S,Nam1,Wz:string;
  I,R1,R2,R3,R4,R5,R6:Integer;
Begin
      Result:='';
      Nam1:=Naim;
      R1:=Pos('РЕГУЛЯР-',Nam1);
      R2:=Pos('ГЕРМИК-Р',Nam1);
      R3:=Pos('ГЕРМИК-П',Nam1);
      R4:=Pos('КЕДР',Nam1);
      R5:=Pos('НЕРПА',Nam1);
      if (R1<>0) or (R2<>0) or (R3<>0) or (R4<>0) or (R5<>0)  then
      Begin
         R1:=Pos('-В-',Nam1);
         R2:=Pos('-ВК-',Nam1);
         R3:=Pos('-КВ-',Nam1);
         R4:=Pos('РУЧ',Nam1);
         R5:=Pos('НЕРПА-КО',Nam1);
         R6:=Pos('НЕРПА-КП',Nam1);
         if ((R1<>0) or (R2<>0) or (R3<>0)) and (R4=0) and (R5=0) and (R6=0) then
         WZ:='1Ex d IIC T6 Gb'+#13#10+'"II Gb c IIC T6"' + #13#10 + '"-30°С≤t≤+50°C"' + #13#10+ '"№ TC RU C-RU.ГБ08.В.01761';
      End;
            //-------
      R1:=Pos('НЕРПА-КО',Nam1);
      if R1<>0 then
      Begin
         R2:=Pos('-В-',Nam1);
         R3:=Pos('-КВ-',Nam1);
         R4:=Pos('-ВК-',Nam1);
         if (R2<>0) or (R3<>0) or (R4<>0) then
         WZ:='II Gb c IIC T6' + #13#10 + '-70°C≤t≤+50°C' + #13#10 + '№ TC RU C-RU.ГБ08.В.01761';
      End;
      //-------
      //(Найти(Имя, "РЕГУЛЯР-") <> 0  ИЛИ Найти(Имя, "ГЕРМИК-П") <> 0 ИЛИ Найти(Имя, "ГЕРМИК-Р") <> 0 ИЛИ Найти(Имя, "КЕДР") <> 0
      //ИЛИ Найти(Имя, "НЕРПА") <> 0) И
      //((Найти(Имя, "-В-") <> 0 ИЛИ Найти(Имя, "-ВК-") <> 0 ИЛИ Найти(Имя, "-КВ-") <> 0) И Найти(Имя, "РУЧ") = 0 И Найти(Имя, "НЕРПА-КО") = 0 И Найти(Имя, "НЕРПА-КП") = 0)
      R1:=Pos('РЕГУЛЯР-',Nam1);
      R2:=Pos('ГЕРМИК-Р',Nam1);
      R3:=Pos('ГЕРМИК-П',Nam1);
      R4:=Pos('КЕДР',Nam1);
      R5:=Pos('НЕРПА',Nam1);
      if (R1<>0) or (R2<>0) or (R3<>0) or (R4<>0) or (R5<>0)  then
      Begin
         R1:=Pos('-В-',Nam1);
         R2:=Pos('-ВК-',Nam1);
         R3:=Pos('-КВ-',Nam1);
         R4:=Pos('РУЧ',Nam1);
         R5:=Pos('НЕРПА-КО',Nam1);
         R6:=Pos('НЕРПА-КП',Nam1);
         if ((R1<>0) or (R2<>0) or (R3<>0)) and (R4<>0) and (R5=0) and (R6=0) then
         WZ:='II Gb c IIC T6' + #13#10 + '-70°С≤t≤+50°C' + #13#10 + '№ TC RU C-RU.ГБ08.В.01761';
      End;
      //------------
      //(Найти(Имя, "ГЕРМИК-С") <> 0  ИЛИ Найти(Имя, "ГЕРМИК-Т") <> 0 ) И
      //((Найти(Имя, "-В-") <> 0 ИЛИ Найти(Имя, "-ВК-") <> 0 ИЛИ Найти(Имя, "-КВ-") <> 0) И Найти(Имя, "РУЧ") = 0 )
      R1:=Pos('ГЕРМИК-С',Nam1);
      R2:=Pos('ГЕРМИК-Т',Nam1);
      if (R1<>0) or (R2<>0)  then
      Begin
         R1:=Pos('-В-',Nam1);
         R2:=Pos('-ВК-',Nam1);
         R3:=Pos('-КВ-',Nam1);
         R4:=Pos('РУЧ',Nam1);

         if ((R1<>0) or (R2<>0) or (R3<>0)) and (R4=0) then
         WZ:='1Ex d IIC T6 Gb' + #13#10 + '"II Gb c IIC T6"' + #13#10 + '"-60°С≤t≤+50°C"' + #13#10+ '"№ TC RU C-RU.ГБ08.В.01761';
      End;
      //------------
      //(Найти(Имя, "ГЕРМИК-С") <> 0  ИЛИ Найти(Имя, "ГЕРМИК-Т") <> 0 ) И
      //((Найти(Имя, "-В-") <> 0 ИЛИ Найти(Имя, "-ВК-") <> 0 ИЛИ Найти(Имя, "-КВ-") <> 0) И Найти(Имя, "РУЧ") = 0 )
      R1:=Pos('ГЕРМИК-С',Nam1);
      R2:=Pos('ГЕРМИК-Т',Nam1);
      if (R1<>0) or (R2<>0)  then
      Begin
         R1:=Pos('-В-',Nam1);
         R2:=Pos('-ВК-',Nam1);
         R3:=Pos('-КВ-',Nam1);
         R4:=Pos('РУЧ',Nam1);

         if ((R1<>0) or (R2<>0) or (R3<>0)) and (R4<>0) then
         WZ:='II Gb c IIC T6' + #13#10 + '-60°С≤t≤+50°C' + #13#10 + '№ TC RU C-RU.ГБ08.В.01761';
      End;
      //------------
      //(Найти(Имя, "АЗД-193") <> 0  ИЛИ Найти(Имя, "АЗД-196") <> 0 ИЛИ Найти(Имя, "АЗД-197") <> 0 ИЛИ Найти(Имя, "АЗД-198") <> 0
      //ИЛИ Найти(Имя, "АЗД-199") <> 0
      //ИЛИ Найти(Имя, "КВУ-П-В") <> 0) И (Найти(Имя, "РУЧ") = 0)
      R1:=Pos('АЗД-193',Nam1);
      R2:=Pos('АЗД-196',Nam1);
      R3:=Pos('АЗД-197',Nam1);
      R4:=Pos('АЗД-198',Nam1);
      R5:=Pos('АЗД-199',Nam1);
      R6:=Pos('КВУ-П-В',Nam1);
      if (R1<>0) or (R2<>0) or (R3<>0) or (R4<>0) or (R5<>0) or (R6<>0)  then
      Begin
         R1:=Pos('РУЧ',Nam1);
         if (R1=0) then
         WZ:='1Ex d IIC T4 Gb' + #13#10 + 'II Gb c IIC T4' + #13#10 + '№ TC RU C-RU.ГБ08.В.01915';
      End;
      //------------
      //((Найти(Имя, "АЗД-193") <> 0  ИЛИ Найти(Имя, "АЗД-196") <> 0
      //ИЛИ Найти(Имя, "АЗД-197") <> 0 ИЛИ Найти(Имя, "АЗД-198") <> 0
      //ИЛИ Найти(Имя, "АЗД-199") <> 0 ИЛИ Найти(Имя, "КВУ-П-В") <> 0) И (Найти(Имя, "РУЧ") <> 0)
      R1:=Pos('АЗД-193',Nam1);
      R2:=Pos('АЗД-196',Nam1);
      R3:=Pos('АЗД-197',Nam1);
      R4:=Pos('АЗД-198',Nam1);
      R5:=Pos('АЗД-199',Nam1);
      R6:=Pos('КВУ-П-В',Nam1);
      if (R1<>0) or (R2<>0) or (R3<>0) or (R4<>0) or (R5<>0) or (R6<>0)  then
      Begin
         R1:=Pos('РУЧ',Nam1);
         if (R1<>0) then
         WZ:='II Gb c IIC T4' + #13#10 + '№ TC RU C-RU.ГБ08.В.01915';
      End;
      //------------
      //(Найти(Имя, "АЗЕ") <> 0  ИЛИ Найти(Имя, "КЛ-В") <> 0)
      R1:=Pos('АЗЕ',Nam1);
      R2:=Pos('КЛ-В',Nam1);
      if (R1<>0) or (R2<>0) then
      Begin
         WZ:='II Gb c IIC T4' + #13#10 + '№ TC RU C-RU.ГБ08.В.01915';
      End;
      //------------
      // Найти(Имя, "ГЕРМИК-П") <> 0 ИЛИ Найти(Имя, "ГЕРМИК-С") <> 0
      //ИЛИ Найти(Имя, "ГЕРМИКх2") <> 0 ИЛИ Найти(Имя, "КЕДР") <>0
      //ИЛИ (Найти(Имя, "РЕГУЛЯР-") <> 0) И ((Найти(Имя, "-В-") <> 0 ИЛИ Найти(Имя, "-ВК-") <> 0
      //ИЛИ Найти(Имя, "-ВК-") <> 0 ИЛИ Найти(Имя, "-КВ-") <> 0) И Найти(ЗаказСтроки.Номер, "ВГ") <> 0 )
      R1:=Pos('ГЕРМИК-П',Nam1);
      R2:=Pos('ГЕРМИК-С',Nam1);
      R3:=Pos('ГЕРМИКх2',Nam1);
      R4:=Pos('КЕДР',Nam1);
      R5:=Pos('РЕГУЛЯР-',Nam1);
      if (R1<>0) or (R2<>0) or (R3<>0) or (R4<>0) or (R5<>0)  then
      Begin
          R1:=Pos('-В-',Nam1);
         R2:=Pos('-ВК-',Nam1);
         R3:=Pos('-КВ-',Nam1);
         if (R1<>0) or (R2<>0) or (R3<>0) then
         WZ:='1 EX d IIC T6 Gb';
      End;
      Result:=WZ;
End;

function TForm1.Stenki_Vozd(AStr, Oboz1, Oboz2, Oboz2_1, Oboz3, Oboz4, Dat1, dat2, Tab1, Tab2: string; List: Integer; XL: Variant): string;

//  Stenki_Vozd(SS,'ВГ 050.00.00.002-',
//'ВГ 053.00.00.001-','ВГ 050.00.00.001-','ВГ 050.00.00.001-01','',SS,SS,8, XL);
var
  I, J, XX, YY, Cvet, Res,Res1, Kol_P, Kol_Det, ger, Reg, Kol_G, KOL_V, Z, Z1: Integer;
  S, Str, StrNom, Idgp, idko, Izdel, Kol_Zap_S, SS, StrDat1, StrDat2, Oboz, Kol_S, StrDat3, Str1, Mass, ob2, Kol2,WZ,Pokr: string;
  XL1: Variant;
  Dl_F, Massa, Massa_Ob, Dlin: Double;
begin
   //Стенки комплект
  Result := '';
  WZ:='';
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  StrDat3 := FormatDateTime('dd.mm.yyyy', DateTimePicker3.DateTime);
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  XX := 0;
  YY := 0;
      {
    Stenki_Vozd(SS,'ВГ 050.00.00.002-','ВГ 053.00.00.001-','ВГ 050.00.00.001-',
  'ВГ 050.00.00.001-','','','',SS,SS,8, XL);
}
  SS := '  AND (Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ')  AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') ';  //ВГ 050.00.00.002-
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where   (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ')  AND ((Станок=' + #39 + 'Линия' + #39 + ')) %s  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  XL.ActiveWorkBook.Sheets.Item[List + 1].Activate;
  if ADOQuery1.RecordCount <> 0 then
    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);

  if ADOQuery1.RecordCount <> 0 then
  begin
    XL.ActiveWorkBook.Sheets.Item[List + 1].Activate;
    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
     //Клапан ГЕРМИК-П-0640-1045-Н-П-04-01-00-УХЛ3
      Izdel:= ADOQuery1.FieldByName('Изделие').AsString;
      Pokr:='';
      res:=Pos('ГЕРМИК-',Izdel);
      if (Res<>0) then
      Begin
      res:=Izdel.IndexOf('П',25);
      Pokr:='';
      if Res=26 then
      begin
          Pokr:='ПОКРАСКА';
      end;
      End;
      //
      Pokr:='';
      res:=Pos('РЕГУЛЯР-',Izdel);
      if (Res<>0) then
      Begin
      res:=Izdel.IndexOf('П',24);
      Pokr:='';
      if Res=25 then
      begin
          Pokr:='ПОКРАСКА';
      end;
      End;
      //
      Pokr:='';
      res:=Pos('КВР-',Izdel);
      if (Res<>0) then
      Begin
      res:=Izdel.IndexOf('П',20);
      Pokr:='';
      if Res=21 then
      begin
          Pokr:='ПОКРАСКА';
      end;
      End;
      Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      Kol_G := StrToInt(Kol_S);
      StrNom := ADOQuery1.FieldByName('Номер').AsString;
      Res := Pos('5094', StrNom);
      if Res <> 0 then
        StrNom := '5094';
      Kol_Zap_S := ADOQuery1.FieldByName('КолКлап').AsString;
      Idgp := ADOQuery1.FieldByName('IdГП').AsString;
      idko := ADOQuery1.FieldByName('IdКО').AsString;
      XL.ActiveWorkBook.Worksheets[List + 1].Range['I1:N6'].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX + 8)].Select;
      XL.ActiveWorkBook.Worksheets[List + 1].Paste;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 1] := '№ ' + (StrNom);

      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 5] := StrDat3;
      Res := Pos('-', Oboz);
      if Res <> 0 then
        Delete(Oboz, 1, Res);

      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 1] := Oboz;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 2] := Kol_S;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 5] := Pokr;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 6] := Kol_Zap_S;
            // Ищем Пару
      ob2 := '';
      Kol2 := '';
      Z := 0;
          {  Stenki_Vozd(SS,'ВГ 050.00.00.002-','ВГ 053.00.00.001-','ВГ 050.00.00.001-',
          'ВГ 050.00.00.001-','','','',SS,SS,8, XL);AND (Обозначение NOT LIKE '+#39+Oboz3+'%-ZAZ'+#39+')}
      SS := '  AND ((Обозначение LIKE ' + #39 + Oboz2 + '%' + #39 + ') OR ((Обозначение LIKE ' + #39 + Oboz3 + '%' + #39 + ') ))  AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';

      if not mkQuerySelect66(ADOQuery4, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 +
      ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ')) %s AND (IdГП=' + #39 + Idgp + #39 + ') AND (IdКО=' + #39 + idko + #39 + ') AND (Номер=' + #39 + StrNom + #39 + ')', ['Заготовка', SS]) then
        exit;
      if ADOQuery4.RecordCount = 0 then
        XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 3] := 'Trumpf';
      for I := 0 to ADOQuery4.RecordCount - 1 do
      begin
        StrNom := ADOQuery4.FieldByName('Номер').AsString;
        Res := Pos('7469', StrNom);
        if Res <> 0 then
          StrNom := '7469';
        Oboz := ADOQuery4.FieldByName('Обозначение').AsString;
        Res := Pos('-', Oboz);
        if Res <> 0 then
          Delete(Oboz, 1, Res);
        Kol_S := ADOQuery4.FieldByName('Количество').AsString;
             { Res:=Pos('-ZAZ',Oboz); //ZAZ
              if res<>0 then
              Begin
                  Delete(Oboz,Res,4);
                  Z:=Z+1 ;
                  Ob2:=Ob2+'+ZAZ('+Kol_S+')';
              End; }

        Kol_S := ADOQuery4.FieldByName('Количество').AsString;
        KOL_V := StrToInt(Kol_S);
        if KOL_V / Kol_G = 2 then
        begin
          Kol_S := IntToStr(KOL_V - Kol_G);
        end;
        Z := Z + KOL_V;
        Kol_S := IntToStr(Z);
        XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 3] := '№ ' + (StrNom);
        XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 3] := Oboz;
        XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 4] := Kol_S;
              //XL.ActiveWorkBook.WorkSheets[List+1].Cells[ XX+4,5] :=Ob2;
        ADOQuery4.Next;
      end;
      XX := XX + 7;
      ADOQuery1.Next;
    end;
  end;

      //ЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩ
  if Cvet = 1 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 3010538; //Желтый
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX, 6] := ' Жел';
  end;
  if Cvet = 2 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 6877993; //Зеленый
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX, 6] := ' Зел';
  end;
  if Cvet = 3 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 16424058; //Синий
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX, 6] := ' Син';
  end;
      //ЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩ
//ОООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООО
  //Стенки   Горизонтальная  04
  //===================Кол накладных          AND (Станок='+#39+'Линия'+#39+')
  {'ВГ 050.00.00.002-',,'ВГ 050.00.00.001-',
  'ВГ 050.00.00.001-01',}   //or (Обозначение LIKE '+#39+Oboz4+'%'+#39+')   AND (Обозначение NOT LIKE '+#39+Oboz3+'%-ZAZ'+#39+')
  SS := ' ((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') or (Обозначение LIKE ' + #39 + Oboz2 + '%' + #39 + ') or (( (Обозначение LIKE ' + #39 + Oboz3 + '%' + #39 + ')) )) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  if not mkQuerySelect(ADOQuery1, 'Select DISTINCT Номер  from %s Where %s AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') ', ['Заготовка', SS]) then
    exit;

  Kol_P := ADOQuery1.recordCount; //ADOQuery1.FieldByName('S1').AsInteger; Кол ПОДДОНОВ
  XL.ActiveWorkBook.Sheets.Item[List].Activate;
  Massa_Ob := 0;
  Kol2 := '';
  XX := 5;
  //XL.Visible:=True;
  //Memo9.Lines.Clear;
  StrDat3 := FormatDateTime('dd.mm.yyyy ', DateTimePicker3.DateTime);  // or (Обозначение LIKE '+#39+Oboz2+'%'+#39+')OR (Обозначение LIKE '+#39+'ТЕКИ 07.239.01.00.002-%'+#39+') AND (Станок='+#39+'Линия'+#39+')
  SS := '(Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ')  AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  //Обозначение,Номер,Элемент,Sum(количество) As S,Sum(колКлап) As S1  Group BY Обозначение,Элемент,Номер Order By Номер
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where %s  AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ')) ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin
    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);
    XL.ActiveWorkBook.Sheets.Item[List].Activate;
    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 3] := 'Задание  на ' + StrDat3;
    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := 'Кол-во поддонов ' + IntToStr(Kol_P);
    if Cvet = 1 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 3010538; //Желтый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 11] := ' Жел';
    end;
    if Cvet = 2 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 6877993; //Зеленый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 11] := ' Зел';
    end;
    if Cvet = 3 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 16424058; //Синий
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 11] := ' Син';
    end;
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      if J <> ADOQuery1.RecordCount then
      begin
        XL.ActiveWorkBook.Worksheets[List].Range['N6:Z6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
        XL.ActiveWorkBook.Worksheets[List].Paste;
      end;

      SS := ADOQuery1.FieldByName('Обозначение').AsString;

      ADOQuery2.Close;
      ADOQuery2.SQL.Clear;
      Str1 := 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')';
      ADOQuery2.SQL.Text := Str1;
      ADOQuery2.Active := True;
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
      Res := Pos('.', Str);
      if Res <> 0 then
        Delete(Str, Res, 4);
      if Str <> '' then
        Dlin := StrToFloat(Str);
      if Str <> '' then
        Str := FloatToStr(Dlin + 1); //Булаев 24.11.2020
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 7] := '++1';
        //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Mass := ADOQuery2.FieldByName('Масса').AsString;
      if Mass <> '' then
        Massa := StrToFloat(StringReplace(Mass, ',', '.', [rfReplaceAll]));
      StrNom := ADOQuery1.FieldByName('Номер').AsString;
      Res := Pos('6168', StrNom);
      if Res <> 0 then
        StrNom := '6168';
        //++++++++++++++++++++
      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      Kol_G := StrToInt(Kol_S);
      if Kol_S <> '' then
        Kol_Det := StrToInt(Kol_S);
      Dl_F := Massa * Kol_Det;
      Mass := FloatToStr(Dl_F);
      Massa_Ob := Massa_Ob + Dl_F;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := IntToStr(J + 1);
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := ADOQuery1.FieldByName('Номер').AsString;

      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := ADOQuery1.FieldByName('Количество').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 12] := ADOQuery1.FieldByName('КолКлап').AsString;
      Idgp := ADOQuery1.FieldByName('IdГП').AsString;
      idko := ADOQuery1.FieldByName('IdКО').AsString;
       //   AND (Обозначение NOT LIKE '+#39+Oboz3+'%-ZAZ'+#39+')
      SS := '  AND ((Обозначение LIKE ' + #39 + Oboz2 + '%' + #39 + ') OR ((Обозначение LIKE ' + #39 + Oboz3 + '%' + #39 + ')))  AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
      Kol2 := '';
      Z := 0;
      Z1 := 0;
      ob2 := '';
      if not mkQuerySelect66(ADOQuery4, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ')) %s AND (IdГП=' + #39 + Idgp + #39 + ') AND (IdКО=' + #39 + idko + #39 + ') AND (Номер=' + #39 + ADOQuery1.FieldByName('Номер').AsString + #39 + ')', ['Заготовка', SS]) then
        exit;
      if ADOQuery4.RecordCount = 0 then
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 11] := 'Trumpf';
      for I := 0 to ADOQuery4.RecordCount - 1 do
      begin
        SS := ADOQuery4.FieldByName('Обозначение').AsString;
        ADOQuery2.Close;
        ADOQuery2.SQL.Clear;
        Str1 := 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')';
        ADOQuery2.SQL.Text := Str1;
        ADOQuery2.Active := True;
        Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
        Res := Pos('-01', SS);
        if Str <> '' then
          Dl_F := StrToFloat(Str);

        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 10] := '150';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 11] := 'Пр 8';
              //end;
        if Res <> 0 then
        begin
          XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 10] := '150'; //Для 050.....без -01
          XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 11] := 'Пр 4';
        end;
        SS := ADOQuery4.FieldByName('Обозначение').AsString;
        Izdel := ADOQuery4.FieldByName('Изделие').AsString;    //
        WZ:=Vsriv(Izdel);
        if WZ<>'' then
        Ob2:='ВЗр';
        Res := Pos('ВГ 053.00.00.001-', SS);  //ВГ 053,00,00,001- По служебке №01-19
        if Res <> 0 then
        begin
          XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 10] := '100';
          XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 11] := 'Пр 2';
        end;
              //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
        SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
        Mass := ADOQuery2.FieldByName('Масса').AsString;
        if Mass <> '' then
          Massa := StrToFloat(StringReplace(Mass, ',', '.', [rfReplaceAll]));

              //++++++++++++++++++++
        Kol_S := ADOQuery4.FieldByName('Количество').AsString;
        if Kol_S <> '' then
          Kol_Det := StrToInt(Kol_S);
        Dl_F := Massa * Kol_Det;
        Mass := FloatToStr(Dl_F);
        Massa_Ob := Massa_Ob + Dl_F;
        StrNom := ADOQuery4.FieldByName('Номер').AsString;
        Res := Pos('6168', StrNom);
        if Res <> 0 then
          StrNom := '6168';

        KOL_V := StrToInt(Kol_S);
        Z := Z + KOL_V;
        Kol_S := IntToStr(Z);
        if KOL_V / Kol_G = 2 then
        begin
          Kol_S := IntToStr(KOL_V - Kol_G);
        end;
             // KOL_V:= StrToInt(Kol_S);
        Res := Pos('-ZAZ', SS); //ZAZ
        if Res <> 0 then
        begin
                  //Delete(SS,Res,4);
          Z1 := Z1 + KOL_V;
          ob2 := ob2 + '+ZAZ(' + IntToStr(Z1) + ')';
        end;
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 7] := ADOQuery4.FieldByName('Номер').AsString;
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 8] := Str;
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := Kol_S;
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 12] := ob2;
        ADOQuery4.Next;
      end;
      Inc(XX);
      ADOQuery1.Next;
    end;
  end;

  if XX >= 6 then
  begin
    XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '=SUM(D5:D' + IntToStr(XX - 1) + ')';
    XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4].Font.Bold := True;
  end;

  XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := '=SUM(I5:I' + IntToStr(XX - 1) + ')';
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9].Font.Bold := True;
  XL.ActiveWorkBook.WorkSheets[List].PageSetup.PrintTitleRows := '$' + IntToStr(1) + ':$' + IntToStr(4);
  Inc(XX);
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := FloatToStr(Massa_Ob);
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 9] := FloatToStr(Massa_Ob * 1.1); //10%
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 8] := 'Масса металла';
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 8] := 'Плюс 10%';
end;

function TForm1.Lenta1(AStr, Oboz1, Oboz2, Dat1, dat2, Tab1, Tab2: string; List: Integer; XL: Variant): string;
var
  I, J, XX, YY, Cvet, Res, Kol_P, Kol_Det: Integer;
  Dl_F, Massa, Massa_Ob: Double;
  S, Str, StrNom, Idgp, Izdel, Kol_Zap_S, SS, StrDat1, StrDat2, Oboz, Kol_S, StrDat3, Str1, mass: string;
  XL1: Variant;
begin
   //Стенки комплект
  Result := '';
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  StrDat3 := FormatDateTime('dd.mm.yyyy', DateTimePicker3.DateTime);
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  XX := 0;
  YY := 0;

  SS := '  AND ((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') ) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') ';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 +
  ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Канбан' + #39 + ') or (Станок=' + #39 + 'Гибка' + #39 + ')) %s  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  for J := 0 to ADOQuery1.RecordCount - 1 do
  begin
    Kol_Zap_S := ADOQuery1.FieldByName('КолКлап').AsString;
    StrNom := ADOQuery1.FieldByName('Номер').AsString;
    Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
    Kol_S := ADOQuery1.FieldByName('Количество').AsString;

    XL.ActiveWorkBook.Sheets.Item[List + 1].Activate;
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 3] := (StrNom);
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 5] := StrDat3;

    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);
    if J <> ADOQuery1.RecordCount - 1 then
    begin
      XL.ActiveWorkBook.Worksheets[List + 1].Range['A1:F6'].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX + 8)].Select;
      XL.ActiveWorkBook.Worksheets[List + 1].Paste;
    end;
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 3] := (StrNom);
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 5] := StrDat3;
    Res := Pos('-', Oboz);
    if Res <> 0 then
      Delete(Oboz, 1, Res);
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 1] := Oboz;
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 2] := Kol_S;
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 6] := Kol_Zap_S;
    XX := XX + 7;
    ADOQuery1.Next;
  end;

  if Cvet = 1 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 3010538; //Желтый
     // XL.ActiveWorkBook.WorkSheets[List].Cells[ 2,6] := ' Жел';
  end;
  if Cvet = 2 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 6877993; //Зеленый
      //XL.ActiveWorkBook.WorkSheets[List].Cells[ 2,6] := ' Зел';
  end;
  if Cvet = 3 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 16424058; //Синий
     // XL.ActiveWorkBook.WorkSheets[List].Cells[ 2,6] := ' Син';
  end;

//OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
  //Стенки   Горизонтальная
  //===================Кол накладных          AND (Станок='+#39+'Линия'+#39+')
  SS := ' ((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') ) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  if not mkQuerySelect(ADOQuery1, 'Select DISTINCT Номер  from %s Where %s AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') ', ['Заготовка', SS]) then
    exit;
  Kol_P := ADOQuery1.recordCount; //ADOQuery1.FieldByName('S1').AsInteger;

  XX := 5;
  Massa_Ob := 0;
  //Memo9.Lines.Clear;
  StrDat3 := FormatDateTime('dd.mm.yyyy ', DateTimePicker3.DateTime);  //OR (Обозначение LIKE '+#39+'ТЕКИ 07.239.01.00.002-%'+#39+') AND (Станок='+#39+'Линия'+#39+')
  SS := '((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') )';
  //Обозначение,Номер,Элемент,Sum(количество) As S,Sum(колКлап) As S1  Group BY Обозначение,Элемент,Номер Order By Номер
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where %s  AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Канбан' + #39 + ') or (Станок=' + #39 + 'Trumph' + #39 + '))  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin
    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);
    XL.ActiveWorkBook.Sheets.Item[List].Activate;
    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 3] := 'Задание  на ' + StrDat3;
    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 6] := 'Кол-во поддонов ' + IntToStr(Kol_P);
    if Cvet = 1 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 3010538; //Желтый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Жел';
    end;
    if Cvet = 2 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 6877993; //Зеленый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Зел';
    end;
    if Cvet = 3 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 16424058; //Синий
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Син';
    end;
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      if J = 0 then
      begin
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Oboz1 + 'A';
        Inc(XX);
      end;
      if J <> ADOQuery1.RecordCount - 1 then
      begin
        XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
        XL.ActiveWorkBook.Worksheets[List].Paste;
      end;
      SS := ADOQuery1.FieldByName('Обозначение').AsString;

      ADOQuery2.Close;
      ADOQuery2.SQL.Clear;
      Str1 := 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')';
      ADOQuery2.SQL.Text := Str1;
      ADOQuery2.Active := True;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 23] := Str;
      Dl_F := StrToFloat(Str); //18.12.2018 №30-18  Лопатка
      Str := FloatToStr(Dl_F);
                //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      mass := ADOQuery2.FieldByName('Масса').AsString;
      if mass <> '' then
        Massa := StrToFloat(StringReplace(mass, ',', '.', [rfReplaceAll]));

        //++++++++++++++++++++
      Kol_S := ADOQuery2.FieldByName('Количество').AsString;
      if Kol_S <> '' then
        Kol_Det := StrToInt(Kol_S);
      Dl_F := Massa * Kol_Det;
      mass := FloatToStr(Dl_F);
      Massa_Ob := Massa_Ob + Dl_F;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := IntToStr(J + 1);
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := ADOQuery1.FieldByName('Количество').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := ADOQuery1.FieldByName('КолКлап').AsString;
      Inc(XX);
      ADOQuery1.Next;
    end;
  end;

  XL.ActiveWorkBook.Sheets.Item[List].Activate;
  XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
  XL.Selection.Copy;
  XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
  XL.ActiveWorkBook.Worksheets[List].Paste;
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '=SUM(D6:D' + IntToStr(XX - 1) + ')';
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4].Font.Bold := True;
    //==================================================================================
  XL.ActiveWorkBook.WorkSheets[List].PageSetup.PrintTitleRows := '$' + IntToStr(1) + ':$' + IntToStr(4);
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 4] := FloatToStr(Massa_Ob);
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 2, 4] := FloatToStr(Massa_Ob * 1.1); //10%
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 2, 2] := 'Масса металла';
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 2, 3] := '+10%';
end;

function TForm1.Lenta(AStr, Dat1, dat2, Tab1, Tab2: string; List: Integer; XL: Variant): string;
var
  I, J, XX, YY, Cvet, Res, Kol_P, Kol_Det: Integer;
  Dl_F, Massa, Massa_Ob: Double;
  S, Str, StrNom, Idgp, Izdel, Kol_Zap_S, SS, StrDat1, StrDat2, Oboz, Kol_S, StrDat3, Str1, mass, P1, P2: string;
  XL1: Variant;
begin
   //Стенки комплект
  Result := '';
  StrDat1 := dat2;//FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := Tab1;//FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  StrDat3 := Tab2;//FormatDateTime('dd.mm.yyyy', DateTimePicker3.DateTime);
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  XX := 5;
  YY := 0;

  SS := '  AND (Элемент LIKE ' + #39 + AStr + '%' + #39 + ') AND (Изделие LIKE ' + #39 +Dat1 + '%' + #39 + ') ';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 +
  ' AND ' + #39 + StrDat2 + #39 + ') AND (Станок=' + #39 + 'Гибка' + #39 + ') %s  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount = 0 then
  begin
       MessageDlg('Путо!',mtError, [mbOk], 0);
       STAM_er:=1;
       Exit;
  end;
  if ADOQuery1.RecordCount <> 0 then
  begin
    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);

    XL.ActiveWorkBook.Sheets.Item[List].Activate;
    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 3] := 'Задание  на ' + StrDat3;
    //XL.ActiveWorkBook.WorkSheets[List].Cells[2, 6] := 'Кол-во поддонов ' + IntToStr(Kol_P);
    if Cvet = 1 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 3010538; //Желтый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Жел';
    end;
    if Cvet = 2 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 6877993; //Зеленый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Зел';
    end;
    if Cvet = 3 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 16424058; //Синий
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Син';
    end;
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
     { if J = 0 then
      begin
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Oboz1 + 'A';
        Inc(XX);
      end; }
      if J <> ADOQuery1.RecordCount then
      begin
        XL.ActiveWorkBook.Worksheets[List].Range['A4:H4'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
        XL.ActiveWorkBook.Worksheets[List].Paste;
      end;
      SS := ADOQuery1.FieldByName('Обозначение').AsString;
      Oboz:= ADOQuery1.FieldByName('Обозначение').AsString;
      Izdel := ADOQuery1.FieldByName('Изделие').AsString;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Dl_F:=0;
     { Res:=Pos('ВГ 050.00.00.004-',SS); //Воздушные длина Ленты= длине Клапана, Развертка > на 5мм
      if Res<>0 then
        Str := ADOQuery1.FieldByName('Длина').AsString
      Else
      begin
      Str := ADOQuery1.FieldByName('ДлинаРазв').AsString;
      end;   }
      Str:='';
      Res:=Pos('-',Oboz);
      if Res<>0 then
      begin
        Delete(Oboz,1,Res);
        Str:=Oboz;
      end;
      //
      Res:=Pos('-',Oboz); //1060-01
      if Res<>0 then
      begin
        Delete(Oboz,Res,10);
        Str:=Oboz;
      end;
      //
      if Str='' then
      Dl_F:=0
      Else
      Dl_F := StrToFloat(Str); //18.12.2018 №30-18  Лопатка
      Str := FloatToStr(Dl_F);
                //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      mass := ADOQuery1.FieldByName('Масса').AsString;
      if mass <> '' then
        Massa := StrToFloat(StringReplace(mass, ',', '.', [rfReplaceAll]));

        //++++++++++++++++++++
      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      if Kol_S <> '' then
        Kol_Det := StrToInt(Kol_S);
      Dl_F := Massa * Kol_Det;
      mass := FloatToStr(Dl_F);
      Massa_Ob := Massa_Ob + Dl_F;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := IntToStr(J + 1);
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := ADOQuery1.FieldByName('Обозначение').AsString;

      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 5] := ADOQuery1.FieldByName('Количество').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 6] := ADOQuery1.FieldByName('ШиринаПолки1').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 7] := ADOQuery1.FieldByName('ШиринаПолки2').AsString;

      Res := Pos('СТАМ', Izdel);
      if Res <> 0 then
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 8] := Izdel;
      Inc(XX);
      ADOQuery1.Next;
    end;
  end;
  if Cvet = 1 then
  begin
    XL.ActiveWorkBook.WorkSheets[List].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 3010538; //Желтый
     // XL.ActiveWorkBook.WorkSheets[List].Cells[ 2,6] := ' Жел';
  end;
  if Cvet = 2 then
  begin
    XL.ActiveWorkBook.WorkSheets[List].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 6877993; //Зеленый
      //XL.ActiveWorkBook.WorkSheets[List].Cells[ 2,6] := ' Зел';
  end;
  if Cvet = 3 then
  begin
    XL.ActiveWorkBook.WorkSheets[List].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 16424058; //Синий
     // XL.ActiveWorkBook.WorkSheets[List].Cells[ 2,6] := ' Син';
  end;

  XL.ActiveWorkBook.Sheets.Item[List].Activate;
  XL.ActiveWorkBook.Worksheets[List].Range['A4:H4'].Select;
  XL.Selection.Copy;
  XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
  XL.ActiveWorkBook.Worksheets[List].Paste;
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 5] := '=SUM(E4:E' + IntToStr(XX - 1) + ')';
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 5].Font.Bold := True;
    //==================================================================================
  XL.ActiveWorkBook.WorkSheets[List].PageSetup.PrintTitleRows := '$' + IntToStr(1) + ':$' + IntToStr(4);
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 7] := FloatToStr(Massa_Ob);
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 2, 7] := FloatToStr(Massa_Ob * 1.1); //10%
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 2, 5] := 'Масса металла';
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 2, 6] := '+10%';
  //==============================================
  XX := 6;
  if ADOQuery1.RecordCount <> 0 then
  begin
    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);
    XL.ActiveWorkBook.Sheets.Item[List + 1].Activate;
   // XL.ActiveWorkBook.WorkSheets[List+1].Cells[2, 3] := 'Задание  на ' + StrDat3;

    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      if J <> ADOQuery1.RecordCount - 1 then
      begin
        XL.ActiveWorkBook.Worksheets[List + 1].Range['A1:E5'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX)].Select;
        XL.ActiveWorkBook.Worksheets[List + 1].Paste;
        XX := XX + 5;
      end;
    end;
  end;

  XX := 6;
  if ADOQuery1.RecordCount <> 0 then
  begin
    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);
    XL.ActiveWorkBook.Sheets.Item[List + 1].Activate;
   // XL.ActiveWorkBook.WorkSheets[List+1].Cells[2, 3] := 'Задание  на ' + StrDat3;
    ADOQuery1.First;
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin

      SS := ADOQuery1.FieldByName('Обозначение').AsString;
      Izdel := ADOQuery1.FieldByName('Изделие').AsString;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Str := ADOQuery1.FieldByName('ДлинаРазв').AsString;
      Dl_F := StrToFloat(Str); //18.12.2018 №30-18  Лопатка
      Str := FloatToStr(Dl_F);
      //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');

      Kol_S := ADOQuery1.FieldByName('Количество').AsString;

      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX - 3, 1] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX - 3, 2] := StrDat3;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX - 3, 3] := Kol_S;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX - 3, 4] := Str;

      Res := Pos('СТАМ', Izdel);
      if Res <> 0 then
        XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX - 3, 5] := ADOQuery1.FieldByName('КолКлап').AsString + ' СТАМ'
      else
        XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX - 3, 5] := ADOQuery1.FieldByName('КолКлап').AsString;
      XX := XX + 5;
      ADOQuery1.Next;
    end;
  end;
end;


function TForm1.Lopatka(AStr, Oboz1, Oboz2, Dat1, dat2, Tab1, Tab2: string; List: Integer; XL: Variant): string;
var
  I, J, XX, YY, Cvet, Res, Kol_P, Kol_Det: Integer;
  Dl_F, Massa, Massa_Ob: Double;
  S, Str, StrNom, Idgp, Izdel, Kol_Zap_S, SS, StrDat1, StrDat2, Oboz, Kol_S, StrDat3, Str1, mass: string;
  XL1: Variant;
begin
   //Стенки комплект
  Result := '';
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  StrDat3 := FormatDateTime('dd.mm.yyyy', DateTimePicker3.DateTime);
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  XX := 0;
  YY := 0;

  SS := '  AND ((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') ) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') ';                      //  (Станок=' + #39 + 'Канбан' + #39 + ') or  or  (Станок=' + #39 + 'Trumph' + #39 + ')
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ')) %s  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  for J := 0 to ADOQuery1.RecordCount - 1 do
  begin
    Kol_Zap_S := ADOQuery1.FieldByName('КолКлап').AsString;
    StrNom := ADOQuery1.FieldByName('Номер').AsString;
    Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
    Kol_S := ADOQuery1.FieldByName('Количество').AsString;

    XL.ActiveWorkBook.Sheets.Item[List + 1].Activate;
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 3] := (StrNom);
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 5] := StrDat3;

    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);
    if J <> ADOQuery1.RecordCount - 1 then
    begin
      XL.ActiveWorkBook.Worksheets[List + 1].Range['A1:F6'].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX + 8)].Select;
      XL.ActiveWorkBook.Worksheets[List + 1].Paste;
    end;
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 3] := (StrNom);
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 5] := StrDat3;
    Res := Pos('-', Oboz);
    if Res <> 0 then
      Delete(Oboz, 1, Res);
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 1] := Oboz;
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 2] := Kol_S;
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 6] := Kol_Zap_S;
    XX := XX + 7;
    ADOQuery1.Next;
  end;

  if Cvet = 1 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 3010538; //Желтый
     // XL.ActiveWorkBook.WorkSheets[List].Cells[ 2,6] := ' Жел';
  end;
  if Cvet = 2 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 6877993; //Зеленый
      //XL.ActiveWorkBook.WorkSheets[List].Cells[ 2,6] := ' Зел';
  end;
  if Cvet = 3 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 16424058; //Синий
     // XL.ActiveWorkBook.WorkSheets[List].Cells[ 2,6] := ' Син';
  end;

//OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
  //Стенки   Горизонтальная
  //===================Кол накладных          AND (Станок='+#39+'Линия'+#39+')
  SS := ' ((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') ) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  if not mkQuerySelect(ADOQuery1, 'Select DISTINCT Номер  from %s Where %s AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') ', ['Заготовка', SS]) then
    exit;
  Kol_P := ADOQuery1.recordCount; //ADOQuery1.FieldByName('S1').AsInteger;

  XX := 5;
  Massa_Ob := 0;
  //Memo9.Lines.Clear;
  StrDat3 := FormatDateTime('dd.mm.yyyy ', DateTimePicker3.DateTime);  //OR (Обозначение LIKE '+#39+'ТЕКИ 07.239.01.00.002-%'+#39+') AND (Станок='+#39+'Линия'+#39+')  (Станок=' + #39 + 'Канбан' + #39 + ') or   or  (Станок=' + #39 + 'Trumph' + #39 + ')
  SS := '((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') )';
  //Обозначение,Номер,Элемент,Sum(количество) As S,Sum(колКлап) As S1  Group BY Обозначение,Элемент,Номер Order By Номер
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where %s  AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ( (Станок=' + #39 + 'Линия' + #39 + '))  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin
    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);
    XL.ActiveWorkBook.Sheets.Item[List].Activate;
    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 3] := 'Задание  на ' + StrDat3;
    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 6] := 'Кол-во поддонов ' + IntToStr(Kol_P);
    if Cvet = 1 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 3010538; //Желтый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Жел';
    end;
    if Cvet = 2 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 6877993; //Зеленый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Зел';
    end;
    if Cvet = 3 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 16424058; //Синий
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Син';
    end;
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      if J = 0 then
      begin
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Oboz1 + 'A';
        Inc(XX);
      end;
      if J <> ADOQuery1.RecordCount - 1 then
      begin
        XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
        XL.ActiveWorkBook.Worksheets[List].Paste;
      end;
      SS := ADOQuery1.FieldByName('Обозначение').AsString;

      ADOQuery2.Close;
      ADOQuery2.SQL.Clear;
      Str1 := 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')';
      ADOQuery2.SQL.Text := Str1;
      ADOQuery2.Active := True;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 23] := Str;
      Dl_F := StrToFloat(Str); //18.12.2018 №30-18  Лопатка
      Str := FloatToStr(Dl_F);
                //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      mass := ADOQuery2.FieldByName('Масса').AsString;
      if mass <> '' then
        Massa := StrToFloat(StringReplace(mass, ',', '.', [rfReplaceAll]));

        //++++++++++++++++++++
      Kol_S := ADOQuery2.FieldByName('Количество').AsString;
      if Kol_S <> '' then
        Kol_Det := StrToInt(Kol_S);
      Dl_F := Massa * Kol_Det;
      mass := FloatToStr(Dl_F);
      Massa_Ob := Massa_Ob + Dl_F;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := IntToStr(J + 1);
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := ADOQuery1.FieldByName('Количество').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := ADOQuery1.FieldByName('КолКлап').AsString;
      Inc(XX);
      ADOQuery1.Next;
    end;
  end;

  XL.ActiveWorkBook.Sheets.Item[List].Activate;
  XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
  XL.Selection.Copy;
  XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
  XL.ActiveWorkBook.Worksheets[List].Paste;
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '=SUM(D6:D' + IntToStr(XX - 1) + ')';
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4].Font.Bold := True;
    //==================================================================================
  XL.ActiveWorkBook.WorkSheets[List].PageSetup.PrintTitleRows := '$' + IntToStr(1) + ':$' + IntToStr(4);
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 4] := FloatToStr(Massa_Ob);
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 2, 4] := FloatToStr(Massa_Ob * 1.1); //10%
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 2, 2] := 'Масса металла';
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 2, 3] := '+10%';
end;
 // Stenki(SS,'ТЕКИ 07.239.01.00.001-','ТЕКИ 07.239.01.00.002-','',
 // '','',  '','',SS,SS,4, XL);

function TForm1.Stenki(AStr, Oboz1, Oboz2, Oboz3, Oboz4, Oboz5, Dat1, dat2, Tab1, Tab2: string; List: Integer; XL: Variant): string;
var
  I, J, XX, YY, Cvet, Res, Kol_P, kol_Det, Kol_Zap, Res1, Kol_G, Kol_V: Integer;
  Dl_F, Massa, Massa_Ob, Dl_F_G: Double;
  S, Str, StrNom, Idgp, Izdel, Kol_Zap_S, SS, StrDat1, StrDat2, Oboz, Kol_S, StrDat3, Str1, Mass, Ob2, Kol2: string;
  XL1: Variant;
begin
   //Стенки комплект
  Result := '';
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  StrDat3 := FormatDateTime('dd.mm.yyyy', DateTimePicker3.DateTime);

  XX := 0;
  YY := 0;
  Kol_G := 0;
  Kol_V := 0;
  Memo26.Lines.Clear;
  Memo28.Lines.Clear;
      //'ТЕКИ 07.239.01.00.001-','ТЕКИ 07.239.01.00.002-','ВГ 1106.03.00.002-',
  //'ВГ 1106.03.00.001-'
  SS := '  AND (((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') AND (Обозначение NOT LIKE ' + #39 + Oboz1 + '%-%' + #39 + ')) OR (Обозначение LIKE ' + #39 + Oboz3 + '%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') AND (Изделие LIKE ' + #39 + '%КПУ%' + #39 + ') ';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ') or (Станок=' + #39 + 'Trumph' + #39 + '))  %s  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  Kol_G := ADOQuery1.RecordCount;

     //
  SS := '  AND (((Обозначение LIKE ' + #39 + Oboz2 + '%' + #39 + ') AND (Обозначение NOT LIKE ' + #39 + Oboz2 + '%-%' + #39 + ')) OR (Обозначение LIKE ' + #39 + Oboz4 + '%' + #39 + ')) AND (Изделие LIKE ' + #39 + '%КПУ%' + #39 + ')  AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';

  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ') or (Станок=' + #39 + 'Trumph' + #39 + ')  ) %s ', ['Заготовка', SS]) then
    exit;
  Kol_V := ADOQuery1.RecordCount;

  if Kol_V > Kol_G then
  begin

    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      Dl_F := 0;
      Kol_Zap_S := ADOQuery1.FieldByName('КолКлап').AsString;
      StrNom := ADOQuery1.FieldByName('Номер').AsString;
      Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      Idgp := ADOQuery1.FieldByName('IdГП').AsString;

      SS := '  AND (((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') AND (Обозначение NOT LIKE ' + #39 + Oboz1 + '%-%' + #39 + ')) OR (Обозначение LIKE ' + #39 + Oboz3 + '%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') AND (Изделие LIKE ' + #39 + '%КПУ%' + #39 + ') ';
      if not mkQuerySelect66(ADOQuery4, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ')) %s AND (IdГП=' + #39 + Idgp + #39 + ') AND (Номер=' + #39 + StrNom + #39 + ')', ['Заготовка', SS]) then
        exit;
      if ADOQuery4.RecordCount = 0 then
      begin

        Res := Pos('-', Oboz);
        if Res <> 0 then
          Delete(Oboz, 1, Res);
        Memo26.Lines.Add(Oboz + ' ' + Kol_S + ' ' + StrNom);
      end;
      ADOQuery1.Next;
    end;
  end;
   //
  if Kol_V < Kol_G then
  begin

    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      Dl_F := 0;
      Kol_Zap_S := ADOQuery1.FieldByName('КолКлап').AsString;
      StrNom := ADOQuery1.FieldByName('Номер').AsString;
      Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      Idgp := ADOQuery1.FieldByName('IdГП').AsString;

      SS := '  AND (((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') AND (Обозначение NOT LIKE ' + #39 + Oboz1 + '%-%' + #39 + ')) OR (Обозначение LIKE ' + #39 + Oboz3 + '%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') AND (Изделие LIKE ' + #39 + '%КПУ%' + #39 + ') ';
      if not mkQuerySelect66(ADOQuery4, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ')) %s AND (IdГП=' + #39 + Idgp + #39 + ') AND (Номер=' + #39 + StrNom + #39 + ')', ['Заготовка', SS]) then
        exit;
      if ADOQuery4.RecordCount = 0 then
      begin

        Res := Pos('-', Oboz);
        if Res <> 0 then
          Delete(Oboz, 1, Res);
        Memo28.Lines.Add(Oboz + ' ' + Kol_S + ' ' + StrNom);
      end;
      ADOQuery1.Next;
    end;
  end;
  SS := '  AND (((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') AND (Обозначение NOT LIKE ' + #39 + Oboz1 + '%-%' + #39 + ')) OR (Обозначение LIKE ' + #39 + Oboz3 + '%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') AND (Изделие LIKE ' + #39 + '%КПУ%' + #39 + ') ';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + '))  %s  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  for J := 0 to ADOQuery1.RecordCount - 1 do
  begin
    Dl_F := 0;
    Kol_Zap_S := ADOQuery1.FieldByName('КолКлап').AsString;
    StrNom := ADOQuery1.FieldByName('Номер').AsString;
    Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
    Kol_S := ADOQuery1.FieldByName('Количество').AsString;
    Idgp := ADOQuery1.FieldByName('IdГП').AsString;

    XL.ActiveWorkBook.Sheets.Item[List + 1].Activate;
         // XL.ActiveWorkBook.WorkSheets[List+1].Cells[ XX+2, 3] :=(StrNom);
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 5] := StrDat3;

    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);
    if J <> ADOQuery1.RecordCount - 1 then
    begin
      XL.ActiveWorkBook.Worksheets[List + 1].Range['A1:F6'].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX + 8)].Select;
      XL.ActiveWorkBook.Worksheets[List + 1].Paste;
    end;
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 1] := '№ ' + (StrNom);

    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 5] := StrDat3;
    Res := Pos('-', Oboz);
    if Res <> 0 then
      Delete(Oboz, 1, Res);
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 1] := Oboz;
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 2] := Kol_S;
    XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 6] := Kol_Zap_S;
        // Ищем Пару     OR (Обозначение LIKE '+#39+Oboz5+'%'+#39+')
    Ob2 := '';
    Kol2 := '';
    SS := '  AND (((Обозначение LIKE ' + #39 + Oboz2 + '%' + #39 + ') AND (Обозначение NOT LIKE ' + #39 + Oboz2 + '%-%' + #39 + ')) OR (Обозначение LIKE ' + #39 + Oboz4 + '%' + #39 + ')) AND (Изделие LIKE ' + #39 + '%КПУ%' + #39 + ')  AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';

    if not mkQuerySelect66(ADOQuery4, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ')) %s AND (IdГП=' + #39 + Idgp + #39 + ') AND (Номер=' + #39 + StrNom + #39 + ')', ['Заготовка', SS]) then
      exit;

    for I := 0 to ADOQuery4.RecordCount - 1 do
    begin
      StrNom := ADOQuery4.FieldByName('Номер').AsString;
      Oboz := ADOQuery4.FieldByName('Обозначение').AsString;
      Res := Pos('-', Oboz);
      if Res <> 0 then
        Delete(Oboz, 1, Res);
      Ob2 := Ob2 + '+' + Oboz;
      Kol_S := ADOQuery4.FieldByName('Количество').AsString;
      Kol2 := Kol2 + '+' + Kol_S;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 3] := '№ ' + (StrNom);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 3] := Oboz;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 4] := Kol_S;
      ADOQuery4.Next;
    end;

    XX := XX + 7;
    ADOQuery1.Next;
  end;
  for I := 0 to Memo26.Lines.Count - 1 do
  begin

    if Memo26.Lines.Strings[I] <> '' then
    begin
      SS := Memo26.Lines.Strings[I];
      Res := Pos(' ', SS);
      if Res <> 0 then
      begin
        Oboz := Copy(SS, 1, Res - 1);
        Delete(SS, 1, Res);
      end;
               //
      Res := Pos(' ', SS);
      if Res <> 0 then
      begin
        Kol_S := Copy(SS, 1, Res - 1);
        Delete(SS, 1, Res);
      end;
               //
      StrNom := (SS);

      XL.ActiveWorkBook.Worksheets[List + 1].Range['A1:F6'].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX)].Select;
      XL.ActiveWorkBook.Worksheets[List + 1].Paste;

      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 1, 1] := '';
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 3, 1] := 'TRUMPF';
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 3, 2] := '';

      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 1, 3] := '';
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 3, 3] := '';
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 3, 4] := '';

      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 1, 3] := '№ ' + (StrNom);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 3, 3] := Oboz;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 3, 4] := Kol_S;
      XX := XX + 7;
    end;

  end;
      //
  for I := 0 to Memo28.Lines.Count - 1 do
  begin

    if Memo28.Lines.Strings[I] <> '' then
    begin
      SS := Memo28.Lines.Strings[I];
      Res := Pos(' ', SS);
      if Res <> 0 then
      begin
        Oboz := Copy(SS, 1, Res - 1);
        Delete(SS, 1, Res);
      end;
               //
      Res := Pos(' ', SS);
      if Res <> 0 then
      begin
        Kol_S := Copy(SS, 1, Res - 1);
        Delete(SS, 1, Res);
      end;
               //
      StrNom := (SS);

      XL.ActiveWorkBook.Worksheets[List + 1].Range['A1:F6'].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX)].Select;
      XL.ActiveWorkBook.Worksheets[List + 1].Paste;

      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 1, 1] := '';
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 3, 1] := 'TRUMPF';
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 3, 2] := '';

      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 1, 3] := '';
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 3, 3] := '';
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 3, 4] := '';

      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 1, 3] := '№ ' + (StrNom);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 3, 3] := Oboz;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 3, 4] := Kol_S;
      XX := XX + 7;
    end;

  end;
  if Cvet = 1 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 3010538; //Желтый
     // XL.ActiveWorkBook.WorkSheets[List].Cells[ 2,6] := ' Жел';
  end;
  if Cvet = 2 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 6877993; //Зеленый
      //XL.ActiveWorkBook.WorkSheets[List].Cells[ 2,6] := ' Зел';
  end;
  if Cvet = 3 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 16424058; //Синий
     // XL.ActiveWorkBook.WorkSheets[List].Cells[ 2,6] := ' Син';
  end;
      //Верт
//OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
             //гор                     //Верт                  //Г                //ТЕКИ 269.15.01.001-A-01 Г      //В
//Stenki(SS,'ТЕКИ 07.239.01.00.001-','ТЕКИ 07.239.01.00.002-','ТЕКИ 269.15.01.001-','ТЕКИ 269.15.01.001-','ТЕКИ 269.15.01.007-',  '','',SS,SS,4, XL);
  //Стенки   Горизонтальная
  SS := '(Изделие LIKE ' + #39 + '%КПУ%' + #39 + ')';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND %s ', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);
  //===================Кол накладных      OR ((Обозначение LIKE '+#39+Oboz3+'%'+#39+
      //' AND (Обозначение NOT LIKE '+#39+Oboz3+'%-01'+#39+') ) OR (Обозначение LIKE '+#39+Oboz4+'%-01'+#39+')    AND (Станок='+#39+'Линия'+#39+')  AND ((Обозначение LIKE '+#39+Oboz1+'%'+#39+')
  SS := '   (((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') AND (Обозначение NOT LIKE ' + #39 + Oboz1 + '%-%' + #39 + ')) OR (Обозначение LIKE ' + #39 + Oboz3 + '%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') AND (Изделие LIKE ' + #39 + '%КПУ%' + #39 + ') ';
  if not mkQuerySelect(ADOQuery1, 'Select DISTINCT Номер  from %s Where %s AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') ', ['Заготовка', SS]) then
    exit;
  Kol_P := ADOQuery1.recordCount; //ADOQuery1.FieldByName('S1').AsInteger;

  XX := 5;
  //Memo9.Lines.Clear;
  Massa_Ob := 0;
  StrDat3 := FormatDateTime('dd.mm.yyyy ', DateTimePicker3.DateTime);  //OR (Обозначение LIKE '+#39+'ТЕКИ 07.239.01.00.002-%'+#39+') AND (Станок='+#39+'Линия'+#39+')
  SS := '(Изделие LIKE ' + #39 + '%КПУ%' + #39 + ') AND (((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') AND (Обозначение NOT LIKE ' + #39 + Oboz1 + '%-%' + #39 + ') ) OR (Обозначение LIKE ' + #39 + Oboz3 + '%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  //Обозначение,Номер,Элемент,Sum(количество) As S,Sum(колКлап) As S1  Group BY Обозначение,Элемент,Номер Order By Номер
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where %s  AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ')  AND ((Станок=' + #39 + 'Линия' + #39 + '))  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin
    XL.ActiveWorkBook.Sheets.Item[List].Activate;
    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 3] := 'Задание  на ' + StrDat3;
    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 6] := 'Кол-во поддонов ' + IntToStr(Kol_P);
    if Cvet = 1 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 3010538; //Желтый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Жел';
    end;
    if Cvet = 2 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 6877993; //Зеленый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Зел';
    end;
    if Cvet = 3 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 16424058; //Синий
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Син';
    end;
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin

      if J <> ADOQuery1.RecordCount then
      begin
        XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
        XL.ActiveWorkBook.Worksheets[List].Paste;
      end;
      SS := ADOQuery1.FieldByName('Обозначение').AsString;

      ADOQuery2.Close;
      ADOQuery2.SQL.Clear;
      Str1 := 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')';
      ADOQuery2.SQL.Text := Str1;
      ADOQuery2.Active := True;
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
      if Str <> '' then
        Dl_F := StrToFloat(Str);

        //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');

      Mass := ADOQuery2.FieldByName('Масса').AsString;
      if Mass <> '' then
        Massa := StrToFloat(StringReplace(Mass, ',', '.', [rfReplaceAll]));

        //++++++++++++++++++++
      Kol_S := ADOQuery2.FieldByName('Количество').AsString;
      if Kol_S <> '' then
        kol_Det := StrToInt(Kol_S);
      Dl_F := Massa * kol_Det;
      Mass := FloatToStr(Dl_F);
      Massa_Ob := Massa_Ob + Dl_F;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := IntToStr(J + 1);
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := ADOQuery1.FieldByName('Количество').AsString;
        //XL.ActiveWorkBook.WorkSheets[List].Cells[ XX,8] :=Mass;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := ADOQuery1.FieldByName('КолКлап').AsString;
      Res := Pos('1106', SS);
      if Res <> 0 then
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 8] := SS;
      Inc(XX);
      ADOQuery1.Next;
    end;
  end;
        //
  for I := 0 to Memo28.Lines.Count - 1 do
  begin
    Inc(XX);
  end;
    ///               //гор                     //Верт                  //Г                //ТЕКИ 269.15.01.001-A-01 Г      //В
//Stenki(SS,'ТЕКИ 07.239.01.00.001-','ТЕКИ 07.239.01.00.002-','ТЕКИ 269.15.01.001-','ТЕКИ 269.15.01.001-','ТЕКИ 269.15.01.007-',  '','',SS,SS,4, XL);

  YY := XX;
   //Стенки   Вертикальная
  XX := 5;
  StrDat3 := FormatDateTime('"Дата: "dd.mm.yyyy, " ', DateTimePicker3.DateTime);  //OR (Обозначение LIKE '+#39+'ТЕКИ 07.239.01.00.002-%'+#39+') AND (Станок='+#39+'Линия'+#39+')
  SS := '(Изделие LIKE ' + #39 + '%КПУ%' + #39 + ') AND (((Обозначение LIKE ' + #39 + Oboz2 + '%' + #39 + ') AND (Обозначение NOT LIKE ' + #39 + Oboz2 + '%-%' + #39 + ') ) OR (Обозначение LIKE ' + #39 + Oboz4 + '%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
   //    Обозначение,Элемент,Номер,Sum(количество) As S,Sum(колКлап) As S1  Group BY Обозначение,Элемент,Номер Order By Номер
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where %s  AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + '))  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin
    XL.ActiveWorkBook.Sheets.Item[List].Activate;
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin

      SS := ADOQuery1.FieldByName('Обозначение').AsString;
      ADOQuery2.Close;
      ADOQuery2.SQL.Clear;
      Str1 := 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')';
      ADOQuery2.SQL.Text := Str1;
      ADOQuery2.Active := True;
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 21] := Str;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
      Dl_F := StrToFloat(Str) - 5; //18.12.2018 №30-18
      Str := FloatToStr(Dl_F);
        //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      Mass := ADOQuery2.FieldByName('Масса').AsString;
      if Mass <> '' then
        Massa := StrToFloat(StringReplace(Mass, ',', '.', [rfReplaceAll]));

        //++++++++++++++++++++
      Kol_S := ADOQuery2.FieldByName('Количество').AsString;
      if Kol_S <> '' then
        kol_Det := StrToInt(Kol_S);
      Dl_F := Massa * kol_Det;
      Mass := FloatToStr(Dl_F);
      Massa_Ob := Massa_Ob + Dl_F;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 5] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 6] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 7] := ADOQuery1.FieldByName('Количество').AsString;

      Inc(XX);
      ADOQuery1.Next;
    end;
  end;
  for I := 0 to Memo26.Lines.Count - 1 do
  begin
    Inc(XX);
    Inc(YY);
  end;

  XL.ActiveWorkBook.Sheets.Item[List].Activate;
  XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
  XL.Selection.Copy;
  XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(YY)].Select;
  XL.ActiveWorkBook.Worksheets[List].Paste;
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '=SUM(D5:D' + IntToStr(YY - 1) + ')';
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4].Font.Bold := True;
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 7] := '=SUM(G5:G' + IntToStr(XX - 1) + ')';
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 7].Font.Bold := True;
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 8] := FloatToStr(Massa_Ob);
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 8] := FloatToStr(Massa_Ob * 1.1); //10%
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 6] := 'Масса металла';
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 7] := '+10%';
    //XL.ActiveWorkBook.WorkSheets[List].Cells[ XX,9]:='=SUM(I6:I'+IntToStr(XX-1)+')';
    //==================================================================================
  XL.ActiveWorkBook.WorkSheets[List].PageSetup.PrintTitleRows := '$' + IntToStr(1) + ':$' + IntToStr(4);
end;

//1,2 горизонт 3,4 Вертикал   Есть еще ВГ 342.01.00.002-горизонт(наверное надо через OR добавить)
function TForm1.Stenki_Vozd_LIN(AStr, AStr1, AStr2, Dat1, dat2, Tab1, Tab2: string; List: Integer; XL: Variant): string;
//добавить проверку в запрос  ВГ 342.01.00.001- попадет и ВГ 342.01.00.001-01-
var
  I, J, XX, YY, Cvet, Res, Res1, Kol_P, Kol1, Kol2, Q, Max1: Integer;
  S, Str, Idgp, Izdel, SS, StrDat1, StrDat2, Oboz, Kol_S, StrNom, Kol_Zap_S, Oboz21, Kol_S2, StrNom2, Kol_Zap_S2, StrDat3, Str1, SS1, SS2, Str2: string;
  XL1: Variant;
begin
   //Стенки комплект
  Q := 0;
  Result := '';
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  StrDat3 := FormatDateTime('dd.mm.yyyy', DateTimePicker3.DateTime);

  XX := 0;
  YY := 0;
                                                //КПУ                                          //КЭД                                   //  Номер, Номер,
  SS := '  AND  ((Изделие NOT LIKE ' + #39 + '%' + AStr + '%' + #39 + ') AND (Изделие NOT LIKE ' + #39 + '%' + AStr1 + '%' + #39 + ') AND (Изделие NOT LIKE ' + #39 + '%' + AStr2 + '%' + #39 + ') AND (Элемент Like ' + #39 + '%верт%' + #39 + ') AND (Элемент Like ' + #39 + 'Стенка%' + #39 + '))';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where   (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Канбан' + #39 + ') OR (Станок=' + #39 + 'Trumph' + #39 + ')) %s  ORDER BY Обозначение', ['Заготовка', SS]) then
    exit;
//======================================================
  SS := '  AND  ((Изделие NOT LIKE ' + #39 + '%' + AStr + '%' + #39 + ') AND (Изделие NOT LIKE ' + #39 + '%' + AStr1 + '%' + #39 + ') AND (Изделие NOT LIKE ' + #39 + '%' + AStr2 + '%' + #39 + ') AND (Элемент Like ' + #39 + '%гориз%' + #39 + ') AND (Элемент Like ' + #39 + 'Стенка%' + #39 + '))';
  if not mkQuerySelect1(ADOQuery2, 'Select* from %s Where   (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND((Станок=' + #39 + 'Канбан' + #39 + ') OR (Станок=' + #39 + 'Trumph' + #39 + ')) %s  ORDER BY Обозначение', ['Заготовка', SS]) then
    exit;
  Kol1 := ADOQuery1.RecordCount;
  Kol2 := ADOQuery2.RecordCount;
  if Kol1 = Kol2 then
      //Значит все ништяк = Симметрия
    Q := 1;
  XL.ActiveWorkBook.Sheets.Item[List + 1].Activate;
  Memo19.lines.clear;
  if ADOQuery1.RecordCount > ADOQuery2.RecordCount then
    Max1 := ADOQuery1.RecordCount
  else
    Max1 := ADOQuery2.RecordCount;

  if ADOQuery1.RecordCount <> 0 then
  begin
          //XL.ActiveWorkBook.Sheets.Item[List+1].Activate;
    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);
          //ЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩ
    if Cvet = 1 then
    begin
      XL.ActiveWorkBook.WorkSheets[List + 1].Range['J' + IntToStr(1) + ':J' + IntToStr(7)].Interior.Color := 3010538; //Желтый
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[2, 12] := ' Жел';
    end;
    if Cvet = 2 then
    begin
      XL.ActiveWorkBook.WorkSheets[List + 1].Range['J' + IntToStr(1) + ':J' + IntToStr(7)].Interior.Color := 6877993; //Зеленый
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[2, 12] := ' Зел';
    end;
    if Cvet = 3 then
    begin
      XL.ActiveWorkBook.WorkSheets[List + 1].Range['J' + IntToStr(1) + ':J' + IntToStr(7)].Interior.Color := 16424058; //Синий
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[2, 12] := ' Син';
    end;
      //ЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩ
    XL.ActiveWorkBook.Worksheets[List + 1].Range['I1:N6'].Select;
    XL.Selection.Copy;
    for J := 0 to Max1 - 1 do
    begin
      XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX + 8)].Select;
      XL.ActiveWorkBook.Worksheets[List + 1].Paste;
      XX := XX + 7;
    end;
    XX := 0;
    for J := 0 to Max1 - 1 do
    begin
      Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      StrNom := ADOQuery1.FieldByName('Номер').AsString;
      Kol_Zap_S := ADOQuery1.FieldByName('КолКлап').AsString;

      Oboz21 := ADOQuery2.FieldByName('Обозначение').AsString;
      Kol_S2 := ADOQuery2.FieldByName('Количество').AsString;
      StrNom2 := ADOQuery2.FieldByName('Номер').AsString;
      Kol_Zap_S2 := ADOQuery2.FieldByName('КолКлап').AsString;

      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 3] := (StrNom);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 5] := StrDat3;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 1] := Oboz;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 2] := Kol_S;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 6] := Kol_Zap_S;

      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 3] := Oboz21;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 4] := Kol_S2;

      XX := XX + 7;
      ADOQuery1.Next;
      ADOQuery2.Next;
    end;

  end;

  YY := 5;
  XX := 5;
  ADOQuery1.First;
  ADOQuery2.First;
  if ADOQuery1.RecordCount <> 0 then
  begin

    XL.ActiveWorkBook.Sheets.Item[List].Activate;

    XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
    XL.Selection.Copy;
    for J := 6 to ADOQuery1.RecordCount + 10 do
    begin
      XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(J)].Select;
      XL.ActiveWorkBook.Worksheets[List].Paste;
    end;

    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 3] := 'Задание  на ' + StrDat3;

    if Cvet = 1 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 3010538; //Желтый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Жел';
    end;
    if Cvet = 2 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 6877993; //Зеленый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Зел';
    end;
    if Cvet = 3 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 16424058; //Синий
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Син';
    end;
      //-------------------------------------------------------------
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin

      if J = 0 then
      begin
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := 'Стенка Горизонтальная';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := '';
        Inc(XX);
      end;
        //StringReplace(XL.ActiveWorkBook.WorkSheets[List].Cells[ XX-1,3],',','.',[rfReplaceAll]);
      SS := ADOQuery1.FieldByName('Обозначение').AsString;
      if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')', []) then
        Exit;

      Str := ADOQuery4.FieldByName('ДлинаРазв').AsString;
      if J > 2 then
      begin
            //Проверяем если следующее обозначение новое, ставим СУММ для предыдущих
        Str1 := StringReplace(XL.ActiveWorkBook.WorkSheets[List].Cells[XX - 1, 3], ',', '.', [rfReplaceAll]); //XL.ActiveWorkBook.WorkSheets[List].Cells[ XX-1,3];
        Res := AnsiCompareStr(Str, Str1);
        if Res <> 0 then
        begin
          for I := XX - 1 downto 1 do
          begin
            Str2 := XL.ActiveWorkBook.WorkSheets[List].Cells[I, 3];
            if Str2 = '' then
            begin
              XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '=SUM(D' + IntToStr(I + 1) + ':D' + IntToStr(XX - 1) + ')';
              XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4].Font.Bold := True;

              Inc(XX);
              XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
              XL.Selection.Copy;
              XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
              XL.ActiveWorkBook.Worksheets[List].Paste;
              Break;
            end;
          end;
        end;
      end;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := IntToStr(J + 1);
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Str; // SS+' '+S
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := ADOQuery1.FieldByName('Количество').AsString;
      Inc(XX);

      ADOQuery1.Next;
      if J = ADOQuery1.RecordCount - 1 then
      begin
        for I := XX - 1 downto 1 do
        begin
          Str2 := XL.ActiveWorkBook.WorkSheets[List].Cells[I, 3];
          if Str2 = '' then
          begin
            XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '=SUM(D' + IntToStr(I + 1) + ':D' + IntToStr(XX - 1) + ')';
            XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4].Font.Bold := True;
            Inc(XX);
            XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
            XL.Selection.Copy;
            XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
            XL.ActiveWorkBook.Worksheets[List].Paste;
            Break;
          end;
        end;
      end;
    end;
  end;

  if ADOQuery2.RecordCount <> 0 then
  begin

    for J := 0 to ADOQuery2.RecordCount - 1 do
    begin
      if J = 0 then
      begin

        XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 5] := 'Стенка Вертикальная';
        XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 6] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 7] := '';
        Inc(YY);
      end;

      SS2 := ADOQuery2.FieldByName('Обозначение').AsString;
      if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS2 + #39 + ')', []) then
        Exit;
      Str := ADOQuery4.FieldByName('ДлинаРазв').AsString;
      if J > 2 then
      begin
            //Проверяем если следующее обозначение новое, ставим СУММ для предыдущих   StringReplace(XL.ActiveWorkBook.WorkSheets[List].Cells[ XX-1,3],',','.',[rfReplaceAll]);

        Str1 := StringReplace(XL.ActiveWorkBook.WorkSheets[List].Cells[YY - 1, 6], ',', '.', [rfReplaceAll]);
        Res1 := AnsiCompareStr(Str1, Str);
        if Res1 <> 0 then
        begin
          for I := YY - 1 downto 1 do
          begin
            Str2 := XL.ActiveWorkBook.WorkSheets[List].Cells[I, 5];
            if Str2 = '' then
            begin
              XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 7] := '=SUM(G' + IntToStr(I + 1) + ':G' + IntToStr(YY - 1) + ')';
              XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 7].Font.Bold := True;
              Inc(YY);
              Break;
            end;
          end;
        end;
      end;

      XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 5] := ADOQuery2.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 6] := Str;  //SS2+'  '+
      XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 7] := ADOQuery2.FieldByName('Количество').AsString;
      Inc(YY);
      ADOQuery2.Next;
      if J = ADOQuery2.RecordCount - 1 then
      begin
        for I := YY - 1 downto 1 do
        begin
          Str2 := XL.ActiveWorkBook.WorkSheets[List].Cells[I, 5];
          if Str2 = '' then
          begin
            XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 7] := '=SUM(G' + IntToStr(I + 1) + ':G' + IntToStr(YY - 1) + ')';
            XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 7].Font.Bold := True;
            Inc(YY);
            Break;
          end;
        end;
      end;
    end;
  end;
  //===================Кол накладных          AND (Станок='+#39+'Линия'+#39+')
  SS := '((Изделие NOT LIKE ' + #39 + '%' + AStr + '%' + #39 + ') AND (Изделие NOT LIKE ' + #39 + '%' + AStr1 + '%' + #39 + ') AND (Изделие NOT LIKE ' + #39 + '%' + AStr2 + '%' + #39 + '))  AND (Элемент Like ' + #39 + 'Стенка%' + #39 + ')';
  if not mkQuerySelect(ADOQuery1, 'Select DISTINCT Номер  from %s Where %s AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') ', ['Заготовка', SS]) then
    exit;
  Kol_P := ADOQuery1.recordCount; //ADOQuery1.FieldByName('S1').AsInteger; Кол ПОДДОНОВ
  XL.ActiveWorkBook.WorkSheets[List].Cells[2, 6] := 'Кол-во поддонов ' + IntToStr(Kol_P);
  XL.ActiveWorkBook.WorkSheets[List].PageSetup.PrintTitleRows := '$' + IntToStr(1) + ':$' + IntToStr(5);
end;
//

function TForm1.Lopatka_LIN(AStr, AStr1, AStr2, AStr3: string; List: Integer; XL: Variant): string;
//добавить проверку в запрос  ВГ 342.01.00.001- попадет и ВГ 342.01.00.001-01-
var
  I, J, XX, YY, Cvet, Res, Res1, Kol_P, Kol1, Kol2, Q, Max1: Integer;
  S, Str, Idgp, Izdel, SS, StrDat1, StrDat2, Oboz, Kol_S, StrNom, Kol_Zap_S, Oboz21, Kol_S2, StrNom2, Kol_Zap_S2, StrDat3, Str1, SS1, SS2, Str2: string;
  XL1: Variant;
begin
   //Стенки комплект
  Q := 0;
  Result := '';
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  StrDat3 := FormatDateTime('dd.mm.yyyy', DateTimePicker3.DateTime);

  XX := 0;
  YY := 0;
                                                                                                                             //  Номер, Номер,
  SS := '  AND  ((Обозначение LIKE ' + #39 + 'ВГ 050.00.00.003-%' + #39 + '))';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where   (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Канбан' + #39 + ') OR (Станок=' + #39 + 'Trumph' + #39 + ')) %s  ORDER BY Обозначение', ['Заготовка', SS]) then
    exit;
//======================================================

  Kol1 := ADOQuery1.RecordCount;

  if ADOQuery1.RecordCount <> 0 then
  begin
    XL.ActiveWorkBook.Sheets.Item[List + 1].Activate;
    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);
          //ЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩ
    if Cvet = 1 then
    begin
      XL.ActiveWorkBook.WorkSheets[List + 1].Range['J' + IntToStr(1) + ':J' + IntToStr(7)].Interior.Color := 3010538; //Желтый
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[2, 12] := ' Жел';
    end;
    if Cvet = 2 then
    begin
      XL.ActiveWorkBook.WorkSheets[List + 1].Range['J' + IntToStr(1) + ':J' + IntToStr(7)].Interior.Color := 6877993; //Зеленый
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[2, 12] := ' Зел';
    end;
    if Cvet = 3 then
    begin
      XL.ActiveWorkBook.WorkSheets[List + 1].Range['J' + IntToStr(1) + ':J' + IntToStr(7)].Interior.Color := 16424058; //Синий
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[2, 12] := ' Син';
    end;
      //ЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩ
    XL.ActiveWorkBook.Worksheets[List + 1].Range['I1:N6'].Select;
    XL.Selection.Copy;
    for J := 0 to Max1 - 1 do
    begin
      XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX + 8)].Select;
      XL.ActiveWorkBook.Worksheets[List + 1].Paste;
      XX := XX + 7;
    end;
    XX := 0;
    for J := 0 to Kol1 - 1 do
    begin
      Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      StrNom := ADOQuery1.FieldByName('Номер').AsString;
      Kol_Zap_S := ADOQuery1.FieldByName('КолКлап').AsString;

      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 3] := (StrNom);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 5] := StrDat3;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 1] := Oboz;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 2] := Kol_S;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 6] := Kol_Zap_S;

      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 3] := Oboz21;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 4] := Kol_S2;

      XX := XX + 7;
      ADOQuery1.Next;
    end;

  end;

  YY := 5;
  XX := 5;
  ADOQuery1.First;
  ADOQuery2.First;
  if ADOQuery1.RecordCount <> 0 then
  begin

    XL.ActiveWorkBook.Sheets.Item[List].Activate;

    XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
    XL.Selection.Copy;
    for J := 6 to ADOQuery1.RecordCount + 10 do
    begin
      XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(J)].Select;
      XL.ActiveWorkBook.Worksheets[List].Paste;
    end;

    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 3] := 'Задание  на ' + StrDat3;

    if Cvet = 1 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 3010538; //Желтый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Жел';
    end;
    if Cvet = 2 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 6877993; //Зеленый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Зел';
    end;
    if Cvet = 3 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 16424058; //Синий
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Син';
    end;
      //-------------------------------------------------------------
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      if J = 0 then
      begin
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := 'Лопатка';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := '';
        Inc(XX);
      end;

      SS := ADOQuery1.FieldByName('Обозначение').AsString;
      if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')', []) then
        Exit;

      Str := ADOQuery4.FieldByName('ДлинаРазв').AsString;
      if J > 2 then
      begin
            //Проверяем если следующее обозначение новое, ставим СУММ для предыдущих StringReplace(XL.ActiveWorkBook.WorkSheets[List].Cells[ XX-1,3],',','.',[rfReplaceAll]);
        Str1 := StringReplace(XL.ActiveWorkBook.WorkSheets[List].Cells[XX - 1, 3], ',', '.', [rfReplaceAll]);
        Res := AnsiCompareStr(Str, Str1);
        if Res <> 0 then
        begin
          for I := XX - 1 downto 1 do
          begin
            Str := XL.ActiveWorkBook.WorkSheets[List].Cells[I, 3];
            if Str = '' then
            begin
              XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '=SUM(D' + IntToStr(I + 1) + ':D' + IntToStr(XX - 1) + ')';
              XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4].Font.Bold := True;
              Inc(XX);
              Break;
            end;
          end;
        end;
      end;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := IntToStr(J + 1);
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := ADOQuery1.FieldByName('Количество').AsString;
      Inc(XX);
      ADOQuery1.Next;
      if J = ADOQuery1.RecordCount - 1 then
      begin
        for I := XX - 1 downto 1 do
        begin
          Str := XL.ActiveWorkBook.WorkSheets[List].Cells[I, 3];
          if Str = '' then
          begin
            XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '=SUM(D' + IntToStr(I + 1) + ':D' + IntToStr(XX - 1) + ')';
            XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4].Font.Bold := True;
            Inc(XX);
            Break;
          end;
        end;
      end;
    end;
  end;



  //===================Кол накладных          AND (Станок='+#39+'Линия'+#39+')
  SS := '(Обозначение LIKE ' + #39 + 'ВГ 050.00.00.003-%' + #39 + ')';
  if not mkQuerySelect(ADOQuery1, 'Select DISTINCT Номер  from %s Where %s AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') ', ['Заготовка', SS]) then
    exit;
  Kol_P := ADOQuery1.recordCount; //ADOQuery1.FieldByName('S1').AsInteger; Кол ПОДДОНОВ
  XL.ActiveWorkBook.WorkSheets[List].Cells[2, 6] := 'Кол-во поддонов ' + IntToStr(Kol_P);
  XL.ActiveWorkBook.WorkSheets[List].PageSetup.PrintTitleRows := '$' + IntToStr(1) + ':$' + IntToStr(5);
end;
//

function TForm1.Stenki_KED_LIN(AStr, Oboz1, Oboz2, Oboz2_1, Oboz3, Oboz4, Dat1, dat2, Tab1, Tab2: string; List: Integer; XL: Variant): string;
//добавить проверку в запрос  ВГ 342.01.00.001- попадет и ВГ 342.01.00.001-01-
var
  I, J, XX, YY, Cvet, Res, Res1, Kol_P, Kol1, Kol2, Q, Max1: Integer;
  S, Str, Idgp, Izdel, SS, StrDat1, StrDat2, Oboz, Kol_S, StrNom, Kol_Zap_S, Oboz21, Kol_S2, StrNom2, Kol_Zap_S2, StrDat3, Str1, SS1, SS2, Str2: string;
  XL1: Variant;
begin
   //Стенки комплект
  Q := 0;
  Result := '';
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  StrDat3 := FormatDateTime('dd.mm.yyyy', DateTimePicker3.DateTime);

  XX := 0;
  YY := 0;
                                                                                                                             //  Номер, Номер,
  SS := '  AND  ((Изделие LIKE ' + #39 + '%' + AStr + '%' + #39 + ') AND (Элемент Like ' + #39 + '%верт%' + #39 + ') AND (Элемент Like ' + #39 + 'Стенка%' + #39 + '))';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where   (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Канбан' + #39 + ') OR (Станок=' + #39 + 'Trumph' + #39 + ')) %s  ORDER BY Обозначение', ['Заготовка', SS]) then
    exit;
//======================================================
  SS := '  AND  ((Изделие LIKE ' + #39 + '%' + AStr + '%' + #39 + ') AND (Элемент Like ' + #39 + '%гориз%' + #39 + ') AND (Элемент Like ' + #39 + 'Стенка%' + #39 + '))';
  if not mkQuerySelect1(ADOQuery2, 'Select* from %s Where   (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND((Станок=' + #39 + 'Канбан' + #39 + ') OR (Станок=' + #39 + 'Trumph' + #39 + ')) %s  ORDER BY Обозначение', ['Заготовка', SS]) then
    exit;
  Kol1 := ADOQuery1.RecordCount;
  Kol2 := ADOQuery2.RecordCount;
  if Kol1 = Kol2 then
      //Значит все ништяк = Симметрия
    Q := 1;
  XL.ActiveWorkBook.Sheets.Item[List + 1].Activate;
  Memo19.lines.clear;
  if ADOQuery1.RecordCount > ADOQuery2.RecordCount then
    Max1 := ADOQuery1.RecordCount
  else
    Max1 := ADOQuery2.RecordCount;

  if ADOQuery1.RecordCount <> 0 then
  begin
          //XL.ActiveWorkBook.Sheets.Item[List+1].Activate;
    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);
          //ЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩ
    if Cvet = 1 then
    begin
      XL.ActiveWorkBook.WorkSheets[List + 1].Range['J' + IntToStr(1) + ':J' + IntToStr(7)].Interior.Color := 3010538; //Желтый
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[2, 12] := ' Жел';
    end;
    if Cvet = 2 then
    begin
      XL.ActiveWorkBook.WorkSheets[List + 1].Range['J' + IntToStr(1) + ':J' + IntToStr(7)].Interior.Color := 6877993; //Зеленый
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[2, 12] := ' Зел';
    end;
    if Cvet = 3 then
    begin
      XL.ActiveWorkBook.WorkSheets[List + 1].Range['J' + IntToStr(1) + ':J' + IntToStr(7)].Interior.Color := 16424058; //Синий
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[2, 12] := ' Син';
    end;
      //ЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩ
    XL.ActiveWorkBook.Worksheets[List + 1].Range['I1:N6'].Select;
    XL.Selection.Copy;
    for J := 0 to Max1 - 1 do
    begin
      XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX + 8)].Select;
      XL.ActiveWorkBook.Worksheets[List + 1].Paste;
      XX := XX + 7;
    end;
    XX := 0;
    for J := 0 to Max1 - 1 do
    begin
      Oboz := ADOQuery1.FieldByName('Обозначение').AsString;

      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      StrNom := ADOQuery1.FieldByName('Номер').AsString;
      Kol_Zap_S := ADOQuery1.FieldByName('КолКлап').AsString;

      Oboz21 := ADOQuery2.FieldByName('Обозначение').AsString;
      Kol_S2 := ADOQuery2.FieldByName('Количество').AsString;
      StrNom2 := ADOQuery2.FieldByName('Номер').AsString;
      Kol_Zap_S2 := ADOQuery2.FieldByName('КолКлап').AsString;

      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 3] := (StrNom);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 5] := StrDat3;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 1] := Oboz;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 2] := Kol_S;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 6] := Kol_Zap_S;

      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 3] := Oboz21;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 4] := Kol_S2;

      XX := XX + 7;
      ADOQuery1.Next;
      ADOQuery2.Next;
    end;

  end;

  YY := 5;
  XX := 5;
  ADOQuery1.First;
  ADOQuery2.First;
  if ADOQuery1.RecordCount <> 0 then
  begin

    XL.ActiveWorkBook.Sheets.Item[List].Activate;

    XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
    XL.Selection.Copy;
    for J := 6 to ADOQuery1.RecordCount + 10 do
    begin
      XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(J)].Select;
      XL.ActiveWorkBook.Worksheets[List].Paste;
    end;

    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 3] := 'Задание  на ' + StrDat3;

    if Cvet = 1 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 3010538; //Желтый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Жел';
    end;
    if Cvet = 2 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 6877993; //Зеленый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Зел';
    end;
    if Cvet = 3 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 16424058; //Синий
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Син';
    end;
      //-------------------------------------------------------------
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      if J = 0 then
      begin
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := 'Стенка Горизонтальная';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := '';
        Inc(XX);
      end;

      SS := ADOQuery1.FieldByName('Обозначение').AsString;
      if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')', []) then
        Exit;

      Str := ADOQuery4.FieldByName('ДлинаРазв').AsString;
      if J > 2 then
      begin
            //Проверяем если следующее обозначение новое, ставим СУММ для предыдущихStringReplace(sg3.Cells[9,A],',','.',[rfReplaceAll]);
        Str1 := StringReplace(XL.ActiveWorkBook.WorkSheets[List].Cells[XX - 1, 3], ',', '.', [rfReplaceAll]);
        Res := AnsiCompareStr(Str1, Str);
        if Res <> 0 then
        begin
          for I := XX - 1 downto 1 do
          begin
            Str1 := XL.ActiveWorkBook.WorkSheets[List].Cells[I, 3];
            if Str1 = '' then
            begin
              XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '=SUM(D' + IntToStr(I + 1) + ':D' + IntToStr(XX - 1) + ')';
              XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4].Font.Bold := True;
              Inc(XX);
              Break;
            end;
          end;
        end;
      end;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := IntToStr(J + 1);
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := ADOQuery1.FieldByName('Количество').AsString;
      Inc(XX);
      ADOQuery1.Next;
      if J = ADOQuery1.RecordCount - 1 then
      begin
        for I := XX - 1 downto 1 do
        begin
          Str1 := XL.ActiveWorkBook.WorkSheets[List].Cells[I, 3];
          if Str1 = '' then
          begin
            XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '=SUM(D' + IntToStr(I + 1) + ':D' + IntToStr(XX - 1) + ')';
            XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4].Font.Bold := True;
            Inc(XX);
            Break;
          end;
        end;
      end;
    end;
  end;

  if ADOQuery2.RecordCount <> 0 then
  begin

    for J := 0 to ADOQuery2.RecordCount - 1 do
    begin
      if J = 0 then
      begin

        XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 5] := 'Стенка Вертикальная';
        XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 6] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 7] := '';
        Inc(YY);
      end;

      SS2 := ADOQuery2.FieldByName('Обозначение').AsString;
      if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS2 + #39 + ')', []) then
        Exit;
      Str := ADOQuery4.FieldByName('ДлинаРазв').AsString;
      if J > 2 then
      begin
            //Проверяем если следующее обозначение новое, ставим СУММ для предыдущих  StringReplace(XL.ActiveWorkBook.WorkSheets[List].Cells[ XX-1,3],',','.',[rfReplaceAll]);

        Str2 := StringReplace(XL.ActiveWorkBook.WorkSheets[List].Cells[YY - 1, 6], ',', '.', [rfReplaceAll]);
        Res1 := AnsiCompareStr(Str2, Str);
        if Res1 <> 0 then
        begin
          for I := YY - 1 downto 1 do
          begin
            Str2 := XL.ActiveWorkBook.WorkSheets[List].Cells[I, 5];
            if Str2 = '' then
            begin
              XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 7] := '=SUM(G' + IntToStr(I + 1) + ':G' + IntToStr(YY - 1) + ')';
              XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 7].Font.Bold := True;
              Inc(YY);
              Break;
            end;
          end;
        end;
      end;

      XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 5] := ADOQuery2.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 6] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 7] := ADOQuery2.FieldByName('Количество').AsString;
      Inc(YY);
      ADOQuery2.Next;
      if J = ADOQuery2.RecordCount - 1 then
      begin
        for I := YY - 1 downto 1 do
        begin
          Str := XL.ActiveWorkBook.WorkSheets[List].Cells[I, 5];
          if Str = '' then
          begin
            XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 7] := '=SUM(G' + IntToStr(I + 1) + ':G' + IntToStr(YY - 1) + ')';
            XL.ActiveWorkBook.WorkSheets[List].Cells[YY, 7].Font.Bold := True;
            Inc(YY);
            Break;
          end;
        end;
      end;
    end;
  end;
  //===================Кол накладных          AND (Станок='+#39+'Линия'+#39+')
  SS := '(Изделие LIKE ' + #39 + '%' + AStr + '%' + #39 + ')  AND (Элемент Like ' + #39 + 'Стенка%' + #39 + ')';
  if not mkQuerySelect(ADOQuery1, 'Select DISTINCT Номер  from %s Where %s AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') ', ['Заготовка', SS]) then
    exit;
  Kol_P := ADOQuery1.recordCount; //ADOQuery1.FieldByName('S1').AsInteger; Кол ПОДДОНОВ
  XL.ActiveWorkBook.WorkSheets[List].Cells[2, 6] := 'Кол-во поддонов ' + IntToStr(Kol_P);
  XL.ActiveWorkBook.WorkSheets[List].PageSetup.PrintTitleRows := '$' + IntToStr(1) + ':$' + IntToStr(5);
end;
////

function TForm1.Stenki_KED06(AStr, Oboz1, Oboz2, Oboz2_1, Oboz3, Oboz4, Oboz5, Oboz6, Tab1, Tab2: string; List: Integer; XL: Variant): string;
//добавить проверку в запрос  ВГ 342.01.00.001- попадет и ВГ 342.01.00.001-01-
//ВГ 451.01.00.001- попадет и ВГ 451.01.00.001-01-
var
  I, J, XX, YY, Cvet, Res, Kol_P, Kol_Det: Integer;
  Dl_F, Massa, massa_Ob: Double;
  S, Str, StrNom, Idgp, Izdel, Kol_Zap_S, SS, StrDat1, StrDat2, Oboz, Kol_S, StrDat3, Str1, Mass: string;
  XL1: Variant;
begin
{   Stenki_KED(SS,Горизонт 'ВГ 342.06.00.003-','ВГ 342.06.00.004-','ВГ 342.06.00.002-',
  'Вертикаль ВГ 342.06.00.001-','ВГ 342.06.00.001-01-','','',SS,SS,12, XL);}
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
   //Стенки комплект
  Result := '';
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  StrDat3 := FormatDateTime('dd.mm.yyyy', DateTimePicker3.DateTime);

  XX := 0;
  YY := 0;
  SS := '(Изделие LIKE ' + #39 + '%КЭД%' + #39 + ')  AND ((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') OR (Обозначение LIKE ' + #39 + Oboz2 + '%' + #39 + ') or (Обозначение LIKE ' + #39 + Oboz2_1 + '%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  if not mkQuerySelect(ADOQuery1, 'Select DISTINCT Номер  from %s Where %s AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') ', ['Заготовка', SS]) then
    exit;

  if ADOQuery1.RecordCount <> 0 then
  begin
    XL.ActiveWorkBook.Sheets.Item[List + 1].Activate;
    XL.ActiveWorkBook.Worksheets[List + 1].Range['I1:N6'].Select;
    XL.Selection.Copy;
    XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX + 8)].Select;
    XL.ActiveWorkBook.Worksheets[List + 1].Paste;
    XX := XX + 7;
  end;
  SS := '  AND ((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') AND (Изделие LIKE ' + #39 + '%КЭД%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') ';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where   (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ')  AND ((Станок=' + #39 + 'Линия' + #39 + ')) %s  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;

  XX := 0;
  if ADOQuery1.RecordCount <> 0 then
  begin
          //XL.ActiveWorkBook.Sheets.Item[List+1].Activate;
    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      StrNom := ADOQuery1.FieldByName('Номер').AsString;
      Kol_Zap_S := ADOQuery1.FieldByName('КолКлап').AsString;
      if J <> ADOQuery1.RecordCount - 1 then
      begin
        XL.ActiveWorkBook.Worksheets[List + 1].Range['I1:N6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX + 8)].Select;
        XL.ActiveWorkBook.Worksheets[List + 1].Paste;
      end;

      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 3] := (StrNom);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 5] := StrDat3;
      Res := Pos('-', Oboz);
      if Res <> 0 then
        Delete(Oboz, 1, Res);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 1] := Oboz;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 2] := Kol_S;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 6] := Kol_Zap_S;
      XX := XX + 7;
      ADOQuery1.Next;
    end;
  end;
     // XX:=XX-7;
  SS := '  AND ((Обозначение LIKE ' + #39 + Oboz2 + '%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') ';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ')  AND ((Станок=' + #39 + 'Линия' + #39 + ')) %s  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;

  if ADOQuery1.RecordCount <> 0 then
  begin
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      StrNom := ADOQuery1.FieldByName('Номер').AsString;
      Kol_Zap_S := ADOQuery1.FieldByName('КолКлап').AsString;
      if J <> ADOQuery1.RecordCount - 1 then
      begin
        XL.ActiveWorkBook.Worksheets[List + 1].Range['I1:N6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX + 8)].Select;
        XL.ActiveWorkBook.Worksheets[List + 1].Paste;
      end;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 3] := (StrNom);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 5] := StrDat3;
      Res := Pos('-', Oboz);
      if Res <> 0 then
        Delete(Oboz, 1, Res);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 1] := Oboz;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 2] := Kol_S;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 6] := Kol_Zap_S;
      XX := XX + 7;
      ADOQuery1.Next;
    end;
  end;
     //ЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗ
  SS := '  AND ((Обозначение LIKE ' + #39 + Oboz2_1 + '%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') ';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ')  AND ((Станок=' + #39 + 'Линия' + #39 + ')) %s  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;

  if ADOQuery1.RecordCount <> 0 then
  begin
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      StrNom := ADOQuery1.FieldByName('Номер').AsString;
      Kol_Zap_S := ADOQuery1.FieldByName('КолКлап').AsString;
      if J <> ADOQuery1.RecordCount - 1 then
      begin
        XL.ActiveWorkBook.Worksheets[List + 1].Range['I1:N6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX + 8)].Select;
        XL.ActiveWorkBook.Worksheets[List + 1].Paste;
      end;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 3] := (StrNom);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 5] := StrDat3;
      Res := Pos('-', Oboz);
      if Res <> 0 then
        Delete(Oboz, 1, Res);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 1] := Oboz;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 2] := Kol_S;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 6] := Kol_Zap_S;
      XX := XX + 7;
      ADOQuery1.Next;
    end;
  end;
      //ЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩ
  if Cvet = 1 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 3010538; //Желтый
      //XL.ActiveWorkBook.WorkSheets[List+1].Cells[ 2,6] := ' Жел';
  end;
  if Cvet = 2 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 6877993; //Зеленый
      //XL.ActiveWorkBook.WorkSheets[List+1].Cells[ 2,6] := ' Зел';
  end;
  if Cvet = 3 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 16424058; //Синий
      //XL.ActiveWorkBook.WorkSheets[List+1].Cells[ 2,6] := ' Син';
  end;
      //ЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩ
      //Верт      Stenki_KED06(SS,'ВГ 342.06.00.003-','ВГ 342.06.00.004-','ВГ 342.06.00.002-',
  //'ВГ 342.06.00.001-','ВГ 342.06.00.001-01-','','',SS,SS,12, XL);
  SS := '  AND ((Обозначение LIKE ' + #39 + Oboz3 + '%' + #39 + ') AND (Обозначение NOT LIKE ' + #39 + Oboz3 + '%-01' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') ';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where   (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ')) %s  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;

  if ADOQuery1.RecordCount <> 0 then
  begin
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      StrNom := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.Sheets.Item[List + 1].Activate;
      Res := Pos('-', Oboz);
      if Res <> 0 then
        Delete(Oboz, 1, Res);
      if (XX=YY) or (XX<YY) then
      begin
        XL.ActiveWorkBook.Worksheets[List + 1].Range['I1:N6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(YY + 1)].Select;
        XL.ActiveWorkBook.Worksheets[List + 1].Paste;
      end;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[YY + 4, 3] := Oboz;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[YY + 4, 4] := Kol_S;
      YY := YY + 7;
      ADOQuery1.Next;
    end;
  end;
      {  Stenki_KED(SS,'ВГ 342.01.00.003-','ВГ 342.01.00.004-','ВГ 342.01.00.002-',
  'ВГ 342.01.00.001-','ВГ 342.01.00.001-01-','ВГ 451.01.00.001-','ВГ 451.01.00.001-01',SS,SS,6, XL);}
      //---------------------------------------------------
  SS := '  AND ((Обозначение LIKE ' + #39 + Oboz3 + '%-01' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') ';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ')) %s   ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      XL.ActiveWorkBook.Sheets.Item[List + 1].Activate;

      Res := Pos('-', Oboz);
      if Res <> 0 then
        Delete(Oboz, 1, Res);
      if (XX=YY) or (XX<YY) then
      begin
        XL.ActiveWorkBook.Worksheets[List + 1].Range['I1:N6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(YY + 1)].Select;
        XL.ActiveWorkBook.Worksheets[List + 1].Paste;
      end;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[YY + 4, 3] := Oboz;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[YY + 4, 4] := Kol_S;
      YY := YY + 7;
      ADOQuery1.Next;
    end;
  end;
      //---------------------------------------------------
//ОООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООО
  //Стенки   Горизонтальная  04
  SS := '(Изделие LIKE ' + #39 + '%КЭД%' + #39 + ') AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  %s AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') ', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);
  //===================Кол накладных          AND (Станок='+#39+'Линия'+#39+')AND ((Обозначение LIKE '+#39+Oboz1+'%'+#39+') )
  SS := '(Изделие LIKE ' + #39 + '%КЭД%' + #39 + ')  AND ((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') OR (Обозначение LIKE ' + #39 + Oboz2 + '%' + #39 + ') or (Обозначение LIKE ' + #39 + Oboz2_1 + '%' + #39 + ') or (Обозначение LIKE ' + #39 + Oboz3 + '%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  if not mkQuerySelect(ADOQuery1, 'Select DISTINCT Номер  from %s Where %s AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') ', ['Заготовка', SS]) then
    exit;
  Kol_P := ADOQuery1.recordCount; //ADOQuery1.FieldByName('S1').AsInteger; Кол ПОДДОНОВ
  StrDat3 := FormatDateTime('dd.mm.yyyy ', DateTimePicker1.DateTime);
  if ADOQuery1.RecordCount <> 0 then
  begin
    XL.ActiveWorkBook.Sheets.Item[List].Activate;
    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 3] := 'Задание  на ' + StrDat3;
    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 6] := 'Кол-во поддонов ';
    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 7] := IntToStr(Kol_P);
  end;
  massa_Ob := 0;
  XX := 5;
  //Memo9.Lines.Clear;
   //OR (Обозначение LIKE '+#39+'ТЕКИ 07.239.01.00.002-%'+#39+') AND (Станок='+#39+'Линия'+#39+')
  SS := '(Изделие LIKE ' + #39 + '%КЭД%' + #39 +
  ') AND ((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') AND (NOT Обозначение LIKE ' + #39 + Oboz1 + '%-01' + #39 + ') ) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  //Обозначение,Номер,Элемент,Sum(количество) As S,Sum(колКлап) As S1  Group BY Обозначение,Элемент,Номер Order By Номер
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where %s  AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ')) ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;

  if ADOQuery1.RecordCount <> 0 then
  begin
    if Cvet = 1 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 3010538; //Желтый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Жел';
    end;
    if Cvet = 2 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 6877993; //Зеленый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Зел';
    end;
    if Cvet = 3 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 16424058; //Синий
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Син';
    end;
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      if J <> ADOQuery1.RecordCount then
      begin
        XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
        XL.ActiveWorkBook.Worksheets[List].Paste;
      end;
      if J = 0 then
      begin
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := 'Горизонт';
        //XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Oboz1 + 'A  Пр №1';   Булаев 15.09.22
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Oboz1 + 'A  Пр №2';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := '';
        Inc(XX);
      end;

      SS := ADOQuery1.FieldByName('Обозначение').AsString;

      ADOQuery2.Close;
      ADOQuery2.SQL.Clear;   //ВГ 451.03.00.001-350-01
      Str1 := 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')';
      ADOQuery2.SQL.Text := Str1;
      ADOQuery2.Active := True;
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 21] := Str;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
     { Res := Pos('-01', SS);
      if Res<>0 then
      Begin
         Str:=Str+'-01 Пр №2';
      End
      Else
         Str:=Str+' Пр №1'; }

        //Dl_F:=StrToFloat(Str)+2.5;  //18.12.2018(2.5)  02.07.2019(0.5)
        //Dl_F:=StrToFloat(Str)+0.5;  //18.12.2018(2.5)  02.07.2019(0.5)
        //Str:=FloatToStr(Dl_F);
        //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      Mass := ADOQuery2.FieldByName('Масса').AsString;
      if Mass <> '' then
        Massa := StrToFloat(StringReplace(Mass, ',', '.', [rfReplaceAll]));

        //++++++++++++++++++++
      Kol_S := ADOQuery2.FieldByName('Количество').AsString;
      if Kol_S <> '' then
        Kol_Det := StrToInt(Kol_S);
      Dl_F := Massa * Kol_Det;
      Mass := FloatToStr(Dl_F);
      massa_Ob := massa_Ob + Dl_F;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := IntToStr(J + 1);
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := ADOQuery1.FieldByName('Количество').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := ADOQuery1.FieldByName('КолКлап').AsString;
      Inc(XX);
      ADOQuery1.Next;
    end;
  end;

///
  SS := '(Изделие LIKE ' + #39 + '%КЭД%' + #39 +
  ') AND (( Обозначение LIKE ' + #39 + Oboz1 + '%-01' + #39 + ') ) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  //Обозначение,Номер,Элемент,Sum(количество) As S,Sum(колКлап) As S1  Group BY Обозначение,Элемент,Номер Order By Номер
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where %s  AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ')) ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;

  if ADOQuery1.RecordCount <> 0 then
  begin
    if Cvet = 1 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 3010538; //Желтый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Жел';
    end;
    if Cvet = 2 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 6877993; //Зеленый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Зел';
    end;
    if Cvet = 3 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 16424058; //Синий
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Син';
    end;
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      if J <> ADOQuery1.RecordCount then
      begin
        XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
        XL.ActiveWorkBook.Worksheets[List].Paste;
      end;
      if J = 0 then
      begin
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := 'Горизонт';
       // XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Oboz1 + 'A-01 Пр №2';     Булаев 15.09.22
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Oboz1 + 'A-01 Пр №1';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := '';
        Inc(XX);
      end;

      SS := ADOQuery1.FieldByName('Обозначение').AsString;

      ADOQuery2.Close;
      ADOQuery2.SQL.Clear;   //ВГ 451.03.00.001-350-01
      Str1 := 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')';
      ADOQuery2.SQL.Text := Str1;
      ADOQuery2.Active := True;
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 21] := Str;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
     { Res := Pos('-01', SS);
      if Res<>0 then
      Begin
         Str:=Str+'-01 Пр №2';
      End
      Else
         Str:=Str+' Пр №1'; }

        //Dl_F:=StrToFloat(Str)+2.5;  //18.12.2018(2.5)  02.07.2019(0.5)
        //Dl_F:=StrToFloat(Str)+0.5;  //18.12.2018(2.5)  02.07.2019(0.5)
        //Str:=FloatToStr(Dl_F);
        //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      Mass := ADOQuery2.FieldByName('Масса').AsString;
      if Mass <> '' then
        Massa := StrToFloat(StringReplace(Mass, ',', '.', [rfReplaceAll]));

        //++++++++++++++++++++
      Kol_S := ADOQuery2.FieldByName('Количество').AsString;
      if Kol_S <> '' then
        Kol_Det := StrToInt(Kol_S);
      Dl_F := Massa * Kol_Det;
      Mass := FloatToStr(Dl_F);
      massa_Ob := massa_Ob + Dl_F;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := IntToStr(J + 1);
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := ADOQuery1.FieldByName('Количество').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := ADOQuery1.FieldByName('КолКлап').AsString;
      Inc(XX);
      ADOQuery1.Next;
    end;
  end;
//Продолжаем Горизонтальные  03
  SS := '(Изделие LIKE ' + #39 + '%КЭД%' + #39 + ') AND ((Обозначение LIKE ' + #39 + Oboz2 + '%' + #39 + ') ) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  //Обозначение,Номер,Элемент,Sum(количество) As S,Sum(колКлап) As S1  Group BY Обозначение,Элемент,Номер Order By Номер
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where %s  AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ')) ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin
    XL.ActiveWorkBook.Sheets.Item[List].Activate;
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      if J = 0 then
      begin
        XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
        XL.ActiveWorkBook.Worksheets[List].Paste;
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := 'Горизонт';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Oboz2 + 'A';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := '';
        Inc(XX);
      end;
      if J <> ADOQuery1.RecordCount then
      begin
        XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
        XL.ActiveWorkBook.Worksheets[List].Paste;
      end;
      SS := ADOQuery1.FieldByName('Обозначение').AsString;

      ADOQuery2.Close;
      ADOQuery2.SQL.Clear;
      Str1 := 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')';
      ADOQuery2.SQL.Text := Str1;
      ADOQuery2.Active := True;
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 21] := Str;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
        //Dl_F:=StrToFloat(Str)+2.5;  //18.12.2018
        //Dl_F:=StrToFloat(Str)+0.5;  //18.12.2018(2.5)  02.07.2019(0.5)
        //Str:=FloatToStr(Dl_F);
        //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      Mass := ADOQuery2.FieldByName('Масса').AsString;
      if Mass <> '' then
        Massa := StrToFloat(StringReplace(Mass, ',', '.', [rfReplaceAll]));

        //++++++++++++++++++++
      Kol_S := ADOQuery2.FieldByName('Количество').AsString;
      if Kol_S <> '' then
        Kol_Det := StrToInt(Kol_S);
      Dl_F := Massa * Kol_Det;
      Mass := FloatToStr(Dl_F);
      massa_Ob := massa_Ob + Dl_F;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := IntToStr(J + 1);
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := ADOQuery1.FieldByName('Количество').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := ADOQuery1.FieldByName('КолКлап').AsString;
      Inc(XX);
      ADOQuery1.Next;
    end;
  end;

//Продолжаем Горизонтальные  02
  SS := '(Изделие LIKE ' + #39 + '%КЭД%' + #39 + ') AND ((Обозначение LIKE ' + #39 + Oboz2_1 + '%' + #39 + ') ) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  //Обозначение,Номер,Элемент,Sum(количество) As S,Sum(колКлап) As S1  Group BY Обозначение,Элемент,Номер Order By Номер
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where %s  AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ')) ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      if J = 0 then
      begin
        XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
        XL.ActiveWorkBook.Worksheets[List].Paste;
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := 'Горизонт';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Oboz2_1 + 'A';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := '';
        Inc(XX);
      end;
      if J <> ADOQuery1.RecordCount then
      begin
        XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
        XL.ActiveWorkBook.Worksheets[List].Paste;
      end;
      SS := ADOQuery1.FieldByName('Обозначение').AsString;

      ADOQuery2.Close;
      ADOQuery2.SQL.Clear;
      Str1 := 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')';
      ADOQuery2.SQL.Text := Str1;
      ADOQuery2.Active := True;
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 21] := Str;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
        //Dl_F:=StrToFloat(Str)+0.5;  //18.12.2018(2.5)  02.07.2019(0.5)
        //Str:=FloatToStr(Dl_F);
        //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      Mass := ADOQuery2.FieldByName('Масса').AsString;
      if Mass <> '' then
        Massa := StrToFloat(StringReplace(Mass, ',', '.', [rfReplaceAll]));

        //++++++++++++++++++++
      Kol_S := ADOQuery2.FieldByName('Количество').AsString;
      if Kol_S <> '' then
        Kol_Det := StrToInt(Kol_S);
      Dl_F := Massa * Kol_Det;
      Mass := FloatToStr(Dl_F);
      massa_Ob := massa_Ob + Dl_F;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := IntToStr(J + 1);
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := ADOQuery1.FieldByName('Количество').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := ADOQuery1.FieldByName('КолКлап').AsString;
      Inc(XX);
      ADOQuery1.Next;
    end;
  end;
  if XX >= 6 then
  begin
    XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 4] := '=SUM(D6:D' + IntToStr(XX - 1) + ')';
    XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 4].Font.Bold := True;
      //XL.ActiveWorkBook.WorkSheets[List].Cells[ XX+1,7]:='=SUM(G6:G'+IntToStr(XX-1)+')';
      //XL.ActiveWorkBook.WorkSheets[List].Cells[ XX+1,7].Font.Bold := True;
  end;
   //Стенки   Вертикальная
  XX := 5;
  StrDat3 := FormatDateTime('"Дата: "dd.mm.yyyy, " ', DateTimePicker3.DateTime);  //OR (Обозначение LIKE '+#39+'ТЕКИ 07.239.01.00.002-%'+#39+') AND (Станок='+#39+'Линия'+#39+')
  SS := '(Изделие LIKE ' + #39 + '%КЭД%' + #39 + ') AND ((Обозначение LIKE ' + #39 + Oboz3 + '%' + #39 + ') AND (Обозначение NOT LIKE ' + #39 + Oboz3 + '%-01' + #39 + ') ) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
   //    Обозначение,Элемент,Номер,Sum(количество) As S,Sum(колКлап) As S1  Group BY Обозначение,Элемент,Номер Order By Номер
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where %s  AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + '))  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin
    XL.ActiveWorkBook.Sheets.Item[List].Activate;
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      if J = 0 then
      begin
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 5] := 'Вертикаль';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 6] := Oboz3 + 'A' + ' Пр №1';
        Inc(XX);
      end;

      SS := ADOQuery1.FieldByName('Обозначение').AsString;
      ADOQuery2.Close;
      ADOQuery2.SQL.Clear;
      Str1 := 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')';
      ADOQuery2.SQL.Text := Str1;
      ADOQuery2.Active := True;
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 22] := Str;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
        //Dl_F:=StrToFloat(Str)-0.5;  //18.12.2018  Изменили 23.01.2019
       // Str:=FloatToStr(Dl_F);
      Dl_F := StrToFloat(Str) + 2.6;  //08.11.2019 Булаев
      Str := FloatToStr(Dl_F);
        //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      Mass := ADOQuery2.FieldByName('Масса').AsString;
      if Mass <> '' then
        Massa := StrToFloat(StringReplace(Mass, ',', '.', [rfReplaceAll]));

        //++++++++++++++++++++
      Kol_S := ADOQuery2.FieldByName('Количество').AsString;
      if Kol_S <> '' then
        Kol_Det := StrToInt(Kol_S);
      Dl_F := Massa * Kol_Det;
      Mass := FloatToStr(Dl_F);
      massa_Ob := massa_Ob + Dl_F;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 5] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 6] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 7] := ADOQuery1.FieldByName('Количество').AsString;
        //XL.ActiveWorkBook.WorkSheets[4].Cells[ XX,5] :=ADOQuery1.FieldByName('S1').AsString;
      Inc(XX);
      ADOQuery1.Next;
    end;
  end;
    //Продолжаем Вертикал
  SS := '(Изделие LIKE ' + #39 + '%КЭД%' + #39 + ') AND ((Обозначение LIKE ' + #39 + Oboz3 + '%-01' + #39 + ') ) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
   //    Обозначение,Элемент,Номер,Sum(количество) As S,Sum(колКлап) As S1  Group BY Обозначение,Элемент,Номер Order By Номер
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where %s  AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + '))  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin
    XL.ActiveWorkBook.Sheets.Item[List].Activate;
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      if J = 0 then
      begin
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 5] := 'Вертикаль';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 6] := Oboz4 + 'A' + ' Пр №2';
        Inc(XX);
      end;

      SS := ADOQuery1.FieldByName('Обозначение').AsString;
      ADOQuery2.Close;
      ADOQuery2.SQL.Clear;
      Str1 := 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')';
      ADOQuery2.SQL.Text := Str1;
      ADOQuery2.Active := True;
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 22] := Str;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
        //Dl_F:=StrToFloat(Str)-0.5;  //18.12.2018 №30-18 Изменили 23.01.2019
        // Str:=FloatToStr(Dl_F);
      Dl_F := StrToFloat(Str) + 2.6;  //08.11.2019 Булаев
      Str := FloatToStr(Dl_F);
        //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      Mass := ADOQuery2.FieldByName('Масса').AsString;
      if Mass <> '' then
        Massa := StrToFloat(StringReplace(Mass, ',', '.', [rfReplaceAll]));

        //++++++++++++++++++++
      Kol_S := ADOQuery2.FieldByName('Количество').AsString;
      if Kol_S <> '' then
        Kol_Det := StrToInt(Kol_S);
      Dl_F := Massa * Kol_Det;
      Mass := FloatToStr(Dl_F);
      massa_Ob := massa_Ob + Dl_F;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 5] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 6] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 7] := ADOQuery1.FieldByName('Количество').AsString;
        //XL.ActiveWorkBook.WorkSheets[4].Cells[ XX,5] :=ADOQuery1.FieldByName('S1').AsString;
      Inc(XX);
      ADOQuery1.Next;
    end;
  end;
    //Продолжаем Вертикал   'ВГ 451.01.00.001-','ВГ 451.01.00.001-01'

  if XX >= 6 then
  begin
      ///XL.ActiveWorkBook.WorkSheets[List].Cells[ XX,4]:='=SUM(D6:D'+IntToStr(XX-1)+')';
    XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 7] := '=SUM(G6:G' + IntToStr(XX - 1) + ')';
    XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 7].Font.Bold := True;
    Inc(XX);
  end;
    //XL.ActiveWorkBook.WorkSheets[List].Cells[ XX,9]:='=SUM(I6:I'+IntToStr(XX-1)+')';
  XL.ActiveWorkBook.WorkSheets[List].PageSetup.PrintTitleRows := '$' + IntToStr(1) + ':$' + IntToStr(4);

  XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 8] := FloatToStr(massa_Ob);
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 8] := FloatToStr(massa_Ob * 1.1); //10%
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 6] := 'Масса металла';
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 7] := 'плюс 10%';
end;

function TForm1.Stenki_KED(AStr, Oboz1, Oboz2, Oboz2_1, Oboz3, Oboz4, Oboz5, Oboz6, Tab1, Tab2: string; List: Integer; XL: Variant): string;
//добавить проверку в запрос  ВГ 342.01.00.001- попадет и ВГ 342.01.00.001-01-
//ВГ 451.01.00.001- попадет и ВГ 451.01.00.001-01-
var
  I, J, XX, YY, Cvet, Res, Kol_P, Kol_Det: Integer;
  Dl_F, Massa, massa_Ob: Double;
  S, Str, StrNom, Idgp, Izdel, Kol_Zap_S, SS, StrDat1, StrDat2, Oboz, Kol_S, StrDat3, Str1, Mass: string;
  XL1: Variant;
begin
{   Stenki_KED(SS,Горизонт 'ВГ 342.01.00.003-','ВГ 342.01.00.004-','ВГ 342.01.00.002-',
  'Вертикаль ВГ 342.01.00.001-','ВГ 342.01.00.001-01-','ВГ 451.01.00.001-','ВГ 451.01.00.001-01',SS,SS,6, XL);}
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
   //Стенки комплект
  Result := '';
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  StrDat3 := FormatDateTime('dd.mm.yyyy', DateTimePicker3.DateTime);

  XX := 0;
  YY := 0;
  SS := '(Изделие LIKE ' + #39 + '%КЭД%' + #39 + ')  AND ((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') OR (Обозначение LIKE ' + #39 + Oboz2 + '%' + #39 + ') or (Обозначение LIKE ' + #39 + Oboz2_1 + '%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  if not mkQuerySelect(ADOQuery1, 'Select DISTINCT Номер  from %s Where %s AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') ', ['Заготовка', SS]) then
    exit;

  if ADOQuery1.RecordCount <> 0 then
  begin
    XL.ActiveWorkBook.Sheets.Item[List + 1].Activate;
    XL.ActiveWorkBook.Worksheets[List + 1].Range['I1:N6'].Select;
    XL.Selection.Copy;
    XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX + 8)].Select;
    XL.ActiveWorkBook.Worksheets[List + 1].Paste;
    XX := XX + 7;
  end;
  SS := '  AND ((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') AND (Изделие LIKE ' + #39 + '%КЭД%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') ';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where   (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ')  AND ((Станок=' + #39 + 'Линия' + #39 + ')) %s  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;

  XX := 0;
  if ADOQuery1.RecordCount <> 0 then
  begin
          //XL.ActiveWorkBook.Sheets.Item[List+1].Activate;
    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      StrNom := ADOQuery1.FieldByName('Номер').AsString;
      Kol_Zap_S := ADOQuery1.FieldByName('КолКлап').AsString;
      if J <> ADOQuery1.RecordCount - 1 then
      begin
        XL.ActiveWorkBook.Worksheets[List + 1].Range['I1:N6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX + 8)].Select;
        XL.ActiveWorkBook.Worksheets[List + 1].Paste;
      end;

      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 3] := (StrNom);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 5] := StrDat3;
      Res := Pos('-', Oboz);
      if Res <> 0 then
        Delete(Oboz, 1, Res);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 1] := Oboz;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 2] := Kol_S;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 6] := Kol_Zap_S;
      XX := XX + 7;
      ADOQuery1.Next;
    end;
  end;
     // XX:=XX-7;
  SS := '  AND ((Обозначение LIKE ' + #39 + Oboz2 + '%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') ';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ')  AND ((Станок=' + #39 + 'Линия' + #39 + ') ) %s  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;

  if ADOQuery1.RecordCount <> 0 then
  begin
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      StrNom := ADOQuery1.FieldByName('Номер').AsString;
      Kol_Zap_S := ADOQuery1.FieldByName('КолКлап').AsString;
      if J <> ADOQuery1.RecordCount - 1 then
      begin
        XL.ActiveWorkBook.Worksheets[List + 1].Range['I1:N6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX + 8)].Select;
        XL.ActiveWorkBook.Worksheets[List + 1].Paste;
      end;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 3] := (StrNom);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 5] := StrDat3;
      Res := Pos('-', Oboz);
      if Res <> 0 then
        Delete(Oboz, 1, Res);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 1] := Oboz;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 2] := Kol_S;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 6] := Kol_Zap_S;
      XX := XX + 7;
      ADOQuery1.Next;
    end;
  end;
     //ЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗЗ
  SS := '  AND ((Обозначение LIKE ' + #39 + Oboz2_1 + '%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') ';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ')  AND ((Станок=' + #39 + 'Линия' + #39 + ')) %s  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;

  if ADOQuery1.RecordCount <> 0 then
  begin
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      StrNom := ADOQuery1.FieldByName('Номер').AsString;
      Kol_Zap_S := ADOQuery1.FieldByName('КолКлап').AsString;
      if J <> ADOQuery1.RecordCount - 1 then
      begin
        XL.ActiveWorkBook.Worksheets[List + 1].Range['I1:N6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List + 1].Range['A' + IntToStr(XX + 8)].Select;
        XL.ActiveWorkBook.Worksheets[List + 1].Paste;
      end;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 3] := (StrNom);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 2, 5] := StrDat3;
      Res := Pos('-', Oboz);
      if Res <> 0 then
        Delete(Oboz, 1, Res);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 1] := Oboz;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 2] := Kol_S;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[XX + 4, 6] := Kol_Zap_S;
      XX := XX + 7;
      ADOQuery1.Next;
    end;
  end;
      //ЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩ
  if Cvet = 1 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 3010538; //Желтый
      //XL.ActiveWorkBook.WorkSheets[List+1].Cells[ 2,6] := ' Жел';
  end;
  if Cvet = 2 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 6877993; //Зеленый
      //XL.ActiveWorkBook.WorkSheets[List+1].Cells[ 2,6] := ' Зел';
  end;
  if Cvet = 3 then
  begin
    XL.ActiveWorkBook.WorkSheets[List + 1].Range['B' + IntToStr(2) + ':B' + IntToStr(XX)].Interior.Color := 16424058; //Синий
      //XL.ActiveWorkBook.WorkSheets[List+1].Cells[ 2,6] := ' Син';
  end;
      //ЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩЩ
      //Верт
  SS := '  AND ((Обозначение LIKE ' + #39 + Oboz3 + '%' + #39 + ') AND (Обозначение NOT LIKE ' + #39 + Oboz3 + '01-%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') ';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where   (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ')) %s  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;

  if ADOQuery1.RecordCount <> 0 then
  begin
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      StrNom := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.Sheets.Item[List + 1].Activate;
      Res := Pos('-', Oboz);
      if Res <> 0 then
        Delete(Oboz, 1, Res);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[YY + 4, 3] := Oboz;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[YY + 4, 4] := Kol_S;
      YY := YY + 7;
      ADOQuery1.Next;
    end;
  end;
      {  Stenki_KED(SS,'ВГ 342.01.00.003-','ВГ 342.01.00.004-','ВГ 342.01.00.002-',
  'ВГ 342.01.00.001-','ВГ 342.01.00.001-01-','ВГ 451.01.00.001-','ВГ 451.01.00.001-01',SS,SS,6, XL);}
      //---------------------------------------------------
  SS := '  AND ((Обозначение LIKE ' + #39 + Oboz3 + '01-%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ') ';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ')) %s   ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      Oboz := ADOQuery1.FieldByName('Обозначение').AsString;
      Kol_S := ADOQuery1.FieldByName('Количество').AsString;
      XL.ActiveWorkBook.Sheets.Item[List + 1].Activate;

      Res := Pos('-', Oboz);
      if Res <> 0 then
        Delete(Oboz, 1, Res);
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[YY + 4, 3] := Oboz;
      XL.ActiveWorkBook.WorkSheets[List + 1].Cells[YY + 4, 4] := Kol_S;
      YY := YY + 7;
      ADOQuery1.Next;
    end;
  end;
      //---------------------------------------------------
//ОООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООООО
  //Стенки   Горизонтальная  04
  SS := '(Изделие LIKE ' + #39 + '%КЭД%' + #39 + ') AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  %s AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') ', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
    Cvet := StrToInt(ADOQuery1.FieldByName('Цвет').AsString);
  //===================Кол накладных          AND (Станок='+#39+'Линия'+#39+')AND ((Обозначение LIKE '+#39+Oboz1+'%'+#39+') )
  SS := '(Изделие LIKE ' + #39 + '%КЭД%' + #39 + ')  AND ((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') OR (Обозначение LIKE ' + #39 + Oboz2 + '%' + #39 + ') or (Обозначение LIKE ' + #39 + Oboz2_1 + '%' + #39 + ') or (Обозначение LIKE ' + #39 + Oboz3 + '%' + #39 + ')) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  if not mkQuerySelect(ADOQuery1, 'Select DISTINCT Номер  from %s Where %s AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') ', ['Заготовка', SS]) then
    exit;
  Kol_P := ADOQuery1.recordCount; //ADOQuery1.FieldByName('S1').AsInteger; Кол ПОДДОНОВ
  StrDat3 := FormatDateTime('dd.mm.yyyy ', DateTimePicker1.DateTime);
  if ADOQuery1.RecordCount <> 0 then
  begin
    XL.ActiveWorkBook.Sheets.Item[List].Activate;
    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 3] := 'Задание  на ' + StrDat3;
    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 6] := 'Кол-во поддонов ';
    XL.ActiveWorkBook.WorkSheets[List].Cells[2, 7] := IntToStr(Kol_P);
  end;
  massa_Ob := 0;
  XX := 5;
  //Memo9.Lines.Clear;
   //OR (Обозначение LIKE '+#39+'ТЕКИ 07.239.01.00.002-%'+#39+') AND (Станок='+#39+'Линия'+#39+')
  SS := '(Изделие LIKE ' + #39 + '%КЭД%' + #39 + ') AND ((Обозначение LIKE ' + #39 + Oboz1 + '%' + #39 + ') ) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  //Обозначение,Номер,Элемент,Sum(количество) As S,Sum(колКлап) As S1  Group BY Обозначение,Элемент,Номер Order By Номер
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where %s  AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ') ) ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;

  if ADOQuery1.RecordCount <> 0 then
  begin
    if Cvet = 1 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 3010538; //Желтый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Жел';
    end;
    if Cvet = 2 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 6877993; //Зеленый
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Зел';
    end;
    if Cvet = 3 then
    begin
      XL.ActiveWorkBook.WorkSheets[List].Range['A' + IntToStr(2) + ':E' + IntToStr(2)].Interior.Color := 16424058; //Синий
      XL.ActiveWorkBook.WorkSheets[List].Cells[2, 8] := ' Син';
    end;
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      if J <> ADOQuery1.RecordCount then
      begin
        XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
        XL.ActiveWorkBook.Worksheets[List].Paste;
      end;
      if J = 0 then
      begin
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := 'Горизонт';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Oboz1 + 'A';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := '';
        Inc(XX);
      end;

      SS := ADOQuery1.FieldByName('Обозначение').AsString;

      ADOQuery2.Close;
      ADOQuery2.SQL.Clear;
      Str1 := 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')';
      ADOQuery2.SQL.Text := Str1;
      ADOQuery2.Active := True;
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 21] := Str;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
        //Dl_F:=StrToFloat(Str)+2.5;  //18.12.2018(2.5)  02.07.2019(0.5)
        //Dl_F:=StrToFloat(Str)-0.5;  //18.12.2018(2.5)  02.07.2019(0.5)
        //Str:=FloatToStr(Dl_F);
        //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      Mass := ADOQuery2.FieldByName('Масса').AsString;
      if Mass <> '' then
        Massa := StrToFloat(StringReplace(Mass, ',', '.', [rfReplaceAll]));

        //++++++++++++++++++++
      Kol_S := ADOQuery2.FieldByName('Количество').AsString;
      if Kol_S <> '' then
        Kol_Det := StrToInt(Kol_S);
      Dl_F := Massa * Kol_Det;
      Mass := FloatToStr(Dl_F);
      massa_Ob := massa_Ob + Dl_F;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := IntToStr(J + 1);
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := ADOQuery1.FieldByName('Количество').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := ADOQuery1.FieldByName('КолКлап').AsString;
      Inc(XX);
      ADOQuery1.Next;
    end;
  end;
//Продолжаем Горизонтальные  03
  SS := '(Изделие LIKE ' + #39 + '%КЭД%' + #39 + ') AND ((Обозначение LIKE ' + #39 + Oboz2 + '%' + #39 + ') ) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  //Обозначение,Номер,Элемент,Sum(количество) As S,Sum(колКлап) As S1  Group BY Обозначение,Элемент,Номер Order By Номер
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where %s  AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ')) ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin
    XL.ActiveWorkBook.Sheets.Item[List].Activate;
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      if J = 0 then
      begin
        XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
        XL.ActiveWorkBook.Worksheets[List].Paste;
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := 'Горизонт';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Oboz2 + 'A';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := '';
        Inc(XX);
      end;
      if J <> ADOQuery1.RecordCount then
      begin
        XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
        XL.ActiveWorkBook.Worksheets[List].Paste;
      end;
      SS := ADOQuery1.FieldByName('Обозначение').AsString;

      ADOQuery2.Close;
      ADOQuery2.SQL.Clear;
      Str1 := 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')';
      ADOQuery2.SQL.Text := Str1;
      ADOQuery2.Active := True;
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 21] := Str;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
       // Dl_F:=StrToFloat(Str)+2.5;  //18.12.2018
        //Dl_F:=StrToFloat(Str)-0.5;  //18.12.2018(2.5)  02.07.2019(0.5)
        //Str:=FloatToStr(Dl_F);
        //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      Mass := ADOQuery2.FieldByName('Масса').AsString;
      if Mass <> '' then
        Massa := StrToFloat(StringReplace(Mass, ',', '.', [rfReplaceAll]));

        //++++++++++++++++++++
      Kol_S := ADOQuery2.FieldByName('Количество').AsString;
      if Kol_S <> '' then
        Kol_Det := StrToInt(Kol_S);
      Dl_F := Massa * Kol_Det;
      Mass := FloatToStr(Dl_F);
      massa_Ob := massa_Ob + Dl_F;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := IntToStr(J + 1);
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := ADOQuery1.FieldByName('Количество').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := ADOQuery1.FieldByName('КолКлап').AsString;
      Inc(XX);
      ADOQuery1.Next;
    end;
  end;

//Продолжаем Горизонтальные  02
  SS := '(Изделие LIKE ' + #39 + '%КЭД%' + #39 + ') AND ((Обозначение LIKE ' + #39 + Oboz2_1 + '%' + #39 + ') ) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
  //Обозначение,Номер,Элемент,Sum(количество) As S,Sum(колКлап) As S1  Group BY Обозначение,Элемент,Номер Order By Номер
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where %s  AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + ')) ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      if J = 0 then
      begin
        XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
        XL.ActiveWorkBook.Worksheets[List].Paste;
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := 'Горизонт';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Oboz2_1 + 'A';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := '';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := '';
        Inc(XX);
      end;
      if J <> ADOQuery1.RecordCount then
      begin
        XL.ActiveWorkBook.Worksheets[List].Range['K6:S6'].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
        XL.ActiveWorkBook.Worksheets[List].Paste;
      end;
      SS := ADOQuery1.FieldByName('Обозначение').AsString;

      ADOQuery2.Close;
      ADOQuery2.SQL.Clear;
      Str1 := 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')';
      ADOQuery2.SQL.Text := Str1;
      ADOQuery2.Active := True;
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 21] := Str;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
       // Dl_F:=StrToFloat(Str)-0.5;  //18.12.2018(2.5)  02.07.2019(0.5)
        //Str:=FloatToStr(Dl_F);
        //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      Mass := ADOQuery2.FieldByName('Масса').AsString;
      if Mass <> '' then
        Massa := StrToFloat(StringReplace(Mass, ',', '.', [rfReplaceAll]));

        //++++++++++++++++++++
      Kol_S := ADOQuery2.FieldByName('Количество').AsString;
      if Kol_S <> '' then
        Kol_Det := StrToInt(Kol_S);
      Dl_F := Massa * Kol_Det;
      Mass := FloatToStr(Dl_F);
      massa_Ob := massa_Ob + Dl_F;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := IntToStr(J + 1);
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := ADOQuery1.FieldByName('Количество').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 9] := ADOQuery1.FieldByName('КолКлап').AsString;
      Inc(XX);
      ADOQuery1.Next;
    end;
  end;
  if XX >= 6 then
  begin
    XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 4] := '=SUM(D6:D' + IntToStr(XX - 1) + ')';
    XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 4].Font.Bold := True;
      //XL.ActiveWorkBook.WorkSheets[List].Cells[ XX+1,7]:='=SUM(G6:G'+IntToStr(XX-1)+')';
      //XL.ActiveWorkBook.WorkSheets[List].Cells[ XX+1,7].Font.Bold := True;
  end;
   //Стенки   Вертикальная
  XX := 5;
  StrDat3 := FormatDateTime('"Дата: "dd.mm.yyyy, " ', DateTimePicker3.DateTime);  //OR (Обозначение LIKE '+#39+'ТЕКИ 07.239.01.00.002-%'+#39+') AND (Станок='+#39+'Линия'+#39+')
  SS := '(Изделие LIKE ' + #39 + '%КЭД%' + #39 + ') AND ((Обозначение LIKE ' + #39 + Oboz3 + '%' + #39 + ') AND (Обозначение NOT LIKE ' + #39 + Oboz3 + '%01' + #39 + ') ) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
   //    Обозначение,Элемент,Номер,Sum(количество) As S,Sum(колКлап) As S1  Group BY Обозначение,Элемент,Номер Order By Номер
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where %s  AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + '))  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin
    XL.ActiveWorkBook.Sheets.Item[List].Activate;
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      if J = 0 then
      begin
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 5] := 'Вертикаль';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 6] := Oboz3 + 'A' + ' Пр №1';
        Inc(XX);
      end;

      SS := ADOQuery1.FieldByName('Обозначение').AsString;
      ADOQuery2.Close;
      ADOQuery2.SQL.Clear;
      Str1 := 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')';
      ADOQuery2.SQL.Text := Str1;
      ADOQuery2.Active := True;
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 22] := Str;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
        //Dl_F:=StrToFloat(Str)-0.5;  //18.12.2018  Изменили 23.01.2019
       // Str:=FloatToStr(Dl_F);
      Dl_F := StrToFloat(Str) + 2.6;  //08.11.2019 Булаев
      Str := FloatToStr(Dl_F);
        //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      Mass := ADOQuery2.FieldByName('Масса').AsString;
      if Mass <> '' then
        Massa := StrToFloat(StringReplace(Mass, ',', '.', [rfReplaceAll]));

        //++++++++++++++++++++
      Kol_S := ADOQuery2.FieldByName('Количество').AsString;
      if Kol_S <> '' then
        Kol_Det := StrToInt(Kol_S);
      Dl_F := Massa * Kol_Det;
      Mass := FloatToStr(Dl_F);
      massa_Ob := massa_Ob + Dl_F;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 5] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 6] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 7] := ADOQuery1.FieldByName('Количество').AsString;
        //XL.ActiveWorkBook.WorkSheets[4].Cells[ XX,5] :=ADOQuery1.FieldByName('S1').AsString;
      Inc(XX);
      ADOQuery1.Next;
    end;
  end;
    //Продолжаем Вертикал
  SS := '(Изделие LIKE ' + #39 + '%КЭД%' + #39 + ') AND ((Обозначение LIKE ' + #39 + Oboz3 + '%01' + #39 + ') ) AND (Обозначение NOT LIKE ' + #39 + '%НЕРЖ%' + #39 + ')';
   //    Обозначение,Элемент,Номер,Sum(количество) As S,Sum(колКлап) As S1  Group BY Обозначение,Элемент,Номер Order By Номер
  if not mkQuerySelect(ADOQuery1, 'Select * from %s Where %s  AND (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') AND ((Станок=' + #39 + 'Линия' + #39 + '))  ORDER BY Номер,IdГП', ['Заготовка', SS]) then
    exit;
  if ADOQuery1.RecordCount <> 0 then
  begin
    XL.ActiveWorkBook.Sheets.Item[List].Activate;
    for J := 0 to ADOQuery1.RecordCount - 1 do
    begin
      if J = 0 then
      begin
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 5] := 'Вертикаль';
        XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 6] := Oboz4 + 'A' + ' Пр №2';
        Inc(XX);
      end;

      SS := ADOQuery1.FieldByName('Обозначение').AsString;
      ADOQuery2.Close;
      ADOQuery2.SQL.Clear;
      Str1 := 'Select * from СпецифОбщая Where (Обозначение=' + #39 + SS + #39 + ')';
      ADOQuery2.SQL.Text := Str1;
      ADOQuery2.Active := True;
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 22] := Str;
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      Str := ADOQuery2.FieldByName('ДлинаРазв').AsString;
        //Dl_F:=StrToFloat(Str)-0.5;  //18.12.2018 №30-18 Изменили 23.01.2019
        // Str:=FloatToStr(Dl_F);
      Dl_F := StrToFloat(Str) + 2.6;  //08.11.2019 Булаев
      Str := FloatToStr(Dl_F);
        //++++++++++++++++++++ StringReplace(s,'.',',',[rfReplaceAll]);
      Mass := ADOQuery2.FieldByName('Масса').AsString;
      if Mass <> '' then
        Massa := StrToFloat(StringReplace(Mass, ',', '.', [rfReplaceAll]));

        //++++++++++++++++++++
      Kol_S := ADOQuery2.FieldByName('Количество').AsString;
      if Kol_S <> '' then
        Kol_Det := StrToInt(Kol_S);
      Dl_F := Massa * Kol_Det;
      Mass := FloatToStr(Dl_F);
      massa_Ob := massa_Ob + Dl_F;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 5] := ADOQuery1.FieldByName('Номер').AsString;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 6] := Str;
      XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 7] := ADOQuery1.FieldByName('Количество').AsString;
        //XL.ActiveWorkBook.WorkSheets[4].Cells[ XX,5] :=ADOQuery1.FieldByName('S1').AsString;
      Inc(XX);
      ADOQuery1.Next;
    end;
  end;
    //Продолжаем Вертикал   'ВГ 451.01.00.001-','ВГ 451.01.00.001-01'

  if XX >= 6 then
  begin
      ///XL.ActiveWorkBook.WorkSheets[List].Cells[ XX,4]:='=SUM(D6:D'+IntToStr(XX-1)+')';
    XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 7] := '=SUM(G6:G' + IntToStr(XX - 1) + ')';
    XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 7].Font.Bold := True;
    Inc(XX);
  end;
    //XL.ActiveWorkBook.WorkSheets[List].Cells[ XX,9]:='=SUM(I6:I'+IntToStr(XX-1)+')';
  XL.ActiveWorkBook.WorkSheets[List].PageSetup.PrintTitleRows := '$' + IntToStr(1) + ':$' + IntToStr(4);

  XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 8] := FloatToStr(massa_Ob);
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 8] := FloatToStr(massa_Ob * 1.1); //10%
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 6] := 'Масса металла';
  XL.ActiveWorkBook.WorkSheets[List].Cells[XX + 1, 7] := 'плюс 10%';
end;

function TForm1.OSI(AStr, Dat1, dat2, Tab1, Tab2: string; List: Integer; XL: Variant): string;
var
  XX, J, I, Z: Integer;
//XL:Variant;
  Dat, Dat3, SS, D, Dir, God, Mes, PP, ZAk, ss1, Err, StrDat3, StrDat4, Elem, Oboz, Str1, Sklad, Tokar: string;
begin
  Conn_Klap := Connect_Miass_Klap.Create();
  God := FormatDateTime('yyyy', DateTimePicker1.DateTime);
  Mes := FormatDateTime('mmmm', DateTimePicker2.DateTime);
  Memo9.Lines.LoadFromFile(ExtractFileDir(ParamStr(0)) + '\ConnCEH.ini');
  D := Memo9.Lines.Strings[2];
  StrDat3 := FormatDateTime('dd.mm.yyyy', DateTimePicker3.DateTime);
  StrDat4 := FormatDateTime('dd.mm.yyyy', Now);
  dat2 := FormatDateTime('dd.mm.yyyy', DateTimePicker1.DateTime);
  Dat3 := FormatDateTime('dd.mm.yyyy', DateTimePicker2.DateTime);

  Dat := FormatDateTime('mm.dd.yyyy', DateTimePicker1.DateTime);
  Dat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.DateTime);
  ss1 := '  BETWEEN ' + #39 + Dat + #39 + ' And ' + #39 + Dat1 + #39;

  //OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
  // OR (Специф.ВидЭлемента= '+#39+'Прочие изделия'+#39+
   // ')
  ZAk := '';
  SS := '(Специф.Элемент LIKE ' + #39 + 'Ось%' + #39 + ') OR (Специф.Элемент LIKE ' + #39 + 'Втулка%' + #39 + ') OR (Специф.Элемент LIKE ' + #39 + 'Труба%' + #39 + ')';
  if not Conn_Klap.mkQuerySelect('Select Специф.Элемент,Специф.Обозначение,Специф.Заказ,Sum(Специф.Количество*Запуск.[Кол во запущенных] ) As S ' + 'FROM %s INNER JOIN Запуск ON Специф.IdГП = Запуск.IdГП  Where (Запуск.Планирование %s' + ') AND (%s) AND ((Специф.ВидЭлемента= ' + #39 + 'Детали' + #39 + ')) Group BY Специф.Элемент,Специф.Обозначение,Специф.Заказ', ['Специф', ss1, SS]) then
    exit;

  XX := 7;
        //Создание временной таблицы  idgp,zakaz,Nom
  SetConnectTemp(ADOQueryTemp);
    //Создание временной таблицы
  ADOQueryTemp := TADOQuery.Create(nil);
  ADOQueryTemp.Connection := ADOConnectionTemp;

  ADOQueryTemp.SQL.Text := 'CREATE TABLE #ClientToDBFL (Элемент nvarchar(350),' + 'Обозначение nvarchar(350),Kol float,Sklad nvarchar(350),Zak nvarchar(350) )';
  try
    ADOQueryTemp.ExecSQL;
  except
    Err := '1222';
  end;
  for J := 0 to Conn_Klap.AQuery.RecordCount - 1 do
  begin
    Elem := Conn_Klap.AQuery.FieldByName('Элемент').AsString;
    Oboz := Conn_Klap.AQuery.FieldByName('Обозначение').AsString;
    ZAk := Conn_Klap.AQuery.FieldByName('Заказ').AsString;
          //
    ADOQuery2.Close;
    ADOQuery2.SQL.Clear;
    Str1 := 'Select * from СпецифОбщая Where ([Обозначение]=' + #39 + Oboz + #39 + ')';
    ADOQuery2.SQL.Text := Str1;
    ADOQuery2.Active := True;
    Sklad := ADOQuery2.FieldByName('Токарный').AsString;
    Tokar := Conn_Klap.AQuery.FieldByName('S').AsString;
        //
    ADOQueryTemp.SQL.Text := 'INSERT INTO #ClientToDBFL ' + '(Элемент,Обозначение,Kol,Sklad,Zak) Values (' + #39 + Conn_Klap.AQuery.FieldByName('Элемент').AsString + #39 + ',' + #39 + Conn_Klap.AQuery.FieldByName('Обозначение').AsString + #39 + ',' + #39 + Conn_Klap.AQuery.FieldByName('S').AsString + #39 + ',' + #39 + Sklad + #39 + ',' + #39 + ZAk + #39 + ')';
    try
      ADOQueryTemp.ExecSQL;
    except
      Err := '1222';
    end;

    Conn_Klap.AQuery.Next;
  end;
   //ppppppppppppppppppppppppppppppppppppppppppppppp
   // OR (СпецифВозд.ВидЭлемента= '+#39+'Прочие изделия'+#39+
  //')
  SS := '(СпецифВозд.Элемент LIKE ' + #39 + 'Ось%' + #39 + ') OR (СпецифВозд.Элемент LIKE ' + #39 + 'Втулка%' + #39 + ') OR (СпецифВозд.Элемент LIKE ' + #39 + 'Труба%' + #39 + ')';
  if not Conn_Klap.mkQuerySelect('Select СпецифВозд.Элемент,СпецифВозд.Обозначение,СпецифВозд.Заказ,Sum(СпецифВозд.Количество*ЗапускВозд.[Кол во запущенных] ) As S ' + 'FROM %s INNER JOIN ЗапускВозд ON СпецифВозд.IdГП = ЗапускВозд.IdГП  Where (ЗапускВозд.Планирование %s ' + ') AND (%s) AND ((СпецифВозд.ВидЭлемента= ' + #39 + 'Детали' + #39 + ')) Group BY СпецифВозд.Элемент,СпецифВозд.Обозначение,СпецифВозд.Заказ', ['СпецифВозд', ss1, SS]) then
    exit;

 // Inc(XX);
  for J := 0 to Conn_Klap.AQuery.RecordCount - 1 do
  begin
    Elem := Conn_Klap.AQuery.FieldByName('Элемент').AsString;
    Oboz := Conn_Klap.AQuery.FieldByName('Обозначение').AsString;
    ZAk := Conn_Klap.AQuery.FieldByName('Заказ').AsString;
          //
    ADOQuery2.Close;
    ADOQuery2.SQL.Clear;
    Str1 := 'Select * from СпецифОбщая Where ([Обозначение]=' + #39 + Oboz + #39 + ')';
    ADOQuery2.SQL.Text := Str1;
    ADOQuery2.Active := True;
    Sklad := ADOQuery2.FieldByName('Токарный').AsString;
        //Tokar:= ADOQuery2.FieldByName('Токарный').AsString;
    Tokar := Conn_Klap.AQuery.FieldByName('S').AsString;
        //
    ADOQueryTemp.SQL.Text := 'INSERT INTO #ClientToDBFL ' + '(Элемент,Обозначение,Kol,Sklad,Zak) Values (' + #39 + Conn_Klap.AQuery.FieldByName('Элемент').AsString + #39 + ',' + #39 + Conn_Klap.AQuery.FieldByName('Обозначение').AsString + #39 + ',' + #39 + Conn_Klap.AQuery.FieldByName('S').AsString + #39 + ',' + #39 + Sklad + #39 + ',' + #39 + ZAk + #39 + ')';
    try
      ADOQueryTemp.ExecSQL;
    except
      Err := '1222';
    end;

    Conn_Klap.AQuery.Next;
  end;
  ADOQueryTemp.SQL.Text := ('Select Элемент,Обозначение,Zak,Sum(Kol ) As S ' + 'FROM #ClientToDBFL WHERE Sklad=' + #39 + 'true' + #39 + '  Group BY Элемент,Обозначение,Zak');
  ADOQueryTemp.Open;

  Inc(XX);
  XL.ActiveWorkBook.Sheets.Item[List].Activate;
  XL.ActiveWorkBook.WorkSheets[List].Cells[2, 4] := StrDat4;
  XL.ActiveWorkBook.WorkSheets[List].Cells[4, 4] := StrDat3;

  for J := 0 to ADOQueryTemp.RecordCount - 1 do
  begin
    if J <> ADOQueryTemp.RecordCount then
    begin
      XL.ActiveWorkBook.Worksheets[List].Range['A7:E7'].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[List].Range['A' + IntToStr(XX)].Select;
      XL.ActiveWorkBook.Worksheets[List].Paste;
    end;
    Oboz := ADOQueryTemp.FieldByName('Обозначение').AsString;
    ADOQuery2.Close;
    ADOQuery2.SQL.Clear;
    Str1 := 'Select * from СпецифОбщая Where ([Обозначение]=' + #39 + Oboz + #39 + ')';
    ADOQuery2.SQL.Text := Str1;
    ADOQuery2.Active := True;

    Sklad := ADOQuery2.FieldByName('Материал').AsString;
    XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 1] := ADOQueryTemp.FieldByName('Zak').AsString;
    XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 2] := ADOQueryTemp.FieldByName('Элемент').AsString;
    XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 3] := ADOQueryTemp.FieldByName('Обозначение').AsString;
    XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 4] := Sklad;
    XL.ActiveWorkBook.WorkSheets[List].Cells[XX, 5] := ADOQueryTemp.FieldByName('S').AsString;
         //
    Inc(XX);
    ADOQueryTemp.Next;
  end;
  XX := 7;
  ADOQueryTemp.SQL.Text := ('Select Элемент,Обозначение,Sum(Kol ) As S ' + 'FROM #ClientToDBFL WHERE Sklad<>' + #39 + 'true' + #39 + '  Group BY Элемент,Обозначение,Sklad');
  ADOQueryTemp.Open;

  Inc(XX);
  XL.ActiveWorkBook.Sheets.Item[2].Activate;
  XL.ActiveWorkBook.WorkSheets[2].Cells[2, 4] := StrDat4;
  XL.ActiveWorkBook.WorkSheets[2].Cells[4, 4] := StrDat3;

  for J := 0 to ADOQueryTemp.RecordCount - 1 do
  begin
    if J <> ADOQueryTemp.RecordCount then
    begin
      XL.ActiveWorkBook.Worksheets[2].Range['A7:D7'].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[2].Range['A' + IntToStr(XX)].Select;
      XL.ActiveWorkBook.Worksheets[2].Paste;
    end;
    XL.ActiveWorkBook.WorkSheets[2].Cells[XX, 2] := ADOQueryTemp.FieldByName('Элемент').AsString;
    XL.ActiveWorkBook.WorkSheets[2].Cells[XX, 3] := ADOQueryTemp.FieldByName('Обозначение').AsString;
    XL.ActiveWorkBook.WorkSheets[2].Cells[XX, 4] := ADOQueryTemp.FieldByName('S').AsString;
          //XL.ActiveWorkBook.WorkSheets[2].Cells[ XX,5] :=ADOQueryTemp.FieldByName('Sklad').AsString;
    Inc(XX);
    ADOQueryTemp.Next;
  end;
end;

procedure TForm1.Button41Click(Sender: TObject);
var
  StrDat1, StrDat2, X, Sv_s, Sb_s, Otk, Sbor, Zag, Zap, Pos1, Pos2, Pos3, Pos4, Pos5, Izdel, Dir, Str, StrDat3, StrDat4, StrDat5, StrNom, IDGp, Sten_RPD, Pos11, Vn_Dat, God, Mes, Kol_S, Kol_Zap_S: string;
  Kol, Kol_Zap, Kol_kl, y, i, j, Fl, Res, Res1, A, B, Kol_G, Kol_Gor, Kol_V, Kol_Vert, a150, a200, a250, a300, a350, a400, a450, a500, a550, a600, a650, a700, a750, a800, a850, a900, a950, a1000, b150, b200, b250, b300, b350, b400, b450, b500, b550, b600, b650, b700, b750, b800, b850, b900, b950, b1000, Nom, Nom1, Galka, KPD, Kol_P: integer;
  SV, SB, SV_O, SB_O: Double;
  XL: Variant;
  Oboz, Os, Err, FileName_Server, S, Proc, Str1: string;
  Kol_I, XX, YY, Cvet: Integer;
  SS,D: string;
begin
        //Clear_StringGrid(ZSG);    FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date) FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  StrDat3 := FormatDateTime('"Дата: "dd.mm.yyyy, "  время: 8-10"', DateTimePicker3.DateTime);
  StrDat4 := FormatDateTime('"Дата: "dd.mm.yyyy, "  время: "hh-mm', Now);
  StrDat5 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);

  Memo7.Lines.Clear;
  Memo9.Lines.Clear;
  Memo8.Lines.Clear;
  Memo15.Lines.Clear;
  Memo16.Lines.Clear;
  Memo9.Lines.Clear;

  Label40.Caption := IntToStr(Kol_kl);
  Label37.Caption := FloatToStr(RoundTo(SB_O, -2));
  Label39.Caption := FloatToStr(RoundTo(SV_O, -2));
  ZSG.ColWidths[I_FN_KOL] := 0;
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Vn_Dat := FormatDateTime('mm.dd.yyyy ', Now);
  God := FormatDateTime('yyyy', Now);
  Mes := FormatDateTime('mmmm', Now);

  Dir := Put_KTO + '\CKlapana\Стенки\';
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\Стенки\' + God + '\';
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\Стенки\' + God + '\' + Mes + '\';
  CreateDir(Dir);

  XL := CreateOleObject('Excel.Application'); //  — копия
  XL.Application.EnableEvents := false;
   CopyFile(PWideChar(Put_KTO + '\CKlapana2\2013\Стенки_Лента.xls'), PWideChar(Dir + '\' + StrDat5 + '.xls'), False);
  XL.Workbooks.Open(Dir + '\' + StrDat5 + '.xls');
  //XL.Application.ActiveWorkBook.SaveAs(Dir + '\' + StrDat5 + '.xls');
  //XL.Visible := True;
 // XL.ActiveWorkBook.WorkSheets[1].Range['G' + IntToStr(4), 'G' + IntToStr(4)] := StrDat3;
 // XL.ActiveWorkBook.WorkSheets[1].Range['G' + IntToStr(2), 'G' + IntToStr(2)] := StrDat4;


  OSI('', '', '', '', '', 1, XL);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   //Стенки комплект
             //гор                     //Верт                  //ТЕКИ 269.15.01.001- ТЕКИ 269.15.01.001- ТЕКИ 269.15.01.007-              //ТЕКИ 269.15.01.001-A-01 Г      //В
  Stenki(SS, 'ТЕКИ 07.239.01.00.001-', 'ТЕКИ 07.239.01.00.002-', 'ВГ 1106.03.00.002-', 'ВГ 1106.03.00.001-', '', '', '', SS, SS, 4, XL);
  //добавить проверку в запрос  ВГ 342.01.00.001- попадет и ВГ 342.01.00.001-01-
  Stenki_KED(SS, 'ВГ 342.01.00.003-', 'ВГ 342.01.00.004-', 'ВГ 342.01.00.002-', 'ВГ 342.01.00.001-', 'ВГ 342.01.00.001-01-', 'ВГ 451.01.00.001-', 'ВГ 451.01.00.001-01', SS, SS, 6, XL);
  //               'ВГ 050.33.00.101-','ВГ 050.33.00.001-',
  Stenki_Vozd(SS, 'ВГ 050.00.00.002-', 'ВГ 053.00.00.001-', 'ВГ 050.00.00.001-', 'ВГ 050.00.00.001-', '', '', '', SS, SS, 8, XL);
  Lopatka(SS, 'ВГ 050.00.00.003-', '', '', '', SS, SS, 10, XL);

  Stenki_KED06(SS, 'ВГ 342.06.00.003-', 'ВГ 342.06.00.004-', 'ВГ 342.06.00.002-', 'ВГ 342.06.00.001-', 'ВГ 342.06.00.001-01-', '', '', SS, SS, 12, XL);
  D:=FormatDateTime('dd.mm.yyyy', DateTimePicker3.DateTime);
  Lenta('Лента уплотнительная', 'Клапан', StrDat1, StrDat2, D, 14, XL);

//==================================================
 // XL.Application.ActiveWorkBook.SaveAs(Dir + '\' + StrDat5 + '.xls');
  //XL.ActiveWorkBook.Close(true,Dir + '\' + StrDat5 + '.xls');
  //XL.Workbooks.Open(Dir + '\' + StrDat5 + '.xls');
  XL.Application.ActiveWorkBook.Save;
  XL.Visible := True;
  XL := UnAssigned;
end;

procedure TForm1.Button45Click(Sender: TObject);
var
  h: hwnd;
  God, mes, Dir: string;
begin
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);

  Dir := Put_KTO + '\CKlapana\Стенки\' + God + '\' + mes + '\';

  ShellExecute(h, 'open', PWideChar(Dir), nil, nil, SW_SHOW);
end;

procedure TForm1.Button12Click(Sender: TObject);
var
  Res_Ger_P, i, Kol_Priv, Kol_Lop, B_i, A_i, Kol, Ispolnenie_I, Tip_priv_I, Res_Isp, Tip_I: Integer;
  Str, NC_S, IDGP, IDKO, Tip_Klap,       //1
                //A
                //B
Ispolnenie,     //3
Var_Raskr_Lop,  //4
Tip_Priv,       //5
Nal_Kog,        //6
Ispol_KOnstr,   //7
Ispol_Klim      //8
, Str1: string;
  HK, HK1, HK2, HK3, HK_ISP, HK_TIP, NC_Sbor, NC_PodSbor: Double;
  Kod, Pos_Zv, res, Res1, Reg_L, Ruch, Pos_U// Для Гермика УХЛ
, Res_KVR, EPV, //Взрывозащита0.116  0.322
Regular_krugl, //Регуляр круглый
Res_KID, Reglan,Y: Integer;
  Izdel, Izdelie, Izdel_Germik, Nam, Isp, Tip, Privod, Pos1, Pos2, Pos3,
  Pos4, Pos5, Pos6, Pos7, L, A, A_s, B, B_s, BZ, Tulpan_Nom: string;
  SB_1, SB_2, Kol_Ed,NC_Ger_S_Prov,Obvarka,El1: Double;
  SB1_S, SB2_S, Kol_Ed_Str, SB_LOP_S, Sborka_lop,Prov,Obv,Nom,El_S: string;
  Reg: Integer;
  Result: Tresult;
begin
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  for i := 0 to StringGrid6.RowCount - 1 do
  begin
    if (StringGrid6.Cells[I_FN_SBOR_KLAP_NC, i + 1] = '0') and (StringGrid6.Cells[24, i + 1] <> '') and (StringGrid6.Cells[26, i + 1] <> '') then
    begin
      Result.Sborka2:=0;
      Result.Sborka1:=0;
      NC_Sbor := 0;
      NC_PodSbor := 0;
      NC_Ger_S_Prov:=0;
      Obvarka:=0;
      Result.Obvarka_G_R:=0;
      Result.Svarka:=0;//Расключение
      Result.El:=0;
      Obv:='0';
      Prov:='0';
      HK := 0;
      HK1 := 0;
      HK2 := 0;
      HK3 := 0;

      Pos1 := '';
      Isp := '';
      Tip := '';
      Pos2 := '';
      Pos3 := '';
      Pos4 := '';
      Pos5 := '';
      Pos6 := '';
      Pos7 := '';
      Tip_Klap := '';

      Ispolnenie := '';
      Var_Raskr_Lop := '';
      Tip_Priv := '';
      Nal_Kog := '';
      Ispol_KOnstr := '';
      Ispol_Klim := '';
      Izdel := SGL.Cells[I_FN_NAM, i + 1];
      Izdelie := SGL.Cells[I_FN_NAM, i + 1];
      Res_KID := Pos('КИД', Izdelie);
      if Res_KID <> 0 then
        Continue;
      Res_KID := Pos('КРОС', Izdelie);
      if Res_KID <> 0 then
        Continue;

      Izdel_Germik := SGL.Cells[I_FN_NAM, i + 1];
      Kol := StrToInt(SGL.Cells[I_FN_Kol, i + 1]);
      IDGP := SGL.Cells[I_FN_SGP + 2, i + 1];
      IDKO := SGL.Cells[I_FN_SGP + 8, i + 1];
      Nam := SGL.Cells[I_FN_NAM, i + 1];
      BZ := StringGrid6.Cells[23, i + 1]; //BZ
      Kod := StrToInt(StringGrid6.Cells[25, i + 1]); //Kod
      Kol_Lop := StrToInt(StringGrid6.Cells[26, i + 1]);
      Kol_Priv := StrToInt(StringGrid6.Cells[2, i + 1]);  //Клапан ГЕРМИКх2С-1460*1735-Н-2*SFA-1-УХЛ2-0
      //Клапан Канал-КОЛ-К-100
      Reg := Pos('Канал-КОЛ-К-', Izdel);
      if (Reg <> 0)  then
      begin
        Result := KANAL_KR(Izdel, IDGP, IDKO, 0, i);
      end;
//
      Res1 := Pos('Канал-КВ-', Izdel);
      if (Res1 <> 0)  then
      begin
        Result := KANAL_KR_KV(Izdel, IDGP, IDKO, 0, i);
      end;
//
      Res1 := Pos('НЕРПА-', Izdel);
      if (Res1 <> 0)  then
      begin
        Result := NERPA(Izdel, IDGP, IDKO, 0, i);
      end;
      ////Клапан Канал-КОЛ-100-50
      Reg := Pos('Канал-КОЛ-К-', Izdel);
      Res1 := Pos('Канал-КОЛ-', Izdel);
      if (Reg = 0) AND (Res1<>0) then
      begin
        Result := KANAL_KV(Izdel, IDGP, IDKO, 0, i);
      end;

      Res1 := Pos('ГЕРМИКх2', Izdel);
      if Res1 <> 0 then
        Continue;
      {Res1 := Pos('_', Izdel);
      if Res1 <> 0 then
        Continue;  24.05.22 Матвеенко}
      Reg := Pos('ГЕРМИК', Izdel);
      Res1 := Pos('Канал', Izdel);
      if (Reg <> 0) and (Res1 = 0) then
      begin
        Result := Germik_P(Izdel, IDGP, IDKO, 0, i);
      end;
      //========================================================
      Reg := Pos('РЕГУЛЯР', Izdel);
      //Res1 := Pos('Канал', Izdel);
      if (Reg <> 0) then
      begin
        Result := Regular(Izdel, IDGP, IDKO, 0, i);
      end;
    //=============================   Клапан ТЮЛЬПАН-1-250*250-КВ-2*225
      Reg := Pos('ТЮЛЬПАН', Izdel);
      if (Reg <> 0) then
      begin
        Result := TULPAN(Izdel, IDGP, IDKO, 0, i);
      end;
    //=============================  Клапан КЛАРА-350*350-Н
    // Клапан КЛАРА-560-Н
    //Клапан КЛАРА-450-К
    //Клапан КЛАРА-КРОС-800-Н
      Reg := Pos('КЛАРА', Izdel);
      if (Reg <> 0) then
      begin
        Result := KLARA(Izdel, IDGP, IDKO, 0, i);
      end;
      //
      Result := Elektr(Izdel, IDGP, 1, I);
      El1:=Result.El;
      El_S := StringReplace(FloatToStr(El1), ',', '.', [rfReplaceAll]);
      //
        NC_Sbor := Result.Sborka1;
        SB_1 := Result.Sborka1;
        SB_2 := Result.Sborka2;
        NC_Ger_S_Prov:=Result.Svarka;
        SB_LOP_S  :=Result.Sborka_lop;
              //

        Obvarka:=Result.Obvarka_G_R;
        SB1_S := StringReplace(FloatToStr(SB_1), ',', '.', [rfReplaceAll]);
        SB2_S := StringReplace(FloatToStr(SB_2), ',', '.', [rfReplaceAll]);
        Prov := StringReplace(FloatToStr(NC_Ger_S_Prov), ',', '.', [rfReplaceAll]);
        Obv := StringReplace(FloatToStr(Obvarka), ',', '.', [rfReplaceAll]);            //Сборка лопаток
        SB_LOP_S := StringReplace(SB_LOP_S, ',', '.', [rfReplaceAll]);
        SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
        if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Н\ч Сборка Клапана]=' + #39 + (SB1_S) + #39 +
        ',[Н\ч Сварка]=' + #39 + (SB2_S) + #39 + ',[Расключение]=' + #39 + (Prov) + #39 +
        ',[Сборка лопаток]=' + #39 + (SB_LOP_S) + #39 +',[Обварка]=' + #39 + (Obv) + #39 + ',[Электро]=' +
        #39 + (El_S) + #39 +' WHERE ([IdГП]=' + #39 + IDGP + #39 +
        ') AND ([IdКО]=' + #39 + IDKO + #39 +
        ') ', ['KlapanaZap']) then
          Exit;

        if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where ([IdГП]=' + #39 + IDGP + #39 +
        ') AND ([IdКО]=' + #39 + IDKO + #39 + ') ', ['ЗапускВозд']) then
          exit;
        for Y := 0 to Form1.ADOQuery2.RecordCount-1 do
        Begin
          Kol_Ed_Str := StringReplace(Form1.ADOQuery2.FieldByName('Кол во запущенных').AsString, '.', ',', [rfReplaceAll]);
          Nom:=Form1.ADOQuery2.FieldByName('Номер').AsString;
          if (Kol_Ed_Str = '') then
          Continue;
          Kol_Ed := StrToFloat(Kol_Ed_Str);
                  NC_Sbor := Result.Sborka1;
          SB_1 := Result.Sborka1;
          SB_2 := Result.Sborka2;
          NC_Ger_S_Prov:=Result.Svarka;
          Obvarka:=Result.Obvarka_G_R;
          SB1_S := StringReplace(FloatToStr(SB_1), ',', '.', [rfReplaceAll]);
          SB2_S := StringReplace(FloatToStr(SB_2), ',', '.', [rfReplaceAll]);
          Prov := StringReplace(FloatToStr(NC_Ger_S_Prov), ',', '.', [rfReplaceAll]);
          Obv := StringReplace(FloatToStr(Obvarka), ',', '.', [rfReplaceAll]);

          SB_1 := SB_1 * Kol_Ed;
          //
          SB_2 := SB_2 * Kol_Ed;
          //
          Sborka_lop:=FloatToStr(StrToFloat(SB_LOP_S)*Kol_Ed);
          NC_Ger_S_Prov := NC_Ger_S_Prov * Kol_Ed;
          Obvarka:=Obvarka* Kol_Ed;
          El1:=El1* Kol_Ed;
          El_S := StringReplace(FloatToStr(El1), ',', '.', [rfReplaceAll]);

          SB1_S := StringReplace(FloatToStr(SB_1), ',', '.', [rfReplaceAll]);
          SB2_S := StringReplace(FloatToStr(SB_2), ',', '.', [rfReplaceAll]);
          Prov := StringReplace(FloatToStr(NC_Ger_S_Prov), ',', '.', [rfReplaceAll]);
          Obv := StringReplace(FloatToStr(Obvarka), ',', '.', [rfReplaceAll]);
          if not Form1.mkQueryUpdate2(Form1.ADOQuery3, 'UPDATE %s SET [Н\ч Сборка Клапана]=' + #39 + SB1_S + #39 +
          ',[Н\ч Сварка]=' + #39 + SB2_S + #39 + ',[Расключение]=' + #39 + Prov + #39 +
          ',[Обварка]=' + #39 + (Obv) + #39 + ',[Электро]=' +
          #39 + (El_S) + #39 +',[Сборка лопаток]=' +
          #39 + (Sborka_lop) + #39 + ' WHERE ([Номер]=' + #39 + Nom + #39 + ') AND ([IdГП]=' + #39 + IDGP + #39 + ') AND ([IdКО]=' + #39 + IDKO + #39 +
          ')', ['ЗапускВозд']) then
          Exit;
          Form1.ADOQuery2.Next;
        End;
    end;

  end;
end;

procedure TForm1.btn1Click(Sender: TObject);
var
  Kod, Pos_Zv, res, Klara, Reg_L, Reg, i: Integer;
  Izdel, Izdelie, Nam, Isp, Tip, Privod, Pos1, Pos2, Pos3, Pos4, Pos5, Pos6, Pos7, L, A, B, BZ, Tulpan_Nom, IDGP, IDKO, Str: string;
begin
  {if OpenDialog1.Execute then
  begin
    Str := OpenDialog1.FileName;
    Xls_To_StringGrid(SG1, Str, 'Лист1');
  end; }
  for i := 0 to SGL.RowCount - 1 do
  begin
    IDGP := SGL.Cells[I_FN_SGP + 2, i+1];
    IDKO := SGL.Cells[I_FN_SGP + 8, i+1];
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Н\ч Сборка Клапана]=' + #39 + '0' + #39 +
    ' WHERE (IDГП=' + IDGP + ') AND (IDКО=' + IDKO + ')', ['KlapanaZap']) then
      Exit;
  end;
end;

procedure TForm1.ClearSborClick(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Н\ч Сборка Клапана]=' + #39 + '0' + #39 + ', [Н\ч Сварка]=' + #39 + '0' + #39, ['KlapanaZap']) then
    Exit;

  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Н\ч Сборка Клапана]=' + #39 + '0' + #39 + ', [Н\ч Сварка]=' + #39 + '0' + #39, ['ЗапускВозд']) then
    Exit;

end;

procedure TForm1.btn2Click(Sender: TObject);
begin
  Flag_Briket := 0;
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  FV1.Show;
end;

procedure TForm1.ImportClick(Sender: TObject);
var
  Str, Briket1, Briket2, Br_D1, Br_D2, Briket, Briket_STAM, BZ, Izdel, IDGP, IDKO, DatZap, Kol, Kol_Raz, Ras_Dat, Br, Proizv, Izdel_S: string;
  Dat, Str3: TDate;
  I, Y, Den2, Den1, Ned2, Ned1, Kod, Len, Kol_Zap, Kol_ZAD, Res1, Flag_Prov: Integer;
begin
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  Clear_StringGrid(SG1);
  if OpenDialog2.Execute then
  begin
    Str := OpenDialog2.FileName;
    Xls_To_StringGrid(SG1, Str, 'Лист1');
  end
  else
    Exit;

  DatZap := ConvertDat1(SG1.Cells[0, 0]);
  Dat := StrToDate(SG1.Cells[0, 0]);   //Дата запуска(в заголовке файла)
  Dat := Dat + 8;
  Den1 := DayOfWeek(StrToDate(SG1.Cells[0, 0]));
  Ned1 := WeekNum(StrToDate(SG1.Cells[0, 0]));
  Den2 := DayOfWeek(Dat);
  Ned2 := WeekNum(Dat);
  Memo5.Lines.Add(IntToStr(Den1 - 1));
  Memo5.Lines.Add(IntToStr(Ned1));
  Memo5.Lines.Add(IntToStr(Den2 - 1));
  Memo5.Lines.Add(IntToStr(Ned2));

  Briket1 := IntToStr(Ned1);
  Briket2 := IntToStr(Ned2);
  Br_D1 := IntToStr(Den1);
  Br_D2 := IntToStr(Den2);
  Briket := '';
  Briket := IntToStr(Ned1) + '(' + IntToStr(Den1 - 1) + ')-' + IntToStr(Ned2) + '(' + IntToStr(Den2 - 1) + ')';
        //--------------------------------------------------------------------------

  Memo5.Lines.Add(Briket);
  Memo5.Lines.Clear;
  for I := 1 to SG1.RowCount do
  begin
    Flag_Prov := 0; //Для СТАМ ,Если взвели значит такой зспуск уже был
    Proizv := SG1.Cells[20, I];
    BZ := SG1.Cells[3, I + 1];
    Izdel_S := SG1.Cells[4, I + 1];
    Izdel := StringReplace(Izdel_S, '%', 'проц.', [rfReplaceAll]);
    Kol := (SG1.Cells[5, I + 1]);
    Ras_Dat := ConvertDat1(SG1.Cells[6, I + 1]);
    if SG1.Cells[0, I + 1] = '' then
      Kod := 0
    else
      Kod := StrToInt(SG1.Cells[0, I + 1]);
    IDGP := SG1.Cells[15, I + 1];
    if SG1.Cells[16, I + 1] = '' then
      IDKO := '0'
    else
      IDKO := SG1.Cells[16, I + 1];

    if (Kod = 310) or (Kod = 330) then
    begin

      if not mkQuerySelect(ADOQuery1, 'Select * from %s  Where IdГП=' + #39 + IDGP + #39, ['Klapana']) then
        exit;
      if (ADOQuery1.RecordCount = 0) and (IDGP <> '') then
        Memo5.Lines.Add(Izdel + ' Заказ=' + SG1.Cells[2, I + 1] + ' IdГП=' + IDGP + ' IDКО=' + IDKO + ' Дата задания=' + SG1.Cells[17, I + 1]);
    end;
    if (Kod <> 310) and (Kod <> 330) and (Kod <> 600) then
    begin

      if not mkQuerySelect(ADOQuery1, 'Select * from %s  Where (IdГП=' + #39 + IDGP + #39 + ') AND (IdКО=' + #39 + IDKO + #39 + ')  ', ['KlapanaZap']) then
        exit;
      if (ADOQuery1.RecordCount = 0) and (IDGP <> '') then
        Memo5.Lines.Add(Izdel + ' Заказ=' + SG1.Cells[2, I + 1] + ' IdГП=' + IDGP + ' IDКО=' + IDKO + ' Дата задания=' + SG1.Cells[17, I + 1]);
      if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET [Брикет]=' + #39 + Briket + #39 + ',[Брик_Нед1]=' + #39 + Briket1 + #39 + ',[Брик_Нед2]=' + #39 + Briket2 + #39 + ',[Брик_Ден1]=' + #39 + Br_D1 + #39 + ',[Брик_Ден2]=' + #39 + Br_D2 + #39 + ' WHERE ([БЗ]=' + #39 + BZ + #39 + ') AND ([Изделие]=' + #39 + Izdel + #39 + ') AND ([IDГП]=' + #39 + IDGP + #39 + ') AND ([IDКО]=' + #39 + IDKO + #39 + ')', ['KlapanaZap']) then
        Exit;

      if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET [Брикет]=' + #39 + Briket + #39 + ',[Брик_Нед1]=' + #39 + Briket1 + #39 + ',[Брик_Нед2]=' + #39 + Briket2 + #39 + ',[Брик_Ден1]=' + #39 + Br_D1 + #39 + ',[Брик_Ден2]=' + #39 + Br_D2 + #39 + ' WHERE ([БЗ]=' + #39 + BZ + #39 + ') AND ([Изделие]=' + #39 + Izdel + #39 + ') AND ([IDГП]=' + #39 + IDGP + #39 + ') AND ([IDКО]=' + #39 + IDKO + #39 + ')', ['ЗапускВозд']) then
        Exit;
    end;
    if (Kod = 600) then
    begin
      if not mkQuerySelect(ADOQuery1, 'Select [Кол Раз],[Брикет] from %s Where ([Изделие]=' + #39 + Izdel + #39 + ') AND (IdГП=' + #39 + IDGP + #39 + ') AND (L=0)', ['СТАМ']) then
        exit;
      if (ADOQuery1.RecordCount = 0) and (IDGP <> '') then
        Memo5.Lines.Add(Izdel + ' Заказ=' + SG1.Cells[2, I + 1] + ' IdГП=' + IDGP + ' IDКО=' + IDKO + ' Дата задания=' + SG1.Cells[17, I + 1]);
      if (ADOQuery1.RecordCount <> 0) then
      begin
                                //Проверка на повторный запуск. Если такая дата запуска уже была то уходим
        Br := Form1.ADOQuery1.FieldByName('Брикет').AsString;
        Delete(Br, 1, 2);
        Memo11.Lines.Clear;
        for Y := 0 to 30 do
        begin
          Res1 := Pos(',', Br);
          if Res1 <> 0 then
          begin
            Memo11.Lines.Add(Copy(Br, 1, Res1 - 1));
            Delete(Br, 1, Res1);
          end
          else
          begin
            Memo11.Lines.Add(Br);
            Break;
          end;
        end;
        for Y := 0 to Memo11.Lines.Count do
        begin
          Res1 := AnsiCompareStr(Memo11.Lines.Strings[Y], DatZap);
          if Res1 = 0 then
          begin
            Flag_Prov := 1;
            Break;
          end;

        end;
        if Flag_Prov = 1 then
          Continue;
                                //+++++++++++++++++++++++++++++++++++++++++++++++
        Kol_Raz := ADOQuery1.FieldByName('Кол Раз').AsString;
        Kol_Raz := Kol_Raz + ',' + Kol;
        Briket_STAM := ADOQuery1.FieldByName('Брикет').AsString;
        Briket_STAM := Briket_STAM + ',' + Ras_Dat;
        if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET [Брикет]=' + #39 + Briket_STAM + #39 + ',[Брик_Нед1]=' + #39 + Briket1 + #39 + ',[Брик_Нед2]=' + #39 + Briket2 + #39 + ',[Брик_Ден1]=' + #39 + Br_D1 + #39 + ',[Брик_Ден2]=' + #39 + Br_D2 + #39 + ',[Кол Раз]=' + #39 + Kol_Raz + #39 + ',[Расчетная дата готовности]=' + #39 + Ras_Dat + #39 + ',[Дата Запуска]=' + #39 + DatZap + #39 + ' WHERE ([БЗ]=' + #39 + BZ + #39 + ') AND ([Изделие]=' + #39 + Izdel + #39 + ') AND ([IDГП]=' + #39 + IDGP + #39 + ') AND ([IDКО]=' + #39 + IDKO + #39 + ')', ['СТАМ']) then
          Exit;

        if not mkQueryUpdate(ADOQuery1, 'UPDATE %s SET [Брикет]=' + #39 + Briket_STAM + #39 + ',[Брик_Нед1]=' + #39 + Briket1 + #39 + ',[Брик_Нед2]=' + #39 + Briket2 + #39 + ',[Брик_Ден1]=' + #39 + Br_D1 + #39 + ',[Брик_Ден2]=' + #39 + Br_D2 + #39 + ',[Кол Раз]=' + #39 + Kol_Raz + #39 + ',[Расчетная дата готовности]=' + #39 + Ras_Dat + #39 + ',[Дата Запуска]=' + #39 + DatZap + #39 + ' WHERE ([Изделие]=' + #39 + Izdel + #39 + ') AND ([IDГП]=' + #39 + IDGP + #39 + ')', ['ЗапускСТАМ']) then
          Exit;
      end;
    end;
  end;
  Memo11.Lines.Clear;
  if Memo5.Lines.Strings[0] <> '' then
  begin
    Len := Length(Str);
    Delete(Str, Len - 4, 6);
    Memo5.Lines.SaveToFile(Str + '.txt');
  end;
        //Диск облицовочный - ВГ 439.02.00.003 и подставка ниппель - ВГ 356.00.00.002
        //у Вити на трумф выпадает, размер до 355
end;

procedure TForm1.N33Click(Sender: TObject);
begin
  PageControl1.ActivePageIndex := 5;
  Order := ' Order By Номер';
  ComboBox15.ItemIndex := 12;
  Button28.Click;
  Find_StringGrid(SGL, ZCV.Cells[2, ZCV.Row], 2, ZCV.Cells[12, ZCV.Row]{NAM}, 5);
end;

procedure TForm1.N35Click(Sender: TObject);
var
  XL2, Sheet2, Sheet1, Rang: Variant;
  E, i, Res, Priv, Kol_Zap, U, uu, FF, FF1, R, Row: Integer;
  Vn_DAt, Dir, God, mes, Nom, S_Svar, S_Sbor, Priv_Str, Brik, d: string;
  Svar_o, Sbor_o, KOl_D: Double;
  Elem, Vid, Oboz, Kol_S, Mat, Stan, Idgp, Zak, Izdel, k, Dir1, Prim: string;
  Res_Nog, Res_Trumph, Res_Gib, Res_Pila, Kanban, Val, Svark, Rotor, Pokr, qq, C: Integer;
begin
  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
  Nom := ZCV.Cells[0, ZCV.Row];
  C := StrToInt(ZCV.Cells[35, ZCV.Row]);
  d := FormatDateTime('dd.mm.yyyy', DateTimePicker1.Date);
  Dir1 := 'Суточные задания (Возд)';
  qq := 1;
  Prim := ZCV.Cells[11, ZCV.Row];
  Form1.SUT(d, Nom, Dir1, qq, C, Prim);
  Exit;
end;

procedure TForm1.edt1KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and (Button6.Enabled) then
    Button6Click(nil);
end;

procedure TForm1.edt4Change(Sender: TObject);
begin
  Edit16.Text := '';
  Edit17.Text := '';
  Find_StringGrid(SGL, edt4.Text, I_FN_SGP + 3, Label17.Caption, 5);
end;

procedure TForm1.edt4Click(Sender: TObject);
begin
  Edit16.Text := '';
  Edit17.Text := '';
  Edit23.Text := '';
end;

procedure TForm1.edt4KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and (Button6.Enabled) then
    Button6Click(nil);
end;

procedure TForm1.Button19Click(Sender: TObject);
var
  Elem, Kol_Ed, Kol, Obozn, Kol_Gib, Mater, Obozn_Sh, PUT, Norm, Trumpf, Gibka, Kromk, Rotor, Valci, Tokar: string;
  I, res, Res1: Integer;
begin
  for I := 0 to 12 do
  begin
    Trumpf := 'FALSE';
    Gibka := 'FALSE';
    Kromk := 'FALSE';
    Rotor := 'FALSE';
    Valci := 'FALSE';
    Tokar := 'FALSE';
    Obozn_Sh := SG1.Cells[0, I + 2];
    Obozn := SG1.Cells[0, I + 2];
    Kol_Ed := SG1.Cells[2, I + 2];
    Kol := SG1.Cells[2, I + 2];
    Elem := SG1.Cells[1, I + 2];
                //Kol_Gib:=SG1.Cells[1,I+2];
    Mater := SG1.Cells[3, I + 2];
    PUT := SG1.Cells[5, I + 2];
                //-------------------
    res := Pos('Трумф', PUT);
    if res <> 0 then
      Trumpf := 'TRUE';
                //---------------------
    res := Pos('гибка', PUT);
    if res <> 0 then
      Gibka := 'TRUE';
                //---------------------
    res := Pos('Кромкогиб', PUT);
    if res <> 0 then
      Kromk := 'TRUE';
                //---------------------
    res := Pos('Вальцы', PUT);
    if res <> 0 then
      Valci := 'TRUE';
                //---------------------
    res := Pos('Токар', PUT);
    if res <> 0 then
      Tokar := 'TRUE';
                //---------------------
    res := Pos('ротор', PUT);
    if res <> 0 then
      Rotor := 'TRUE';
    Kol_Gib := SG1.Cells[6, I + 2];
    Norm := SG1.Cells[7, I + 2];
    if not mkQuerySelect(ADOQuery2, 'Select * from %s  Where  (ОбозначениеШ=' + #39 + Obozn_Sh + #39 + ')', ['Шаблон']) then
      exit;
    if ADOQuery2.RecordCount = 0 then
    begin
      if not mkQueryInsert(ADOQuery1, 'Insert Into %s ' + '(ID, Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' + '[Тип], [Категория], [Примечание], [Диаметр], [Масса], [Длина],   [Ширина], [ДлинаРазв],' + '[ШиринаРазв], [Объем], [КолГибов], [Канбан], [Материал], [КомплВед], [Trumph], [Ножницы],' + '[Углоруб], [Гибка], [Прокатка], [Пила],Изделие,ОбозначениеШ,Дата,[ШиринаПолки1],[ШиринаПолки2],[Н\ч Гибка],' + 'Ротор,Вальцы,Кромкогиб,Токарный ) ' +
        'Values (%s,%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s ,%s,%s ,%s,' + '%s,%s,%s,%s)', ['Шаблон', #39 + IntToStr(0) + #39, #39 + 'False' + #39, #39 + 'Детали' + #39, #39 + Elem + #39, #39 + Kol_Ed + #39, #39 + Kol + #39, #39 + '0' + #39, #39 + Obozn + #39, #39 + '1' + #39, #39 + '1' + #39, #39 + '1' + #39, #39 + Edit3.Text + #39, #39 + '1' + #39, #39 + '1' + #39, #39 + '1' + #39, #39 + '1' + #39, #39 + '1' + #39, #39 + '0' + #39, #39 +
        Kol_Gib + #39, #39 + 'False' + #39, #39 + Mater + #39, #39 + '0' + #39, #39 + Trumpf + #39, #39 + 'False' + #39, #39 + 'False' + #39, #39 + Gibka + #39, #39 + 'False' + #39, #39 + 'False' + #39, #39 + 'Круглый' + #39, #39 + Obozn_Sh + #39, 'NULL', #39 + '0' + #39, #39 + '0' + #39, #39 + Norm + #39, #39 + Rotor + #39, #39 + Valci + #39, #39 + Kromk + #39, #39 + Tokar + #39]) then
        exit;

    end;
  end;
       { if not Form1.mkQueryDelete(Form1.ADOQuery1,
                'DELETE FROM %s Where  (IDГП=' +
                #39 + '486113' + #39 + ') ',
                ['Запуск']) then
                Exit;  }
end;

procedure TForm1.rg1Exit(Sender: TObject);
begin
  case rg1.ItemIndex of
    0:
      Voz_Brik := ' ';
    1:
      Voz_Brik := ' AND ((IdКО IS NULL) OR (IdКО=' + #39 + #39 + ')) ';
    2:
      Voz_Brik := ' AND ((NOT БЗ IS NULL) AND (БЗ<>' + #39 + #39 + ')) ';
    3:
      Voz_Brik := ' AND (NOT Брикет IS NULL) AND (Брикет<>' + #39 + #39 + ') AND (IdКО <>' + #39 + '0' + #39 + ')';
  end;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin

  Application.HintHidePause := 30000;
  DragAcceptFiles(Handle, true);
end;

procedure TForm1.btn3Click(Sender: TObject);
var
  I, res, Res1, Kol_I, Y: Integer;
  God, Mes: Integer;
  Dat, Dat1, Betwe1: string;
  Br, Izdel, Kol: string;
  Rect: TRect;
begin

  Clear_StringGrid(SG);
  SG.COLCount := 28;
  SG.Cells[0, 0] := '№';
  SG.Cells[1, 0] := 'Дата задания';
  SG.Cells[2, 0] := 'Заказ';
  SG.Cells[3, 0] := 'Изделие';
  SG.Cells[4, 0] := 'Кол во';
  SG.Cells[5, 0] := 'Кол во запущенных';
  SG.Cells[6, 0] := 'План Неделя';
  SG.Cells[7, 0] := 'Расчетная Дата готовности';
  SG.Cells[8, 0] := 'Запущенно по брикету';
  SG.Cells[9, 0] := 'Кол принятых';
  SG.Cells[10, 0] := 'Упаковка1';
  SG.Cells[11, 0] := 'Дата Запуска';
  SG.Cells[12, 0] := 'ОТК';
  SG.Cells[13, 0] := 'IDГП';
  SG.Cells[14, 0] := 'НачНомер';
  SG.Cells[15, 0] := 'КонНомер';
  SG.Cells[16, 0] := 'Статус';
  SG.Cells[17, 0] := 'Брикет';
  SG.Cells[18, 0] := 'Технолог';
  SG.Cells[19, 0] := 'Б\З';
  SG.Cells[20, 0] := 'Н\ч Сборка';
  SG.Cells[21, 0] := 'Материал';
  SG.Cells[22, 0] := 'Прмечания';

  SG.Cells[23, 0] := 'Клапан';
  SG.Cells[24, 0] := 'СпецКлап';
  SG.Cells[25, 0] := 'КолКлап';
  SG.Cells[26, 0] := 'ДатКлап';
  SG.Cells[27, 0] := 'Отмена';
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  if ((Cbb3.ItemIndex = 0) or (Cbb3.ItemIndex = -1) or (Cbb3.Text = '')) and (Cbb2.ItemIndex <> 0) and (Cbb2.Text <> '') then
  begin
    if Cbb2.ItemIndex = -1 then
      God := StrToInt(Cbb2.Text)
    else
      God := StrToInt(Cbb2.Items[Cbb2.ItemIndex]);
    Dat := '12.31.' + IntToStr(God - 1);
    Dat1 := '12.31.' + IntToStr(God);
    Betwe1 := ' AND (Дата BETWEEN ' + #39 + Dat + #39 + ' AND ' + #39 + Dat1 + #39 + ') ';
  end;
  if (Cbb2.ItemIndex <> 0) and (Cbb2.Text <> '') and (Cbb3.ItemIndex <> 0) and (Cbb3.ItemIndex <> -1) and (Cbb3.Text <> '') then
  begin
    if Cbb2.ItemIndex = -1 then
      God := StrToInt(Cbb2.Text)
    else
      God := StrToInt(Cbb2.Items[Cbb2.ItemIndex]);
    Mes := Cbb3.ItemIndex;
    Dat := IntToStr(Mes) + '.01' + '.' + IntToStr(God);
    if Mes = 12 then
      Dat1 := '01.01.' + IntToStr(God + 1)
    else
    begin
      if (Mes + 1) < 10 then
        Dat1 := '0' + IntToStr(Mes + 1) + '.01.' + IntToStr(God)
      else
        Dat1 := IntToStr(Mes + 1) + '.01.' + IntToStr(God);
    end;
    Betwe1 := ' AND (Дата>= ' + #39 + Dat + #39 + ' AND Дата<' + #39 + Dat1 + #39 + ') ';
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if (cbb4.ItemIndex = 0) then
    Betwe1 := Betwe1 + ' AND (NOT ОТК IS NULL) ';

  if (cbb4.ItemIndex = 1) then
    Betwe1 := Betwe1 + ' AND ( ОТК IS NULL) ';

  if (cbb4.ItemIndex = 3) or (cbb4.ItemIndex = -1) then
    Betwe1 := Betwe1 + ' AND ( ОТК IS NULL) AND (ПР=' + #39 + 'МИ' + #39 + ') ';
  if Poisk_Stam = 1 then
  begin
    if not mkQuerySelect(ADOQuery2, 'Select * from %s WHERE Заказ= ' + #39 + Edit.Text + #39, ['СТАМ']) then
      exit;
  end;

  if Poisk_Stam = 0 then
  begin
    if not mkQuerySelect(ADOQuery2, 'Select * from %s WHERE (Отмена IS NULL) AND (L=0) ' + Betwe1 + Order2, ['СТАМ']) then
      exit;
  end;
  if ADOQuery2.RecordCount = 0 then
    SG.RowCount := 2
  else
    SG.RowCount := ADOQuery2.RecordCount + 1;
  StatusBar1.Panels[2].Text := IntToStr(ADOQuery2.RecordCount);
  for I := 0 to ADOQuery2.RecordCount - 1 do
  begin
    SG.Cells[1, I + 1] := ADOQuery2.FieldByName('Дата').AsString;
    SG.Cells[2, I + 1] := ADOQuery2.FieldByName('Заказ').AsString;
    Izdel := ADOQuery2.FieldByName('Изделие').AsString;
    Res1 := Pos('Защита', Izdel);
    res := Pos('СТАМ', Izdel);
    if (res <> 0) and (Res1 = 0) then
      Delete(Izdel, 1, res - 1);
    SG.Cells[3, I + 1] := Izdel;
    SG.Cells[4, I + 1] := ADOQuery2.FieldByName('Кол во').AsString;
    SG.Cells[5, I + 1] := ADOQuery2.FieldByName('Кол во Запущенных').AsString;
    SG.Cells[6, I + 1] := ADOQuery2.FieldByName('План Неделя').AsString;
    SG.Cells[7, I + 1] := ADOQuery2.FieldByName('Расчетная Дата готовности').AsString;
                //--------------------------------------------------------------
    mmo1.Lines.Clear;
    Kol_I := 0;
    Kol := Form1.ADOQuery2.FieldByName('Кол Раз').AsString;
    Delete(Kol, 1, 2);
    for Y := 0 to 30 do
    begin
      Res1 := Pos(',', Kol);
      if Res1 <> 0 then
      begin
        mmo1.Lines.Add(Copy(Kol, 1, Res1 - 1));
        Delete(Kol, 1, Res1);
      end
      else
      begin
        mmo1.Lines.Add(Kol);
        Break;
      end;
    end;

    for Y := 0 to mmo1.Lines.Count do
    begin
      if mmo1.Lines.Strings[Y] <> '' then
        Kol_I := Kol_I + StrToInt(mmo1.Lines.Strings[Y]);
    end;
    SG.Cells[8, I + 1] := IntToStr(Kol_I);
                //--------------------------------------------------------------
    SG.Cells[9, I + 1] := ADOQuery2.FieldByName('Кол принятых').AsString;
    SG.Cells[10, I + 1] := ADOQuery2.FieldByName('Упаковка1').AsString;
    SG.Cells[11, I + 1] := ADOQuery2.FieldByName('Дата запуска').AsString;
    SG.Cells[12, I + 1] := ADOQuery2.FieldByName('ОТК').AsString;
    SG.Cells[13, I + 1] := ADOQuery2.FieldByName('IDГП').AsString;
    SG.Cells[14, I + 1] := ADOQuery2.FieldByName('НачНомер').AsString;
    SG.Cells[15, I + 1] := ADOQuery2.FieldByName('КонНомер').AsString;
    SG.Cells[16, I + 1] := ADOQuery2.FieldByName('Статус').AsString;
    SG.Cells[17, I + 1] := ADOQuery2.FieldByName('Брикет').AsString;
    SG.Cells[18, I + 1] := ADOQuery2.FieldByName('Технолог').AsString;
    SG.Cells[19, I + 1] := ADOQuery2.FieldByName('БЗ').AsString;
    SG.Cells[20, I + 1] := ADOQuery2.FieldByName('Н\ч Сборка').AsString;
    SG.Cells[21, I + 1] := ADOQuery2.FieldByName('Мат').AsString;
    SG.Cells[22, I + 1] := ADOQuery2.FieldByName('Примечания').AsString;

    SG.Cells[23, I + 1] := Form1.ADOQuery2.FieldByName('Клапан').AsString;
    SG.Cells[24, I + 1] := Form1.ADOQuery2.FieldByName('СпецКлап').AsString;
    SG.Cells[25, I + 1] := Form1.ADOQuery2.FieldByName('КолКлап').AsString;
    SG.Cells[26, I + 1] := Form1.ADOQuery2.FieldByName('ДатКлап').AsString;
    SG.Cells[27, I + 1] := Form1.ADOQuery2.FieldByName('Отмена').AsString;
    ADOQuery2.Next;

  end;
        //SG.SortByColumn(1);
  for I := 0 to SG.RowCount - 1 do
  begin
    SG.Cells[0, I + 1] := IntToStr(I + 1);
  end;
  SG.ColWidths[9] := 0;
 // SG.ColWidths[10] := 30;
  //SG.ColWidths[19] := 90;
  //SG.ColWidths[18] := 40;
  SG.ColWidths[13] := 0;
  SG.ColWidths[16] := 0;
  SG.ColWidths[24] := 0;
       // SG.ColWidths[19]:=0;

  if not mkQuerySelect(ADOQuery2, 'Select Технолог from %s  Where (Технолог=' + #39 + 'False' + #39 + ')', ['ШаблонСТАМ']) then
    exit;
  Label117.Caption := IntToStr(ADOQuery2.RecordCount);
  SG.RowHeights[0] := 60;
  SG.WordWrap := True;
  Poisk_Stam := 0;
end;

procedure TForm1.btn40Click(Sender: TObject);
begin
  ExportGridATMtoExcel(SG5);
end;

procedure TForm1.btn41Click(Sender: TObject);
begin
  Poisk_LUK := 1;
  btn36.Click;
end;

procedure TForm1.btn42Click(Sender: TObject);
var
  I, qc, q1, q2, Qp, A, B, zv, q, Kol,Ii: Integer;
  S, S1, Iz, Izd, IDGP, IDKO,Izdel: string;
  F,Svarka1: Double;
begin
LUK_New(Izdel, IDGP, Svarka1, Ii) ;
//Л-К-01-1300*1000-С-1*DIA52-З-0
//Л-К-02-2000*2000-C-2*PLS30-РЗ-0
{    for I := 0 to SG4.RowCount-1 do
    begin
      S:= SG4.Cells[20, i+1];
      IZ:=SG4.Cells[3, i+1];
      IZd:=SG4.Cells[3, i+1];
      IDGP:=SG4.Cells[13, i+1];
      if S='' then
        Continue;
      F:=StrToFloat(S);
     // if F=0 then
      begin
        q1:=Pos('-01-',Iz);
        q2:=Pos('-02-',Iz);

        //Л-К-01-1300*1000-С-1*DIA52-З-0
        if (Q1<>0)  then
        Begin
            Delete(IZD,1,Q1+3);
            //1300*1000-С-1*DIA52-З-0
            Zv:=Pos('*',Izd);
            S:=Copy(Izd,1,zv-1);
            A:=StrToInt(S);
            Delete(IZD,1,Zv);
            //1000-С-1*DIA52-З-0
            q:=Pos('-',Izd);
            S1:=Copy(Izd,1,q-1);
            B:=StrToInt(S1);
        End;
        //=================================
        if (Q2<>0)  then
        Begin
            Delete(IZD,1,Q2+3);
            //1300*1000-С-1*DIA52-З-0
            Zv:=Pos('*',Izd);
            S:=Copy(Izd,1,zv-1);
            A:=StrToInt(S);
            Delete(IZD,1,Zv);
            //1000-С-1*DIA52-З-0
            q:=Pos('-',Izd);
            S1:=Copy(Izd,1,q-1);
            B:=StrToInt(S1);
        End;
        //=================================
        if (Q1<>0) then   //Л-К-01-1300*1000-С-1*DIA52-З-0
        Begin
             if (A<1000) and (B<=1000) then
             F:=2.7;
             //
             if (A<1000) and ((B>1000) and (B<=1800))then
             F:=2.9;
             //----
             if ((A>1000) AND (A<=1500)) and (B<=1000) then
             F:=2.9;
             //
             if ((A>1000) AND (A<=1500)) and ((B>1000) and (B<=1800)) then
             F:=3.2;

             //----
             if ((A>1500) AND (A<=1800)) and (B<=1000) then
             F:=3;
             //
             if ((A>1500) AND (A<=1800)) and ((B>1000) and (B<=1800)) then
             F:=3.45;

             //----
             if ((A>1800)) and (B>1800) then
             F:=3.75;
             //
             if ((A>1800)) and ((B>=1000) and (B<=1800)) then
             F:=3.6;

        End;
        //=================================
        if (Q2<>0) then   //Л-К-01-1300*1000-С-1*DIA52-З-0
        Begin
             if (A<=1500) and (B<=2300) then
             F:=5;
             //
             if (A<=1500) and ((B>2300) and (B<=3000))then
             F:=5.2;
             //
             if (A<=1500) and ((B>3800))then
             F:=6;

             //----
             if ((A>1500)) and (B<=2300) then
             F:=5.6;
             //
             if ((A>1500)) and ((B>2300) and (B<=3000)) then
             F:=6;
             //
             if (A>1500) and ((B>3800))then
             F:=6.4;
        End;
        SG4.Cells[20, i+1]:=FloatToStr(F);
        if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Н\ч Сборка]=' + #39 + ConvertFloat(FloatToStr(F)) + #39 +  'WHERE ([IdГП]=' + #39 + IDGP + #39 + ')  ', ['Люк']) then
        Exit;

      end;
    end;    }
end;

procedure TForm1.btn43Click(Sender: TObject);
begin
  if SG4.Col = 8 then
    Order2 := '';
  if SG4.Col = 1 then
    Order2 := ' ORDER BY [Дата]';
  if (SG4.Col <> 1) and (SG4.Col <> 8) then
    Order2 := ' ORDER BY [' + SG4.Cells[SG4.Col, 0] + ']';
  Btn36.Click;
end;

procedure TForm1.btn44Click(Sender: TObject);
begin
  if SG4.Col = 8 then
    Order2 := '';
  if SG4.Col = 1 then
    Order2 := ' ORDER BY [Дата] DESC';
  if (SG4.Col <> 1) and (SG4.Col <> 8) then
    Order2 := ' ORDER BY [' + SG4.Cells[SG4.Col, 0] + '] DESC';
  Btn36.Click;
end;

procedure TForm1.btn45Click(Sender: TObject);
var
  I, res, Res1, Res2: Integer;
  Bet, Ned1, Ned2, Str, Izdel,Betw: string;
begin
  Clear_StringGrid(SG5);
  SG5.ColCount := 28;
  SG5.Cells[0, 0] := 'Номер';
  SG5.Cells[1, 0] := 'Дата задания';
  SG5.Cells[2, 0] := 'Заказ';
  SG5.Cells[3, 0] := 'Изделие';
  SG5.Cells[4, 0] := 'Кол во';
  //SG5.Cells[5, 0] := 'Н\ч Сборка';
  SG5.Cells[5, 0] := 'БЗ';
  SG5.Cells[6, 0] := 'Расчетная дата готовности';
  SG5.Cells[7, 0] := 'План Неделя';
  SG5.Cells[8, 0] := 'Планирование';
  SG5.Cells[9, 0] := 'Примечание';
  SG5.Cells[10, 0] := 'Мат';
  SG5.Cells[11, 0] := 'Дата запуска';
  SG5.Cells[12, 0] := 'TRUMPF';
  SG5.Cells[13, 0] := 'ГИБКА';
  SG5.Cells[14, 0] := 'СВАРКА';
  SG5.Cells[15, 0] := 'ПОКРАСКА';
  SG5.Cells[16, 0] := 'Заготовка готовность';
  SG5.Cells[17, 0] := 'Сборка Запуск';
  SG5.Cells[18, 0] := 'ОТКФам';
  SG5.Cells[19, 0] := 'Кол принятых';
  SG5.Cells[20, 0] := 'ОТК';
  SG5.Cells[21, 0] := 'IdГП';
  SG5.Cells[22, 0] := 'НачНомер';
  SG5.Cells[23, 0] := 'КонНомер';
  SG5.Cells[24, 0] := 'Н\ч Сборка';
  SG5.Cells[25, 0] := 'Упаковка';
  SG5.Cells[26, 0] := 'Срочно';
  SG5.Cells[27, 0] := 'idКО';
  SG5.SortByColumn(1);
  SG5.ColWidths[17] := 40;
  SG5.ColWidths[5] := 70;
  SG5.ColWidths[7] := 0;
  SG5.ColWidths[9] := 0;
        {Все
Запущенные на заготовку
Заготовка готова
Готовность по СВАРКЕ
Готовность  на сборку
Запуск на сборку
ОТК
Отмененые
не запущенные
Просроченные
Готовые
Не готовые}
  if Poisk_LUK = 0 then
  begin
    if (ComboBox33.ItemIndex = 1) then //Запущенные на заготовку
      Bet := ' AND (NOT [TRUMPF] IS NULL) AND (ГИБКА IS NULL) AND ((ОТК IS NULL) OR ([Кол во запущенных]>[Кол принятых]))';

    if (ComboBox33.ItemIndex = 2) then // Заготовка готова
      Bet := ' AND (NOT [Гибка] IS NULL) AND ( [СВАРКА] IS NULL) AND ((ОТК IS NULL))';

    if (ComboBox33.ItemIndex = 3) then //Готовность по СВАРКЕ
      Bet := ' AND  (NOT [СВАРКА] IS NULL) AND  ([ПОКРАСКА] IS NULL) AND ((ОТК IS NULL) OR ([Кол во запущенных]>[Кол принятых]))';

    if (ComboBox33.ItemIndex = 4) then //Готовность  на сборку
      Bet := ' AND  (NOT [ПОКРАСКА] IS NULL) AND ([Сборка Запуск] IS NULL) AND ((ОТК IS NULL) OR ([Кол во запущенных]>[Кол принятых]))';

    if (ComboBox33.ItemIndex = 5) then ////Запуск на сборку
      Bet := ' AND (NOT [Сборка Запуск] IS NULL) AND ((ОТК IS NULL) OR ([Кол во запущенных]>[Кол принятых]))';

    if (ComboBox33.ItemIndex = 6) then //ОТК
      Bet := ' AND (NOT ОТК IS NULL)';

    if (ComboBox33.ItemIndex = 7) then // Отмененые
      Bet := ' AND (NOT Отмена IS NULL)';

    if (ComboBox33.ItemIndex = 8) then // не запущенные
      Bet := ' AND ( TRUMPF IS NULL) AND ((ОТК IS NULL) )';

    if (ComboBox33.ItemIndex = 9) then //Просрочен
    begin
      res := (WeekNum(Date));
      Bet := ' AND  ([План неделя]<' + #39 + IntToStr(res) + #39 + ' ) AND ((ОТК IS NULL) OR ([Кол во запущенных]>[Кол принятых]))';
    end;

    if (ComboBox33.ItemIndex = 10) then //Готовые
      Bet := '  AND (NOT ОТК IS NULL)';

    if (ComboBox33.ItemIndex = 11) or (ComboBox33.ItemIndex = -1) then //НЕ Готовые
      Bet := '  AND ((ОТК IS NULL) OR ([Кол во запущенных]>[Кол принятых]))';
    if Edit27.Text <> '' then
    begin
      Str := Edit27.Text;
      res := Pos('-', Str);
      if res <> 0 then
      begin
        Ned1 := Copy(Str, 1, res - 1);
        Delete(Str, 1, res);
        Ned2 := Str;
        Bet := Bet + ' AND ([план Неделя] BETWEEN ' + #39 + Ned1 + #39 + ' AND ' + #39 + Ned2 + #39 + ')';

      end
      else
        Bet := Bet + ' AND ([план Неделя]= ' + #39 + Str + #39 + ' )';
    end;
  end
  else
  Begin
      Bet := Order_L_P;
      Poisk_LUK:=0;
  End;

//Просроченные


  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where ([Отмена] IS NULL) AND (Х IS NULL)' + Bet + Order2, ['ЗапускЛЮК']) then
    exit;
  SG5.RowCount := Form1.ADOQuery1.RecordCount + 2;
  SG7.RowCount := Form1.ADOQuery1.RecordCount + 2;
  SG5.FixedRows := 1;
  SG7.FixedRows := 1;
  StatusBar1.Panels[2].Text := IntToStr(ADOQuery1.RecordCount);
  for I := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    SG7.RowHeights[I] := SG5.RowHeights[I];
    SG5.Cells[0, I + 1] := Form1.ADOQuery1.FieldByName('Номер').AsString;
    SG5.Cells[1, I + 1] := Form1.ADOQuery1.FieldByName('Дата').AsString;
    SG5.Cells[2, I + 1] := Form1.ADOQuery1.FieldByName('Заказ').AsString;
    Izdel := ADOQuery1.FieldByName('Изделие').AsString;
    res := Pos(' ', Izdel);
    if res <> 0 then
      Delete(Izdel, 1, res);
    res := Pos(' ', Izdel);
    if res <> 0 then
      Delete(Izdel, 1, res);
    SG5.Cells[3, I + 1] := Izdel;
    SG5.Cells[4, I + 1] := Form1.ADOQuery1.FieldByName('Кол во запущенных').AsString;
    //SG5.Cells[5, I + 1] := Form1.ADOQuery1.FieldByName('Н\ч Сборка').AsString;
    SG5.Cells[5, I + 1] := Form1.ADOQuery1.FieldByName('БЗ').AsString;
    SG5.Cells[6, I + 1] := Form1.ADOQuery1.FieldByName('Расчетная дата готовности').AsString;
    SG5.Cells[7, I + 1] := Form1.ADOQuery1.FieldByName('План Неделя').AsString;
    SG5.Cells[8, I + 1] := Form1.ADOQuery1.FieldByName('Планирование').AsString;
    SG5.Cells[9, I + 1] := Form1.ADOQuery1.FieldByName('Примечание').AsString;
    SG5.Cells[10, I + 1] := Form1.ADOQuery1.FieldByName('Мат').AsString;
    SG5.Cells[11, I + 1] := Form1.ADOQuery1.FieldByName('Дата запуска').AsString;
    SG5.Cells[12, I + 1] := Form1.ADOQuery1.FieldByName('TRUMPF').AsString;
    SG5.Cells[13, I + 1] := Form1.ADOQuery1.FieldByName('ГИБКА').AsString;
    SG5.Cells[14, I + 1] := Form1.ADOQuery1.FieldByName('СВАРКА').AsString;
    SG5.Cells[15, I + 1] := Form1.ADOQuery1.FieldByName('ПОКРАСКА').AsString;
    SG5.Cells[16, I + 1] := Form1.ADOQuery1.FieldByName('Заготовка готовность').AsString;
                //
    SG5.Cells[17, I + 1] := Form1.ADOQuery1.FieldByName('Сборка Запуск').AsString;
    SG5.Cells[18, I + 1] := Form1.ADOQuery1.FieldByName('ОТКФам').AsString;
    SG5.Cells[19, I + 1] := Form1.ADOQuery1.FieldByName('Кол принятых').AsString;
    SG5.Cells[20, I + 1] := Form1.ADOQuery1.FieldByName('ОТК').AsString;
    SG5.Cells[21, I + 1] := Form1.ADOQuery1.FieldByName('IdГП').AsString;
    SG5.Cells[22, I + 1] := Form1.ADOQuery1.FieldByName('НачНомер').AsString;
    SG5.Cells[23, I + 1] := Form1.ADOQuery1.FieldByName('КонНомер').AsString;
    SG5.Cells[24, I + 1] := Form1.ADOQuery1.FieldByName('Н\ч Сборка').AsString;
    SG5.Cells[25, I + 1] := Form1.ADOQuery1.FieldByName('Упаковка').AsString;
    SG5.Cells[26, I + 1] := Form1.ADOQuery1.FieldByName('Срочно').AsString;
    SG5.Cells[27, I + 1] := Form1.ADOQuery1.FieldByName('IDКО').AsString;
    Form1.ADOQuery1.Next;
  end;
  SG5.RowHeights[0] := 60;
  SG216.RowHeights[0] := 60;
  SG5.ColWidths[5] := 70;
  SG5.ColWidths[7] := 60;
  SG5.ColWidths[9] := 60;
  SG5.ColWidths[11] := 10;
  SG5.ColWidths[16] := 0;
  SG5.ColWidths[21] := 0;
  Poisk := 0;
end;

procedure TForm1.btn46Click(Sender: TObject);
var
  I, Res: Integer;
  Betwe1, Dat1, Dat, Br, Izdel: string;
begin
 { Clear_StringGrid(SG5);
  SG5.RowCount := 2;
  SG5.ColCount := 26;
  SG5.Cells[0, 0] := 'Номер';
  SG5.Cells[1, 0] := 'Дата задания';
  SG5.Cells[2, 0] := 'Заказ';
  SG5.Cells[3, 0] := 'Изделие';
  SG5.Cells[4, 0] := 'Кол во';
  //SG5.Cells[5, 0] := 'Н\ч Сборка';
  SG5.Cells[5, 0] := 'БЗ';
  SG5.Cells[6, 0] := 'Расчетная дата готовности';
  SG5.Cells[7, 0] := 'План Неделя';
  SG5.Cells[8, 0] := 'Планирование';
  SG5.Cells[9, 0] := 'Примечание';
  SG5.Cells[10, 0] := 'Мат';
  SG5.Cells[11, 0] := 'Дата запуска';
  SG5.Cells[12, 0] := 'TRUMPF';
  SG5.Cells[13, 0] := 'ГИБКА';
  SG5.Cells[14, 0] := 'СВАРКА';
  SG5.Cells[15, 0] := 'ПОКРАСКА';
  SG5.Cells[16, 0] := 'Заготовка готовность';
  SG5.Cells[17, 0] := 'Сборка Запуск';
  SG5.Cells[18, 0] := 'ОТКФам';
  SG5.Cells[19, 0] := 'Кол принятых';
  SG5.Cells[20, 0] := 'ОТК';
  SG5.Cells[21, 0] := 'IdГП';
  SG5.Cells[22, 0] := 'НачНомер';
  SG5.Cells[23, 0] := 'КонНомер';
  SG5.Cells[24, 0] := 'Н\ч Сборка';
  SG5.Cells[25, 0] := 'Упаковка';
  SG5.SortByColumn(1);
  for I := 0 to SG5.RowCount - 1 do
  begin
    SG5.AutoSizeRow(I, 0);
             //SG215.Cells[0,I+1]:=IntToStr(I+1);
  end;
  SG5.ColWidths[5] := 0;
  SG5.ColWidths[7] := 0;
  SG5.ColWidths[9] := 0; }
  Poisk_LUK:=1;
  Dat := FormatDateTime('mm.dd.yyyy', dtp4.DateTime);
  Dat1 := FormatDateTime('mm.dd.yyyy', dtp5.DateTime);
  if Label203.Caption = '0' then
    Br := 'Дата'
  else
    Br := Label203.Caption;
  Betwe1 := ' AND ([' + Br + '] BETWEEN ' + #39 + Dat + #39 + ' AND ' + #39 + Dat1 + #39 + ') ';
  Order_L_P:=Betwe1;
  btn45.Click;
 // if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where ([Отмена] IS NULL) AND (Х IS NULL)' + Betwe1, ['ЗапускЛЮК']) then
//    exit;
  {SG5.RowCount := Form1.ADOQuery1.RecordCount + 1;
  StatusBar1.Panels[2].Text := IntToStr(ADOQuery1.RecordCount);
  for I := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    SG7.RowHeights[I] := SG5.RowHeights[I];
    SG5.Cells[0, I + 1] := Form1.ADOQuery1.FieldByName('Номер').AsString;
    SG5.Cells[1, I + 1] := Form1.ADOQuery1.FieldByName('Дата').AsString;
    SG5.Cells[2, I + 1] := Form1.ADOQuery1.FieldByName('Заказ').AsString;
    Izdel := ADOQuery1.FieldByName('Изделие').AsString;
    Res := Pos(' ', Izdel);
    if Res <> 0 then
      Delete(Izdel, 1, Res);
    Res := Pos(' ', Izdel);
    if Res <> 0 then
      Delete(Izdel, 1, Res);
    SG5.Cells[3, I + 1] := Izdel;
    SG5.Cells[4, I + 1] := Form1.ADOQuery1.FieldByName('Кол во запущенных').AsString;
    //SG5.Cells[5, I + 1] := Form1.ADOQuery1.FieldByName('Н\ч Сборка').AsString;
    SG5.Cells[5, I + 1] := Form1.ADOQuery1.FieldByName('БЗ').AsString;
    SG5.Cells[6, I + 1] := Form1.ADOQuery1.FieldByName('Расчетная дата готовности').AsString;
    SG5.Cells[7, I + 1] := Form1.ADOQuery1.FieldByName('План Неделя').AsString;
    SG5.Cells[8, I + 1] := Form1.ADOQuery1.FieldByName('Планирование').AsString;
    SG5.Cells[9, I + 1] := Form1.ADOQuery1.FieldByName('Примечание').AsString;
    SG5.Cells[10, I + 1] := Form1.ADOQuery1.FieldByName('Мат').AsString;
    SG5.Cells[11, I + 1] := Form1.ADOQuery1.FieldByName('Дата запуска').AsString;
    SG5.Cells[12, I + 1] := Form1.ADOQuery1.FieldByName('TRUMPF').AsString;
    SG5.Cells[13, I + 1] := Form1.ADOQuery1.FieldByName('ГИБКА').AsString;
    SG5.Cells[14, I + 1] := Form1.ADOQuery1.FieldByName('СВАРКА').AsString;
    SG5.Cells[15, I + 1] := Form1.ADOQuery1.FieldByName('ПОКРАСКА').AsString;
    SG5.Cells[16, I + 1] := Form1.ADOQuery1.FieldByName('Заготовка готовность').AsString;
                //
    SG5.Cells[17, I + 1] := Form1.ADOQuery1.FieldByName('Сборка Запуск').AsString;
    SG5.Cells[18, I + 1] := Form1.ADOQuery1.FieldByName('ОТКФам').AsString;
    SG5.Cells[19, I + 1] := Form1.ADOQuery1.FieldByName('Кол принятых').AsString;
    SG5.Cells[20, I + 1] := Form1.ADOQuery1.FieldByName('ОТК').AsString;
    SG5.Cells[21, I + 1] := Form1.ADOQuery1.FieldByName('IdГП').AsString;
    SG5.Cells[22, I + 1] := Form1.ADOQuery1.FieldByName('НачНомер').AsString;
    SG5.Cells[23, I + 1] := Form1.ADOQuery1.FieldByName('КонНомер').AsString;
    SG5.Cells[24, I + 1] := Form1.ADOQuery1.FieldByName('Н\ч Сборка').AsString;
    SG5.Cells[25, I + 1] := Form1.ADOQuery1.FieldByName('Упаковка').AsString;
    Form1.ADOQuery1.Next;
  end;
       { For I:=0 To  SG215.RowCount-1 Do
        begin
             SG215.AutoSizeRow(i,0);
             //SG215.Cells[0,I+1]:=IntToStr(I+1);
        end;  }
  //SG5.AutoSizeColumns(True, 1);
end;

procedure TForm1.btn47Click(Sender: TObject);
begin
  if SG5.Col = 8 then
    Order2 := '';
  if SG5.Col = 1 then
    Order2 := ' ORDER BY [Дата] DESC';
  if (SG5.Col <> 1) and (SG5.Col <> 8) then
    Order2 := ' ORDER BY [' + SG5.Cells[SG5.Col, 0] + '] DESC';
  Btn45.Click;
end;

procedure TForm1.btn48Click(Sender: TObject);
begin
  if SG5.Col = 8 then
    Order2 := '';
  if SG5.Col = 1 then
    Order2 := ' ORDER BY [Дата] ';
  if (SG5.Col <> 1) and (SG5.Col <> 8) then
    Order2 := ' ORDER BY [' + SG5.Cells[SG5.Col, 0] + '] ';
  Btn45.Click;
end;

procedure TForm1.btn49Click(Sender: TObject);
var
  Res, X, Res_: Integer;
  Str_e4, Str1, Str2, Str3: string;
begin
  Poisk_LUK := 1;
  if Edit25.Text <> '' then
    Order_L_P := '  AND (Заказ=' + #39 + Edit25.Text + #39 + ')';
  if Edit26.Text <> '' then
  begin
    Str_e4 := Edit26.Text;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := ' (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    if X = 1 then
      Str1 := Str1 + ' OR (Номер=' + #39 + Str_e4 + #39 + ')'
    else
      Str1 := ' (Номер=' + #39 + Str_e4 + #39 + ')';
    Res_ := Pos('-', Str_e4);
    if Res_ <> 0 then
    begin
      Str2 := Copy(Str_e4, 1, Res_ - 1);
      Delete(Str_e4, 1, Res_);
      Str3 := Str_e4;
      Order_L_P := '  AND (Номер>=' + #39 + Str2 + #39 + ') AND (Номер<=' + #39 + Str3 + #39 + ')';

    end
    else
    begin

      Order_L_P := '  AND (' + Str1 + ')';
    end;
                //Order4:='  AND (Номер='+#39+Edit18.Text+#39+')';

  end;
  Btn45.Click;
end;

procedure TForm1.btn4Click(Sender: TObject);
var
  Dat, Dat1, X, Bet1, order1, Izdel: string;
  I, kol, Res, Fl, g, j, a, b, Res1: Integer;
begin
  g := 1;
  j := 1;
  a := 1;
  b := 1;
  Clear_StringGrid(SG211);
  SG211.Cells[0, 0] := '№';
  SG211.Cells[1, 0] := 'Дата';
  SG211.Cells[2, 0] := 'Заказ';
  SG211.Cells[3, 0] := 'Кол-во';
  SG211.Cells[4, 0] := 'Изделие';
  SG211.Cells[5, 0] := 'Привод';
  SG211.Cells[6, 0] := 'A';
  SG211.Cells[7, 0] := 'B';
  Clear_StringGrid(SG212);
  SG212.Cells[0, 0] := '№';
  SG212.Cells[1, 0] := 'Дата';
  SG212.Cells[2, 0] := 'Заказ';
  SG212.Cells[3, 0] := 'Кол-во';
  SG212.Cells[4, 0] := 'Изделие';
  SG212.Cells[5, 0] := 'Привод';
  SG212.Cells[6, 0] := 'A';
  SG212.Cells[7, 0] := 'B';

  SG213.Cells[0, 0] := '№';
  SG213.Cells[1, 0] := 'Дата';
  SG213.Cells[2, 0] := 'Заказ';
  SG213.Cells[3, 0] := 'Кол-во';
  SG213.Cells[4, 0] := 'Изделие';
  SG213.Cells[5, 0] := 'Привод';
  SG213.Cells[6, 0] := 'A';
  SG213.Cells[7, 0] := 'B';

  SG214.Cells[0, 0] := '№';
  SG214.Cells[1, 0] := 'Дата';
  SG214.Cells[2, 0] := 'Заказ';
  SG214.Cells[3, 0] := 'Кол-во';
  SG214.Cells[4, 0] := 'Изделие';
  SG214.Cells[5, 0] := 'Привод';
  SG214.Cells[6, 0] := 'A';
  SG214.Cells[7, 0] := 'B';

  Dat := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  Dat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  X := ' WHERE  (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL) ';
  Bet1 := '  AND ([Дата]  BETWEEN ' + #39 + Dat + #39 + ' And ' + #39 + Dat1 + #39 + ' ) ';
  order1 := ' Order By Дата';
  if not mkQuerySelect(ADOQuery2, 'Select * from %s  ' + X + Bet1 + order1, ['Klapana']) then
    exit;

  SG211.RowCount := ADOQuery2.RecordCount + 2;
  SG212.RowCount := ADOQuery2.RecordCount + 2;
  SG213.RowCount := ADOQuery2.RecordCount + 2;
  SG214.RowCount := ADOQuery2.RecordCount + 2;

  for I := 0 to ADOQuery2.RecordCount - 1 do
  begin

    kol := StrToInt(ADOQuery2.FieldByName(FN_KOL).AsString);
    Izdel := ADOQuery2.FieldByName(FN_NAM).AsString;
    Res := Pos('КПУ', Izdel);
    Res1 := Pos('КПД', Izdel);
    Fl := Pos('2*ф', Izdel);
    if (Res <> 0) and (Fl <> 0) then
    begin
      SG211.Cells[0, g] := ADOQuery2.FieldByName(FN_Nom).AsString;
      SG211.Cells[1, g] := ADOQuery2.FieldByName(FN_DAT).AsString;
      SG211.Cells[2, g] := ADOQuery2.FieldByName(FN_ZAK).AsString;
      SG211.Cells[3, g] := ADOQuery2.FieldByName(FN_KOL).AsString;
      SG211.Cells[4, g] := ADOQuery2.FieldByName(FN_NAM).AsString;
      SG211.Cells[5, g] := ADOQuery2.FieldByName('МодПривода').AsString;
      SG211.Cells[6, g] := ADOQuery2.FieldByName('A').AsString;
      SG211.Cells[7, g] := ADOQuery2.FieldByName('B').AsString;
      Inc(g);

    end;
    if (Res <> 0) and (Fl = 0) then
    begin
      SG212.Cells[0, j] := ADOQuery2.FieldByName(FN_Nom).AsString;
      SG212.Cells[1, j] := ADOQuery2.FieldByName(FN_DAT).AsString;
      SG212.Cells[2, j] := ADOQuery2.FieldByName(FN_ZAK).AsString;
      SG212.Cells[3, j] := ADOQuery2.FieldByName(FN_KOL).AsString;
      SG212.Cells[4, j] := ADOQuery2.FieldByName(FN_NAM).AsString;
      SG212.Cells[5, j] := ADOQuery2.FieldByName('МодПривода').AsString;
      SG212.Cells[6, j] := ADOQuery2.FieldByName('A').AsString;
      SG212.Cells[7, j] := ADOQuery2.FieldByName('B').AsString;
      Inc(j);
    end;
    if (Res1 <> 0) then
    begin
      SG213.Cells[0, a] := ADOQuery2.FieldByName(FN_Nom).AsString;
      SG213.Cells[1, a] := ADOQuery2.FieldByName(FN_DAT).AsString;
      SG213.Cells[2, a] := ADOQuery2.FieldByName(FN_ZAK).AsString;
      SG213.Cells[3, a] := ADOQuery2.FieldByName(FN_KOL).AsString;
      SG213.Cells[4, a] := ADOQuery2.FieldByName(FN_NAM).AsString;
      SG213.Cells[5, a] := ADOQuery2.FieldByName('МодПривода').AsString;
      SG213.Cells[6, a] := ADOQuery2.FieldByName('A').AsString;
      SG213.Cells[7, a] := ADOQuery2.FieldByName('B').AsString;
      Inc(a);
    end;
    if (Res = 0) and (Res1 = 0) then
    begin
      SG214.Cells[0, b] := ADOQuery2.FieldByName(FN_Nom).AsString;
      SG214.Cells[1, b] := ADOQuery2.FieldByName(FN_DAT).AsString;
      SG214.Cells[2, b] := ADOQuery2.FieldByName(FN_ZAK).AsString;
      SG214.Cells[3, b] := ADOQuery2.FieldByName(FN_KOL).AsString;
      SG214.Cells[4, b] := ADOQuery2.FieldByName(FN_NAM).AsString;
      SG214.Cells[5, b] := ADOQuery2.FieldByName('МодПривода').AsString;
      SG214.Cells[6, b] := ADOQuery2.FieldByName('A').AsString;
      SG214.Cells[7, b] := ADOQuery2.FieldByName('B').AsString;
      Inc(b);
    end;
    ADOQuery2.Next;

  end;
  ExportGridtoExcel_List(SG211, SG212, SG213, SG214, 1);
end;

procedure TForm1.N19Click(Sender: TObject);
begin
  if MessageDlg('Подумай! Удалить?', mtConfirmation, [mbYes, mbNo], 0) = mrNo then
    Exit
  else
  begin
    if not Form1.mkQueryDelete(Form1.ADOQuery1, 'DELETE FROM %s Where (IdГП= ' + #39 + SGL.Cells[I_FN_SGP + 2, StringGrid6.Row] + #39 + ') AND' + ' (IDКО= ' + #39 + SGL.Cells[I_FN_SGP + 8, StringGrid6.Row] + #39 + ') ', ['СпецифВозд']) then
      Exit;
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Статус]=' + #39 + '0' + #39 + ' WHERE ([IdГП]=' + #39 + SGL.Cells[I_FN_SGP + 2, StringGrid6.Row] + #39 + ') AND' + ' (IDКО= ' + #39 + SGL.Cells[I_FN_SGP + 8, StringGrid6.Row] + #39 + ') ', ['KlapanaZAP']) then
      Exit;

  end;
end;

procedure TForm1.BitBtn11Click(Sender: TObject);
var
  Str: string;
begin
  if (ZCV.Col = 0) then
    Str := 'Номер';
  if (ZCV.Col = 1) then
    Str := 'Дата';
  if (ZCV.Col = 2) then
    Str := 'Заказ';

  if (ZCV.Col = 5) then
    Str := 'Кол во запущенных';
  if (ZCV.Col = 6) then
    Str := 'Заготовка Запуск';
  if (ZCV.Col = 7) then
    Str := 'Заготовка Готовность';
  if (ZCV.Col = 8) then
    Str := 'Планирование';
        //if (ZSG.Col = 7) then  ZCV.Cells[12, 1]
        //        Str := 'Заготовка Примечание';

  if (ZCV.Col = 9) then
    Str := 'Сборка Запуск';
  if (ZCV.Col = 10) then
    Str := 'Сборка Готовность';
  if (ZCV.Col = 11) then
    Str := 'Сборка Примечание';
  if (ZCV.Col = 12) then
    Str := 'Изделие';
  if (ZCV.Col = 13) then
    Str := 'ОТК';

  if (ZCV.Col = 20) then
    Str := 'План Дата';
  if Str <> '' then
    Order3 := ' ORDER BY [' + Str + '] DESC';
  Button46.Click;
end;

procedure TForm1.BitBtn12Click(Sender: TObject);
var
  Str: string;
begin
  if (ZCV.Col = 0) then
    Str := 'Номер';
  if (ZCV.Col = 1) then
    Str := 'Дата';
  if (ZCV.Col = 2) then
    Str := 'Заказ';

  if (ZCV.Col = 5) then
    Str := 'Кол во запущенных';
  if (ZCV.Col = 6) then
    Str := 'Заготовка Запуск';
  if (ZCV.Col = 7) then
    Str := 'Заготовка Готовность';
  if (ZCV.Col = 8) then
    Str := 'Планирование';
        //if (ZSG.Col = 7) then
        //        Str := 'Заготовка Примечание';

  if (ZCV.Col = 9) then
    Str := 'Сборка Запуск';
  if (ZCV.Col = 10) then
    Str := 'Сборка Готовность';
  if (ZCV.Col = 11) then
    Str := 'Сборка Примечание';
  if (ZCV.Col = 12) then
    Str := 'Изделие';
  if (ZCV.Col = 13) then
    Str := 'ОТК';
  if (ZCV.Col = 20) then
    Str := 'План Дата';
  if Str <> '' then
    Order3 := ' ORDER BY [' + Str + ']';
  Button46.Click;
end;

procedure TForm1.BitBtn13Click(Sender: TObject);
begin
  if SG2.Col = 8 then
    Order8 := '';
  if SG2.Col = 1 then
    Order8 := ' ORDER BY [ДатаЗаказа] DESC';
  if (SG2.Col <> 1) and (SG2.Col <> 8) then
    Order8 := ' ORDER BY [' + SG2.Cells[SG2.Col, 0] + '] DESC';
  Button7.Click;
end;

procedure TForm1.BitBtn14Click(Sender: TObject);
begin
  if SG2.Col = 8 then
    Order8 := '';
  if SG2.Col = 1 then
    Order8 := ' ORDER BY [ДатаЗаказа] ';
  if (SG2.Col <> 1) and (SG2.Col <> 8) then
    Order8 := ' ORDER BY [' + SG2.Cells[SG2.Col, 0] + '] ';
  Button7.Click;
end;

procedure TForm1.SGMouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin
  Handled := true;
  SG.Perform(WM_VSCROLL, SB_LINEDOWN, 0);
end;

procedure TForm1.SGMouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin
  Handled := true;
  SG.Perform(WM_VSCROLL, SB_LINEUP, 0);
end;

procedure TForm1.SG215MouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin
        //Handled := true;
       // SG215.Perform(WM_VSCROLL, SB_LINEUP, 0);
       // SG216.Perform(WM_VSCROLL, SB_LINEUP, 0);
end;

procedure TForm1.SG215MouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin
        //Handled := true;
        //SG215.Perform(WM_VSCROLL, SB_LINEDOWN, 0);
        //SG216.Perform(WM_VSCROLL, SB_LINEDOWN, 0);
end;

procedure TForm1.SGSelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
var
  I: Integer;
begin
  I := ARow;
  case ACol of
    1:
      Label134.Caption := 'Дата';
    6:
      Label134.Caption := 'План Дата';
    7:
      Label134.Caption := 'Расчетная Дата';
    11:
      Label134.Caption := 'Дата запуска';
    12:
      Label134.Caption := 'ОТК';
  end;
end;

procedure TForm1.SGTopLeftChanged(Sender: TObject);
begin
  SG.Row := SG.Row;
end;

procedure TForm1.SGMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
// Эмуляция нажатия мыши
  if Button = mbRight then
    mouse_event(MOUSEEVENTF_LEFTDOWN or MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
end;

procedure TForm1.SGMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  I: Integer;
  F: Double;
  J: Integer;
  myRect: TGridRect;
  Sum: Double;
begin
       //F:=SG.ColumnSum(4,1,SG.Row);
       //Sum:=F;

  if (SG.Col = 4) or (SG.Col = 5) or (SG.Col = 9) or (SG.Col = 20) then
  begin
    Sum := 0;
    myRect := SG.Selection;
    for I := myRect.Left to myRect.Right do
      for J := myRect.Top to myRect.Bottom do
      begin
        try
          Sum := Sum + StrToFloat(SG.Cells[I, J]);
        except
          Break;
        end;
      end;
    StatusBar2.Panels[2].Text := FloattOsTR(Sum);

  end;
end;

procedure TForm1.btn60Click(Sender: TObject);
var
  I, j, ilengy, Kpu, Kpd, Kpd05, a, A1, A2, b, B1, B2, Perim, Perim1, Res,
  Kol_F, Res_T, Res_SN, Kol_lop, Kol_Priv, Pos_F1, Pos_F2, KPD_4_03, Res_Isp, Klap: Integer;
  Res_Nazn, ResN1, Res_Ispol, Res_Priv, Res_Klem, Res_Pereh, Res_Ruk, Res_Ram,
  Res_Term, Res_Resh, Res_Resh_R, Res_Resh_S, Flag_Razb_Klapana,Stat: Integer;
  KPu_S, Izdel, Nam, N1, Nazn, Ispol, F, Priv, Term, Razmesh,
  Klem, Resh, luk, Pereh, Ruk, Rama, A_S, B_S, Perim_S, Lop, Lopatka,
  Privod, SB, Privod_Nam, IDGP, A_S1, B_S1, Pos_Flan, Pos_Privod,
  Pos_Sn, Pos_Dop, Pos_Ram, Elem, Kol_Ed_Str: string;
  NC_Sbor, HK, Kol_Ed, SB_1, SB_2, SB_LOP, SB_TYAG: Double;
  SB_LOP_S, SB_TYAG_S, SB1_S, SB2_S: string;
  Result: Tresult;
begin
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  for I := 0 to SG10.RowCount - 1 do
  begin
    if (SG10.Cells[15, I + 1] = '0') and (SG10.Cells[15, I + 1] <> '') then
    begin
      Stat := StrToInt(SG6.Cells[I_FN_OTMENA + 1, I+1]);
    if (Stat = 0) then
    Continue;
    try

      NC_Sbor := 0;
      Result.Sborka1 := 0;
      Result.Sborka2 := 0;
      Result.Sborka_lop := '0';
      Result.Sborka_tyag := '0';
      Izdel := SG10.Cells[3, I + 1];
      Nam := SG10.Cells[3, I + 1];
      IDGP := SG10.Cells[21 , I + 1];
      if IDGP='1516316' then
          IDGP:='1516316';
      Memo2.Lines.Add(IDGP);
      Kpd := Pos('Канал-ФКП-', Izdel);
      // Фильтр Канал-ФКП-80-50-G4
      if (Kpd <> 0) then
      begin
        NC_Sbor := 0;
        Result := FKP(Izdel, IDGP, 0, I);
      end;
//
      Kpd := Pos('Канал-ФКК-', Izdel);
      // Фильтр Канал-ФКК-125
      if (Kpd <> 0) then
      begin
        NC_Sbor := 0;
        Result := FKK(Izdel, IDGP, 0, I);
      end;
      //
      // Хомут Канал-МК-160
      Kpd05 := Pos('Хомут Канал-МК-', Izdel); //Хомут Канал-МК-160
      if (Kpd05 <> 0) then
      begin
         NC_Sbor := 0;
        Result := Homut(Izdel, IDGP, 0, I);
      end;
      //Воздухонагреватель Канал-ЭКВ-40-20-12
      Kpd := Pos('Канал-ЭКВ-', Izdel);
      Kpd05 := Pos('Канал-ЭКВ-К-', Izdel); //Воздухонагреватель Канал-ЭКВ-К-125-2,4
      if (Kpd05 = 0) and (Kpd<>0) then
      begin
         NC_Sbor := 0;
        Result := EKV_K(Izdel, IDGP, 0, I);
      end;
      //Воздухонагреватель Канал-ЭКВ-К-125-2,4
      Kpd := Pos('Канал-ЭКВ-', Izdel);
      Kpd05 := Pos('Канал-ЭКВ-К-', Izdel); //Воздухонагреватель Канал-ЭКВ-К-125-2,4
      if (Kpd05 <> 0)  then
      begin
         NC_Sbor := 0;
        Result := EKV_KRUG(Izdel, IDGP, 0, I);
      end;
         NC_Sbor := Result.Sborka1;
      SB_1 := Result.Sborka1;
      SB_2 := Result.Sborka2;
      SB_LOP_S := StringReplace(Result.Sborka_lop,',','.', [rfReplaceAll]);
      SB_TYAG_S := StringReplace(Result.Sborka_tyag, ',', '.', [rfReplaceAll]);
      SB1_S := StringReplace(FloatToStr(SB_1), ',', '.', [rfReplaceAll]);
      SB2_S := StringReplace(FloatToStr(SB_2), ',', '.', [rfReplaceAll]);
      SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Н\ч Сборка Клапана]=' + #39 + (SB1_S) + #39 +
      ',[Н\ч Сварка]=' + #39 + (SB2_S) + #39 + ',[Н\ч Сборка]=' + #39 + (SB_LOP_S) + #39 +
      ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ') ', ['[750]']) then
        Exit;

      if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where ([IdГП]=' + #39 + IDGP + #39 + ') ', ['[Запуск750]']) then
        exit;
      Kol_Ed_Str := StringReplace(Form1.ADOQuery2.FieldByName('Кол во запущенных').AsString, '.', ',', [rfReplaceAll]);
      if (Kol_Ed_Str = '') then
        Continue;
      Kol_Ed := StrToFloat(Kol_Ed_Str);
      SB_1 := SB_1 * Kol_Ed;
        //
      SB_2 := SB_2 * Kol_Ed;
        //
      SB_LOP := StrToFloat(SB_LOP_S);
      SB_TYAG := StrToFloat(SB_TYAG_S);
        //
      SB_LOP := SB_LOP * Kol_Ed;
        //
      SB_TYAG := SB_TYAG * Kol_Ed;
        //
      SB_LOP_S := FloatToStr(SB_LOP);
      SB_TYAG_S := FloatToStr(SB_TYAG);
      SB_LOP_S := StringReplace(SB_LOP_S, ',', '.', [rfReplaceAll]);
      SB_TYAG_S := StringReplace(SB_TYAG_S, ',', '.', [rfReplaceAll]);
      SB1_S := StringReplace(FloatToStr(SB_1), ',', '.', [rfReplaceAll]);
      SB2_S := StringReplace(FloatToStr(SB_2), ',', '.', [rfReplaceAll]);
      if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Н\ч Сборка Клапана]=' + #39 + SB1_S + #39 + ',[Н\ч Сварка]=' + #39 + SB2_S + #39 + ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ')', ['[Запуск750]']) then
        Exit;
    except
         Memo2.Lines.Add(IntToStr(I + 1));
         Memo2.Lines.Add(Kol_Ed_Str);

    end;
    end;
  end;
end;

 procedure TForm1.Specif_Shum(Izdel,GP,KO,Zak,BZ,Dat,Tab,Tab2: String;AA:Integer);
var
  XLApp,Sheet: Variant;
  i, j, y, PosTrud,F,A,col,res: integer;
  Izdelie,Izdelie1,idGP,idKO,Zakaz,BZ_,Dat_,Fil,Str,Str2,Obozn,Det_F,Det_Baz,Kol: string;
  Parent, Vid, Elem, Kol_Ed,  EI, Typ, Kateg, Prim, Diam, Massa, Dlina,
  Shir, Dlin_Raz, Shir_Raz, Obem, Kol_Gib, Kanban, Salvagnini, Pokraska, Mater, Kompl_Ved,
  Trumpf,Gibka,Pila,Trumpf_o,Gibka_O,Pila_O, Nog, Uglorub,  Prokat,  Naim, Naim_Izdel, Grupp, Rout, Varian, Dir, Dir1, Dir2,
  Data, Kod, God, Dat2, Mes,  SH1, SH2, Razd, Nach_Razd, Kompl, Pokr,Dat1,List,Nam,s: string;
  Result: Tresult;
  NC_G1, NC_G2, NC_G3, NC_P1, NC_P2, NC_P3, NC_N1, NC_N2, NC_N3,Kol_II,Kol_II2: Double;
begin
    Clear_StringGrid(SG1);
    idGP:=GP;
    idKO :=KO;
    Naim:=Izdel;
    S:='0';
    Dir:= '\\MSS-DC06\V\ОИТ\Cklapana2\Детали из Файла\';
    F:=Pos('Шумоглушитель Канал-ГКП',Naim);
    if F<>0 then
    Str:=Dir+'Шумоглушитель ГКП'+'.xlsm';
    if not FileExists(Str) then
    begin
      J:=0;
      Exit;
    end;
    //Шумоглушитель Канал-ГКК-20-60
    F:=Pos('-',Naim);
    if F<>0 then
    Delete(Naim,1,F);// ГКК-20-60
    //Шумоглушитель Канал-ГКК-20-60
    F:=Pos('-',Naim);
    if F<>0 then
    Delete(Naim,1,F);// 20-60
    //Шумоглушитель Канал-ГКК-20-60
    F:=Pos('-',Naim);   // 20х60
    if F<>0 then
      Insert(S,Naim,F-1);
    Insert(S,Naim,40);
    F:=Pos('-',Naim);
        if F<>0 then
    List:=StringReplace(Naim, '-', 'х',[rfReplaceAll, rfIgnoreCase]);// 200х600

    Dat1:=FormatDateTime('mm.dd.YYYY',Now);
    XLApp := CreateOleObject('Excel.Application');
    try
                XLApp.Visible := False;
                XLApp.Workbooks.Open(Str);
                for Col := 1 to XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Count do
                begin
                        Nam :=XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[Col].Name;
                        Res := AnsiCompareStr(Nam, List);
                        if Res = 0 then
                        begin
                                XLApp.Workbooks[ExtractFileName(Str)].WorkSheets.Item[Col].Activate;
                                Sheet :=XLApp.Workbooks[ExtractFileName(Str)].WorkSheets[Col];
                                Break;
                        end;
                end;
               Str:=Sheet.Cells[3, 1];
      for I := 1 to 70 do
      begin
        PB1.Position := 0;
        PB1.Min := 0;
        PB1.Max := 69;
           Elem:='';
           Trumpf:='False';
           Gibka :='False';
           Pila  :='False';
           Trumpf_o:='0';
           Gibka_O :='0';
           Pila_O  :='0';
           if (I>=3) and (I<7) then  //TRUMPF+Гибка
           begin
                Vid := 'Детали';
                Elem :=Sheet.Cells[i , 3];
                Str:=  Sheet.Cells[i, 1];
                Str2:=  Sheet.Cells[i, 2];
                Obozn :=Str+Str2;
                Kol   :=Sheet.Cells[i , 4];
                EI    :='';
                Diam := '0';
                Massa :='0';
                Dlina :=Sheet.Cells[3 , 21];
                Shir := Sheet.Cells[3 , 22];
                Dlin_Raz :=Sheet.Cells[3 , 21];
                Shir_Raz := Sheet.Cells[3 , 22];
                Obem := '0';
                Kol_Gib :=Sheet.Cells[i , 17];
                Mater := Sheet.Cells[i , 11];
                SH1:= '0';
                SH2:= '0';
                Trumpf:='True';
                Gibka :='True';
                Trumpf_o:='1';
                Gibka_O :='2';
                Result := Material_Gib(Mater, Dlin_Raz, Shir_raz, Dlina, Shir, SH1, SH2,
                Elem, 1, StrToInt(Kol_Gib), StrToInt(Dlina), IDGP, StrToFloat(Kol));
                NC_G1 := Result.MAT_G_Do1; //Н\Ч из таб 3
                NC_G2 := Result.MAT_G_Do2; // //Кол Отверст
                NC_G3 := Result.MAT_G_Do3; //Н/Ч +Выруб отвер
                          //+++++++++++++++++++++++
          if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (Обозначение=' + #39 + Obozn + #39 +
          ') ', ['СпецифОбщая']) then
            exit;

          if ADOQuery2.RecordCount = 0 then
          begin

            if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
            '(Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
            ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
            '[ШиринаРазв], [КолГибов], [Trumph],[TrumphОч],[Гибка],[ГибкаОч],[Н\ЧГибка], [Материал],Изделие,Дата) ' +
            'Values (%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s)',
              ['СпецифОбщая',#39 + 'True' + #39, #39 + Vid + #39, #39 + Elem + #39, #39 + IntToStr(AA) + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39,
               #39 + Trumpf + #39,#39 + Trumpf_O + #39,#39 + Gibka + #39,#39 + Gibka_O + #39, #39 + FloatToStr(Nc_G1) + #39,
                #39 + Mater + #39,
               #39 + Izdel + #39,
               #39 + ConvertDat1(Dat) + #39]) then
             exit;
          end;
           end;

           if (I>=19) and (I<21) then  //Пила
           begin
                Vid := 'Детали';
                Elem :=Sheet.Cells[i , 1];
                Str:=  Sheet.Cells[i, 1];
                Str2:=  Sheet.Cells[i, 11];
                Obozn :=Str+'-'+Str2;
                Kol   :=Sheet.Cells[i , 4];
                EI    :='';
                Diam := '0';
                Massa :='0';
                Dlina :=Sheet.Cells[i , 11];
                Shir := Sheet.Cells[3 , 22];
                Dlin_Raz :=Sheet.Cells[i , 11];
                Shir_Raz := Sheet.Cells[3 , 22];
                Obem := '0';
                Kol_Gib :='0';
                Mater := '';
                SH1:= '0';
                SH2:= '0';
                Pila :='True';
                Pila_O  :='1';
                Result := Material_Pila(Mater, (Dlin_Raz), (Shir_raz), (sh1), Elem, 1, 0, StrToInt(Dlina), IDGP, StrToFloat(Kol));
                NC_P1 := Result.MAT_Pila_Do1;
                NC_P2 := Result.MAT_Pila_Do2;
                          //+++++++++++++++++++++++
          if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (Обозначение=' + #39 + Obozn + #39 +
          ') ', ['СпецифОбщая']) then
            exit;

          if ADOQuery2.RecordCount = 0 then
          begin

            if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
            '(Технолог, [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
            ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
            '[ШиринаРазв], [КолГибов], [Пила],[ПилаОч],[Н\чПила], [Материал],Изделие,Дата) ' +
            'Values (%s,%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s)',
              ['СпецифОбщая',#39 + 'True' + #39, #39 + Vid + #39, #39 + Elem + #39, #39 + IntToStr(AA) + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39,
               #39 + Pila + #39,#39 + Pila_O + #39, #39 + FloatToStr(Nc_P1) + #39, #39 + Mater + #39,
               #39 + Izdel + #39,
               #39 + ConvertDat1(Dat) + #39]) then
              exit;
          end;
           end;

           if (I>=32) and (I<34) then //Сборочные единицы
           begin
                Vid := 'Сборочные единицы';
                Elem :=Sheet.Cells[i , 3];
                Str:=  Sheet.Cells[i, 1];
                Str2:=  Sheet.Cells[i, 2];
                Obozn :=Str+Str2;
                Kol   :=Sheet.Cells[i , 4];
                EI    :='';
                Diam := '0';
                Massa :='0';
                Dlina :=Sheet.Cells[3 , 21];
                Shir := Sheet.Cells[3 , 22];
                Dlin_Raz :=Sheet.Cells[3 , 21];
                Shir_Raz := Sheet.Cells[3 , 22];
                Obem := '0';
                Kol_Gib :='0';
                Mater := '';
                SH1:= '0';
                SH2:= '0';
           end;

           if (I>=46) and (I<53) then //Прочие изделия
           begin
                Vid := 'Прочие изделия';
                Elem :=Sheet.Cells[i , 2];
                Obozn :='';
                Kol   :=Sheet.Cells[i , 11];
                EI    :=Sheet.Cells[i , 12];
                Diam := '0';
                Massa :='0';
                Dlina :='0';
                Shir := '0';
                Dlin_Raz :='0';
                Shir_Raz := '0';
                Obem := '0';
                Kol_Gib :='0';
                Mater := '';
                SH1:= '0';
                SH2:= '0';
           end;
          if Elem='' then
            Continue;
          if not mkQuerySelect1(ADOQuery2, 'Select * from %s  Where (IdГП=' + #39 + IDGP + #39 +
          ') AND (IdКО=' + #39 + IDKO + #39 +
          ') AND (Элемент=' + #39 + Elem + #39 + ') AND (Обозначение=' + #39 + Obozn + #39 +
          ') ', [Tab]) then
            exit;
            //
            if not Form1.mkQueryUpdate2(Form1.ADOQuery1, 'UPDATE [%s] SET [СтатусФ]=' +
            #39+ '1' + #39 + ',[Статус]=' +
            #39+ '1' + #39 + ',[Технолог Обраб]=' +
            #39+ Dat1 + #39 +
            ' WHERE ([IdГП]=' + #39 + IDGP + #39 +
            ') AND ([IdКО]=' + #39 + IDKO + #39 +
            ') ', [Tab2]) then
            Exit;
          if ADOQuery2.RecordCount = 0 then
          begin

            if not mkQueryInsert(ADOQuery3, 'Insert Into %s ' +
            '( [ВидЭлемента], [Элемент], [КолНаЕд], [Количество], [ЕИ], [Обозначение],' +
            ' [Диаметр], [Масса], [Длина], [Ширина], [ДлинаРазв],' +
            '[ШиринаРазв], [КолГибов],  [Материал], IdГП,Изделие,Заказ,Дата,IDКо) ' +
            'Values (%s,%s,%s,%s,%s,%s,' + '%s,%s,%s,%s,' + '%s,%s,%s,%s,%s,%s,%s,%s,%s )',
              [Tab, #39 + Vid + #39, #39 + Elem + #39, #39 + Kol + #39, #39 + Kol + #39,
              #39 + EI + #39, #39 + Obozn + #39,  #39 + Diam + #39, #39 + Massa + #39, #39 + Dlina + #39, #39 + Shir + #39,
               #39 + Dlin_Raz + #39, #39 + Shir_Raz + #39, #39 + Kol_Gib + #39, #39 + Mater + #39,
               #39 + IDGP + #39, #39 + Izdel + #39, #39 + Zak + #39,
               #39 + ConvertDat1(Dat) + #39, #39 + IDKO + #39 ]) then
              exit;

          end;

          PB1.Position := i;
      end;
    finally
                // Quit Excel
                if not VarIsEmpty(XLApp) then
                begin
                        XLApp.DisplayAlerts := False;
                        XLApp.Quit;
                        XLAPP := Unassigned;
                        Sheet := Unassigned;

                end;
    end;
    PB1.Position := 0;
end;

procedure TForm1.btn63Click(Sender: TObject);
var I,Res,Res1:Integer;
S:string;
begin
      //PB2.Position := 0;
      PB2.Min:=0;    //Воздухонагреватель Канал-ЭКВ-100-50-45  Воздухонагреватель Канал-ЭКВ-100-50-67,5
                    //Воздухонагреватель Канал-ЭКВ-К-100-0,6
                    //Воздухонагреватель Канал-ЭКВ-К-С2-100-1,2
                    //Воздухонагреватель Канал-ЭКВ-К-С21-250-9,0
                    //Шумоглушитель Канал-ГКК-100-600

      PB2.Max:=SG10.RowCount-1;
      for I := 0 to SG10.RowCount-1 do
      begin
        Res:=Pos('0',SG10.Cells[23,I+1]);
        if Res<>0 then
        begin
          Res:=Pos('Шумоглушитель Канал-ГКП',SG10.Cells[3,I+1]);
          if Res<>0 then
          begin
          //Шумоглушитель Канал-ГКП-80-50
            Specif_Shum(SG10.Cells[3,I+1], SG10.Cells[21,I+1],
            SG10.Cells[22,I+1] ,SG10.Cells[2,I+1],
            SG10.Cells[13,I+1], SG10.Cells[1,I+1],'Специф750','750',StrToInt(SG10.Cells[26,I+1]));
          end;

          Res:=Pos('Шумоглушитель Канал-ГКК',SG10.Cells[3,I+1]);
          if Res<>0 then
          begin
          //Шумоглушитель-Канал-ГКК-100-600
            Specif_Shum_K(SG10.Cells[3,I+1], SG10.Cells[21,I+1],
            SG10.Cells[22,I+1] ,SG10.Cells[2,I+1],
            SG10.Cells[13,I+1], SG10.Cells[1,I+1],'Специф750','750',StrToInt(SG10.Cells[26,I+1]));
          end;
          Res:=Pos('Фильтр Канал',SG10.Cells[3,I+1]);
          if (Res<>0)  then
          begin
            //Фильтр Канал-ФКК-125    Фильтр Канал-ФКП-100-50-F5    Фильтр Канал-ФКП-100-50-G4/карманный
            Specif_F(SG10.Cells[3,I+1], SG10.Cells[21,I+1],
            SG10.Cells[22,I+1] ,SG10.Cells[2,I+1],
            SG10.Cells[13,I+1], SG10.Cells[1,I+1],'Специф750','750',StrToInt(SG10.Cells[26,I+1]));
          end;
          Res1:=Pos('Хомут Канал',SG10.Cells[3,I+1]);
          if (Res1<>0) then
          begin

            Specif_Homut(SG10.Cells[3,I+1], SG10.Cells[21,I+1],
            SG10.Cells[22,I+1] ,SG10.Cells[2,I+1],
            SG10.Cells[13,I+1], SG10.Cells[1,I+1],'Специф750','750',StrToInt(SG10.Cells[26,I+1]));
          end;
          Res:=Pos('Канал-ЭКВ',SG10.Cells[3,I+1]);
         // Res1:=Pos('Хомут Канал',SG10.Cells[3,I+1]);
          if (Res<>0) then
          begin
            //Воздухонагреватель Канал-ЭКВ-100-50-67,5
            Specif_EKV(SG10.Cells[3,I+1], SG10.Cells[21,I+1],
            SG10.Cells[22,I+1] ,SG10.Cells[2,I+1],
            SG10.Cells[13,I+1], SG10.Cells[1,I+1],'Специф750','750',StrToInt(SG10.Cells[26,I+1]));
          end;
          Res:=Pos('Канал-ГКВ',SG10.Cells[3,I+1]);
         // Канал-ГКВ-50-30
          if (Res<>0) then
          begin
            Specif_GKV(SG10.Cells[3,I+1], SG10.Cells[21,I+1],
            SG10.Cells[22,I+1] ,SG10.Cells[2,I+1],
            SG10.Cells[13,I+1], SG10.Cells[1,I+1],'Специф750','750',StrToInt(SG10.Cells[26,I+1]));
          end;

        end;
        PB2.Position := i;
      end;
      PB2.Position := 0;
end;

procedure TForm1.btn64Click(Sender: TObject);
begin
  ExportGridtoExcel2(SG);
end;

procedure TForm1.btn65Click(Sender: TObject);
begin
  ExportGridtoExcel2(SG215);
end;

procedure TForm1.btn66Click(Sender: TObject);
var
  Str: string;
begin
  if (zclrstrngrd1.Col = 0) then
    Str := 'Номер';
  if (zclrstrngrd1.Col = 1) then
    Str := 'Дата';
  if (zclrstrngrd1.Col = 2) then
    Str := 'Заказ';

  if (zclrstrngrd1.Col = 4) then
    Str := 'Кол во запущенных';
  if (zclrstrngrd1.Col = 5) then
    Str := 'Заготовка Запуск';
  if (zclrstrngrd1.Col = 6) then
    Str := 'Заготовка Готовность';
  if (zclrstrngrd1.Col = 7) then
    Str := 'Планирование';
        //if (zclrstrngrd1.Col = 7) then
        //        Str := 'Заготовка Примечание';

  if (zclrstrngrd1.Col = 8) then
    Str := 'Сборка Запуск';
  if (zclrstrngrd1.Col = 9) then
    Str := 'Сборка Готовность';
  if (zclrstrngrd1.Col = 10) then
    Str := 'Сборка Примечание';

  if (zclrstrngrd1.Col = 12) then
    Str := 'ОТК';
  if (zclrstrngrd1.Col = 20) then
    Str := 'План Дата';
  order1 := ' ORDER BY [' + Str + '] DESC';
  Button65.Click;
end;

procedure TForm1.btn67Click(Sender: TObject);
var
  Str: string;
begin
  if (zclrstrngrd1.Col = 0) then
    Str := 'Номер';
  if (zclrstrngrd1.Col = 1) then
    Str := 'Дата';
  if (zclrstrngrd1.Col = 2) then
    Str := 'Заказ';

  if (zclrstrngrd1.Col = 4) then
    Str := 'Кол во запущенных';
  if (zclrstrngrd1.Col = 5) then
    Str := 'Заготовка Запуск';
  if (zclrstrngrd1.Col = 6) then
    Str := 'Заготовка Готовность';
  if (zclrstrngrd1.Col = 7) then
    Str := 'Планирование';
        //if (zclrstrngrd1.Col = 7) then
        //        Str := 'Заготовка Примечание';

  if (zclrstrngrd1.Col = 8) then
    Str := 'Сборка Запуск';
  if (zclrstrngrd1.Col = 9) then
    Str := 'Сборка Готовность';
  if (zclrstrngrd1.Col = 10) then
    Str := 'Сборка Примечание';
  if (zclrstrngrd1.Col = 12) then
    Str := 'ОТК';
  if (zclrstrngrd1.Col = 20) then
    Str := 'План Дата';
  order1 := ' ORDER BY [' + Str + ']';
  Button65.Click;
end;

procedure TForm1.btn68Click(Sender: TObject);
begin
  ExportGridtoExcel2(SG4);
end;

procedure TForm1.btn69Click(Sender: TObject);
begin
  ExportGridtoExcel2(SG5);
end;

procedure TForm1.btn6Click(Sender: TObject);
begin
  luk := 0;
  FS.ShowModal;

end;

procedure TForm1.N36Click(Sender: TObject);
var
  Str1: string;
begin
  Str1 := ZCV.Cells[ZCV.Col, ZCV.Row];
  Memo11.Lines.Clear;
  Memo11.Lines.Add(Str1);

  Clipboard.AsText := Memo11.Lines.Strings[0];
end;

procedure TForm1.ComboBox12Change(Sender: TObject);
var
  S: string;
begin
  S := ComboBox12.Text;
  if ComboBox12.ItemIndex = 6 then
    ComboBox5.ItemIndex := 0;
  Button22.Click;
end;

procedure TForm1.ComboBox15Change(Sender: TObject);
begin
  Form1.Button28.Click;
end;

procedure TForm1.ComboBox18Change(Sender: TObject);
begin
//Form1.Button46.Click;
end;

procedure TForm1.ComboBox18Click(Sender: TObject);
begin
  Edit9.Text := '';
  Edit12.Text := '';
  Edit13.Text := '';
end;

procedure TForm1.ComboBox19Click(Sender: TObject);
begin
  Edit9.Text := '';
  Edit12.Text := '';
  Edit13.Text := '';
end;

procedure TForm1.ComboBox19KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and (Button46.Enabled) then
    Button46Click(nil);
end;

procedure TForm1.ComboBox19Select(Sender: TObject);
begin
  Edit9.Text := '';
  Edit12.Text := '';
  Edit13.Text := '';
end;

procedure TForm1.SGDblClickCell(Sender: TObject; ARow, ACol: Integer);
var
  Str, Izdel: string;
  I, Kol_R, Kol_G, Res1: Integer;
begin
  luk := 0;

  if ACol = 18 then //Технолог
  begin
    Form1.Vozduh := 2;
    N93.Click;
    if UOsnova_Main.Flag_Error = 2 then //ДЕТАЛИ НЕ ВСЕ
      Exit;
    FNomer.Caption := SG.Cells[3, SG.Row];
    FNomer.Label2.Caption := SG.Cells[2, SG.Row];
    FNomer.Label3.Caption := 'Технолог';

    FNomer.Label7.Caption := SG.Cells[19, SG.Row];
    FNomer.Label8.Caption := SG.Cells[13, SG.Row];
    //FNomer.Label9.Caption := SG.Cells[2, SG.Row];


    FNomer.DateTimePicker1.Visible := True;
    FNomer.ComboBox1.Visible := False;
    FNomer.ComboBox2.Visible := False;
    FNomer.Edit1.Visible := False;
    FNomer.Label4.Caption := IntToStr(SG.Row);
    FNomer.Label5.Caption := IntToStr(SG.Col);
    FNomer.Show;
  end;
  if ACol > 22 then //
   { SG.Cells[23, 0] := 'Клапан';
  SG.Cells[24, 0] := 'СпецКлап';
  SG.Cells[25, 0] := 'КолКлап';
  SG.Cells[26, 0] := 'ДатКлап'; }
  begin
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [КолКлап]=' + #39 + SG.Cells[25, SG.Row] + #39 + ',[Клапан]=' + #39 + SG.Cells[23, SG.Row] + #39 + ' WHERE [IDГП]=' + #39 + (SG.Cells[13, SG.Row]) + #39, ['ЗапускСТАМ']) then
      Exit;
  end;
  {  SG.Cells[0, 0] := '№';
  SG.Cells[1, 0] := 'Дата задания';
  SG.Cells[2, 0] := 'Заказ';
  SG.Cells[3, 0] := 'Изделие';
  SG.Cells[4, 0] := 'Кол во';
  SG.Cells[5, 0] := 'Кол во запущенных';
  SG.Cells[6, 0] := 'План Неделя';
  SG.Cells[7, 0] := 'Расчетная Дата готовности';
  SG.Cells[8, 0] := 'Запущенно по брикету';
  SG.Cells[9, 0] := 'Кол принятых';
  SG.Cells[10, 0] := 'Прмечания';
  SG.Cells[11, 0] := 'Дата Запуска';
  SG.Cells[12, 0] := 'ОТК';
  SG.Cells[13, 0] := 'IDГП';
  SG.Cells[14, 0] := 'НачНомер';
  SG.Cells[15, 0] := 'КонНомер';
  SG.Cells[16, 0] := 'Статус';
  SG.Cells[17, 0] := 'Брикет';
  SG.Cells[18, 0] := 'Технолог';
  SG.Cells[19, 0] := 'Б\З';
  SG.Cells[20, 0] := 'Н\ч Сборка';
  SG.Cells[21, 0] := 'Материал';
  SG.Cells[22, 0] := 'ПР';

  SG.Cells[23, 0] := 'Клапан';
  SG.Cells[24, 0] := 'СпецКлап';
  SG.Cells[25, 0] := 'КолКлап';
  SG.Cells[26, 0] := 'ДатКлап';}
  luk := 0;
  if (SG.Col = 22)  //Примечание
    then
  begin
    Form1.Vozduh := 4;
   // Form3.Label3.Caption := SG.Cells[0, SG.ROW]; //Nomer
    Form3.Label6.Caption := SG.Cells[13, SG.ROW]; //IDGP
    Form3.Label7.Caption := SG.Cells[2, SG.ROW]; //Zakaz
    Form3.Label4.Caption := IntToStr(SG.Row);
    Form3.Label5.Caption := IntToStr(SG.Col);
    Form3.Memo1.Text := Form1.SG.Cells[SG.Col, SG.Row];
    Form3.Caption := SG.Cells[3, SG.ROW]; //Izdel
    Form3.Show;
  end;
  if ACol = 3 then
  begin
    Spec := 0;
    FSTAM.lbl1.Caption := SG.Cells[13, ARow]; //IDGP
    FSTAM.Show;
  end;
  if ACol = 7 then
  begin
    Form5.label1.Caption := SG.Cells[13, ARow]; //IDGP
    Form5.label10.Caption := SG.Cells[2, ARow]; //Заказ
    FSTAM.Shablon := 0;
            //Form5.label10.Caption:=SG.Cells[4,ARow];//Кол
    Kol_R := 0;
    Kol_G := 0;
    if not mkQuerySelect(ADOQuery2, 'Select * from %s WHERE (Not [Заготовка Запуск] IS NULL)' + ' AND ([Кол принятых] IS NULL)' + ' AND (IdГП=' + SG.Cells[12, ARow] + ')' + ' AND (Х IS NULL) ', ['ЗапускСТАМ']) then
      exit;
    for I := 0 to ADOQuery2.RecordCount - 1 do
    begin
      Kol_R := Kol_R + ADOQuery2.FieldByName('Кол во').AsInteger;
      ADOQuery2.Next;
    end;
            //++++++++++++++++++++++++++++++++++++++++++++++
    if not mkQuerySelect(ADOQuery2, 'Select * from %s WHERE  ([Кол принятых]<>0) AND (IdГП=' + SG.Cells[13, ARow] + ') AND (Х IS NULL) ', ['ЗапускСТАМ']) then
      exit;
    for I := 0 to ADOQuery2.RecordCount - 1 do
    begin
      Kol_G := Kol_G + ADOQuery2.FieldByName('Кол принятых').AsInteger;
      ADOQuery2.Next;
    end;
    Form5.label11.Caption := SG.Cells[4, ARow];
    Form5.label12.Caption := IntToStr(Kol_R);
    Form5.label13.Caption := IntToStr(Kol_G);
    Izdel := SG.Cells[3, ARow];
    Res1 := Pos('СТАМ', Izdel);
    if Res1 <> 0 then
      Delete(Izdel, 1, Res1 - 1);
    Form5.label2.Caption := Izdel;
    Form5.Show;
  end;

end;

procedure TForm1.tmr1Timer(Sender: TObject);
begin
  img30.Visible := False;
  if img28.Visible then
  begin
    img29.Visible := True;
    img28.Visible := False;
    Exit;
  end;
  if img29.Visible then
  begin
    img28.Visible := True;
    img29.Visible := False;
  end;
end;

procedure TForm1.tmr2Timer(Sender: TObject);
begin
  Button59.Click;
end;

procedure TForm1.tmr3Timer(Sender: TObject);
begin
  btn39.Enabled := True;
  if btn39.Font.Color = clRed then
  begin
    btn39.Font.Color := clBlack;
    Exit;
  end;
  if btn39.Font.Color = clBlack then
  begin
    btn39.Font.Color := clRed;
    Exit;
  end;
end;

procedure TForm1.ts1Show(Sender: TObject);
begin
  btn3.Click;
end;

procedure TForm1.ComboBox23Change(Sender: TObject);
begin
  if ComboBox23.ItemIndex = 6 then
    ComboBox18.ItemIndex := 0;

  Button46.Click;
end;

procedure TForm1.ComboBox23Click(Sender: TObject);
begin
  Edit9.Text := '';
  Edit12.Text := '';
  Edit13.Text := '';
end;

procedure TForm1.ComboBox30Change(Sender: TObject);
begin
  Form1.btn36.Click;
end;

procedure TForm1.ComboBox33Change(Sender: TObject);
begin
  Form1.btn45.Click;
end;

procedure TForm1.ComboBox37Change(Sender: TObject);
begin
  Form1.btn55.Click;
end;

procedure TForm1.ComboBox39Change(Sender: TObject);
begin
  Form1.Button71.Click;
end;

procedure TForm1.ComboBox39DrawItem(Control: TWinControl; Index: Integer; Rect: TRect; State: TOwnerDrawState);
begin
  with ComboBox39.Canvas.Brush do
  begin
    if Index = 0 then
    begin
      Color := clWhite;
      ComboBox39.Canvas.FillRect(Rect);
      ComboBox39.Canvas.Font.Color := clBlack;
      ComboBox39.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox39.Items[0]);
    end;
    if Index = 1 then
    begin
      Color := RGB(247, 247, 131);
      ComboBox39.Canvas.FillRect(Rect);
      ComboBox39.Canvas.Font.Color := clBlack;
      ComboBox39.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox39.Items[1]);
    end;
    if Index = 2 then
    begin
      Color := RGB(153, 102, 51);
      ComboBox39.Canvas.FillRect(Rect);
      ComboBox39.Canvas.Font.Color := clBlack;
      ComboBox39.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox39.Items[2]);
    end;
    if Index = 3 then
    begin
      Color := RGB(173, 255, 47);
      ComboBox39.Canvas.FillRect(Rect);
      ComboBox39.Canvas.Font.Color := clBlack;
      ComboBox39.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox39.Items[3]);
    end;
    if Index = 4 then
    begin
      Color := RGB(102, 255, 204);
      ComboBox39.Canvas.FillRect(Rect);
      ComboBox39.Canvas.Font.Color := clBlack;
      ComboBox39.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox39.Items[4]);
    end;
    if Index = 5 then
    begin
      Color := RGB(0, 100, 0);
      ComboBox39.Canvas.FillRect(Rect);
      ComboBox39.Canvas.Font.Color := clBlack;
      ComboBox39.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox39.Items[5]);
    end;
    if Index = 6 then
    begin
      Color := RGB(250, 0, 0);
      ComboBox39.Canvas.FillRect(Rect);
      ComboBox39.Canvas.Font.Color := clBlack;
      ComboBox39.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox39.Items[6]);
    end;
    if Index = 7 then
    begin
      Color := RGB(30, 144, 255);
      ComboBox39.Canvas.FillRect(Rect);
      ComboBox39.Canvas.Font.Color := clBlack;
      ComboBox39.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox39.Items[7]);
    end;
    if Index = 8 then
    begin
      Color := clGray;
      ComboBox39.Canvas.FillRect(Rect);
      ComboBox39.Canvas.Font.Color := clBlack;
      ComboBox39.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox39.Items[8]);
    end;
    if Index = 9 then
    begin
      Color := clWhite;
      ComboBox39.Canvas.FillRect(Rect);
      ComboBox39.Canvas.Font.Color := clBlack;
      ComboBox39.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox39.Items[9]);
    end;
    if Index = 10 then
    begin
      Color := clWhite;
      ComboBox39.Canvas.FillRect(Rect);
      ComboBox39.Canvas.Font.Color := clBlack;
      ComboBox39.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox39.Items[10]);
    end;
    if Index = 11 then
    begin
      Color := clWhite;
      ComboBox39.Canvas.FillRect(Rect);
      ComboBox39.Canvas.Font.Color := clBlack;
      ComboBox39.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox39.Items[11]);
    end;
    if Index = 12 then
    begin
      Color := clWhite;
      ComboBox39.Canvas.FillRect(Rect);
      ComboBox39.Canvas.Font.Color := clBlack;
      ComboBox39.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox39.Items[12]);
    end;
    if Index = 13 then
    begin
      Color := clWhite;
      ComboBox39.Canvas.FillRect(Rect);
      ComboBox39.Canvas.Font.Color := clBlack;
      ComboBox39.Canvas.TextOut(Rect.Left, Rect.Top, ComboBox39.Items[13]);
    end;
  end;
end;

procedure TForm1.ComboBox3Change(Sender: TObject);
begin
  Form1.btn5.Click;
end;

procedure TForm1.ComboBox43Change(Sender: TObject);
var
  S: string;
begin
  S := ComboBox43.Text;
  if ComboBox43.ItemIndex = 6 then
    ComboBox39.ItemIndex := 0;
  Button71.Click;
end;

procedure TForm1.ComboBox4Change(Sender: TObject);
begin
  Form1.Button16.Click;
end;

procedure TForm1.act1Execute(Sender: TObject);
var
  H: THandle;  //Ctrl+Z
begin

        {FPusk.Visible:=false; //Прячется окно,
        FPusk.Timer1.Enabled:=False;
        FPusk.Close;  }
end;

procedure TForm1.act2Execute(Sender: TObject);
begin
//FPusk.Timer1.Enabled:=True;  //Ctrl+X
end;

procedure TForm1.act3Execute(Sender: TObject);
begin
  chk5.Visible := True;
  chk6.Visible := True;
end;

procedure TForm1.btn70Click(Sender: TObject);
begin
  ExportGridtoExcel2(SG10);
end;

procedure TForm1.btn71Click(Sender: TObject);
begin
  ExportGridtoExcel2(zclrstrngrd1);
end;

procedure TForm1.btn7Click(Sender: TObject);
begin
  Spec := 1;
  FSTAM.ShowModal;
end;

procedure TForm1.Edit13Click(Sender: TObject);
begin
  ComboBox19.ItemIndex := 0;
        {ComboBox23.ItemIndex:=0;
        ComboBox18.ItemIndex:=0; }
end;

procedure TForm1.Edit12Click(Sender: TObject);
begin
  ComboBox19.ItemIndex := 0;
        {ComboBox23.ItemIndex:=0;
        ComboBox18.ItemIndex:=0; }
end;

procedure TForm1.Edit9Click(Sender: TObject);
begin
  ComboBox19.ItemIndex := 0;
        {ComboBox23.ItemIndex:=0;
        ComboBox18.ItemIndex:=0; }
end;

procedure TForm1.btn50Click(Sender: TObject);
var
  I, qc, q1, q2, Qp, A, B, zv, q, Kol: Integer;
  S, S1, Iz, Izd, IDGP, IDKO: string;
  F: Double;
begin
//Л-К-01-1300*1000-С-1*DIA52-З-0
//Л-К-02-2000*2000-C-2*PLS30-РЗ-0
  for I := 0 to SG5.RowCount - 1 do
  begin
    S := SG5.Cells[24, I + 1];
    Iz := SG5.Cells[3, I + 1];
    Izd := SG5.Cells[3, I + 1];
    IDGP := SG5.Cells[21, I + 1];
    if S = '' then
      Continue;
    F := StrToFloat(S);
     // if F=0 then
    begin
      q1 := Pos('-01-', Iz);
      q2 := Pos('-02-', Iz);

        //Л-К-01-1300*1000-С-1*DIA52-З-0
      if (q1 <> 0) then
      begin
        Delete(Izd, 1, q1 + 3);
            //1300*1000-С-1*DIA52-З-0
        zv := Pos('*', Izd);
        S := Copy(Izd, 1, zv - 1);
        A := StrToInt(S);
        Delete(Izd, 1, zv);
            //1000-С-1*DIA52-З-0
        q := Pos('-', Izd);
        S1 := Copy(Izd, 1, q - 1);
        B := StrToInt(S1);
      end;
        //=================================
      if (q2 <> 0) then
      begin
        Delete(Izd, 1, q2 + 3);
            //1300*1000-С-1*DIA52-З-0
        zv := Pos('*', Izd);
        S := Copy(Izd, 1, zv - 1);
        A := StrToInt(S);
        Delete(Izd, 1, zv);
            //1000-С-1*DIA52-З-0
        q := Pos('-', Izd);
        S1 := Copy(Izd, 1, q - 1);
        B := StrToInt(S1);
      end;
        //=================================
      if (q1 <> 0) then   //Л-К-01-1300*1000-С-1*DIA52-З-0
      begin
        if (A < 1000) and (B <= 1000) then
          F := 2.7;
             //
        if (A < 1000) and ((B > 1000) and (B <= 1800)) then
          F := 2.9;
             //----
        if ((A > 1000) and (A <= 1500)) and (B <= 1000) then
          F := 2.9;
             //
        if ((A > 1000) and (A <= 1500)) and ((B > 1000) and (B <= 1800)) then
          F := 3.2;

             //----
        if ((A > 1500) and (A <= 1800)) and (B <= 1000) then
          F := 3;
             //
        if ((A > 1500) and (A <= 1800)) and ((B > 1000) and (B <= 1800)) then
          F := 3.45;

             //----
        if ((A > 1800)) and (B > 1800) then
          F := 3.75;
             //
        if ((A > 1800)) and ((B >= 1000) and (B <= 1800)) then
          F := 3.6;

      end;
        //=================================
      if (q2 <> 0) then   //Л-К-01-1300*1000-С-1*DIA52-З-0
      begin
        if (A <= 1500) and (B <= 2300) then
          F := 5;
             //
        if (A <= 1500) and ((B > 2300) and (B <= 3000)) then
          F := 5.2;
             //
        if (A <= 1500) and ((B > 3800)) then
          F := 6;

             //----
        if ((A > 1500)) and (B <= 2300) then
          F := 5.6;
             //
        if ((A > 1500)) and ((B > 2300) and (B <= 3000)) then
          F := 6;
             //
        if (A > 1500) and ((B > 3800)) then
          F := 6.4;
      end;

      Kol := StrToInt(SG5.Cells[4, I + 1]);
      if Kol <> 0 then
        if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Н\ч Сборка]=' + #39 + ConvertFloat(FloatToStr(F * Kol)) + #39 + ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ')', ['ЗапускЛюк']) then
          Exit;
    end;
  end;
end;

procedure TForm1.btn51Click(Sender: TObject);
var
  I: Integer;
begin
        // SG216.Sort(0,sdDescending);
  for I := 0 to SG7.RowCount - 1 do
  begin
    if SG7.Cells[0, I + 1] = '' then
    begin
      SG5.RowEnabled[I + 1] := false;
    end;
  end;
end;

procedure TForm1.btn52Click(Sender: TObject);
var
  I: Integer;
begin
  for I := 0 to SG7.RowCount - 1 do
  begin
    SG7.Cells[0, I + 1] := '';
    SG5.RowEnabled[I + 1] := True;
  end;
end;

procedure TForm1.btn53Click(Sender: TObject);
var
  Vn_Dat, fileName, Dat: string;
  I, Y, A: Integer;
begin
  UOsnova_Main := Osnova_Main.Create();
  Conn_Klap := Connect_Miass_Klap.Create();
  Conn_Ceh := Connect_Miass_Ceh.Create();

  fileName := '';//ExtractFileDir(ParamStr(0)); //+'\Klapan.EXE';

  for I := 0 to SG7.RowCount - 1 do
  begin
    if SG7.Cells[0, I] <> '' then
    begin
      Vn_Dat := SG5.Cells[8, I];
      UOsnova_Main.Flag_Error := 0;                            //  Edit1.Text
      if not UOsnova_Main.Osnova(Vn_Dat, 'ЗапускЛЮК', 'СпецифЛЮК', #39 + SG5.Cells[0, I] + #39, fileName, 1, 0) then
        Exit;
    end;
  end;
end;

procedure TForm1.btn54Click(Sender: TObject);
begin
  ExportGridATMtoExcel(SG10);
end;

procedure TForm1.btn55Click(Sender: TObject);
var
  I, res, Res1, Res2: Integer;
  Bet, Ned1, Ned2, Str,SS,GP,Kol: string;
begin
  Clear_StringGrid(SG10);
  SG10.ColCount := 30;
  SG10.Cells[0, 0] := 'Номер';
  SG10.Cells[1, 0] := 'Дата';
  SG10.Cells[2, 0] := 'Заказ';
  SG10.Cells[3, 0] := 'Изделие';
  SG10.Cells[4, 0] := 'Кол во';
  SG10.Cells[5, 0] := 'В пакете';
  SG10.Cells[6, 0] := 'План дата';
  SG10.Cells[7, 0] := 'План Неделя';
  SG10.Cells[8, 0] := 'Примечания';
  SG10.Cells[9, 0] := 'ПР';
  SG10.Cells[10, 0] := 'Пол';
  SG10.Cells[11, 0] := 'Технолог Обраб';
  SG10.Cells[12, 0] := 'НачНомер';
  SG10.Cells[13, 0] := 'БЗ';
  SG10.Cells[14, 0] := 'Заготовка Запуск';
  SG10.Cells[15, 0] := 'Н\ч Сборка Клапана';
  SG10.Cells[16, 0] := 'ОТК Прим';
 // SG10.Cells[17, 0] := 'ДатаГотОфис';
  SG10.Cells[18, 0] := 'дата Готовности';
  SG10.Cells[19, 0] := 'Заводской Номер';
  SG10.Cells[20, 0] := 'ОТК';
  SG10.Cells[21, 0] := 'IdГП';
  SG10.Cells[22, 0] := 'IdКО';
  SG10.Cells[23, 0] := 'Статус';
  SG10.Cells[24, 0] := 'Кол принятых';
  SG10.Cells[25, 0] := 'Статусф';
  SG10.Cells[26, 0] := 'Код';
  SG10.Cells[27, 0] := 'Отправила';
  SG10.Cells[28, 0] := 'Отмена';
  SG10.Cells[29, 0] := 'КолТЭН';
        //SG218.SortByColumn(1);
  //SG2.ColWidths[3] := 200;
 { SG10.ColWidths[5] := 20;
  SG10.ColWidths[7] := 20;

 // SG10.ColWidths[10] := 0;
  SG10.ColWidths[12] := 0;
  //SG10.ColWidths[13] := 0;
  SG10.ColWidths[14] := 50;
  SG10.ColWidths[15] := 20;
  SG10.ColWidths[16] := 60;
  SG10.ColWidths[21] := 0;
  SG10.ColWidths[22] := 0;
  SG10.ColWidths[23] := 0;
  SG10.ColWidths[25] := 0;
  SG10.ColWidths[26] := 0;  }
  if Poisk = 0 then
  begin
    if (ComboBox37.ItemIndex = 1) then //ОТК
      Bet := ' AND ([Отмена] IS NULL)  AND  (NOT [Заготовка Запуск] IS NULL) AND  ( ОТК IS NULL)';

    if (ComboBox37.ItemIndex = 6) then //ОТК
      Bet := ' AND ([Отмена] IS NULL)  AND  (NOT ОТК IS NULL)';

    if (ComboBox37.ItemIndex = 7) then // Отмененые
      Bet := ' AND (NOT Отмена IS NULL)';

    if (ComboBox37.ItemIndex = 9) then //Просрочен
    begin
      res := (WeekNum(Date));
      Bet := ' AND ([Отмена] IS NULL) AND  ([Планнеделя]<' + #39 + IntToStr(res) + #39 + ' ) AND ((ОТК IS NULL))';
    end;

    if (ComboBox37.ItemIndex = 10) then //Готовые
      Bet := '  AND ([Отмена] IS NULL) AND (NOT ОТК IS NULL)';

    if (ComboBox37.ItemIndex = 14) then //
      Bet := '  AND ([Отмена] IS NULL) AND (Отправила=1)';

    if (ComboBox37.ItemIndex = 13) then //
      Bet := ' AND ([Отмена] IS NULL)  AND (Отправила=0)';

    if (ComboBox37.ItemIndex = 11) or (ComboBox37.ItemIndex = -1) then //НЕ Готовые (ОТК IS NULL)
      Bet := ' AND ([Отмена] IS NULL)  AND ([Кол во]>[Кол принятых])';

  end;

//Просроченные
  if Poisk = 1 then
  begin
    Bet := Order4;//'  AND ((Заказ=' + #39 + Edit28.Text + #39 + ') )';
  end;
  SS:=' AND (NOT Изделие  LIKE '+#39+'%Клапан%'+#39+')';
  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where (ПР=' + #39 + 'МИ' + #39 +
  ') %s %s %s' , ['[750]',SS,Bet,Order]) then
    exit;
 { and (Пол=' + #39 +
  'МИ' + #39 + ')}
  if Form1.ADOQuery1.RecordCount <> 0 then
    F750 := 1
  else
    F750 := 0;
  SG10.RowCount := Form1.ADOQuery1.RecordCount + 2;

  StatusBar1.Panels[2].Text := IntToStr(ADOQuery1.RecordCount);
  for I := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    SG10.Cells[0, I + 1] := IntToStr(I + 1);
    SG10.Cells[1, I + 1] := Form1.ADOQuery1.FieldByName('Дата').AsString;
    SG10.Cells[2, I + 1] := Form1.ADOQuery1.FieldByName('Заказ').AsString;
    SG10.Cells[3, I + 1] := Form1.ADOQuery1.FieldByName('Изделие').AsString;
    SG10.Cells[4, I + 1] := Form1.ADOQuery1.FieldByName('Кол во').AsString;
    SG10.Cells[5, I + 1] := Form1.ADOQuery1.FieldByName('Кол во запущенных').AsString;
    SG10.Cells[6, I + 1] := Form1.ADOQuery1.FieldByName('План дата').AsString;
    SG10.Cells[7, I + 1] := Form1.ADOQuery1.FieldByName('План Неделя').AsString;
    SG10.Cells[8, I + 1] := Form1.ADOQuery1.FieldByName('Примечания').AsString;
    SG10.Cells[9, I + 1] := Form1.ADOQuery1.FieldByName('Пр').AsString;
    SG10.Cells[10, I + 1] := Form1.ADOQuery1.FieldByName('Пол').AsString;
    SG10.Cells[11, I + 1] := Form1.ADOQuery1.FieldByName('Технолог Обраб').AsString;
    SG10.Cells[12, I + 1] := Form1.ADOQuery1.FieldByName('НачНомер').AsString;
    SG10.Cells[13, I + 1] := Form1.ADOQuery1.FieldByName('БЗ').AsString;
    SG10.Cells[14, I + 1] := Form1.ADOQuery1.FieldByName('Заготовка Запуск').AsString;
    SG10.Cells[15, I + 1] := Form1.ADOQuery1.FieldByName('Н\ч Сборка Клапана').AsString;
    SG10.Cells[16, I + 1] := Form1.ADOQuery1.FieldByName('ОТК Прим').AsString;
    SG10.Cells[18, I + 1] := Form1.ADOQuery1.FieldByName('Сборка Готовность').AsString;
    SG10.Cells[19, I + 1] := Form1.ADOQuery1.FieldByName('Заводской Номер').AsString;
    SG10.Cells[20, I + 1] := Form1.ADOQuery1.FieldByName('ОТК').AsString;
    SG10.Cells[21, I + 1] := Form1.ADOQuery1.FieldByName('IdГП').AsString;
    GP:= Form1.ADOQuery1.FieldByName('IdГП').AsString;
   { SS:='AND (Элемент LIKE '+#39+'%Нагреватель электрический%'+#39+' )';
    if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where ([IdГП]=' +
    #39+GP+#39+') %s', ['Специф750',SS]) then
    exit;
    if ADOQuery4.RecordCount=0   then
     Kol:='0'
    else
    Kol:= ADOQuery4.FieldByName('Количество').AsString;
    SG10.Cells[29, I + 1] := Kol;        }
    SG10.Cells[22, I + 1] := Form1.ADOQuery1.FieldByName('IdКО').AsString;
    SG10.Cells[23, I + 1] := Form1.ADOQuery1.FieldByName('Статус').AsString;
    SG10.Cells[24, I + 1] := Form1.ADOQuery1.FieldByName('Кол принятых').AsString;
    SG10.Cells[25, I + 1] := Form1.ADOQuery1.FieldByName('Статусф').AsString;
    SG10.Cells[26, I + 1] := Form1.ADOQuery1.FieldByName('Код').AsString;
    SG10.Cells[27, I + 1] := Form1.ADOQuery1.FieldByName('Отправила').AsString;
    SG10.Cells[28, I + 1] := Form1.ADOQuery1.FieldByName('Отмена').AsString;
    Form1.ADOQuery1.Next;
  end;
 // SG10.RowHeights[0] := 60;
// SG10.Cells[0, 1] :='1';
  Poisk := 0;
end;

procedure TForm1.btn57Click(Sender: TObject);
begin
  Order := ' ORDER BY [' + SG10.Cells[SG10.Col, 0] + '] DESC';
  Btn55.Click;
end;

procedure TForm1.btn58Click(Sender: TObject);
begin
  Order := ' ORDER BY [' + SG10.Cells[SG10.Col, 0] + ']';
  Btn55.Click;
end;

procedure TForm1.btn59Click(Sender: TObject);
var
  Res, X, Res_: Integer;
  Str_e4, Str1, Str2, Str3: string;
begin
  Poisk := 1;
  if Edit28.Text <> '' then
    Order4 := '  AND (Заказ=' + #39 + Edit28.Text + #39 + ')';
  if Edit29.Text <> '' then
  begin
      Order4 := ' AND  (Изделие LIKE' + #39 + '%'+Edit29.Text+'%' + #39 + ')';
  end;
  Btn55.Click;
end;

procedure TForm1.btn5Click(Sender: TObject);
var
  I, res, Res1, Res2: Integer;
  Bet, Ned1, Ned2, Str, dat1, dat2: string;
begin
  //Clear_StringGrid(SG215);
  SG215.ClearAll;
 { SG215.ColCount := 26;
  SG215.Cells[0, 0] := 'Номер';
  SG215.Cells[1, 0] := 'Дата задания';
  SG215.Cells[2, 0] := 'Заказ';
  SG215.Cells[3, 0] := 'БЗ';
  SG215.Cells[4, 0] := 'Изделие';
  SG215.Cells[5, 0] := 'Кол во';
  SG215.Cells[6, 0] := 'Расчетная дата готовности';
  SG215.Cells[7, 0] := 'План Неделя';
  SG215.Cells[8, 0] := 'Планирование';
  SG215.Cells[9, 0] := 'Примечание';
  SG215.Cells[10, 0] := 'Мат';
  SG215.Cells[11, 0] := 'Н\ч Сборка';

  SG215.Cells[12, 0] := 'TRUMPF';
  SG215.Cells[13, 0] := 'ГИБКА';
  SG215.Cells[14, 0] := 'СВАРКА';
  SG215.Cells[15, 0] := 'ПОКРАСКА';
  SG215.Cells[16, 0] := 'Исполнение';
  SG215.Cells[17, 0] := 'Сборка Запуск';
  SG215.Cells[18, 0] := 'ОТКФам';
  SG215.Cells[19, 0] := 'Кол принятых';
  SG215.Cells[20, 0] := 'ОТК';
  SG215.Cells[21, 0] := 'IdГП';
  SG215.Cells[22, 0] := 'НачНомер';
  SG215.Cells[23, 0] := 'КонНомер';
  SG215.Cells[24, 0] := 'Упаковка';
  SG215.Cells[25, 0] := 'Срочно';
  SG215.SortByColumn(1);
  SG215.ColWidths[17] := 40;
  SG215.ColWidths[5] := 0;
  SG215.ColWidths[7] := 0;
  SG215.ColWidths[9] := 20; }
        {Все
Запущенные на заготовку
Заготовка готова
Готовность по СВАРКЕ
Готовность  на сборку
Запуск на сборку
ОТК
Отмененые
не запущенные
Просроченные
Готовые
Не готовые}
  if Poisk = 0 then
  begin
    if (ComboBox3.ItemIndex = 1) then //Запущенные на заготовку
      Bet := ' AND (NOT [TRUMPF] IS NULL) AND (ГИБКА IS NULL) AND ((ОТК IS NULL) OR ([Кол во запущенных]>[Кол принятых]))';

    if (ComboBox3.ItemIndex = 2) then // Заготовка готова
      Bet := ' AND (NOT [Гибка] IS NULL) AND ( [СВАРКА] IS NULL) AND ((ОТК IS NULL))';

    if (ComboBox3.ItemIndex = 3) then //Готовность по СВАРКЕ
      Bet := ' AND  (NOT [СВАРКА] IS NULL) AND  ([ПОКРАСКА] IS NULL) AND ((ОТК IS NULL) OR ([Кол во запущенных]>[Кол принятых]))';

    if (ComboBox3.ItemIndex = 4) then //Готовность  на сборку
      Bet := ' AND  (NOT [ПОКРАСКА] IS NULL) AND ([Сборка Запуск] IS NULL) AND ((ОТК IS NULL) OR ([Кол во запущенных]>[Кол принятых]))';

    if (ComboBox3.ItemIndex = 5) then ////Запуск на сборку
      Bet := ' AND (NOT [Сборка Запуск] IS NULL) AND ((ОТК IS NULL) OR ([Кол во запущенных]>[Кол принятых]))';

    if (ComboBox3.ItemIndex = 6) then //ОТК
      Bet := ' AND (NOT ОТК IS NULL)';

    if (ComboBox3.ItemIndex = 7) then // Отмененые
      Bet := ' AND (NOT Отмена IS NULL)';

    if (ComboBox3.ItemIndex = 8) then // не запущенные
      Bet := ' AND ( TRUMPF IS NULL) AND ((ОТК IS NULL) )';

    if (ComboBox3.ItemIndex = 9) then //Просрочен
    begin
      res := (WeekNum(Date));
      Bet := ' AND  ([План неделя]<' + #39 + IntToStr(res) + #39 + ' ) AND ((ОТК IS NULL) OR ([Кол во запущенных]>[Кол принятых]))';
    end;

    if (ComboBox3.ItemIndex = 10) then //Готовые
      Bet := '  AND (NOT ОТК IS NULL)';

    if (ComboBox3.ItemIndex = 11) or (ComboBox3.ItemIndex = -1) then //НЕ Готовые
      Bet := '  AND ((ОТК IS NULL) OR ([Кол во запущенных]>[Кол принятых]))';
    if Edit22.Text <> '' then
    begin
      Str := Edit22.Text;
      res := Pos('-', Str);
      if res <> 0 then
      begin
        Ned1 := Copy(Str, 1, res - 1);
        Delete(Str, 1, res);
        Ned2 := Str;
        Bet := Bet + ' AND ([план Неделя] BETWEEN ' + #39 + Ned1 + #39 + ' AND ' + #39 + Ned2 + #39 + ')';

      end
      else
        Bet := Bet + ' AND ([план Неделя]= ' + #39 + Str + #39 + ' )';
    end;
  end
  else
    Bet := Order4;
//Просроченные
  dat1 := FormatDateTime('mm.dd.YYYY', DateTimePicker7.Date);
  dat2 := FormatDateTime('mm.dd.YYYY', DateTimePicker8.Date);
  if DIP = 0 then
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where ([Отмена] IS NULL) AND (Х IS NULL)' + Bet + Order2, ['ЗапускСТАМ']) then
      exit;
  end
  else
  begin
    if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where ([Отмена] IS NULL) AND (Х IS NULL)' + Betwe_G + Order2, ['ЗапускСТАМ']) then
      exit;
    Dip := 0;
  end;
  SG215.RowCount := Form1.ADOQuery1.RecordCount + 2;
  SG216.RowCount := Form1.ADOQuery1.RecordCount + 2;
  SG215.ColCount := 32;
  SG215.Cells[0, 0] := 'Номер';
  SG215.Cells[1, 0] := 'Дата задания';
  SG215.Cells[2, 0] := 'Заказ';
  SG215.Cells[3, 0] := 'БЗ';
  SG215.Cells[4, 0] := 'Изделие';
  SG215.Cells[5, 0] := 'Кол во';
  SG215.Cells[6, 0] := 'Расчетная дата готовности';
  SG215.Cells[7, 0] := 'План Неделя';
  SG215.Cells[8, 0] := 'Планирование';
  SG215.Cells[9, 0] := 'Примечание';
  SG215.Cells[10, 0] := 'Мат';
  SG215.Cells[11, 0] := 'Н\ч Сборка';

  SG215.Cells[12, 0] := 'TRUMPF';
  SG215.Cells[13, 0] := 'ГИБКА';
  SG215.Cells[14, 0] := 'СВАРКА';
  SG215.Cells[15, 0] := 'ПОКРАСКА';
  SG215.Cells[16, 0] := 'Исполнение';
  SG215.Cells[17, 0] := 'Сборка Запуск';
  SG215.Cells[18, 0] := 'ОТКФам';
  SG215.Cells[19, 0] := 'Кол принятых';
  SG215.Cells[20, 0] := 'ОТК';
  SG215.Cells[21, 0] := 'IdГП';
  SG215.Cells[22, 0] := 'НачНомер';
  SG215.Cells[23, 0] := 'КонНомер';
  SG215.Cells[24, 0] := 'Упаковка';

  SG215.Cells[25, 0] := 'Клапан';
  SG215.Cells[26, 0] := 'СпецКлап';
  SG215.Cells[27, 0] := 'КолКлап';
  SG215.Cells[28, 0] := 'ДатКлап';
  SG215.Cells[29, 0] := 'Срочно';
  SG215.Cells[30, 0] := 'idКО';
  SG215.Cells[31, 0] := 'ОТК Прим';
  SG215.SortByColumn(1);
  SG215.ColWidths[17] := 40;
  SG215.ColWidths[5] := 0;
  SG215.ColWidths[7] := 0;
  SG215.ColWidths[9] := 20;
  StatusBar1.Panels[2].Text := IntToStr(ADOQuery1.RecordCount);
  for I := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    SG215.Cells[0, I + 1] := Form1.ADOQuery1.FieldByName('Номер').AsString;
    SG215.Cells[1, I + 1] := Form1.ADOQuery1.FieldByName('Дата').AsString;
    SG215.Cells[2, I + 1] := Form1.ADOQuery1.FieldByName('Заказ').AsString;
    SG215.Cells[3, I + 1] := Form1.ADOQuery1.FieldByName('БЗ').AsString;

    SG215.Cells[4, I + 1] := Form1.ADOQuery1.FieldByName('Изделие').AsString;
    SG215.Cells[5, I + 1] := Form1.ADOQuery1.FieldByName('Кол во запущенных').AsString;
   // SG215.Cells[5, I + 1] := Form1.ADOQuery1.FieldByName('Н\ч Сборка').AsString;
    SG215.Cells[6, I + 1] := Form1.ADOQuery1.FieldByName('Расчетная дата готовности').AsString;
    SG215.Cells[7, I + 1] := Form1.ADOQuery1.FieldByName('План Неделя').AsString;
    SG215.Cells[8, I + 1] := Form1.ADOQuery1.FieldByName('Планирование').AsString;

    SG215.Cells[9, I + 1] := Form1.ADOQuery1.FieldByName('Примечание').AsString;
    SG215.Cells[10, I + 1] := Form1.ADOQuery1.FieldByName('Мат').AsString;

   // SG215.Cells[11, I + 1] := Form1.ADOQuery1.FieldByName('Дата запуска').AsString;
    SG215.Cells[11, I + 1] := Form1.ADOQuery1.FieldByName('Н\ч Сборка').AsString;
    SG215.Cells[12, I + 1] := Form1.ADOQuery1.FieldByName('TRUMPF').AsString;
    SG215.Cells[13, I + 1] := Form1.ADOQuery1.FieldByName('ГИБКА').AsString;
    SG215.Cells[14, I + 1] := Form1.ADOQuery1.FieldByName('СВАРКА').AsString;
    SG215.Cells[15, I + 1] := Form1.ADOQuery1.FieldByName('ПОКРАСКА').AsString;
    SG215.Cells[16, I + 1] := Form1.ADOQuery1.FieldByName('Исполнение').AsString;
                //
    SG215.Cells[17, I + 1] := Form1.ADOQuery1.FieldByName('Сборка Запуск').AsString;
    SG215.Cells[18, I + 1] := Form1.ADOQuery1.FieldByName('ОТКФам').AsString;
    SG215.Cells[19, I + 1] := Form1.ADOQuery1.FieldByName('Кол принятых').AsString;
    SG215.Cells[20, I + 1] := Form1.ADOQuery1.FieldByName('ОТК').AsString;
    SG215.Cells[21, I + 1] := Form1.ADOQuery1.FieldByName('IdГП').AsString;
    SG215.Cells[22, I + 1] := Form1.ADOQuery1.FieldByName('НачНомер').AsString;
    SG215.Cells[23, I + 1] := Form1.ADOQuery1.FieldByName('КонНомер').AsString;
    SG215.Cells[24, I + 1] := Form1.ADOQuery1.FieldByName('Упаковка').AsString;

    SG215.Cells[25, I + 1] := Form1.ADOQuery1.FieldByName('Клапан').AsString;
    SG215.Cells[26, I + 1] := Form1.ADOQuery1.FieldByName('СпецКлап').AsString;
    SG215.Cells[27, I + 1] := Form1.ADOQuery1.FieldByName('КолКлап').AsString;
    SG215.Cells[28, I + 1] := Form1.ADOQuery1.FieldByName('ДатКлап').AsString;
    SG215.Cells[29, I + 1] := Form1.ADOQuery1.FieldByName('Срочно').AsString;
    SG215.Cells[30, I + 1] := Form1.ADOQuery1.FieldByName('IdКО').AsString;
    SG215.Cells[31, I + 1] := Form1.ADOQuery1.FieldByName('ОТК Прим').AsString;
    Form1.ADOQuery1.Next;
  end;
  SG215.RowHeights[0] := 60;
  SG216.RowHeights[0] := 60;
  SG215.ColWidths[5] := 40;
  SG215.ColWidths[7] := 60;
  SG215.ColWidths[9] := 60;
  SG215.ColWidths[11] := 10;
  SG215.ColWidths[16] := 60;
  SG215.ColWidths[21] := 0;
  SG215.ColWidths[26] := 0;
  Poisk := 0;
end;

procedure TForm1.btn8Click(Sender: TObject);
begin
  ExportGridATMtoExcel(SG215);
end;

procedure TForm1.ts2Show(Sender: TObject);
begin
  btn5.Click;
end;

procedure TForm1.btn9Click(Sender: TObject);
begin
  fNewNaklSTAM.ShowModal;
end;

procedure TForm1.SG10Click(Sender: TObject);
var
  I: Integer;
begin
  PB2.Max := 10;
  PB2.Position := 5;
end;

procedure TForm1.SG10DblClick(Sender: TObject);
begin
  Form1.Vozduh := 2;
  if (SG10.Col = 11) or (SG10.Col = 8) then  //and ((FlagDolg = 1) or (FlagDolg = 7))
  begin   // TRUMPF
    F710.Caption := SG10.Cells[SG10.Col, 0];
    F710.Label2.Caption := SG10.Cells[21, SG10.Row]; //idGP
    F710.dtp1.Date := Now;
    F710.Memo1.Text := SG10.Cells[8, SG10.Row];
    F7 := 1;
    F710.rg1.Visible := False;

    if (SG10.Col = 20) then
      F710.rg1.Visible := True;
    F710.ShowModal;
  end;
  Form1.Vozduh := 2;             //
  if (SG10.Col = 15) and ((FlagDolg = 2) or (FlagDolg = 1)) then
  begin
    FNorm.Caption := SG10.Cells[I_FN_ZAK, SG10.Row];
    FNorm.Label3.Caption := SG10.Cells[3, SG10.Row];
    FNorm.Label4.Caption := SG10.Cells[5, SG10.Row];
    FNorm.Show;
  end;
 {   if (SG2.Col = 11) or (SG2.Col = 18) or (SG2.Col = 20) or (SG2.Col = 21) or (SG2.Col = 22) or (SG2.Col = 23)
   or (SG2.Col = 8)  or (SG2.Col = 5)then  //and ((FlagDolg = 1) or (FlagDolg = 7))
  begin   // TRUMPF
    F710.Caption := SG2.Cells[SG2.Col, 0];
    F710.Label2.Caption := SG2.Cells[24, SG2.Row]; //idGP
    F710.dtp1.Date:=Now;
    F7:=0;
    F710.ShowModal;
  end;    }
  luk := 2;
  if SG10.Col = 3 then
  begin
    Spec := 0;
    FSTAM.lbl1.Caption := SG10.Cells[21, SG10.Row]; //IDGP
    FSTAM.Show;
  end;
end;

procedure TForm1.SG10GetCellColor(Sender: TObject; ARow, ACol: Integer; AState: TGridDrawState; ABrush: TBrush; AFont: TFont);
var
  I, Res: Integer;
  kol, kol_zap, kol_g: Integer;
begin
  if (SG10.Cells[4, ARow] = '') or (SG10.Cells[5, ARow] = '') or (SG10.Cells[24, ARow] = '') then
    Exit;
  if (ARow > 0) and (ACol > 1) then
  begin
  //++++++++++++++++++++++++++++++++++++++
    kol := StrToInt(SG10.Cells[4, ARow]);
    kol_zap := StrToInt(SG10.Cells[5, ARow]);
    kol_g := StrToInt(SG10.Cells[24, ARow]);
   // Res := AnsiComparestr('0', SG10.Cells[5, ARow]);
    if (kol_zap <> 0) then
    begin
      ABrush.Color := RGB(247, 247, 131); //Желтый
    end;
          //++++++++++++++++++++++++++++++++++++++

    if (SG10.Cells[14, ARow] <> '') then
    begin
      ABrush.Color := RGB(0, 255, 0); //Св зеленый
    end;
          //++++++++++++++++++++++++++++++++++++++
    if (SG10.Cells[20, ARow] <> '') then
    begin
      ABrush.Color := RGB(0, 100, 0); //ОТК
    end;
    Res := Pos('rue', SG10.Cells[27, ARow]);
    if (Res <> 0) and (ACol=9) then
    begin
      ABrush.Color := RGB(75, 234, 251); //
    end;          //++++++++++++++++++++++++++++++++++++++

    if (SG10.Cells[20, ARow] <> '') and (kol > kol_g) and (ACol = 8) then
    begin
      ABrush.Color := RGB(230, 134, 216); //Rozov Не было запуска из Москвы
    end;
//
    if (SG10.Cells[28, ARow] <> '')  then  //Отмена
    begin
      ABrush.Color := RGB(169, 169, 169); //
    end;
    //
    Res := AnsiComparestr('1', SG10.Cells[23, ARow]);
    if (Res = 0) then
    begin
      AFont.Style := [fsBold];
    end;
    //
   { Res := AnsiComparestr('0', SG10.Cells[29, ARow]);
    if (Res = 0) then
    begin
      ABrush.Color := RGB(32, 252, 184); //
    end; }
  end;
end;

procedure TForm1.SG10MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
// Эмуляция нажатия мыши
  if Button = mbRight then
    mouse_event(MOUSEEVENTF_LEFTDOWN or MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
end;

procedure TForm1.SG10MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  I, j: Integer;
  myrect: TGridRect;
  Sum: Double;
begin
  mmoDGP1.Lines.Clear;

 { myrect := SG10.Selection;
  for I := myrect.Left to myrect.Right do
    for j := myrect.Top to myrect.Bottom do
    begin
      mmoDGP1.Lines.Add(SG10.Cells[I_FN_SGP + 2, j]);
    end;

  I := X;  }

  if (SG10.Col = 4) then
  begin
    Sum := 0;
    myrect := SG10.Selection;
    for I := myrect.Left to myrect.Right do
      for j := myrect.Top to myrect.Bottom do
      begin
        try
          Sum := Sum + StrToFloat(SG10.Cells[I, j]);
        except
          Break;
        end;
      end;
    StatusBar2.Panels[2].Text := FloattOsTR(Sum);

  end;
end;

procedure TForm1.SG215DblClick(Sender: TObject);
begin
        {        SG215.Cells[11,0]:='Дата запуска';
        SG215.Cells[12,0]:='TRUMPF';
        SG215.Cells[13,0]:='ГИБКА';
        SG215.Cells[14,0]:='СВАРКА';
        SG215.Cells[15,0]:='ПОКРАСКА';
        SG215.Cells[16,0]:='Заготовка готовность';
        SG215.Cells[17,0]:='Сборка Запуск';
        SG215.Cells[18,0]:='Кол принятых';
        SG215.Cells[19,0]:='ОТК';}
  luk := 0;
  if (SG215.Col = 9) and ((FlagDolg = 4) or (FlagDolg = 1) or (FlagDolg = 7) or (FlagDolg = 2)) //Примечание
    then
  begin
    Form1.Vozduh := 4;
    Form3.Label3.Caption := SG215.Cells[0, SG215.ROW]; //Nomer
    Form3.Label6.Caption := SG215.Cells[21, SG215.ROW]; //IDGP
    Form3.Label7.Caption := SG215.Cells[2, SG215.ROW]; //Zakaz
    Form3.Label4.Caption := IntToStr(SG215.Row);
    Form3.Label5.Caption := IntToStr(SG215.Col);
    Form3.Memo1.Text := Form1.SG215.Cells[SG215.Col, SG215.Row];
    Form3.Caption := SG215.Cells[4, SG215.ROW]; //Izdel
    OTK_Prim:=0;
    Form3.Show;
  end;
   if (SG215.Col = 31) and ((FlagDolg = 10) or (FlagDolg = 1)) //Примечание
    then
  begin
    Form1.Vozduh := 4;
    Form3.Label3.Caption := SG215.Cells[0, SG215.ROW]; //Nomer
    Form3.Label6.Caption := SG215.Cells[21, SG215.ROW]; //IDGP
    Form3.Label7.Caption := SG215.Cells[2, SG215.ROW]; //Zakaz
    Form3.Label4.Caption := IntToStr(SG215.Row);
    Form3.Label5.Caption := IntToStr(SG215.Col);
    Form3.Memo1.Text := Form1.SG215.Cells[SG215.Col, SG215.Row];
    Form3.Caption := SG215.Cells[4, SG215.ROW]; //Izdel
    OTK_Prim:=1;
    Form3.Show;
  end;
  if (SG215.Col = 8) and ((FlagDolg = 1) or (FlagDolg = 7)) then  //Планирование
  begin   // TRUMPF
    FStamTime.Caption := SG215.Cells[SG215.Col, 0];
    FStamTime.Label1.Caption := SG215.Cells[21, SG215.Row]; //idGP
    FStamTime.Label2.Caption := SG215.Cells[0, SG215.Row];  //Nomer
    FStamTime.Label6.Caption := SG215.Cells[10, SG215.Row];  //Материал
    FStamTime.Label3.Caption := IntToStr(SG215.Col);
    FStamTime.Label4.Caption := IntToStr(SG215.Row);
    FStamTime.ShowModal;
  end;
  if (SG215.Col = 12) or (SG215.Col = 11) and ((FlagDolg = 1) or (FlagDolg = 7)) then
  begin   // TRUMPF
    FStamTime.Caption := SG215.Cells[SG215.Col, 0];
    FStamTime.Label1.Caption := SG215.Cells[21, SG215.Row]; //idGP
    FStamTime.Label2.Caption := SG215.Cells[0, SG215.Row];  //Nomer
    FStamTime.Label6.Caption := SG215.Cells[10, SG215.Row];  //Материал
    FStamTime.Label3.Caption := IntToStr(SG215.Col);
    FStamTime.Label4.Caption := IntToStr(SG215.Row);
    FStamTime.ShowModal;
  end;
  if (SG215.Cells[12, SG215.Row] <> '') and (SG215.Col = 13) and ((FlagDolg = 1) or (FlagDolg = 7)) then
  begin   // ГИБКА
    FStamTime.Caption := SG215.Cells[SG215.Col, 0];
    FStamTime.Label1.Caption := SG215.Cells[21, SG215.Row]; //idGP
    FStamTime.Label2.Caption := SG215.Cells[0, SG215.Row];  //Nomer
    FStamTime.Label6.Caption := SG215.Cells[10, SG215.Row];  //Материал
    FStamTime.Label3.Caption := IntToStr(SG215.Col);
    FStamTime.Label4.Caption := IntToStr(SG215.Row);
    FStamTime.ShowModal;
  end;
  if (SG215.Cells[13, SG215.Row] <> '') and (SG215.Col = 14) and ((FlagDolg = 1) or (FlagDolg = 4) or (FlagDolg = 7)) then
  begin   // СВАРКА
    FStamTime.Caption := SG215.Cells[SG215.Col, 0];
    FStamTime.Label1.Caption := SG215.Cells[21, SG215.Row]; //idGP
    FStamTime.Label2.Caption := SG215.Cells[0, SG215.Row];  //Nomer
    FStamTime.Label6.Caption := SG215.Cells[10, SG215.Row];  //Материал
    FStamTime.Label3.Caption := IntToStr(SG215.Col);
    FStamTime.Label4.Caption := IntToStr(SG215.Row);
    FStamTime.ShowModal;
  end;
  if (SG215.Cells[14, SG215.Row] <> '') and (SG215.Col = 15) and ((FlagDolg = 1) or (FlagDolg = 4) or (FlagDolg = 7)) then
  begin   // ПОКРАСКА
    FStamTime.Caption := SG215.Cells[SG215.Col, 0];
    FStamTime.Label1.Caption := SG215.Cells[21, SG215.Row]; //idGP
    FStamTime.Label2.Caption := SG215.Cells[0, SG215.Row];  //Nomer
    FStamTime.Label6.Caption := SG215.Cells[10, SG215.Row];  //Материал
    FStamTime.Label3.Caption := IntToStr(SG215.Col);
    FStamTime.Label4.Caption := IntToStr(SG215.Row);
    FStamTime.ShowModal;
  end;
  if (SG215.Col = 17) and ((FlagDolg = 1) or (FlagDolg = 7)) then
  begin   // Плановая Сборка
    FStamTime.Caption := SG215.Cells[SG215.Col, 0];
    FStamTime.Label1.Caption := SG215.Cells[21, SG215.Row]; //idGP
    FStamTime.Label2.Caption := SG215.Cells[0, SG215.Row];  //Nomer
    FStamTime.Label6.Caption := SG215.Cells[10, SG215.Row];  //Материал
    FStamTime.Label3.Caption := IntToStr(SG215.Col);
    FStamTime.Label4.Caption := IntToStr(SG215.Row);
    FStamTime.ShowModal;

  end;
  if (SG215.Cells[15, SG215.Row] <> '') and ((SG215.Col = 17)) and ((FlagDolg = 1) or (FlagDolg = 4) or (FlagDolg = 7)) then
  begin   // Сборка Запуск
    FStamTime.Caption := SG215.Cells[SG215.Col, 0];
    FStamTime.Label1.Caption := SG215.Cells[21, SG215.Row]; //idGP
    FStamTime.Label2.Caption := SG215.Cells[0, SG215.Row];  //Nomer
    FStamTime.Label6.Caption := SG215.Cells[10, SG215.Row];  //Материал
    FStamTime.Label3.Caption := IntToStr(SG215.Col);
    FStamTime.Label4.Caption := IntToStr(SG215.Row);
    FStamTime.ShowModal;
  end;

  if (SG215.Cells[17, SG215.Row] <> '') and ((SG215.Col = 19) or (SG215.Col = 20)) and ((FlagDolg = 1) or (FlagDolg = 10)) then
  begin
    Vozduh := 3;
    FOTK.Label2.Caption := SG215.Cells[0, SG215.ROW]; //Nom
    FOTK.Label3.Caption := SG215.Cells[4, SG215.ROW]; //NAM
                //Nam
    FOTK.Label4.Caption := SG215.Cells[2, SG215.ROW]; //Zak
    FOTK.Label5.Caption := SG215.Cells[5, SG215.ROW]; //Kol
               // FOTK.Label6.Caption := ZCV.Cells[18, SG215.ROW];
                //ID
    FOTK.Label10.Caption := SG215.Cells[10, SG215.ROW];
                //ОТК
    FOTK.Label7.Caption := IntToStr(SG215.Row);
    FOTK.Label8.Caption := IntToStr(SG215.Col);
    FOTK.LabGP.Caption := SG215.Cells[21, SG215.ROW]; //IDGP
    FOTK.LabKO.Caption := '0';
                //FOTK.Caption := ZCV.Cells[0, ZCV.ROW];
    FOTK.Label13.Caption := SG215.Cells[22, SG215.ROW]; //НачНомер
    FOTK.Label15.Caption := SG215.Cells[23, SG215.ROW]; //КонНомер
    FOTK.ShowModal;
  end;
  if (SG215.Cells[20, SG215.Row] <> '') and ((SG215.Col = 24)) and ((FlagDolg = 1) or (FlagDolg = 4) or (FlagDolg = 7)) then
  begin   //                               //Упаковка
    FStamTime.Caption := SG215.Cells[SG215.Col, 0];
    FStamTime.Label1.Caption := SG215.Cells[21, SG215.Row]; //idGP
    FStamTime.Label2.Caption := SG215.Cells[0, SG215.Row];  //Nomer
    FStamTime.Label6.Caption := SG215.Cells[10, SG215.Row];  //Материал
    FStamTime.Label3.Caption := IntToStr(SG215.Col);
    FStamTime.Label4.Caption := IntToStr(SG215.Row);
    FStamTime.ShowModal;
  end;
end;

procedure TForm1.SG215DrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
var
  Kol, Kol_Pr: Integer;
begin
        //and (ACol>7)
  if (ARow <> 0) then //Zag Zapusk
  begin

    if (SG215.Cells[12, ARow] <> '') then
    begin
      SG215.Canvas.Brush.Color := clYellow;
      SG215.Canvas.FillRect(Rect);
      SG215.Canvas.TextOut(Rect.Left, Rect.Top, SG215.Cells[ACol, ARow]);

    end;
    if (SG215.Cells[13, ARow] <> '') and (SG215.Cells[15, ARow] = '') then   //Zag Gotov
    begin
      SG215.Canvas.Brush.Color := clOlive;
      SG215.Canvas.Font.Color := clWindow;
      SG215.Canvas.FillRect(Rect);
      SG215.Canvas.TextOut(Rect.Left, Rect.Top, SG215.Cells[ACol, ARow]);

    end;
    if SG215.Cells[15, ARow] <> '' then   //Zbor zap
    begin
      SG215.Canvas.Brush.Color := clLime;
      SG215.Canvas.FillRect(Rect);
      SG215.Canvas.TextOut(Rect.Left, Rect.Top, SG215.Cells[ACol, ARow]);
    end;
    if SG215.Cells[20, ARow] <> '' then   //OTK
    begin
      SG215.Canvas.Brush.Color := clGreen;
      SG215.Canvas.FillRect(Rect);
      SG215.Canvas.TextOut(Rect.Left, Rect.Top, SG215.Cells[ACol, ARow]);
    end;
    if SG215.Cells[24, ARow] <> '' then   //Упаковка
    begin
      SG215.Canvas.Brush.Color := clMenuHighlight;
      SG215.Canvas.FillRect(Rect);
      SG215.Canvas.TextOut(Rect.Left, Rect.Top, SG215.Cells[ACol, ARow]);
    end;
    if SG215.Cells[5, ARow] = '' then
      Kol := 0
    else
      Kol := StrToInt(SG215.Cells[5, ARow]);
    if SG215.Cells[19, ARow] = '' then
      Kol_Pr := 0
    else
      Kol_Pr := StrToInt(SG215.Cells[19, ARow]);
    if (SG215.Cells[20, ARow] <> '') and (Kol > Kol_Pr) then   //OTK Не Все
    begin
      SG215.Canvas.Brush.Color := clRed;
      SG215.Canvas.Font.Color := clWindow;
      SG215.Canvas.FillRect(Rect);
      SG215.Canvas.TextOut(Rect.Left, Rect.Top, SG215.Cells[ACol, ARow]);
    end;
    Kol_Pr := Pos('rue', SG215.Cells[29, ARow]);
    if (Kol_Pr <> 0) and (ACol = 2) then   //Срочно
    begin
      SG215.Canvas.Brush.Color := clRed;
      SG215.Canvas.Font.Color := clWindow;
      SG215.Canvas.FillRect(Rect);
      SG215.Canvas.TextOut(Rect.Left, Rect.Top, SG215.Cells[2, ARow]);
    end;
  end;
end;

procedure TForm1.btn10Click(Sender: TObject);
begin
  FPDO.Show;
end;

procedure TForm1.N37Click(Sender: TObject);
var
  Sbor, Kol: Integer;
begin
  if not Form1.mkQuerySelect1(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + ZCV.Cells[30, ZCV.Row] + #39 + ') AND (IDКО=' + #39 + ZCV.Cells[31, ZCV.Row] + #39 + ') ', ['KlapanaZap']) then
    exit;
  Sbor := Form1.ADOQuery2.FieldByName('Сборка').AsInteger;
  Kol := StrToInt(ZCV.Cells[5, ZCV.Row]);
  Sbor := Sbor + Kol;
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Сборка Готовность]=NULL,Сборка=' + #39 + IntToStr(Sbor) + #39 + ' WHERE (IDГП=' + #39 + ZCV.Cells[30, ZCV.Row] + #39 + ') AND (IDКО=' + #39 + ZCV.Cells[31, ZCV.Row] + #39 + ') ', ['KlapanaZap']) then
    Exit;
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Сборка Готовность]=NULL' + ' WHERE ([' + FN_NOM + ']=' + #39 + ZCV.Cells[0, ZCV.Row] + #39 + ') AND (IDГП=' + #39 + ZCV.Cells[30, ZCV.Row] + #39 + ') AND (IDКО=' + #39 + ZCV.Cells[31, ZCV.Row] + #39 + ') ', ['ЗапускВозд']) then
    Exit;
end;

procedure TForm1.SGLMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
// Эмуляция нажатия мыши
  if Button = mbRight then
    mouse_event(MOUSEEVENTF_LEFTDOWN or MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
end;

procedure TForm1.SGLMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  I, j: Integer;
  myrect: TGridRect;
  Sum: Double;
begin
  if (SGL.Col = 3) or (SGL.Col = 4) then    //or (SGL.Col = 7)
  begin
    Sum := 0;
    myrect := SGL.Selection;
    for I := myrect.Left to myrect.Right do
      for j := myrect.Top to myrect.Bottom do
      begin
        try
          Sum := Sum + StrToFloat(SGL.Cells[I, j]);
        except
          Break;
        end;
      end;
    StatusBar2.Panels[2].Text := FloattOsTR(Sum);

  end;
end;

procedure TForm1.StringGrid6MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
// Эмуляция нажатия мыши
  if Button = mbRight then
    mouse_event(MOUSEEVENTF_LEFTDOWN or MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
end;

procedure TForm1.StringGrid6MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  I, j: Integer;
  myrect: TGridRect;
  Sum: Double;
begin
  if (StringGrid6.Col = I_FN_SBOR_KLAP_NC) or (StringGrid6.Col = I_FN_SVARKA_NC) then    //or (SGL.Col = 7)
  begin
    Sum := 0;
    myrect := StringGrid6.Selection;
    for I := myrect.Left to myrect.Right do
      for j := myrect.Top to myrect.Bottom do
      begin
        try
          Sum := Sum + StrToFloat(StringGrid6.Cells[I, j]);
        except
          Break;
        end;
      end;
    StatusBar2.Panels[2].Text := FloattOsTR(Sum);

  end;
end;

procedure TForm1.N38Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Х]=1' + ' WHERE ([IdГП]=' + #39 + SG.Cells[13, SG.Row] + #39 + ')  ', ['ЗапускСТАМ']) then
    Exit;

  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [L]=1 WHERE ([IdГП]=' + #39 + SG.Cells[13, SG.Row] + #39 + ')', ['СТАМ']) then
    Exit;
end;

procedure TForm1.N39Click(Sender: TObject);
var
  Str, VElem, Elem, Oboz, Dlina, Shir: string;
  I, Res_Detal: Integer;
begin
       // Memo111.PasteFromClipboard;
        //Str := FormatDateTime('mm.dd.yyyy', Now);
  Str := StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row];

       { if not Form1.mkQueryUpdate(Form1.ADOQuery1,
                'UPDATE %s SET [Путь]=' + #39
                + Memo111.Text + #39 + ' WHERE ([IdГП]=' + #39 +
                        StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row]
                + #39 + ')',
                ['Klapana']) then
                Exit;
        if not Form1.mkQueryUpdate(Form1.ADOQuery1,
                'UPDATE %s SET [Путь]=' + #39
                + Memo111.Text  + #39 + ' WHERE ([IdГП]=' + #39 +
                        StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row]
                + #39 + ')',
                ['Запуск']) then
                Exit; }
  if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IdГП=' + #39 + Str + #39 + ') ORDER BY Длина', ['Специф']) then
    exit;
  for I := 0 to ADOQuery2.RecordCount - 1 do
  begin
    VElem := Form1.ADOQuery2.FieldByName('ВидЭлемента').AsString;
    Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
    Oboz := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
                      //Kol_Ed:= Form1.ADOQuery2.FieldByName('КолНаЕд').AsFloat;
                      //Kol_Ed:= Form1.ADOQuery2.FieldByName('Количество').AsFloat;
                      //Kol_Oboz:= Form1.ADOQuery2.FieldByName('Количество').AsFloat;
                      //Trumph,Nog,Ugl,Gib,Prok,Pila
    Dlina := Form1.ADOQuery2.FieldByName('Длина').AsString;
    Shir := Form1.ADOQuery2.FieldByName('Ширина').AsString;
    Res_Detal := AnsiCompareStr('Детали', VElem);
    if Res_Detal = 0 then
      Memo13.Lines.Add(Dlina);
    ADOQuery2.Next;
  end;
end;

procedure TForm1.N3Click(Sender: TObject);
begin
  Fizv.Show;
end;

procedure TForm1.btn11Click(Sender: TObject);
begin
  FNorma.Show;
end;

procedure TForm1.btn12Click(Sender: TObject);
begin
  FNormaVoz.Show;
end;

procedure TForm1.Tehnolog1Click(Sender: TObject);
var
  XL2: Variant;
  E, i, J, X, Res, Priv, Kol_Zap: Integer;
  Vn_DAt, Dir, God, mes, Nom, S_Svar, S_Sbor, Priv_Str, IDGP, OboznSh: string;
  Svar_o, Sbor_o: Double;
  ar, Ar1, Ar2: array of array of string;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);

       { if not Form1.mkQuerySelect(Form1.ADOQuery2,
        'Select * from %s Where   (Номер='
        + #39 + Label15.Caption + #39 + ') AND (Отмена IS NULL) Order By Заказ ', ['Запуск']) then
        exit;
        // Установка длины одномерного массива
        SetLength(Ar, ADOQuery2.RecordCount);
        if Form1.ADOQuery2.RecordCount <> 0 then
        begin

                for i := 0 to Form1.ADOQuery2.RecordCount - 1 do
                begin
                        ar[0, i] :=Form1.ADOQuery2.FieldByName('Заказ').AsString;
                        ar[1, i] :=Form1.ADOQuery2.FieldByName('Кол во запущенных').AsString;
                        ar[2, i] :=Nom;
                        ar[3, i] :=Form1.ADOQuery2.FieldByName('Изделие').AsString;
                        ar[4, i] :=Form1.ADOQuery2.FieldByName('МодПривода').AsString;
                        ar[5, i] :=Form1.ADOQuery2.FieldByName('IdГП').AsString;
                        Form1.ADOQuery2.Next;
                end;
        end;
        // Установка длины одномерного массива
        SetLength(Ar1, 200);
        For I:=0 to High(Ar) do
        begin
                if not Form1.mkQuerySelect(Form1.ADOQuery2,
                'Select * from %s Where   (IDГП='
                + #39 + ar[5, i] + #39 + ') AND (ВидЭлемента='
                + #39 + 'Детали' + #39 + ') Order By Обозначение ', ['Специф']) then
                exit;
                //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                for J:=0 to ADOQuery2.RecordCount do
                begin
                        OboznSh:=Form1.ADOQuery2.FieldByName('Обозначение').AsString;
                        Res:=Pos('-',OboznSh);
                        if Res<>0 Then
                        Delete(OboznSh,Res,30);
                        if not Form1.mkQuerySelect66(Form1.ADOQuery4,
                        'Select * from %s Where   (ОбозначениеШ=' + #39 +
                        OboznSh + #39 +') AND (Trumph=True) ', ['Шаблон']) then
                        exit;
                        if  ADOQuery4.RecordCount<>0 then
                        begin
                                ar1[0, X]:= Form1.ADOQuery2.FieldByName('Количество').AsString;
                                ar1[1, X]:= Form1.ADOQuery2.FieldByName('Обозначение').AsString;
                                Inc(X);
                        end;
                        Form1.ADOQuery2.Next;
                end;
        end;   }
{        Dir :='\\192.168.7.1\Kto\CKlapana\Суточные задания\';
        CreateDir(Dir);

        Dir :='\\192.168.7.1\Kto\CKlapana\Суточные задания\' + God;
        CreateDir(Dir);

        Dir := '\\192.168.7.1\Kto\CKlapana\Суточные задания\' + God + '\' + Mes+'\';
        CreateDir(Dir);

        XL2 := CreateOleObject('Excel.Application');
        CopyFile(PAnsiChar('\\192.168.7.1\Kto\CKlapana\2013\SUT.xlsx'),
        PAnsiChar(Dir + '\'+Vn_Dat +' СутЗадан_КПУ_КПД № ' + nom + '.xlsx'), False);

        XL2.Workbooks.Open(Dir + '\'+Vn_Dat +' СутЗадан_КПУ_КПД № ' + nom + '.xlsx');
        XL2.Application.EnableEvents := false;
        if not mkQuerySelect(ADOQuery2,
                'Select * from %s  Where Номер=' + #39 + Nom + #39, ['Запуск'])
                        then
                exit;
        for e := 1 to ADOQuery2.RecordCount do
        begin
                Svar_o := RoundTo(Svar_o +
                        StrToFloat(ADOQuery2.FieldByName('Н\ч Сварка').AsString), -2);
                Sbor_o := RoundTo(Sbor_o +
                        StrToFloat(ADOQuery2.FieldByName('Н\ч Сборка Клапана').AsString),
                        -2);
                //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                S_Svar := ADOQuery2.FieldByName('Н\ч Сварка').AsString;
                S_Sbor := ADOQuery2.FieldByName('Н\ч Сборка Клапана').AsString;
                Priv := ADOQuery2.FieldByName('Привод').AsInteger;
                Kol_Zap := ADOQuery2.FieldByName('Кол во').AsInteger;
                Priv_Str := IntToStr(Priv);
                Res := Pos(',', S_Svar);
                Delete(S_Svar, Res, 1);
                if Res <> 0 then
                        Insert('.', S_Svar, Res);

                Res := Pos(',', S_Sbor);
                Delete(S_Sbor, Res, 1);
                if Res <> 0 then
                        Insert('.', S_Sbor, Res);
                XL2.ActiveWorkBook.WorkSheets[1].Cells[(e) +
                        (6), 2] := ADOQuery2.FieldByName('Заказ').AsString;
                XL2.ActiveWorkBook.WorkSheets[1].Cells[(e) +
                        (6), 3] := ADOQuery2.FieldByName('Изделие').AsString;
                XL2.ActiveWorkBook.WorkSheets[1].Cells[(e) +
                        (6), 4] := ADOQuery2.FieldByName('A').AsString;
                XL2.ActiveWorkBook.WorkSheets[1].Cells[(e) +
                        (6), 5] := ADOQuery2.FieldByName('B').AsString;
                XL2.ActiveWorkBook.WorkSheets[1].Cells[(e) +
                        (6), 6] := ADOQuery2.FieldByName('МодПривода').AsString;
                XL2.ActiveWorkBook.WorkSheets[1].Cells[(e) +
                        (6), 7] := Priv_Str;
                XL2.ActiveWorkBook.WorkSheets[1].Cells[(e) +
                        (6), 8] :=
                                ADOQuery2.FieldByName('Кол во запущенных').AsString;

                XL2.ActiveWorkBook.WorkSheets[1].Cells[(e) +
                        (6), 10] := S_Sbor;
                XL2.ActiveWorkBook.WorkSheets[1].Cells[(e) +
                        (6), 9] := S_Svar;
                XL2.ActiveWorkBook.WorkSheets[1].Cells[2, 4] := Nom;
                XL2.ActiveWorkBook.WorkSheets[1].Cells[5, 1] := Nom;
                XL2.ActiveWorkBook.WorkSheets[1].Cells[13, 1] := Vn_Dat;
                //-----------------------------------------------
                XL2.ActiveWorkBook.WorkSheets[2].Cells[(e) +
                        (6), 2] := ADOQuery2.FieldByName('Заказ').AsString;
                XL2.ActiveWorkBook.WorkSheets[2].Cells[(e) +
                        (6), 3] := ADOQuery2.FieldByName('Изделие').AsString;
                XL2.ActiveWorkBook.WorkSheets[2].Cells[(e) +
                        (6), 4] := ADOQuery2.FieldByName('A').AsString;
                XL2.ActiveWorkBook.WorkSheets[2].Cells[(e) +
                        (6), 5] := ADOQuery2.FieldByName('B').AsString;
                XL2.ActiveWorkBook.WorkSheets[2].Cells[(e) +
                        (6), 6] := ADOQuery2.FieldByName('МодПривода').AsString;
                XL2.ActiveWorkBook.WorkSheets[2].Cells[(e) +
                        (6), 7] := ADOQuery2.FieldByName('Привод').AsString;
                XL2.ActiveWorkBook.WorkSheets[2].Cells[(e) +
                        (6), 8] :=
                                ADOQuery2.FieldByName('Кол во запущенных').AsString;
                XL2.ActiveWorkBook.WorkSheets[2].Cells[(e) +
                        (6), 9] := Nom;
                XL2.ActiveWorkBook.WorkSheets[2].Cells[2, 4] :=
                        Nom;
                XL2.ActiveWorkBook.WorkSheets[2].Cells[5, 1] :=
                        Nom;
                XL2.ActiveWorkBook.WorkSheets[2].Cells[13, 1] := Vn_Dat;

                ADOQuery2.Next;
                //Inc(e);
        end;
        XL2.Visible := True;
        XL2 := UnAssigned; }
end;

procedure TForm1.ScanFolder(dir: string);
var
  SR: TSearchRec;
  FindRes, Res: Integer;
begin
  FindRes := FindFirst(dir + '*.*', faAnyFile, SR);

  while FindRes = 0 do
  begin

    if ((SR.Attr and faDirectory) = faDirectory) and (SR.Name <> '.') and (SR.Name <> '..') then
    begin
      ScanFolder(dir + SR.Name + '\');
      if F <> 0 then
      begin
        FindClose(SR);
        Exit;
      end;
    end;
    Res := Pos('1417824в.docx', SR.Name);
    if Res <> 0 then
    begin
      memo1.Lines.Add(dir + SR.Name);
      F := FindFirst(dir + '*.222', faAnyFile, SR);
      FindRes := FindFirst(dir + '*.222', faAnyFile, SR);
        //FindClose(SR);
      Break;
    end;
    FindRes := FindNext(SR);
  end;
  FindClose(SR);
end;

procedure TForm1.TehnologN40Click(Sender: TObject);
var
  XL2: Variant;
  E, i, J, X, X1, Res, Priv, Kol_Zap, Kount, DlinaI, Res_KPU, Sten_G, Sten_V, Res_Detal, hh, F2, Res1, Res2: Integer;
  Vn_DAt, Dir, God, mes, Nom, Priv_Str, IDGP, OboznSh, Obozn, Dlina, Elem, Izdel, S, Str_e4, Nom1: string;
  ar: array[0..7750, 0..7] of string;
  Ar1: array[0..1050, 0..13] of string;
  Ar2: array of array of string;
  SR: TSearchRec; // поисковая переменная
  FindRes: Integer; // переменная для записи результата поиска
  Str, Dir_Ser, Str1, Str2, Str3, fileName, fullFilePath, Put, Lini, Dat_S1, Err,Mat: string;
  h: hwnd;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
  Dat_S1 := FormatDateTime('mm.dd.yyyy', StrToDate(ZSG.Cells[I_FN_KOL_ZAP + 3, ZSG.Row]));
  Nom := ZSG.Cells[0, ZSG.Row];
  Conn_Klap := Connect_Miass_Klap.Create();
  Memo25.Lines.Clear;
  Memo26.Lines.Clear;
  Nom := '';

  Nom1 := ZSG.Cells[0, ZSG.Row];
  for i := 0 to StringGrid11.RowCount - 1 do
  begin
    if StringGrid11.Cells[0, i] <> '' then
    begin
      Memo26.Lines.Add(ZSG.Cells[0, i]) ;
      Nom1 := ZSG.Cells[0, i];
    end;
  end;
  if Memo26.Lines.Strings[0] <> '' then
  begin
    Nom := ' AND ((Номер=' + #39 + Memo26.Lines.Strings[0] + #39 + ')';
    for i := 0 to Memo26.Lines.Count - 1 do
    begin
      if Memo26.Lines.Strings[i + 1] <> '' then
        Nom := Nom + ' OR (Номер=' + #39 + Memo26.Lines.Strings[i + 1] + #39 + ')';
    end;
  end
  else
  Nom := ' AND ((Номер=' + #39 + ZSG.Cells[0, ZSG.Row] + #39 + ')';
  //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  SetConnectTemp(ADOQueryTemp);
  //Создание временной таблицы
  ADOQueryTemp := TADOQuery.Create(nil);
  ADOQueryTemp.Connection := ADOConnectionTemp;
  //(Элемент,Обозначение,Изделие,Длина,Ширина,ДлинаРазв,ШиринаРазв,Заказ,IDГП,Материал,IDКО)
  ADOQueryTemp.SQL.Text := 'CREATE TABLE #ClientToDBFL (Элемент nvarchar(350),Kol float ,' + 'Обозначение nvarchar(350),Изделие nvarchar(350),Материал nvarchar(350))';

  ADOQueryTemp.ExecSQL;

  if not mkQuerySelect(Form1.ADOQuery2, 'Select Станок,Обозначение, Элемент,Изделие,Sum(Количество) As c ,' + 'Sum(КолКлап) as KK   From %s Where (' + 'Планирование' + '=' + #39 + '%s' + #39 + ') %s' + ') AND (Станок=' + #39 + 'Trumph' + #39 + ') %s  Group BY Станок,Обозначение, Элемент,Изделие', ['Заготовка', Dat_S1, Nom, Lini]) then //Заготовка
    exit;
  for J := 0 to ADOQuery2.RecordCount - 1 do
  begin
    Memo25.Lines.Add(ADOQuery2.FieldByName('Изделие').AsString);
  end;                                                                       //  ,Изделие   AND (Номер='+#39+'%s'+#39+
  if not mkQuerySelect(Form1.ADOQuery2, 'Select Станок,Обозначение, Элемент,Sum(Количество) As c ,' + 'Sum(КолКлап) as KK   From %s Where (' + 'Планирование' + '=' + #39 + '%s' + #39 + ') %s' +                                                   //  ,Изделие
    ') AND (Станок=' + #39 + 'Trumph' + #39 + ') %s  Group BY Станок,Обозначение, Элемент', ['Заготовка', Dat_S1, Nom, Lini]) then //Заготовка
    exit;
  for J := 0 to ADOQuery2.RecordCount - 1 do
  begin
    Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
    OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
    if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение=' + #39 + OboznSh + #39 + ') ORDER BY Дата ', ['Специф']) then    //,LINI
      exit;
    if ADOQuery4.RecordCount <> 0 then
    begin
      ADOQuery4.Last;
      Mat:= ADOQuery4.FieldByName('Материал').AsString;
      Res:=Pos('ВГ 1244.10.02.002',OboznSh);////19.01.23 Головцова
      if Res<>0 then
      begin
          Res:=Pos('Нерж',OboznSh);
          if Res<>0 then
          Mat:='Лист 1,0х1250х2500 ГОСТ 19904-90/08Х18Н10-М2а ГОСТ 5582-75'
          Else
          Mat:='Прокат 02-1,0х1250х2500-Ц140-М-ПС-ГОСТ 14918-2020';
      end;
        //SetConnectTemp(ADOQueryTemp);
      ADOQueryTemp.SQL.Text := 'INSERT INTO #ClientToDBFL ' + '(Элемент,Обозначение,Изделие,Материал,Kol) Values (' +
      #39 + ADOQuery2.FieldByName('Элемент').AsString + #39 + ',' + #39 +
      ADOQuery2.FieldByName('Обозначение').AsString + #39 +        //','+#39+ADOQuery2.FieldByName('Изделие').AsString+#39+
        ',' + #39 + Memo25.Lines[0] + #39 +        {','+#39+ADOQuery4.FieldByName('Длина').AsString+#39+
        ','+#39+ADOQuery4.FieldByName('Ширина').AsString+#39+
        ','+#39+ADOQuery4.FieldByName('ДлинаРазв').AsString+#39+
        ','+#39+ADOQuery4.FieldByName('ШиринаРазв').AsString+#39+
        //','+#39+ADOQuery2.FieldByName('Заказ').AsString+#39+
        ','+#39+ADOQuery2.FieldByName('IDГП').AsString+#39+ }
          ',' + #39 + ADOQuery4.FieldByName('Материал').AsString + #39 +        //','+#39+ADOQuery2.FieldByName('IDКО').AsString+#39+
          ',' + #39 + ADOQuery2.FieldByName('c').AsString + #39 + ')';
      try
        ADOQueryTemp.ExecSQL;
      except
        Err := '1222';
      end;
      Form1.ADOQuery4.Next;
    end;
    Form1.ADOQuery2.Next;
  end;
  ADOQueryTemp.SQL.Text := 'Select * from #ClientToDBFL ORDER BY Материал ';
  ADOQueryTemp.Open;
  for i := 0 to ADOQueryTemp.RecordCount - 1 do
  begin
    Ar1[X, 0] := ADOQueryTemp.FieldByName('Kol').AsString;
    Obozn := ADOQueryTemp.FieldByName('Обозначение').AsString;
    Mat:= ADOQueryTemp.FieldByName('Материал').AsString;
      Res:=Pos('ВГ 1244.10.02.002',Obozn);////19.01.23 Головцова
      if Res<>0 then
      begin
          Res:=Pos('Нерж',Obozn);
          if Res<>0 then
         Mat:='Лист 1,0х1250х2500 ГОСТ 19904-90/08Х18Н10-М2а ГОСТ 5582-75'
          Else
          Mat:='Прокат 02-1,0х1250х2500-Ц140-М-ПС-ГОСТ 14918-2020';
      end;
    Ar1[X, 1] := ADOQueryTemp.FieldByName('Обозначение').AsString;
    Ar1[X, 11] := ADOQueryTemp.FieldByName('Обозначение').AsString;
    Ar1[X, 2] := ADOQueryTemp.FieldByName('Элемент').AsString;
    Ar1[X, 3] := ADOQueryTemp.FieldByName('Изделие').AsString;
       { Ar1[X, 4] := ADOQueryTemp.FieldByName('Длина').AsString;
        Ar1[X, 5] :=ADOQueryTemp.FieldByName('Ширина').AsString;
        Ar1[X, 6] := ADOQueryTemp.FieldByName('ДлинаРазв').AsString;
        Ar1[X, 7] := ADOQueryTemp.FieldByName('ШиринаРазв').AsString;
        Ar1[X, 8] := ADOQueryTemp.FieldByName('Заказ').AsString;
        Ar1[X, 9] := ADOQueryTemp.FieldByName('IDГП').AsString; }
    Ar1[X, 10] :=Mat;
       // Ar1[X, 12] := ADOQueryTemp.FieldByName('IDКО').AsString;
    Inc(X);
    ADOQueryTemp.Next;
  end;
  //end;
//end;
  Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God;
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\';
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Pogar\' + God + '\' + mes + '\' + Nom1 + '\';
 // RmDir(Dir);
  CreateDir(Dir);

  XL2 := CreateOleObject('Excel.Application');
  CopyFile(PWideChar(Put_KTO + '\CKlapana\2013\Programm_Pogar.xlsx'), PWideChar(Dir + '\' + Nom1 + '.xlsx'), False);

  XL2.Workbooks.Open(Dir + '\' + Nom1 + '.xlsx');
  XL2.Application.EnableEvents := false;

        //-----------------------------------------------
  Memo7.Lines.Clear;
  Memo15.Lines.Clear;
  for i := 0 to High(Ar1) do
  begin
    if Ar1[E, 3] = '' then
      Break;
        //ВГ 410.00.01.002-400 меняем на ВГ 410.00.01.001-400  Гапова 21.01.2019
    Izdel := ar[E, 3];
    Res1 := Pos('КЭД-', Izdel);
    Res2 := Pos('-2*ф-', Izdel);
    Obozn := Ar1[E, 11];
                //+++++++++++++++++++
    Str := Obozn; //Ar1[E, 11]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
  {      Res := Pos('ИН', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('IN_', Str, 1);
    end; }
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 5);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
    Str := ConvertRus(Str);
                //+++++++++++++++++++
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 4] := Ar1[E, 8]; //Zakaz
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 5] := IntToStr(E + 1);
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 6] := Ar1[E, 3]; //Klapan
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 7] := Ar1[E, 2]; //Element
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 8] := Ar1[E, 0]; //Kol-vo
   // XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 9] := Ar1[E, 6]; //DlinRazv
   // XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 10] := Ar1[E, 7]; //ShirRazv
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 12] := Ar1[E, 10]; //Mat
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 13] := Str3 + '.Geo'; //Ar1[E, 11]; //Chert
    //+++++++++++++++++++
    Memo7.Lines.Add(Str3);
    Memo15.Lines.Add(Ar1[E, 8] + '  ' + Ar1[E, 3]);
    Inc(E);
  end;

  Memo9.Clear;
  Memo8.Clear;
  for i := 0 to Memo7.Lines.Count - 0 do
  begin
    F := 0;
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Клапаны\Пожарные';
    if Memo7.Lines.Strings[i] <> '' then
      fileName := Memo7.Lines.Strings[i] + '.dxf';
    fullFilePath := FileSearch(fileName, Dir_Ser);
    if fullFilePath <> '' then
    begin
      Memo9.Lines.Add(fullFilePath);
      CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
    end
    else
    begin
      Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
    end;
  end;
  if Memo8.Lines.Strings[0] <> '' then
  begin
    Memo8.Lines.SaveToFile('123.txt');
    Str := ExtractFileDir(ParamStr(0)) + '\123.txt';
    ShellExecute(Form1.Handle, nil, PChar(Str), nil, nil, SW_SHOWNORMAL);
  end;
  ShellExecute(h, 'open', PWideChar(Dir), nil, nil, SW_SHOW);
  XL2.ActiveWorkBook.WorkSheets[1].Cells[12, 2] := Nom;
  XL2.ActiveWorkBook.Save;
  XL2.ActiveWorkBook.Close;
  XL2.Application.Quit;
  //XL2.Workbooks.Open(Dir + '\' + Nom + '.xlsx');
  //XL2.Visible := True;
  XL2 := UnAssigned;
end;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function TForm1.Xls_To_StringGrid22(AGrid: TStringGrid; AXLSFile: string; List: string): Boolean;
const
  xlCellTypeLastCell = $0000000B;
var
  XLApp, Sheet: OLEVariant;
  RangeMatrix: Variant;
  x, y, k, r, Col, Res, I, J, Posic, Kod, PosZ, F, Otmena: Integer;
  Nam, Str, Str1, StrDat, Dat: string;
begin
  Result := False;
  XLApp := CreateOleObject('Excel.Application');
  try
    XLApp.Visible := False;
    XLApp.Workbooks.Open(AXLSFile);
    for Col := 1 to XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets.Count do
    begin
      Nam := XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets[Col].Name;
      Res := AnsiCompareStr(Nam, List);
      if Res = 0 then
      begin
        XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets.Item[Col].Activate;
        Sheet := XLApp.Workbooks[ExtractFileName(AXLSFile)].WorkSheets[Col];
        Break;
      end;
    end;
    Nam := Sheet.Name;
    Sheet.Cells.SpecialCells(xlCellTypeLastCell, EmptyParam).Activate;
    x := XLApp.ActiveCell.Row;
    y := XLApp.ActiveCell.Column; //30;
    AGrid.RowCount := x;
    AGrid.ColCount := y;
    RangeMatrix := XLApp.Range['A1', XLApp.Cells.Item[x, y]].Value;
    k := 2;
    repeat
      for r := 1 to y do
      begin
        Str := string(RangeMatrix[k, r]);
                               { if (R=1) or (R=60) then
                                begin
                                        if R=60 then
                                        AGrid.Cells[(3 - 1), (k - 1)] :=
                                        string(RangeMatrix[K, R])
                                        Else
                                        AGrid.Cells[(r - 1), (k - 1)] :=
                                        string(RangeMatrix[K, R]);
                                end;  }
        AGrid.Cells[(r - 1), (k - 1)] := string(RangeMatrix[k, r]);
      end;
      Inc(k, 1);
      AGrid.RowCount := k + 1;
    until k > x;
    RangeMatrix := Unassigned;

  finally
                // Quit Excel
    if not VarIsEmpty(XLApp) then
    begin
      XLApp.Quit;
      XLApp := Unassigned;
      Sheet := Unassigned;
      Result := True;
    end;
  end;

end;

const
  table1 = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ';
  Table2: array[1..66] of string = ('a', 'b', 'v', 'g', 'd', 'e', 'e', 'zh', 'z', 'i', 'i', 'k', 'l', 'm', 'n', 'o', 'p', 'r', 's', 't', 'u', 'f', 'kh', 'ts', 'ch', 'sh', 'shc', '"', 'y', '''', 'e', 'yu', 'ya ', 'A', 'B', 'V', 'G', 'D', 'E', 'E', 'ZH', 'Z', 'I', 'I', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'F', 'KH', 'TS', 'CH', 'SH', 'SHC', '"', 'Y', '''', 'E', 'YU', 'YA');

function TForm1.ConvertRus(S: string): string; //Русские буквы в  латиницу
var
  Str, NewS, S1: string;
  i: Integer;
begin

  S1 := S;
  NewS := '';
  for i := 1 to Length(S1) do
    if Pos(S1[i], table1) > 0 then
      NewS := NewS + Table2[Pos(S1[i], table1)]
    else
      NewS := NewS + S1[i];
  Result := NewS;
end;

procedure TForm1.Copy1Click(Sender: TObject);
begin
  Clipboard.AsText := StringGrid1.Cells[StringGrid1.Col, StringGrid1.Row];
end;

procedure TForm1.TehnologN41Click(Sender: TObject);
var
  XL2: Variant;
  E, i, J, X, X1, Res, Priv, Kol_Zap, Kount: Integer;
  Vn_DAt, Dir, God, mes, Nom, Nom1, Priv_Str, IDGP, Idko, OboznSh, Obozn, LINI: string;
  ar: array[0..7750, 0..6] of string;
  Ar1: array[0..10500, 0..12] of string;
  Ar2: array of array of string;
  SR: TSearchRec; // поисковая переменная
  FindRes: Integer; // переменная для записи результата поиска
  Str, Dir_Ser, Str1, Str2, Str3, fileName, fullFilePath, Put, Dat_s, Elem, Err,Mat: string;
  h: hwnd;
  Dat: TDate;
begin

  Vn_DAt := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);

  Dat_s := ZCV.Cells[8, ZCV.Row];
  Dat := StrToDate(Dat_s);
  Dat_s := FormatDateTime('mm.dd.yyyy', Dat);
  Nom := ZCV.Cells[0, ZCV.Row];
  Nom1 := ZCV.Cells[0, ZCV.Row];
  //ZSG.Cells[0, ZSG.Row];
 // if Nom='' then
 //        Continue;
  Conn_Klap := Connect_Miass_Klap.Create();
  Memo25.Lines.Clear;
  Memo26.Lines.Clear;
  Nom := '';
  Nom := ' AND ((Номер=' + #39 + ZCV.Cells[0, ZCV.Row] + #39 + ')';
  for i := 0 to SG3.RowCount - 1 do
  begin
    if SG3.Cells[0, i] <> '' then
      Memo26.Lines.Add(ZCV.Cells[0, i])
  end;
  if Memo26.Lines.Strings[0] <> '' then
  begin
    Nom := ' AND ((Номер=' + #39 + Memo26.Lines.Strings[0] + #39 + ')';
    for i := 0 to Memo26.Lines.Count - 1 do
    begin
      if Memo26.Lines.Strings[i + 1] <> '' then
        Nom := Nom + ' OR (Номер=' + #39 + Memo26.Lines.Strings[i + 1] + #39 + ')';
    end;
  end;
    //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  SetConnectTemp(ADOQueryTemp);
    //Создание временной таблицы
  ADOQueryTemp := TADOQuery.Create(nil);
  ADOQueryTemp.Connection := ADOConnectionTemp;
  //(Элемент,Обозначение,Изделие,Длина,Ширина,ДлинаРазв,ШиринаРазв,Заказ,IDГП,Материал,IDКО)
  ADOQueryTemp.SQL.Text := 'CREATE TABLE #ClientToDBFL (Элемент nvarchar(350),Kol float ,' + 'Обозначение nvarchar(350),Изделие nvarchar(350),Длина nvarchar(350),Ширина nvarchar(350),' + 'ДлинаРазв nvarchar(350),ШиринаРазв nvarchar(350),Заказ nvarchar(350),IDГП nvarchar(350),Материал nvarchar(350),IDКО nvarchar(350))';

  ADOQueryTemp.ExecSQL;
  if not mkQuerySelect(Form1.ADOQuery2, 'Select Станок,Обозначение, Элемент,Заготовка,Изделие,Sum(Количество) As c ,' + 'Sum(КолКлап) as KK   From %s Where (' + 'Планирование' + '=' + #39 + '%s' + #39 + ') %s' + ') AND (Станок=' + #39 + 'Trumph' + #39 + ') %s  Group BY Станок,Обозначение, Элемент,Заготовка,Изделие', ['Заготовка', Dat_s, Nom, LINI]) then //Заготовка
    exit;
  for J := 0 to ADOQuery2.RecordCount - 1 do
  begin
    Memo25.Lines.Add(ADOQuery2.FieldByName('Изделие').AsString);
  end;                                                                       //  ,Изделие
  if not mkQuerySelect(Form1.ADOQuery2, 'Select Станок,Обозначение, Элемент,Заготовка,Sum(Количество) As c ,' + 'Sum(КолКлап) as KK   From %s Where (' + 'Планирование' + '=' + #39 + '%s' + #39 + ') %s' +                                                     //  ,Изделие
    ') AND (Станок=' + #39 + 'Trumph' + #39 + ') %s  Group BY Станок,Обозначение, Элемент,Заготовка', ['Заготовка', Dat_s, Nom, LINI]) then //Заготовка
    exit;
  for J := 0 to ADOQuery2.RecordCount - 1 do
  begin

    Elem := Form1.ADOQuery2.FieldByName('Элемент').AsString;
    OboznSh := Form1.ADOQuery2.FieldByName('Обозначение').AsString;
    if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where   (Обозначение=' + #39 + OboznSh + #39 + ') ORDER BY Дата ', ['СпецифВозд']) then
      exit;
    if ADOQuery4.RecordCount <> 0 then
    begin
      ADOQuery4.Last;
        //SetConnectTemp(ADOQueryTemp);
      ADOQueryTemp.SQL.Text := 'INSERT INTO #ClientToDBFL ' + '(Элемент,Обозначение,Изделие,Длина,Ширина,ДлинаРазв,ШиринаРазв,Заказ,IDГП,Материал,IDКО,Kol) Values (' + #39 + ADOQuery2.FieldByName('Элемент').AsString + #39 + ',' + #39 + ADOQuery2.FieldByName('Обозначение').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('Изделие').AsString + #39 +        //','+#39+Memo25.Lines[0]+#39+
        ',' + #39 + ADOQuery4.FieldByName('Длина').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('Ширина').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('ДлинаРазв').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('ШиринаРазв').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('Заказ').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('IDГП').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('Материал').AsString + #39 + ',' + #39 + ADOQuery4.FieldByName('IDКО').AsString + #39 + ',' + #39 + ADOQuery2.FieldByName('c').AsString + #39 + ')';
      try
        ADOQueryTemp.ExecSQL;
      except
        Err := '1222';
      end;
      Form1.ADOQuery4.Next;
    end;
    Form1.ADOQuery2.Next;
  end;
  ADOQueryTemp.SQL.Text := 'Select * from #ClientToDBFL ORDER BY Материал ';
  ADOQueryTemp.Open;
  for i := 0 to ADOQueryTemp.RecordCount - 1 do
  begin
    Ar1[X, 0] := ADOQueryTemp.FieldByName('Kol').AsString;

    Obozn := ADOQueryTemp.FieldByName('Обозначение').AsString;
    Mat:= ADOQueryTemp.FieldByName('Материал').AsString;
      Res:=Pos('ВГ 1244.10.02.002',Obozn);////19.01.23 Головцова
      if Res<>0 then
      begin
          Res:=Pos('Нерж',Obozn);
          if Res<>0 then
          Mat:='Лист 1,0х1250х2500 ГОСТ 19904-90/08Х18Н10-М2а ГОСТ 5582-75'
          Else
          Mat:='Прокат 02-1,0х1250х2500-Ц140-М-ПС-ГОСТ 14918-2020';
      end;
    Ar1[X, 1] := ADOQueryTemp.FieldByName('Обозначение').AsString;
    Ar1[X, 11] := ADOQueryTemp.FieldByName('Обозначение').AsString;
    Ar1[X, 2] := ADOQueryTemp.FieldByName('Элемент').AsString;
    Ar1[X, 3] := ADOQueryTemp.FieldByName('Изделие').AsString;
    Ar1[X, 4] := ADOQueryTemp.FieldByName('Длина').AsString;
    Ar1[X, 5] := ADOQueryTemp.FieldByName('Ширина').AsString;
    Ar1[X, 6] := ADOQueryTemp.FieldByName('ДлинаРазв').AsString;
    Ar1[X, 7] := ADOQueryTemp.FieldByName('ШиринаРазв').AsString;
    Ar1[X, 8] := ADOQueryTemp.FieldByName('Заказ').AsString;
    Ar1[X, 9] := ADOQueryTemp.FieldByName('IDГП').AsString;
    Ar1[X, 10] := Mat;
    Ar1[X, 12] := ADOQueryTemp.FieldByName('IDКО').AsString;
    Inc(X);
    ADOQueryTemp.Next;
  end;

//Nom := SG212.Cells[0,0];
  Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God;
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God + '\' + mes + '\';
  CreateDir(Dir);
  Dir := Put_KTO + '\Кондратьев\Programm\Vozd\' + God + '\' + mes + '\' + Nom1 + '\';
  CreateDir(Dir);

  XL2 := CreateOleObject('Excel.Application');
  CopyFile(PWideChar(Put_KTO + '\CKlapana\2013\Programm_Vozd.xlsx'), PWideChar(Dir + '\' + Nom1 + '.xlsx'), False);

  XL2.Workbooks.Open(Dir + '\' + Nom1 + '.xlsx');
  XL2.Application.EnableEvents := false;

        //-----------------------------------------------
  Memo7.Lines.Clear;
  Memo15.Lines.Clear;
  for i := 0 to High(Ar1) do
  begin
    if Ar1[E, 3] = '' then
      Break;
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 4] := Ar1[E, 8]; //Zakaz
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 5] := IntToStr(E + 1);
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 6] := Ar1[E, 3]; //Klapan
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 7] := Ar1[E, 2]; //Element
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 8] := Ar1[E, 0]; //Kol-vo
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 9] := Ar1[E, 6]; //DlinRazv
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 10] := Ar1[E, 7]; //ShirRazv
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 12] := Ar1[E, 10]; //Mat
                //+++++++++++++++++++
    Str := Ar1[E, 1]; //Element
    Res := Pos('ВГ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('VG_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('ТЕКИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('TEKI_', Str, 1);
    end;
                //+++++++++++++++++++
    Res := Pos('НИ', Str);
    if Res <> 0 then
    begin
      Delete(Str, Res, 3);
      Insert('NI_', Str, 1);
    end;
                //+++++++++++++++++++
    Str := ConvertRus(Str);
    Str1 := StringReplace(Str, '-', '_', [rfReplaceAll]); //Замена Пробела на _
    Str1 := StringReplace(Str1, ' ', '_', [rfReplaceAll]); //Замена Пробела на _
    Str2 := StringReplace(Str1, ',', '.', [rfReplaceAll]); //Замена , на .
    Str3 := StringReplace(Str2, '*', 'x', [rfReplaceAll]); //Замена * на x (Латиница)
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(E) + (13), 13] := Str3 + '.Geo'; //Chert
                //+++++++++++++++++++
    Memo7.Lines.Add(Str3);
    Memo15.Lines.Add(Ar1[E, 8] + '  ' + Ar1[E, 3]);
    Inc(E);
  end;

  Memo9.Clear;
  Memo8.Clear;
  for i := 0 to Memo7.Lines.Count - 0 do
  begin
    F := 0;
    Put := Put_KTO;
    Res := Pos('ОИТ', Put);
    if Res <> 0 then
      Delete(Put, Res, 3);
    Dir_Ser := Put + 'КТО\_Развертки new\Клапаны\Воздушные';
    if Memo7.Lines.Strings[i] <> '' then
      fileName := Memo7.Lines.Strings[i] + '.dxf';
    fullFilePath := FileSearch(fileName, Dir_Ser);
    if fullFilePath <> '' then
    begin
      Memo9.Lines.Add(fullFilePath);
      Memo2.Lines.Add('ДА  '+Dir_Ser+'\'+fullFilePath);
      Memo2.Lines.Add(fullFilePath+ ' ДА  '+Dir + fileName);
      CopyFile(PWideChar(fullFilePath), PWideChar(Dir + fileName), False);
    end
    else
    begin
      Memo8.Lines.Add(Memo15.Lines.Strings[i] + '  ' + fileName);
      Memo2.Lines.Add('НЕТ  '+fullFilePath);
    end;
  end;
  if Memo8.Lines.Strings[0] <> '' then
  begin
    Memo8.Lines.SaveToFile('123.txt');
    Str := ExtractFileDir(ParamStr(0)) + '\123.txt';
    ShellExecute(Form1.Handle, nil, PChar(Str), nil, nil, SW_SHOWNORMAL);
  end;

  XL2.ActiveWorkBook.WorkSheets[1].Cells[12, 2] := Nom;
  XL2.ActiveWorkBook.Save;
  XL2.ActiveWorkBook.Close;
  XL2.Application.Quit;
  XL2 := UnAssigned;
  ShellExecute(h, 'open', PWideChar(Dir), nil, nil, SW_SHOW);
end;

procedure TForm1.EditChange(Sender: TObject);
begin
  Find_StringGrid(SG, Edit.Text, 2, Label17.Caption, 5);
end;

procedure TForm1.btn13Click(Sender: TObject);
var
  I, res, Res1, Kol_I, Y: Integer;
  God, Mes: Integer;
  Dat, Dat1, Betwe1: string;
  Br, Izdel, Kol: string;
begin
  Clear_StringGrid(SG);
  SG.COLCount := 20;
  SG.Cells[0, 0] := '№';
  SG.Cells[1, 0] := 'Дата задания';
  SG.Cells[2, 0] := 'Заказ';
  SG.Cells[3, 0] := 'Изделие';
  SG.Cells[4, 0] := 'Кол-во';
  SG.Cells[5, 0] := 'Кол во запущенных';
  SG.Cells[6, 0] := 'План Дата';
  SG.Cells[7, 0] := 'Расчетная Дата готовности';
  SG.Cells[8, 0] := 'Запущенно по брикету';
  SG.Cells[9, 0] := 'Кол принятых';
  SG.Cells[10, 0] := 'Прмечания';
  SG.Cells[11, 0] := 'Дата Запуска';
  SG.Cells[12, 0] := 'ОТК';
  SG.Cells[13, 0] := 'IDГП';
  SG.Cells[14, 0] := 'НачНомер';
  SG.Cells[15, 0] := 'КонНомер';
  SG.Cells[16, 0] := 'Статус';
  SG.Cells[17, 0] := 'Брикет';
  SG.Cells[18, 0] := 'Номер раз';
  SG.Cells[19, 0] := 'Кол раз';
  Dat := FormatDateTime('mm.dd.yyyy', dtp1.DateTime);
  Dat1 := FormatDateTime('mm.dd.yyyy', dtp2.DateTime);
  if Label134.Caption = '0' then
    Br := 'Дата'
  else
    Br := Label134.Caption;
  Betwe1 := ' AND ([' + Br + '] BETWEEN ' + #39 + Dat + #39 + ' AND ' + #39 + Dat1 + #39 + ') ';
  if not mkQuerySelect(ADOQuery2, 'Select * from %s WHERE (Отмена IS NULL) AND (L=0) ' + Betwe1, ['СТАМ']) then
    exit;
  if ADOQuery2.RecordCount = 0 then
    SG.RowCount := 2
  else

    SG.RowCount := ADOQuery2.RecordCount + 1;
  StatusBar1.Panels[2].Text := IntToStr(ADOQuery2.RecordCount);
  for I := 0 to ADOQuery2.RecordCount - 1 do
  begin
    SG.Cells[1, I + 1] := ADOQuery2.FieldByName('Дата').AsString;
    SG.Cells[2, I + 1] := ADOQuery2.FieldByName('Заказ').AsString;
    Izdel := ADOQuery2.FieldByName('Изделие').AsString;
    res := Pos('СТАМ', Izdel);
    if res <> 0 then
      Delete(Izdel, 1, res - 1);
    SG.Cells[3, I + 1] := Izdel;
    SG.Cells[4, I + 1] := ADOQuery2.FieldByName('Кол во').AsString;
    SG.Cells[5, I + 1] := ADOQuery2.FieldByName('Кол во Запущенных').AsString;
    SG.Cells[6, I + 1] := ADOQuery2.FieldByName('План Дата').AsString;
    SG.Cells[7, I + 1] := ADOQuery2.FieldByName('Расчетная Дата готовности').AsString;
                //--------------------------------------------------------------
    mmo1.Lines.Clear;
    Kol_I := 0;
    Kol := Form1.ADOQuery2.FieldByName('Кол Раз').AsString;
    Delete(Kol, 1, 2);
    for Y := 0 to 30 do
    begin
      Res1 := Pos(',', Kol);
      if Res1 <> 0 then
      begin
        mmo1.Lines.Add(Copy(Kol, 1, Res1 - 1));
        Delete(Kol, 1, Res1);
      end
      else
      begin
        mmo1.Lines.Add(Kol);
        Break;
      end;
    end;

    for Y := 0 to mmo1.Lines.Count do
    begin
      if mmo1.Lines.Strings[Y] <> '' then
        Kol_I := Kol_I + StrToInt(mmo1.Lines.Strings[Y]);
    end;
    SG.Cells[8, I + 1] := IntToStr(Kol_I);
                //--------------------------------------------------------------
    SG.Cells[9, I + 1] := ADOQuery2.FieldByName('Кол принятых').AsString;
    SG.Cells[11, I + 1] := ADOQuery2.FieldByName('Дата запуска').AsString;
    SG.Cells[12, I + 1] := ADOQuery2.FieldByName('ОТК').AsString;
    SG.Cells[13, I + 1] := ADOQuery2.FieldByName('IDГП').AsString;
    SG.Cells[14, I + 1] := ADOQuery2.FieldByName('НачНомер').AsString;
    SG.Cells[15, I + 1] := ADOQuery2.FieldByName('КонНомер').AsString;
    SG.Cells[16, I + 1] := ADOQuery2.FieldByName('Статус').AsString;
    SG.Cells[17, I + 1] := ADOQuery2.FieldByName('Брикет').AsString;
    SG.Cells[18, I + 1] := ADOQuery2.FieldByName('Номер раз').AsString;
    SG.Cells[19, I + 1] := ADOQuery2.FieldByName('Кол раз').AsString;
    ADOQuery2.Next;
  end;
  SG.SortByColumn(1);
  for I := 0 to SG.RowCount - 1 do
  begin
             //SG.AutoSizeRow(i,0);
    SG.Cells[0, I + 1] := IntToStr(I + 1);
  end;
  SG.AutoSizeColumns(True, 1);

  SG.ColWidths[7] := 0;
  SG.ColWidths[9] := 0;
  SG.ColWidths[10] := 0;
        //SG.ColWidths[11]:=30;
        //SG.ColWidths[12]:=30;
  SG.ColWidths[13] := 0;
  SG.ColWidths[14] := 0;
  SG.ColWidths[15] := 0;
end;

procedure TForm1.SG215SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
begin
        {  SG215.Cells[0, 0] := 'Номер';
  SG215.Cells[1, 0] := 'Дата задания';
  SG215.Cells[2, 0] := 'Заказ';
  SG215.Cells[3, 0] := 'БЗ';
  SG215.Cells[4, 0] := 'Изделие';
  SG215.Cells[5, 0] := 'Кол во';
  SG215.Cells[6, 0] := 'Расчетная дата готовности';
  SG215.Cells[7, 0] := 'План Неделя';
  SG215.Cells[8, 0] := 'Планирование';
  SG215.Cells[9, 0] := 'Примечание';
  SG215.Cells[10, 0] := 'Мат';
  SG215.Cells[11, 0] := 'Н\ч Сборка';

  SG215.Cells[12, 0] := 'TRUMPF';
  SG215.Cells[13, 0] := 'ГИБКА';
  SG215.Cells[14, 0] := 'СВАРКА';
  SG215.Cells[15, 0] := 'ПОКРАСКА';
  SG215.Cells[16, 0] := 'Исполнение';
  SG215.Cells[17, 0] := 'Сборка Запуск';
  SG215.Cells[18, 0] := 'ОТКФам';
  SG215.Cells[19, 0] := 'Кол принятых';
  SG215.Cells[20, 0] := 'ОТК';
  SG215.Cells[21, 0] := 'IdГП';
  SG215.Cells[22, 0] := 'НачНомер';
  SG215.Cells[23, 0] := 'КонНомер';
  SG215.Cells[24, 0] := 'Упаковка';

  SG215.Cells[25, 0] := 'Клапан';
  SG215.Cells[26, 0] := 'СпецКлап';
  SG215.Cells[27, 0] := 'КолКлап';
  SG215.Cells[28, 0] := 'ДатКлап';
  SG215.Cells[29, 0] := 'Срочно';
  SG215.Cells[30, 0] := 'idКО';
  SG215.Cells[31, 0] := 'ОТК Прим';}
  case ACol of
    1:
      Label136.Caption := 'Дата';
    6:
      Label136.Caption := 'Расчетная Дата готовности';
    8:
      Label136.Caption := 'Планирование';
    12:
      Label136.Caption := 'TRUMPF';
    13:
      Label136.Caption := 'ГИБКА';
    14:
      Label136.Caption := 'СВАРКА';
    15:
      Label136.Caption := 'ПОКРАСКА';

    16:
      Label136.Caption := 'Заготовка готовность';

    17:
      Label136.Caption := 'Сборка Запуск';
    20:
      Label136.Caption := 'ОТК';
    24:
      Label136.Caption := 'Упаковка';
  end;
  SG216.FocusCell(0, ARow);
  if (SG215.Col = 8) and ((FlagDolg = 1) or (FlagDolg = 7)) then
  begin
   // SG215.Options := SG215.Options + [goEditing];
  end;
end;

procedure TForm1.Edit21Change(Sender: TObject);
begin
  Find_StringGrid(SG215, Edit21.Text, 2, Label17.Caption, 5);
end;

procedure TForm1.Button5Click(Sender: TObject);
var
  I: Integer;
  Betwe1, Dat1, Dat, Br: string;
begin
  Dat := FormatDateTime('mm.dd.yyyy', DateTimePicker7.DateTime);
  Dat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker8.DateTime);
  if Label136.Caption = '0' then
    Br := 'Дата'
  else
    Br := Label136.Caption;
  Betwe_G := ' AND ([' + Br + '] BETWEEN ' + #39 + Dat + #39 + ' AND ' + #39 + Dat1 + #39 + ') ';
  Dip := 1;
  btn5.Click;
end;

procedure TForm1.btn15Click(Sender: TObject);
var
  I, res, Res1, Res2, Res3, Razmer, D, TIP, KOL: Integer;
  Izdel, Izdelie, nc_sbor, nc_sbor1, nc_sbor2, IDGP, Mat, Naim1,Tip1,Razm1,Ispol,Tulp: string;
  nc_sbor_f: Double;
begin
  for I := 1 to SG.RowCount do
  begin
   res := AnsiCompareStr(SG.Cells[20, I], '0');
   if (res<>0) then
   Continue;
    res := Pos('Защита', SG.Cells[3, I]);            //then
    if res = 0 then
    begin
      nc_sbor := '0';
      nc_sbor1 := '0';
      nc_sbor2 := '0';
      TIP := 0;
      Tip1:= '0';Razm1:= '0';Ispol:= '0';
     // Kol:=StrToInt(SG.Cells[5, I]);
      Naim1 := SG.Cells[3, I];
      Izdel := Naim1;
      Izdelie := Naim1;
      IDGP := SG.Cells[13, I];
      Tulp:='';
                        //----------------------------------------------------
                        //Naim1:= StringReplace(Naim, 'СТАМ ', 'СТАМ',[rfReplaceAll, rfIgnoreCase]);
      Res3 := Pos('СТАМ', Izdel);
      if Res3 <> 0 then
      begin
        Res2:=Pos(' ', Izdel);// СТАМ 411-71-К1-MV220У_225400037а-СПБ
        if Res2<>0 then
        Begin
           Delete(Izdelie, 1, Res2);
        End;
        Res2 := Pos('-', Izdelie);
        if Res2<>0 then
        Begin
          Tip1:= Copy(Izdelie,1,Res2-1); //411
          if Tip1<>''   then
             Tip:=StrToInt(Tip1);
           Delete(Izdelie, 1, Res2);  //71-К1-MV220У_225400037а-СПБ
        End;                         //СТАМ 500-2х
        Res := Pos('х', Izdelie);
        if Res<>0 then
              Delete(Izdelie, 1, 2);  // 88-Н
         Res2 := Pos('-', Izdelie);
        if Res2<>0 then
        Begin
            Razm1:= Copy(Izdelie,1,Res2-1);//71
            if Razm1<>''   then
             Razmer:=StrToInt(Razm1);
           Delete(Izdelie, 1, Res2);  //К1-MV220У_225400037а-СПБ
        End;
         Res2 := Pos('-', Izdelie);
        if Res2<>0 then
        Begin
          Ispol:= Copy(Izdelie,1,Res2-1);
           Delete(Izdelie, 1, Res2);  //К1
        End;

        if (Razmer < 50) then
        begin
            Razm1:='35';
        end;
        if (Razmer>= 50) AND (Razmer<63) then
        begin
            Razm1:='50';
        end;
        if (Razmer>= 63) AND (Razmer<88) then
        begin
            Razm1:='63';
        end;
        if (Razmer>= 88) AND (Razmer<109) then
        begin
            Razm1:='88';
        end;
        if (Razmer>= 109) AND (Razmer<136) then
        begin
            Razm1:='109';
        end;
        if (Razmer>= 136)  then
        begin
            Razm1:='136';
        end;
        if TIP=404 then
             TIP:=402;
        TIP1:=IntToStr(Tip);
        if (TIP=700) or (TIP=710) then
        begin
          Res:=Pos('К',Ispol);
          if res<>0 then
           TIP1:=IntToStr(Tip)+'К';
          Res:=Pos('Н',Ispol);
          if res<>0 then
           TIP1:=IntToStr(Tip)+'Н';
        end;
        if not mkQuerySelect(ADOQuery1,
        'Select * from %s Where ( [Размер] ='+#39+Razm1+#39+')', ['СТАМнорм']) then
        exit;
        nc_sbor1:= ADOQuery1.FieldByName(TIP1).AsString;
        ///Проверяет  наличие клапана
        if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + IDGP + #39 +
        ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 +
        ')  AND (Обозначение LIKE ' + #39 + '%s' + #39 + ') Order By Обозначение ', ['СпецифСТАМ','%ВГ 274.00.00.000%']) then
        exit;
        if Form1.ADOQuery2.RecordCount<>0 then
        begin
          Tulp:='Тюльпан2';
          if not mkQuerySelect(ADOQuery1,
          'Select * from %s Where ( [ТипоразмерСтам] ='+#39+IntToStr(Razmer)+#39+')', ['СТАМТюльпан']) then
          exit;
          nc_sbor2:= ADOQuery1.FieldByName(Tulp).AsString;
        end;
        //
        if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select * from %s Where   (IDГП=' + #39 + IDGP + #39 +
        ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 +
        ')  AND (Обозначение LIKE ' + #39 + '%s' + #39 + ') Order By Обозначение ', ['СпецифСТАМ','%ВГ 281.00.00.000%']) then
        exit;
        if Form1.ADOQuery2.RecordCount<>0 then
        begin
          Tulp:='Тюльпан3';
          if not mkQuerySelect(ADOQuery1,
          'Select * from %s Where ( [ТипоразмерСтам] ='+#39+IntToStr(Razmer)+#39+')', ['СТАМТюльпан']) then
          exit;
          nc_sbor2:= ADOQuery1.FieldByName(Tulp).AsString;
        end;
         if nc_sbor2='' then
           nc_sbor2:='0';
        //
        SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
        nc_sbor1 := StringReplace(nc_sbor1, ',', '.', [rfReplaceAll, rfIgnoreCase]);
        nc_sbor2 := StringReplace(nc_sbor2, ',', '.', [rfReplaceAll, rfIgnoreCase]);
        nc_sbor1:=FloatToStr(StrToFloat(nc_sbor1)+StrToFloat(nc_sbor2));
        if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [' + 'Н\ч Сборка' + ']=' + #39 + (nc_sbor1) + #39 + ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ') ', ['СТАМ']) then
        Exit;
      end;
     end;
  end;
end;

procedure TForm1.SGGetCellColor(Sender: TObject; ARow, ACol: Integer; AState: TGridDrawState; ABrush: TBrush; AFont: TFont);
var
  I, Res: Integer;
begin

  if (ARow > 0) and (ACol > 1) then
  begin

          //++++++++++++++++++++++++++++++++++++++
    Res := AnsiComparestr('0', SG.Cells[5, ARow]);
    if (Res <> 0) then
    begin
      ABrush.Color := RGB(247, 247, 131); //Желтый
    end;
          //++++++++++++++++++++++++++++++++++++++

    if (SG.Cells[11, ARow] <> '') then
    begin
      ABrush.Color := RGB(0, 255, 0); //Св зеленый
    end;
          //++++++++++++++++++++++++++++++++++++++
    if (SG.Cells[12, ARow] <> '') then
    begin
      ABrush.Color := RGB(0, 100, 0); //ОТК
    end;

          //++++++++++++++++++++++++++++++++++++++
    Res := AnsiComparestr('0', SG.Cells[8, ARow]);
    if (Res = 0) and (ACol = 8) then
    begin
      ABrush.Color := RGB(230, 134, 216); //Rozov Не было запуска из Москвы
    end;
    Res := AnsiComparestr('1', SG.Cells[16, ARow]);
    if (Res = 0) then
    begin
      AFont.Style := [fsBold];
    end;
         // AFont.Assign(;
              //++++++++++++++++++++++++++++++++++++++
    if (SG.Cells[19, ARow] <> '') and (ACol = 19) then
    begin
      ABrush.Color := RGB(0, 100, 0); //BZ
    end;
              //++++++++++++++++++++++++++++++++++++++
    if (SG.Cells[27, ARow] <> '') then
    begin
      ABrush.Color := RGB(166, 166, 166); //Отмена
    end;
  end;

end;

procedure TForm1.Edit18Change(Sender: TObject);
begin
  Find_StringGrid(SG215, Edit18.Text, 0, Label17.Caption, 5);
end;

procedure TForm1.SGClickSort(Sender: TObject; ACol: Integer);
begin
  SG.SortByColumn(1);
end;

procedure TForm1.SGClickCell(Sender: TObject; ARow, ACol: Integer);
begin
  TmpCol := ACol;
  tmpRow := ARow;
end;

procedure TForm1.btn16Click(Sender: TObject);
begin
//SG.SortByColumn(TmpCol);
  if SG.Col = 8 then
    Order2 := '';
  if SG.Col = 1 then
    Order2 := ' ORDER BY [Дата]';
  if (SG.Col <> 1) and (SG.Col <> 8) then
    Order2 := ' ORDER BY [' + SG.Cells[SG.Col, 0] + ']';
  Btn3.Click;
end;

procedure TForm1.btn17Click(Sender: TObject);
begin
  if SG.Col = 8 then
    Order2 := '';
  if SG.Col = 1 then
    Order2 := ' ORDER BY [Дата] DESC';
  if (SG.Col <> 1) and (SG.Col <> 8) then
    Order2 := ' ORDER BY [' + SG.Cells[SG.Col, 0] + '] DESC';
  Btn3.Click;
end;

procedure TForm1.btn19Click(Sender: TObject);
begin
//SG215.SortByColumn(TmpCol);
  if SG215.Col = 8 then
    Order2 := '';
  if SG215.Col = 1 then
    Order2 := ' ORDER BY [Дата] ';
  if (SG215.Col <> 1) and (SG215.Col <> 8) then
    Order2 := ' ORDER BY [' + SG215.Cells[SG215.Col, 0] + '] ';
  Btn5.Click;
end;

procedure TForm1.btn18Click(Sender: TObject);
begin
  if SG215.Col = 8 then
    Order2 := '';
  if SG215.Col = 1 then
    Order2 := ' ORDER BY [Дата] DESC';
  if (SG215.Col <> 1) and (SG215.Col <> 8) then
    Order2 := ' ORDER BY [' + SG215.Cells[SG215.Col, 0] + '] DESC';
  Btn5.Click;
end;

procedure TForm1.Edit21Click(Sender: TObject);
begin
  Edit18.Text := '';
end;

procedure TForm1.Edit18Click(Sender: TObject);
begin
  Edit21.Text := '';
end;

procedure TForm1.btn20Click(Sender: TObject);
var
  Res, X, Res_: Integer;
  Str_e4, Str1, Str2, Str3: string;
begin
  if (Edit21.Text = '') and (Edit18.Text = '') then
  begin
    Poisk := 0;
    Exit;
  end;
  Poisk := 1;
  if Edit18.Text <> '' then
  begin
    Order4 := ' AND (Номер=' + #39 + Edit18.Text + #39 + ')';
  end;
  if Edit21.Text <> '' then
  begin

    Order4 := ' AND (Заказ=' + #39 + Edit21.Text + #39 + ')';
  end;

  Btn5.Click;
end;

procedure TForm1.Edit21KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then
    btn20Click(nil);
end;

procedure TForm1.Edit23Click(Sender: TObject);
begin
  Edit16.Text := '';
  Edit17.Text := '';
  Edt4.Text := '';
end;

procedure TForm1.Edit23KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then
    Button6Click(nil);
end;

procedure TForm1.Edit24Change(Sender: TObject);
begin
  Label182.Caption := 'Заказ';
  Find_StringGrid(SG4, Edit24.Text, 2, Label17.Caption, 5);
end;

procedure TForm1.Edit24Click(Sender: TObject);
begin
  Edit33.Text := '';
end;

procedure TForm1.Edit24KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and (Btn41.Enabled) then
    Btn41Click(nil);
end;

procedure TForm1.Edit25Change(Sender: TObject);
begin
  Find_StringGrid(SG5, Edit25.Text, 2, Label17.Caption, 5);
end;

procedure TForm1.Edit25Click(Sender: TObject);
begin
  Edit26.Text := '';
end;

procedure TForm1.Edit26Change(Sender: TObject);
begin
  Find_StringGrid(SG5, Edit26.Text, 2, Label17.Caption, 5);
end;

procedure TForm1.Edit26Click(Sender: TObject);
begin
  Edit25.Text := '';
end;

procedure TForm1.Edit28Click(Sender: TObject);
begin
  Edit29.Text := '';
end;

procedure TForm1.Edit28KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then
    btn59Click(nil);
end;

procedure TForm1.Edit29Click(Sender: TObject);
begin
  Edit28.Text := '';
end;

procedure TForm1.Edit29KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then
    btn59Click(nil);
end;

procedure TForm1.Edit18KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) then
    btn20Click(nil);

end;

procedure TForm1.TehnologN42Click(Sender: TObject);
var
  Str1: string;
begin
  Str1 := SG.Cells[TmpCol, tmpRow];
       // Memo11.Lines.Clear;
       // Memo11.Lines.Add(Str1);
  Clipboard.AsText := Str1; //Memo11.Lines.Strings[0];
end;

procedure TForm1.SG215MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
// Эмуляция нажатия мыши
  if Button = mbRight then
    mouse_event(MOUSEEVENTF_LEFTDOWN or MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
end;

procedure TForm1.SG215MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  I: Integer;
  F: Double;
  J, X1: Integer;
  myRect: TGridRect;
  Sum: Double;
begin
  if (SG215.Col = 5) or (SG215.Col = 18) or (SG215.Col = 19) or (SG215.Col = 11) then
  begin
    Sum := 0;
    myRect := SG215.Selection;
    for I := myRect.Left to myRect.Right do
      for J := myRect.Top to myRect.Bottom do
      begin
        try
          Sum := Sum + StrToFloat(SG215.Cells[I, J]);
        except
          Break;
        end;
      end;
    StatusBar2.Panels[2].Text := FloattOsTR(Sum);

  end;
  Clear_StringGrid(SG212);
  X1 := 0;
  myRect := SG215.Selection;
  for I := myRect.Left to myRect.Right do
    for J := myRect.Top to myRect.Bottom do
    begin
      SG212.Cells[0, X1] := SG215.Cells[0, J]; //Nom
      SG212.Cells[1, X1] := SG215.Cells[21, J]; //IDGP
      SG212.RowCount := X1 + 1;
      Inc(X1);
    end;
end;

procedure TForm1.btn21Click(Sender: TObject);
var
  I, res, Res1, Res2, Res3, Razmer, Kol, Tip: Integer;
  Izdel, Izdelie, nc_sbor, nc_Sbor1, nc_Sbor2, IDGP, Mat, Naim1, Nom: string;
  NC: Double;
begin
 { for I := 1 to SG215.RowCount - 1 do
  begin
    res := AnsiCompareStr(SG215.Cells[11, I], '0');
    if SG215.Cells[4, I] <> '' then
    begin
                //if (res=0)
                //then
      begin
        nc_sbor := '0';
        nc_Sbor1 := '0';
        nc_Sbor2 := '0';
        Naim1 := StringReplace(SG215.Cells[4, I], 'СТАМ ', 'СТАМ', [rfReplaceAll, rfIgnoreCase]);
        Izdel := Naim1;
        Izdelie := Naim1;
        Kol := StrToInt(SG215.Cells[5, I]);
        Nom:= SG215.Cells[0, I];
                        //----------------------------------------------------
        Res3 := Pos('СТАМ', Izdelie);
        if Res3 <> 0 then
        begin
          Res3 := Pos('Защита ЗОНТ', Izdelie);
          if Res3 <> 0 then
          begin
              Res2 := Pos('-', Izdelie);
            Delete(Izdelie, 1, Res2);
          end;
          Res2 := Pos('-', Izdelie);
          Delete(Izdelie, 1, Res2);
                                //Стакан монтажный СТАМ502-2х88-Н
          Res2 := Pos('х', Izdelie);
          if Res2 <> 0 then
            Delete(Izdelie, Res2 - 1, 2);

          Res2 := Pos('-', Izdelie);
          Delete(Izdelie, Res2, 50);
          Razmer := StrToInt(Izdelie);
        end;
                                                //===================
        Izdelie := Naim1;
        Res3 := Pos('Защита ЗОНТ', Izdelie);
          if Res3 <> 0 then
          begin
              Res2 := Pos('-', Izdelie);
            Delete(Izdelie, 1, Res2);
          end;
        Res3 := Pos('СТАМ', Izdelie); //
        if Res3 <> 0 then
        begin
          Delete(Izdelie, 1, 4);
          Res2 := Pos('-', Izdelie);
          Delete(Izdelie, Res2, 50);
          if Izdelie='' then
           Tip :=0
          Else
          Tip := StrToInt(Izdelie);
        end;

                                                //TULPAN  102-103
        if (Razmer < 50) then
        begin
          if (Tip = 102) or (Tip = 112) or (Tip = 202) or (Tip = 212) or (Tip = 402) or (Tip = 412) or (Tip = 502) then
            nc_Sbor1 := '0,156';

        end;
                        //TULPAN
        if ((Razmer > 50) and (Razmer < 56)) then
        begin
          if (Tip = 102) or (Tip = 112) or (Tip = 202) or (Tip = 212) or (Tip = 402) or (Tip = 412) or (Tip = 502) then
            nc_Sbor1 := '0,178'
        end;
                        //TULPAN
        if ((Razmer >= 56) and (Razmer < 63)) then
        begin
          if (Tip = 102) or (Tip = 112) or (Tip = 202) or (Tip = 212) or (Tip = 402) or (Tip = 412) or (Tip = 502) then
            nc_Sbor1 := '0,222';
          if (Tip = 103) or (Tip = 113) or (Tip = 203) or (Tip = 213) or (Tip = 403) or (Tip = 413) then
            nc_Sbor2 := '0,282';
        end;
                        //TULPAN
        if ((Razmer >= 63) and (Razmer < 88)) then
        begin
          if (Tip = 102) or (Tip = 112) or (Tip = 202) or (Tip = 212) or (Tip = 402) or (Tip = 412) or (Tip = 502) then
            nc_Sbor1 := '0,267';
          if (Tip = 103) or (Tip = 113) or (Tip = 203) or (Tip = 213) or (Tip = 403) or (Tip = 413) then
            nc_Sbor2 := '0,65';
        end;
                        //TULPAN
        if ((Razmer >= 88) and (Razmer < 90)) then
        begin
          if (Tip = 102) or (Tip = 112) or (Tip = 202) or (Tip = 212) or (Tip = 402) or (Tip = 412) or (Tip = 502) then
            nc_Sbor1 := '0,267';
          if (Tip = 103) or (Tip = 113) or (Tip = 203) or (Tip = 213) or (Tip = 403) or (Tip = 413) then
            nc_Sbor2 := '0,826';
        end;
                        //TULPAN
        if ((Razmer >= 90) and (Razmer < 112)) then
        begin
          if (Tip = 102) or (Tip = 112) or (Tip = 202) or (Tip = 212) or (Tip = 402) or (Tip = 412) or (Tip = 502) then
            nc_Sbor1 := '0,311';
          if (Tip = 103) or (Tip = 113) or (Tip = 203) or (Tip = 213) or (Tip = 403) or (Tip = 413) then
            nc_Sbor2 := '0,826';
        end;
                        //TULPAN
        if ((Razmer >= 112)) then
        begin
          if (Tip = 102) or (Tip = 112) or (Tip = 202) or (Tip = 212) or (Tip = 402) or (Tip = 412) or (Tip = 502) then
            nc_Sbor1 := '0,364';
          if (Tip = 103) or (Tip = 113) or (Tip = 203) or (Tip = 213) or (Tip = 403) or (Tip = 413) then
            nc_Sbor2 := '1,08';
        end;
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ100', Izdel);

        if (Res1 <> 0) and (Razmer < 50) then
          nc_sbor := '0,185';
                        //-----
        if (Res1 <> 0) and ((Razmer >= 50) and (Razmer < 63)) then
          nc_sbor := '0,225';
                        //-----
        if (Res1 <> 0) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '0,282';
                        //-----
        if (Res1 <> 0) and ((Razmer >= 88) and (Razmer < 109)) then
          nc_sbor := '0,327';

                       //-----
        Res2 := Pos('-109-', Izdel);
        if (Res1 <> 0) and (Res2 <> 0) then
          nc_sbor := '0,394';

        Res2 := Pos('-112-', Izdel);
        if (Res1 <> 0) and (Res2 <> 0) then
          nc_sbor := '0,386';
                        //-------------
        Res2 := Pos('-136-', Izdel);
        if (Res1 <> 0) and (Res2 <> 0) then
          nc_sbor := '0,436';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ102', Izdel);
        Res3 := Pos('СТАМ103', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Razmer < 50) then
          nc_sbor := '0,25';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 50) and (Razmer < 63)) then
          nc_sbor := '0,29';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '0,392';

                       //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 88) and (Razmer < 109)) then
          nc_sbor := '0,417';

                       //-----
        Res2 := Pos('-109-', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Res2 <> 0) then
          nc_sbor := '0,549';

        Res2 := Pos('-112-', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Res2 <> 0) then
          nc_sbor := '0,541';
                        //-------------
        Res2 := Pos('-136-', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Res2 <> 0) then
          nc_sbor := '0,591';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++

                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ110', Izdel);
        if (Res1 <> 0) and (Razmer < 50) then
          nc_sbor := '0,342';
                        //-----
        if (Res1 <> 0) and ((Razmer >= 50) and (Razmer < 63)) then
          nc_sbor := '0,384';
                        //-----
        if (Res1 <> 0) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '0,473';
                       //-----
        if (Res1 <> 0) and ((Razmer >= 88) and (Razmer < 109)) then
          nc_sbor := '0,527';
                       //-----
        Res2 := Pos('-109-', Izdel);
        if (Res1 <> 0) and (Res2 <> 0) then
          nc_sbor := '0,598';

        Res2 := Pos('-112-', Izdel);
        if (Res1 <> 0) and (Res2 <> 0) then
          nc_sbor := '0,59';
                        //-------------
        Res2 := Pos('-136-', Izdel);
        if (Res1 <> 0) and (Res2 <> 0) then
          nc_sbor := '0,632';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ112', Izdel);
        if (Res1 <> 0) and (Razmer < 50) then
          nc_sbor := '0,422';
                        //-----
        if (Res1 <> 0) and ((Razmer >= 50) and (Razmer < 63)) then
          nc_sbor := '0,464';
                        //-----
        if (Res1 <> 0) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '0,581';
                       //-----
        if (Res1 <> 0) and ((Razmer >= 88) and (Razmer < 109)) then
          nc_sbor := '0,635';
                       //-----
        Res2 := Pos('-109-', Izdel);
        if (Res1 <> 0) and (Res2 <> 0) then
          nc_sbor := '0,811';
                        //-------------
        Res2 := Pos('-112-', Izdel);
        if (Res1 <> 0) and (Res2 <> 0) then
          nc_sbor := '0,803';
                        //-------------
        Res2 := Pos('-136-', Izdel);
        if (Res1 <> 0) and (Res2 <> 0) then
          nc_sbor := '0,818';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ113', Izdel);
        if (Res1 <> 0) and (Razmer < 88) then
          nc_sbor := '0,581';
                        //-------------
        if (Res1 <> 0) and (Razmer >= 88) then
          nc_sbor := '0,635';

                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ200', Izdel);
        Res3 := Pos('СТАМ400', Izdel);
        Res2 := Pos('-35-', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Razmer < 50) then
          nc_sbor := '0,464';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 50) and (Razmer < 63)) then
          nc_sbor := '0,52';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '0,672';
                       //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 88) and (Razmer < 109)) then
          nc_sbor := '0,728';
                       //-----
        Res2 := Pos('-109-', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Res2 <> 0) then
          nc_sbor := '0,824';

        Res2 := Pos('-112-', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Res2 <> 0) then
          nc_sbor := '0,816';
                        //-------------
        Res2 := Pos('-136-', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Res2 <> 0) then
          nc_sbor := '0,896';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ202', Izdel);
        Res3 := Pos('СТАМ402', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Razmer < 50) then
          nc_sbor := '0,57';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 50) and (Razmer < 63)) then
          nc_sbor := '0,626';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '0,816';
                       //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 88) and (Razmer < 109)) then
          nc_sbor := '0,872';
                       //-----
        Res2 := Pos('-109-', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Res2 <> 0) then
          nc_sbor := '1,17';

        Res2 := Pos('-112-', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Res2 <> 0) then
          nc_sbor := '1,1';
                        //-------------
        Res2 := Pos('-136-', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Res2 <> 0) then
          nc_sbor := '1,15';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ203', Izdel);
        Res3 := Pos('СТАМ203', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Razmer < 50) then
          nc_sbor := '0,57';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 50) and (Razmer < 63)) then
          nc_sbor := '0,626';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '0,816';
                       //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 88) and (Razmer < 109)) then
          nc_sbor := '0,872';
                       //-----
        Res2 := Pos('-109-', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Res2 <> 0) then
          nc_sbor := '1,17';

        Res2 := Pos('-112-', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Res2 <> 0) then
          nc_sbor := '1,1';
                        //-------------
        Res2 := Pos('-136-', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Res2 <> 0) then
          nc_sbor := '1,15';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ210', Izdel);
        Res3 := Pos('СТАМ410', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Razmer < 50) then
          nc_sbor := '0,576';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 50) and (Razmer < 63)) then
          nc_sbor := '0,64';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '1';
                       //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 88) and (Razmer < 109)) then
          nc_sbor := '1,1';
                       //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 109) and (Razmer < 136)) then
          nc_sbor := '1,44';
                        //-------------
        if ((Res1 <> 0) or (Res3 <> 0)) and (Razmer >= 136) then
          nc_sbor := '1,79';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ211', Izdel);
        Res3 := Pos('СТАМ411', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Razmer < 50) then
          nc_sbor := '1,53';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 50) and (Razmer < 63)) then
          nc_sbor := '1,61';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '1,87';
                       //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 88) and (Razmer < 109)) then
          nc_sbor := '2,28';
                       //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 109) and (Razmer < 136)) then
          nc_sbor := '2,84';
                        //-------------
        if ((Res1 <> 0) or (Res3 <> 0)) and (Razmer >= 136) then
          nc_sbor := '2,84';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ212', Izdel);
        Res3 := Pos('СТАМ412', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Razmer < 50) then
          nc_sbor := '0,682';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 50) and (Razmer < 63)) then
          nc_sbor := '0,746';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '1,14';
                       //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 88) and (Razmer < 109)) then
          nc_sbor := '1,24';
                       //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 109) and (Razmer < 136)) then
          nc_sbor := '1,72';
                        //-------------
        if ((Res1 <> 0) or (Res3 <> 0)) and (Razmer >= 136) then
          nc_sbor := '2,04';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ213', Izdel);
        Res3 := Pos('СТАМ413', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Razmer < 50) then
          nc_sbor := '0,682';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 50) and (Razmer < 63)) then
          nc_sbor := '0,746';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '1,14';
                       //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 88) and (Razmer < 109)) then
          nc_sbor := '1,24';
                       //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 109) and (Razmer < 136)) then
          nc_sbor := '1,72';
                        //-------------
        if ((Res1 <> 0) or (Res3 <> 0)) and (Razmer >= 136) then
          nc_sbor := '2,04';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ300', Izdel);
        Res3 := Pos('СТАМ310', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Razmer < 50) then
          nc_sbor := '0,608';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 50) and (Razmer < 84)) then
          nc_sbor := '0,68';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and (Razmer >= 84) then
          nc_sbor := '0,776';
                        //-----
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ500', Izdel);
        Res3 := Pos('СТАМ500', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Razmer < 63) then
          nc_sbor := '1,06';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '1,34';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 88)) then
          nc_sbor := '1,45';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ502', Izdel);
        Res3 := Pos('СТАМ502', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Razmer < 63) then
          nc_sbor := '1,14';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '1,68';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 88)) then
          nc_sbor := '1,74';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ600', Izdel);
        Res3 := Pos('СТАМ610', Izdel);
        if ((Res1 <> 0) or (Res3 <> 0)) and (Razmer < 51) then
          nc_sbor := '0,5';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 51) and (Razmer < 63)) then
          nc_sbor := '0,675';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '0,785';
                        //-----
        if ((Res1 <> 0) or (Res3 <> 0)) and ((Razmer >= 88)) then
          nc_sbor := '0,91';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ700', Izdel);
        Res3 := Pos('К', Izdel);
        if ((Res1 <> 0) and (Res3 <> 0)) and (Razmer < 51) then
          nc_sbor := '1,59';
                        //-----
        if ((Res1 <> 0) and (Res3 <> 0)) and ((Razmer >= 51) and (Razmer < 63)) then
          nc_sbor := '1,82';
                        //-----
        if ((Res1 <> 0) and (Res3 <> 0)) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '2,14';
                        //-----
        if ((Res1 <> 0) and (Res3 <> 0)) and ((Razmer >= 88)) then
          nc_sbor := '2,41';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ700', Izdel);
        Res3 := Pos('Н', Izdel);
        if ((Res1 <> 0) and (Res3 <> 0)) and (Razmer < 51) then
          nc_sbor := '1,46';
                        //-----
        if ((Res1 <> 0) and (Res3 <> 0)) and ((Razmer >= 51) and (Razmer < 63)) then
          nc_sbor := '1,68';
                        //-----
        if ((Res1 <> 0) and (Res3 <> 0)) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '2,01';
                        //-----
        if ((Res1 <> 0) and (Res3 <> 0)) and ((Razmer >= 88)) then
          nc_sbor := '3,1';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ710', Izdel);
        Res3 := Pos('К', Izdel);
        if ((Res1 <> 0) and (Res3 <> 0)) and (Razmer < 51) then
          nc_sbor := '2,9';
                        //-----
        if ((Res1 <> 0) and (Res3 <> 0)) and ((Razmer >= 51) and (Razmer < 63)) then
          nc_sbor := '3,25';
                        //-----
        if ((Res1 <> 0) and (Res3 <> 0)) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '3,75';
                        //-----
        if ((Res1 <> 0) and (Res3 <> 0)) and ((Razmer >= 88)) then
          nc_sbor := '3,75';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
        Res1 := Pos('СТАМ710', Izdel);
        Res3 := Pos('Н', Izdel);
        if ((Res1 <> 0) and (Res3 <> 0)) and (Razmer < 51) then
          nc_sbor := '2,69';
                        //-----
        if ((Res1 <> 0) and (Res3 <> 0)) and ((Razmer >= 51) and (Razmer < 63)) then
          nc_sbor := '3,04';
                        //-----
        if ((Res1 <> 0) and (Res3 <> 0)) and ((Razmer >= 63) and (Razmer < 88)) then
          nc_sbor := '3,54';
                        //-----
        if ((Res1 <> 0) and (Res3 <> 0)) and ((Razmer >= 88)) then
          nc_sbor := '3,89';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
                  //Поддон ПОД-84-Ц
        Res1 := Pos('ПОД-36', Izdel);
        if (Res1 <> 0) then
          nc_sbor := '0,2';
        Res1 := Pos('ПОД-50', Izdel);
        if (Res1 <> 0) then
          nc_sbor := '0,32';
        Res1 := Pos('ПОД-57', Izdel);
        if (Res1 <> 0) then
          nc_sbor := '0,32';
        Res1 := Pos('ПОД-84', Izdel);
        if (Res1 <> 0) then
          nc_sbor := '0,35';
        Res1 := Pos('ПОД-93', Izdel);
        if (Res1 <> 0) then
          nc_sbor := '0,38';

        Res1 := Pos('ПОД-110', Izdel);
        if (Res1 <> 0) then
          nc_sbor := '0,4';
        Res1 := Pos('ПОД-115', Izdel);
        if (Res1 <> 0) then
          nc_sbor := '0,42';
        Res1 := Pos('ПОД-137', Izdel);
        if (Res1 <> 0) then
          nc_sbor := '0,76';
                  //++++++++++++++++++++++++++++++ +++++++++++++++++++++
                SyStem.SysUtils.FormatSettings.DecimalSeparator :=('.');
      nc_sbor:=StringReplace(nc_sbor, ',', '.',[rfReplaceAll, rfIgnoreCase]);
      nc_sbor1:=StringReplace(nc_sbor1, ',', '.',[rfReplaceAll, rfIgnoreCase]);
      nc_sbor2:=StringReplace(nc_sbor2, ',', '.',[rfReplaceAll, rfIgnoreCase]);
        NC := (StrToFloat(nc_sbor) + StrToFloat(nc_Sbor1) + StrToFloat(nc_Sbor2)) * Kol;
        nc_sbor := FloatToStr(NC);
        res := Pos(',', nc_sbor); //Трудоемкость FLOAT
        if res <> 0 then
        begin
          Delete(nc_sbor, res, 1);
          Insert('.', nc_sbor, res);
        end;
                  //++++++++++++++++++++++++++++++
        Izdelie := Izdel;
                Res3 := Pos('Защита ЗОНТ', Izdelie);
          if Res3 <> 0 then
          Continue;
        Res3 := Pos('СТАМ', Izdel);
        if Res3 <> 0 then
        begin
          Res2 := Pos('-', Izdelie);
          Delete(Izdelie, 1, Res2);
                                //Стакан монтажный СТАМ502-2х88-Н
          Res2 := Pos('х', Izdelie);
          if Res2 <> 0 then
            Delete(Izdelie, Res2 - 1, 2);

          Res2 := Pos('-', Izdelie);
          Delete(Izdelie, Res2, 50);
          Razmer := StrToInt(Izdelie);
          if Razmer < 57 then
            Mat := '1,5';
          if Razmer > 57 then
            Mat := '3';
          Res1 := Pos('СТАМ710', Izdel);
          if Res1 <> 0 then
            Mat := '3';
          Res1 := Pos('СТАМ700', Izdel);
          if Res1 <> 0 then
            Mat := '3';

          Res1 := Pos('СТАМ 360', Izdel);
          if Res1 <> 0 then
            Mat := '1';

          Res1 := Pos('СТАМ 401', Izdel);
          if Res1 <> 0 then
            Mat := '3';
            // СТАМ 400-45-Н_205400023-ЧЛ
          Res1 := Pos('_', Izdel);

          if Res1 <> 0 then
            Mat := '3';
        end;
        IDGP := SG215.Cells[21, I];

        if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [' + 'Н\ч Сборка' + ']=' + #39 + nc_sbor + #39 + ',Мат' + '=' + #39 + Mat + #39 + ' WHERE ([IdГП]=' + #39 + IDGP + #39 + ') AND (Номер=' + #39 + Nom + #39 + ') ', ['ЗапускСТАМ']) then
          Exit;

      end;
    end;
  end;}
end;

procedure TForm1.SG215RowChanging(Sender: TObject; OldRow, NewRow: Integer; var Allow: Boolean);
begin
  SG216.RowHeights[0] := SG215.RowHeights[0];
end;

procedure TForm1.SG215TopLeftChanged(Sender: TObject);
begin
  SG216.TopRow := SG215.TopRow;
end;

procedure TForm1.SG216TopLeftChanged(Sender: TObject);
begin
  SG215.TopRow := SG216.TopRow;
end;

procedure TForm1.SG216SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
begin
  SG215.SelectCells(0, ARow, 3, ARow);
end;

procedure TForm1.SG216DblClickCell(Sender: TObject; ARow, ACol: Integer);
var
  Kol_Ob, Kol15, Kol3, Mat: Double;
  Kol, I: Integer;
  Str: string;
begin
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  Kol_Ob := 0;
  Kol15 := 0;
  Kol3 := 0;
  if SG215.Cells[10, ARow] = '' then
    SG215.Cells[10, ARow] := '0';
  for I := 0 to SG216.RowCount - 2 do
  begin
    if SG215.Cells[10, I + 1] <> '' then
    begin

      Str := StringReplace(SG215.Cells[10, I + 1], ',', '.', []);
      Mat := StrToFloat(Str);
      if SG216.Cells[0, I + 1] <> '' then
      begin
        Str := StringReplace(SG215.Cells[11, I + 1], ',', '.', []);
        Kol_Ob := Kol_Ob + StrToFloat(Str);
        if Mat = 1.5 then
          Kol15 := Kol15 + StrToFloat(Str);
        if Mat = 3 then
          Kol3 := Kol3 + StrToFloat(Str);
      end;
    end;
  end;
  if SG216.Cells[0, ARow] = '' then
  begin
    SG216.Cells[0, ARow] := 'V';
    Str := StringReplace(SG215.Cells[11, ARow], ',', '.', []);
    Kol_Ob := Kol_Ob + StrToFloat(Str);
    Str := StringReplace(SG215.Cells[10, ARow], ',', '.', []);
    Mat := StrToFloat(Str);
    Str := StringReplace(SG215.Cells[11, ARow], ',', '.', []);
    if Mat = 1.5 then
      Kol15 := Kol15 + StrToFloat(Str);
    if Mat = 3 then
      Kol3 := Kol3 + StrToFloat(Str);
  end
  else
  begin
    SG216.Cells[0, ARow] := '';
    Kol_Ob := Kol_Ob - StrToFloat(SG215.Cells[11, ARow]);
    Str := StringReplace(SG215.Cells[10, ARow], ',', '.', []);
    Mat := StrToFloat(Str);
    Str := StringReplace(SG215.Cells[11, ARow], ',', '.', []);
    if Mat = 1.5 then
      Kol15 := Kol15 - StrToFloat(Str);
    if Mat = 3 then
      Kol3 := Kol3 - StrToFloat(Str);
  end;
  Label150.Caption := FloatToStr(Kol_Ob);
  Label151.Caption := FloatToStr(Kol15);
  Label152.Caption := FloatToStr(Kol3);
end;

procedure TForm1.btn22Click(Sender: TObject);
var
  I: Integer;
begin
        // SG216.Sort(0,sdDescending);
  for I := 0 to SG216.RowCount - 1 do
  begin
    if SG216.Cells[0, I + 1] = '' then
    begin
      SG215.RowEnabled[I + 1] := false;
    end;
  end;
end;

procedure TForm1.btn23Click(Sender: TObject);
var
  I: Integer;
begin
  for I := 0 to SG216.RowCount - 1 do
  begin
    SG216.Cells[0, I + 1] := '';
    SG215.RowEnabled[I + 1] := True;
  end;
end;

procedure TForm1.TehnologN43Click(Sender: TObject);
var
  Str, Zagolovok: string;
begin
  Zagolovok := SG215.Cells[SG215.Col, 0];
        //Str:=SG215.Cells[8,SG215.Row]; 14,15,17
  if ((SG215.Col = 14) or (SG215.Col = 15) or (SG215.Col = 17)) and ((FlagDolg = 1) or (FlagDolg = 4)) then
  begin
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [' + Zagolovok + ']=NULL' + ' WHERE ([IdГП]=' + #39 + SG215.Cells[21, SG215.Row] + #39 + ') AND (Номер=' + #39 + SG215.Cells[0, SG215.Row] + #39 + ') ', ['ЗапускСТАМ']) then
      Exit;
  end;

  if ((SG215.Col = 12) or (SG215.Col = 13) or (SG215.Col = 14) or (SG215.Col = 15) or (SG215.Col = 17)) and ((FlagDolg = 1) or (FlagDolg = 7)) then  //Яковлев
  begin
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [' + Zagolovok + ']=NULL' + ' WHERE ([IdГП]=' + #39 + SG215.Cells[21, SG215.Row] + #39 + ') AND (Номер=' + #39 + SG215.Cells[0, SG215.Row] + #39 + ') ', ['ЗапускСТАМ']) then
      Exit;
  end;

end;

function TForm1.Sborka(XL: Variant): string;
var
  I, j, y, XX, YY, g, Res, Kol, Kol_Sbor: Integer;
  Kol_Det: Double;
  Dat1, Dat2, Dat3, Zaka, Nedel, DatGot, Pos11, Pos22, Pos_Isp, A, B, Izdel: string;
  Dat: TDate;
  Nach, Kon, Sbor_Zap, Sbor_Got, Zag_Zap, Zag_Got, OTK, Up, Rasch, Rasch1: string;
  SS, StrDat1, StrDat2, StrDat3, SBor, K_Sbor, Nam, Kol_Zap_S, StrNom, Oboz, Kol_S, Idgp, Izdelie, id, God, Mes, dir, Zak, SSS: string;
   //XL:Variant;
begin
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  Dat1 := FormatDateTime('dd.mm.YYYY', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  XX := 0;
  YY := 0;
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ')  ORDER BY Номер,IdГП', ['Запуск']) then
    exit;
  if ADOQuery1.RecordCount > 0 then
  begin
    for j := 0 to ADOQuery1.RecordCount - 1 do
    begin
      Kol_Zap_S := ADOQuery1.FieldByName('Кол во запущенных').AsString;
      Kol := ADOQuery1.FieldByName('Кол во запущенных').AsInteger;
      StrNom := ADOQuery1.FieldByName('Номер').AsString;
      Izdel := ADOQuery1.FieldByName('Изделие').AsString;
      Idgp := ADOQuery1.FieldByName('IdГП').AsString;
      StrDat3 := ADOQuery1.FieldByName('Планирование').AsString;
      Dat := StrToDate(StrDat3);
      Dat3 := FormatDateTime('dd.mm.YYYY', Dat);
      Zak := ADOQuery1.FieldByName('Заказ').AsString;
      XL.ActiveWorkBook.Sheets.Item[6].Activate;
      try
        if j <> ADOQuery1.RecordCount - 1 then
        begin
          XL.ActiveWorkBook.Worksheets[6].Range['A' + IntToStr(XX + 1) + ':F' + IntToStr(XX + 16)].Select;
          XL.Selection.Copy;
          XL.ActiveWorkBook.Worksheets[6].Range['A' + IntToStr(XX + 17)].Select;
          XL.ActiveWorkBook.Worksheets[6].Paste;
        end;
      except
        MessageDlg('0!' + IntToStr(XX + 13), mtError, [mbOk], 0);
      end;
      XL.ActiveWorkBook.WorkSheets[6].Cells[XX + 2, 2] := Zak;
      XL.ActiveWorkBook.WorkSheets[6].Cells[XX + 2, 4] := '№ ' + StrNom;
      XL.ActiveWorkBook.WorkSheets[6].Cells[XX + 2, 5] := Dat3;
          //======================================
      XL.ActiveWorkBook.WorkSheets[6].Cells[XX + 4, 3] := Izdel;
      XL.ActiveWorkBook.WorkSheets[6].Cells[XX + 4, 5] := IntToStr(Kol);
      XL.ActiveWorkBook.WorkSheets[6].Cells[XX + 4, 6] := IntToStr(j + 1);
          //==============================================
      SS := ' AND (Элемент NOT LIKE ' + #39 + '%' + 'Клапан' + '%' + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ')';
      if not mkQuerySelect1(ADOQuery2, 'Select* from %s Where  ( IdГП=' + #39 + Idgp + #39 + ') %s', ['Специф', SS]) then
        exit;
      SBor := '';
      K_Sbor := '';

      for y := 0 to ADOQuery2.RecordCount - 1 do
      begin
        id := ADOQuery2.FieldByName('Id').AsString;
        Oboz := ADOQuery2.FieldByName('Обозначение').AsString;
        SBor := SBor + '\' + Oboz;

        Kol_Sbor := ADOQuery2.FieldByName('Количество').AsInteger * Kol;
        K_Sbor := K_Sbor + '\' + IntToStr(Kol_Sbor);
        Nam := ADOQuery2.FieldByName('Элемент').AsString;
                  //======================================
        XL.ActiveWorkBook.WorkSheets[6].Cells[XX + 6 + y, 3] := Nam;
        XL.ActiveWorkBook.WorkSheets[6].Cells[XX + 6 + y, 4] := Oboz;
        XL.ActiveWorkBook.WorkSheets[6].Cells[XX + 6 + y, 5] := IntToStr(Kol_Sbor);
        ADOQuery2.Next;
      end;
      XX := XX + 16;
      Delete(SBor, 1, 1);
      Delete(K_Sbor, 1, 1);
          //----------------------------------------------
      XL.ActiveWorkBook.Sheets.Item[5].Activate;
      XL.ActiveWorkBook.WorkSheets[5].Cells[2, 6] := Dat1;
      try
        XL.ActiveWorkBook.Worksheets[5].Range['A' + IntToStr(j + 6) + ':H' + IntToStr(j + 6)].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[5].Range['A' + IntToStr(j + 7)].Select;
        XL.ActiveWorkBook.Worksheets[5].Paste;
      except
        MessageDlg('2!' + IntToStr(j + 7), mtError, [mbOk], 0);
      end;
      XL.ActiveWorkBook.WorkSheets[5].Cells[j + 6, 1] := StrNom;
      XL.ActiveWorkBook.WorkSheets[5].Cells[j + 6, 2] := Dat3;
      XL.ActiveWorkBook.WorkSheets[5].Cells[j + 6, 3] := Zak;
      XL.ActiveWorkBook.WorkSheets[5].Cells[j + 6, 4] := Kol_Zap_S;
      XL.ActiveWorkBook.WorkSheets[5].Cells[j + 6, 5] := Izdel;
         // XL.ActiveWorkBook.WorkSheets[5].Cells[ j+6, 6] :=SBor;
         // XL.ActiveWorkBook.WorkSheets[5].Cells[ j+6, 6] :=IntToStr(Kol_Sbor);
         // XL.ActiveWorkBook.WorkSheets[5].Cells[ j+6, 7] :=Idgp;
      XL.ActiveWorkBook.WorkSheets[5].Cells[j + 6, 8] := IntToStr(j + 1);

      ADOQuery1.Next;
    end;
    if ADOQuery1.RecordCount > 38 then
    begin
      XL.ActiveWorkBook.WorkSheets[5].PageSetup.FitToPagesTall := 2; // 2 Страницы ПО ВЫСОТЕ
      XL.ActiveWorkBook.WorkSheets[5].PageSetup.PrintTitleRows := '$' + IntToStr(1) + ':$' + IntToStr(5); //6 7
    end;

    XL.ActiveWorkBook.Sheets.Item[6].Activate;
    XL.ActiveWindow.View := 2;   //2=xlPageBreakPreview
    YY := XL.ActiveWorkBook.WorkSheets[6].HPageBreaks.Count;
    if YY <> 0 then
    begin
      for I := 1 to YY do
      begin

        XX := XL.ActiveWorkBook.WorkSheets[6].HPageBreaks.Item[I].Location.Row;

        for j := XX downto 1 do
        begin
          SSS := XL.ActiveWorkBook.WorkSheets[6].Cells[j, 1];
          Res := Pos('--', SSS);
          if Res <> 0 then
          begin

            XL.ActiveWorkBook.WorkSheets[6].HPageBreaks.Item[I].Location := XL.ActiveWorkBook.WorkSheets[6].Range['A' + IntToStr(j + 1) + ':A' + IntToStr(j + 1)];
            Break;
          end;
        end;
      end;
    end;
    XL.ActiveWindow.View := 1;
  end;
end;

function TForm1.Korpus(XL: Variant): string;
var
  I, j, y, XX, YY, g, Res, Kol, Kol_Sbor: Integer;
  Kol_Det: Double;
  Dat1, Dat2, Dat3, Zaka, Nedel, DatGot, Pos11, Pos22, Pos_Isp, A, B, Izdel: string;
  Dat: TDate;
  Nach, Kon, Sbor_Zap, Sbor_Got, Zag_Zap, Zag_Got, OTK, Up, Rasch, Rasch1: string;
  SS, StrDat1, StrDat2, StrDat3, SBor, K_Sbor, Nam, Kol_Zap_S, StrNom, Oboz, Kol_S, Idgp, Izdelie, id, God, Mes, dir, Zak, SSS: string;
   //XL:Variant;
begin
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  Dat1 := FormatDateTime('dd.mm.YYYY', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  XX := 0;
  YY := 0;
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ')  ORDER BY Номер,IdГП', ['Запуск']) then
    exit;
  if ADOQuery1.RecordCount > 0 then
  begin
    for j := 0 to ADOQuery1.RecordCount - 1 do
    begin
      Kol_Zap_S := ADOQuery1.FieldByName('Кол во запущенных').AsString;
      Kol := ADOQuery1.FieldByName('Кол во запущенных').AsInteger;
      StrNom := ADOQuery1.FieldByName('Номер').AsString;
      Izdel := ADOQuery1.FieldByName('Изделие').AsString;
      Idgp := ADOQuery1.FieldByName('IdГП').AsString;
      StrDat3 := ADOQuery1.FieldByName('Планирование').AsString;
      Dat := StrToDate(StrDat3);
      Dat3 := FormatDateTime('dd.mm.YYYY', Dat);
      Zak := ADOQuery1.FieldByName('Заказ').AsString;
          //==============================================
      SS := ' AND (Элемент LIKE ' + #39 + 'Корпус' + '%' + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ')';
      if not mkQuerySelect1(ADOQuery2, 'Select* from %s Where  ( IdГП=' + #39 + Idgp + #39 + ') %s', ['Специф', SS]) then
        exit;
      SBor := '';
      K_Sbor := '';
      if ADOQuery2.RecordCount <> 0 then
      begin
        XL.ActiveWorkBook.Sheets.Item[4].Activate;
              // Выравнивам по центру по вертикали
        XL.ActiveWorkBook.WorkSheets[4].Columns[6].VerticalAlignment := 2;
        XL.ActiveWorkBook.WorkSheets[4].Columns[6].HorizontalAlignment := 3;
              // Шрифт жирный
        XL.ActiveWorkBook.WorkSheets[4].Columns[6].Font.Bold := True;
        XL.ActiveWorkBook.WorkSheets[4].Columns[6].Font.Color := clBlack;
              //XL.ActiveWorkBook.WorkSheets[4].Columns[6].Font.Size := 20;
        XL.ActiveWorkBook.WorkSheets[4].Columns[6].Font.Name := 'Times New Roman';

        XL.ActiveWorkBook.WorkSheets[4].Cells[XX + 2, 1] := '№ заказа';
        XL.ActiveWorkBook.WorkSheets[4].Cells[XX + 2, 2] := Zak;
        XL.ActiveWorkBook.WorkSheets[4].Cells[XX + 2, 4] := '№ ' + StrNom;
        XL.ActiveWorkBook.WorkSheets[4].Cells[XX + 2, 5] := Dat3;
                            // Шрифт жирный
        XL.ActiveWorkBook.WorkSheets[4].Rows[XX + 2].Font.Bold := True;
        XL.ActiveWorkBook.WorkSheets[4].Rows[XX + 2].Font.Color := clBlack;
        XL.ActiveWorkBook.WorkSheets[4].Rows[XX + 2].Font.Size := 14;
        XL.ActiveWorkBook.WorkSheets[4].Rows[XX + 2].Font.Name := 'Times New Roman';
              //======================================
        XL.ActiveWorkBook.WorkSheets[4].Cells[XX + 4, 3] := Izdel;
        XL.ActiveWorkBook.WorkSheets[4].Cells[XX + 4, 5] := IntToStr(Kol);
        XL.ActiveWorkBook.WorkSheets[4].Cells[XX + 4, 6] := IntToStr(j + 1);
      end;
      if j + 1 = 16 then
        SSS := '16';
      for y := 0 to ADOQuery2.RecordCount - 1 do
      begin
        id := ADOQuery2.FieldByName('Id').AsString;
        Oboz := ADOQuery2.FieldByName('Обозначение').AsString;
        SBor := SBor + '\' + Oboz;

        Kol_Sbor := ADOQuery2.FieldByName('Количество').AsInteger * Kol;
        K_Sbor := K_Sbor + '\' + IntToStr(Kol_Sbor);

        Nam := ADOQuery2.FieldByName('Элемент').AsString;
                  //======================================
        XL.ActiveWorkBook.WorkSheets[4].Cells[XX + 5, 1] := Nam;
        XL.ActiveWorkBook.WorkSheets[4].Cells[XX + 5, 3] := Oboz;
        XL.ActiveWorkBook.WorkSheets[4].Cells[XX + 5, 5] := IntToStr(Kol_Sbor);
                  // Шрифт жирный
        XL.ActiveWorkBook.WorkSheets[4].Rows[XX + 5].Font.Bold := True;
        XL.ActiveWorkBook.WorkSheets[4].Rows[XX + 5].Font.Color := clBlack;
        XL.ActiveWorkBook.WorkSheets[4].Rows[XX + 5].Font.Size := 14;
        XL.ActiveWorkBook.WorkSheets[4].Rows[XX + 5].Font.Name := 'Times New Roman';
        XL.ActiveWorkBook.WorkSheets[4].Range['A' + IntToStr(XX + 5) + ':' + 'E' + IntToStr(XX + 5)].Interior.Color := 11119017;
        Inc(XX);
        ADOQuery2.Next;
      end;
      ADOQuery2.First;
      for y := 0 to ADOQuery2.RecordCount - 1 do
      begin
        id := ADOQuery2.FieldByName('Id').AsString;
        if not mkQuerySelect66(ADOQuery4, 'Select* from %s Where  ( Технолог=' + #39 + id + #39 + ') AND ( IdГП=' + #39 + Idgp + #39 + ') ', ['Специф']) then
          exit;
        for I := 0 to ADOQuery4.RecordCount - 1 do
        begin
          Nam := ADOQuery4.FieldByName('Элемент').AsString;
          Oboz := ADOQuery4.FieldByName('Обозначение').AsString;
          Kol_Det := ADOQuery4.FieldByName('Количество').AsFloat * Kol;
          Kol_S := FloatToStr(Kol_Det);
          XL.ActiveWorkBook.WorkSheets[4].Cells[XX + 6, 3] := Nam;
          XL.ActiveWorkBook.WorkSheets[4].Cells[XX + 6, 4] := Oboz;
          XL.ActiveWorkBook.WorkSheets[4].Cells[XX + 6, 5] := Kol_S;
          XL.ActiveWorkBook.WorkSheets[4].Range['C' + IntToStr(XX + 6) + ':' + 'E' + IntToStr(XX + 6)].Borders.LineStyle := 1;
          XL.ActiveWorkBook.WorkSheets[4].Range['C' + IntToStr(XX + 6) + ':' + 'E' + IntToStr(XX + 6)].Borders.Weight := 2;
          XL.ActiveWorkBook.WorkSheets[4].Range['C' + IntToStr(XX + 6) + ':' + 'E' + IntToStr(XX + 6)].Borders.ColorIndex := 1;
          ADOQuery4.Next;
          Inc(XX);
        end;
        ADOQuery2.Next;
      end;
               // Обьединяем ячейки
      XL.ActiveWorkBook.WorkSheets[4].Range['F' + IntToStr(YY + 4) + ':' + 'F' + IntToStr(XX + 5)].Merge;
      XL.ActiveWorkBook.WorkSheets[4].Range['F' + IntToStr(YY + 4) + ':' + 'F' + IntToStr(XX + 5)].Font.Size := 36;
      XL.ActiveWorkBook.WorkSheets[4].Cells[XX + 6, 1] := '--------------------------------------------------------------------------------------------' + '--------------------------------------------------------------------------------------------';
      Inc(XX, 6);
      YY := XX;
      XL.ActiveWorkBook.Sheets.Item[3].Activate;
      XL.ActiveWorkBook.WorkSheets[3].Cells[2, 6] := Dat1;
      try
        XL.ActiveWorkBook.Worksheets[3].Range['A' + IntToStr(j + 6) + ':I' + IntToStr(j + 6)].Select;
        XL.Selection.Copy;
        XL.ActiveWorkBook.Worksheets[3].Range['A' + IntToStr(j + 7)].Select;
        XL.ActiveWorkBook.Worksheets[3].Paste;
      except
        MessageDlg('2!' + IntToStr(j + 7), mtError, [mbOk], 0);
      end;
      XL.ActiveWorkBook.WorkSheets[3].Cells[j + 6, 1] := StrNom;
      XL.ActiveWorkBook.WorkSheets[3].Cells[j + 6, 2] := Dat3;
      XL.ActiveWorkBook.WorkSheets[3].Cells[j + 6, 3] := Zak;
      XL.ActiveWorkBook.WorkSheets[3].Cells[j + 6, 4] := Kol_Zap_S;
      XL.ActiveWorkBook.WorkSheets[3].Cells[j + 6, 5] := Izdel;
      XL.ActiveWorkBook.WorkSheets[3].Cells[j + 6, 6] := SBor;
      XL.ActiveWorkBook.WorkSheets[3].Cells[j + 6, 7] := K_Sbor;
         // XL.ActiveWorkBook.WorkSheets[3].Cells[ j+6, 8] :=Idgp;
      XL.ActiveWorkBook.WorkSheets[3].Cells[j + 6, 9] := IntToStr(j + 1);

      ADOQuery1.Next;
    end;

    if ADOQuery1.RecordCount > 38 then
    begin
      XL.ActiveWorkBook.WorkSheets[3].PageSetup.FitToPagesTall := 2; // 2 Страницы ПО ВЫСОТЕ
      XL.ActiveWorkBook.WorkSheets[3].PageSetup.PrintTitleRows := '$' + IntToStr(1) + ':$' + IntToStr(5); //6 7
    end;

    XL.ActiveWorkBook.Sheets.Item[4].Activate;
    XL.ActiveWindow.View := 2;   //2=xlPageBreakPreview
    YY := XL.ActiveWorkBook.WorkSheets[4].HPageBreaks.Count;
    if YY <> 0 then
    begin
      for I := 1 to YY do
      begin

        XX := XL.ActiveWorkBook.WorkSheets[4].HPageBreaks.Item[I].Location.Row;

        for j := XX downto 1 do
        begin
          SSS := XL.ActiveWorkBook.WorkSheets[4].Cells[j, 1];
          Res := Pos('--', SSS);
          if Res <> 0 then
          begin

            XL.ActiveWorkBook.WorkSheets[4].HPageBreaks.Item[I].Location := XL.ActiveWorkBook.WorkSheets[4].Range['A' + IntToStr(j + 1) + ':A' + IntToStr(j + 1)];
            Break;
          end;
        end;
      end;
    end;
    XL.ActiveWindow.View := 1;
  end;

end;
 // function GetActivePos( var AVTable : Variant; const AFieldsList : TStrings ) : Integer;

procedure TForm1.Button60Click(Sender: TObject);
var
  I, Res, x, y, g, h: Integer;
  Izdel, Nam, IDGP, Order, SB, SV: string;
  NC_Sbor: Double;
  AVTable, XL, XL2: Variant;
  AFieldsList: TStrings;
begin
{AFieldsList := TStringList.Create();
ADOQuery1.Close;
    ADOQuery1.SQL.Clear;
    ADOQuery1.SQL.Text :='Select * from Запуск';
    ADOQuery1.Active := true;
    AVTable := ADOQuery1.Recordset.GetRows( -1, 1, EmptyParam );
    for I := 0 to ADOQuery1.FieldCount - 1 do
            Memo2.Lines.Add( ADOQuery1.Fields[ I ].FieldName );
    SB:= ExtractFilePath(Application.ExeName)+'234.dbf';
    ADOConnection7.Connected;
    ADOQuery5.Close;
    ADOQuery5.SQL.Clear;

    SV:= Edit8.Text;// '225004_М99.577092.225004 ТНЗ_tnz.dbf';
    ADOQuery5.sql.Text:=('Select * From '+SV);
    ADOQuery5.Open;
    for I := 0 to ADOQuery5.RecordCount-1 do
    Begin
      Memo2.Lines.Add(ADOQuery5.FieldByName('1').AsString);
      ADOQuery5.Next;
    End;   }
   {   cmd1.ConnectionString := 'Provider=VFPOLEDB.1;Data Source=D:\;Password="";Collating Sequence=RUSSIAN';
  cmd1.CommandText := 'CREATE DBF Test.dbf codepage=866 (FILIAL N(7,0) null, DATE D, VAL Ca(3), WDT T)';
  cmd1.Execute;
  cmd1.CommandText := 'INSERT INTO Test.dbf (FILIAL, VAL) VALUES (null, ''fff'')';
  cmd1.Execute; Provider=ADsDSOObject;Encrypt Password=False;Integrated Security=SSPI;
Provider=ADsDSOObject;Encrypt Password=False;Integrated Security=SSPI;
Data Source=1111.dbf;Location=D:\Source\Source(ПДМ);Mode=Read;Bind Flags=0;ADSI Flag=-2147483648  }
  XL := CreateOleObject('Excel.Application'); //
  XL.Application.EnableEvents := false;
  XL.Workbooks.Open('D:\Source\Source(ПДМ)\217460 В(3)-КСп(MS220) пожар_M99.567126.217460 ТНЗ_tnz.dbf');
  XL.Visible := True;
  XL.DisplayAlerts := False;
//
  XL2 := CreateOleObject('Excel.Application'); //
  XL2.Application.EnableEvents := false;
  XL2.Workbooks.Open('D:\Source\Source(ПДМ)\Шаблон1.xls');
  XL2.Visible := True;
  XL2.DisplayAlerts := False;
  //
  x := XL.ActiveSheet.UsedRange.Rows.Count;
      //y := XL.ActiveSheet.UsedRange.Columns.Count;
  y := 3;
  h := 2;
  g := 1;
  for I := 0 to x - 1 do
  begin
    Nam := XL.ActiveWorkBook.WorkSheets[1].Cells[y, 2];
    if Nam = '' then
      Nam := '.';
    XL2.ActiveWorkBook.WorkSheets[1].Cells[(g) * 2, h] := Nam;
    if g = 20 then
    begin
      Inc(h);
      Inc(h);
      g := 1;
    end;
    Inc(y);
    Inc(g);
  end;
 // XL.Application.ActiveWorkBook.SaveAs(Dir + '\Талон Замечаний\' + StrDat5 + '.xls');
  XL := UnAssigned;
  XL2 := UnAssigned;

end;

procedure TForm1.Button61Click(Sender: TObject);
var
  S, X: string;
  I, C, U, Y: Integer;
  StrDat1, StrDat2, Sbor1, Bet1, God, mes, Dir: string;
  XL2, Sheet1, Sheet2, Rang: Variant;
  TempTableQ: TADOQuery;
begin
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);

          //Создание временной таблицы
  TempTableQ := TADOQuery.Create(nil);
  ADOConnection4.Close;
  ADOConnection4.ConnectionString := MSSQL_CONN_STR_Glob;
  TempTableQ.Connection := ADOConnection4;
        //Добавить поле ТЕХНОЛОГ, если фалш то деталь не обработана
  TempTableQ.SQL.Text := 'CREATE TABLE #ClientToDBFL (Сборщик nvarchar(100),Подсборка1 nvarchar(100),СборЛопатка nvarchar(100),СборТяга nvarchar(100))';
  try
    TempTableQ.ExecSQL;
  except
    Memo2.Lines.Add('TempTableQ.ExecSQL;');
  end;
  {
  if not Form1.mkQueryUpdate(Form1.ADOQuery1,
                'UPDATE %s SET [%s]=%s,[%s]=%s,[%s]=%s,[%s]=%s WHERE ([Номер]=%s)',
                ['Запуск', 'Сборщик', #39 + ComboBox1.Text
                + #39,
                 'Подсборка1', #39 + CBB1.Text
                + #39,
                 'СборЛопатка', #39 + CBB2.Text
                + #39,
                 'СборТяга', #39 + CBB3.Text
                + #39,

                #39 + Label1.Caption + #39]) then
                Exit;

  if not Form1.mkQueryUpdate(Form1.ADOQuery1,
                'UPDATE %s SET [%s]=%s,[%s]=%s,[%s]=%s,[%s]=%s WHERE ([Номер]=%s)',
                ['ЗапускВозд', 'Сборщик', #39 + ComboBox1.Items[ComboBox1.ItemIndex]
                + #39,
                 'Подсборка1', #39 + CBB1.Text
                + #39,'СборЛопатка', #39 + CBB2.Text
                + #39,'СборТяга', #39 + CBB3.Text
                + #39, #39 + Label1.Caption + #39]) then
                Exit;}
  X := ' WHERE  (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL) ';
  Bet1 := '  AND ([Сборка Готовность]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ')';
  if not mkQuerySelect(ADOQuery2, 'Select Сборщик,Подсборка1,СборЛопатка,СборТяга from %s  ' + X + Bet1 +
  '  Group by Сборщик,Подсборка1,СборЛопатка,СборТяга', ['Запуск']) then
    exit;
  C := ADOQuery2.RecordCount;
  for I := 0 to ADOQuery2.RecordCount - 1 do
  begin
    Sbor1 := ADOQuery2.FieldByName('Сборщик').AsString;
    TempTableQ.SQL.Text := 'INSERT INTO #ClientToDBFL ' + '(Сборщик) Values (' + #39 + Sbor1 + #39 + ')';

    try
      TempTableQ.ExecSQL;
    except
      Memo2.Lines.Add('TempTableQ.ExecSQL1;');
    end;
    ADOQuery2.Next;
  end;
//
  if not mkQuerySelect(ADOQuery2, 'Select Сборщик from %s  ' + X + Bet1 + '  Group by Сборщик', ['ЗапускВозд']) then
    exit;
  C := ADOQuery2.RecordCount;
  for I := 0 to ADOQuery2.RecordCount - 1 do
  begin
    Sbor1 := ADOQuery2.FieldByName('Сборщик').AsString;
    TempTableQ.SQL.Text := 'INSERT INTO #ClientToDBFL ' + '(Сборщик) Values (' + #39 + Sbor1 + #39 + ')';

    try
      TempTableQ.ExecSQL;
    except
      Memo2.Lines.Add('TempTableQ.ExecSQL1;');
    end;
    ADOQuery2.Next;
  end;
  //
 // if not mkQuerySelect(TempTableQ, 'Select DISTINCT Сборщик from %s  ', [' #ClientToDBFL']) then
 //     exit;
  TempTableQ.SQL.Text := 'Select DISTINCT Сборщик from #ClientToDBFL ';

  try
    TempTableQ.Open;
  except
    Memo2.Lines.Add('TempTableQ.ExecSQL1;');
  end;

  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', Now);
  Dir := Form1.Put_KTO + '\CKlapana\Выработка\';
  CreateDir(Dir);

  Dir := Form1.Put_KTO + '\CKlapana\Выработка\' + God;
  CreateDir(Dir);
  XL2 := CreateOleObject('Excel.Application');
  CopyFile(PWideChar(Form1.Put_KTO + '\CKlapana\2013\123.xlsx'), PWideChar(Dir + '\' + mes + '.xlsx'), False);
  XL2.Workbooks.Open(Dir + '\' + mes + '.xlsx');
  XL2.Application.EnableEvents := false;
  for I := 0 to TempTableQ.RecordCount - 1 do
  begin
    Sbor1 := TempTableQ.FieldByName('Сборщик').AsString;
    if not mkQuerySelect66(ADOQuery4, 'Select * from %s  ' + X + Bet1 + ' AND Сборщик=' + #39 + Sbor1 + #39, ['Запуск']) then
      exit;
    Sheet2 := XL2.WorkSheets.Add;
    Sheet2.Activate;
    Sheet2.Name := TempTableQ.FieldByName('Сборщик').AsString;
    Rang := Sheet2.Range['A1', emptyparam];
    Rang.value := Sbor1;
    U := 1;
    for Y := 0 to ADOQuery4.RecordCount - 1 do
    begin
      Rang := Sheet2.Range['A' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Номер').AsString;

      Rang := Sheet2.Range['B' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Дата').AsString;

      Rang := Sheet2.Range['C' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Заказ').AsString;

      Rang := Sheet2.Range['D' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Изделие').AsString;

      Rang := Sheet2.Range['E' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Кол во запущенных').AsString;

      Rang := Sheet2.Range['F' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Сборка Готовность').AsString;

      Rang := Sheet2.Range['G' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Н\ч Сборка Клапана').AsString;
      Rang := Sheet2.Range['H' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Подсборка1').AsString;

      Rang := Sheet2.Range['I' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Н\ч Сварка').AsString;
      Rang := Sheet2.Range['J' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Сборщик').AsString;

      Rang := Sheet2.Range['K' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Сборка тяг').AsString;
      Rang := Sheet2.Range['L' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('СборТяга').AsString;

      Rang := Sheet2.Range['M' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Сборка лопаток').AsString;
      Rang := Sheet2.Range['N' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('СборЛопатка').AsString;

      Rang := Sheet2.Range['O' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('СборкаРеш').AsString;
      Rang := Sheet2.Range['P' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('СборРеш').AsString;

      Rang := Sheet2.Range['Q' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Сборка засова').AsString;
      Rang := Sheet2.Range['R' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Электро').AsString;

      Rang := Sheet2.Range['S' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('ОТК').AsString;

      Inc(U);
      ADOQuery4.Next;
    end;
    //
    if not mkQuerySelect66(ADOQuery4, 'Select * from %s  ' + X + Bet1 + ' AND Сборщик=' + #39 +
    Sbor1 + #39, ['ЗапускВозд']) then
      exit;

    Inc(U);
    for Y := 0 to ADOQuery4.RecordCount - 1 do
    begin
      Rang := Sheet2.Range['A' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Номер').AsString;

      Rang := Sheet2.Range['B' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Дата').AsString;

      Rang := Sheet2.Range['C' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Заказ').AsString;

      Rang := Sheet2.Range['D' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Изделие').AsString;

      Rang := Sheet2.Range['E' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Кол во запущенных').AsString;

      Rang := Sheet2.Range['F' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Сборка Готовность').AsString;

      Rang := Sheet2.Range['G' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Н\ч Сборка Клапана').AsString;
      Rang := Sheet2.Range['H' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Подсборка1').AsString;

      Rang := Sheet2.Range['I' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Н\ч Сварка').AsString;
      Rang := Sheet2.Range['J' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Сборщик').AsString;

      Rang := Sheet2.Range['K' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Сборка тяг').AsString;
      Rang := Sheet2.Range['L' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('СборТяга').AsString;

      Rang := Sheet2.Range['M' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Сборка лопаток').AsString;
      Rang := Sheet2.Range['N' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('СборЛопатка').AsString;

      Rang := Sheet2.Range['O' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('СборкаРеш').AsString;
      Rang := Sheet2.Range['P' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Расключение').AsString;

      Rang := Sheet2.Range['Q' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Обварка').AsString;
      Rang := Sheet2.Range['R' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Электро').AsString;

      Rang := Sheet2.Range['S' + IntToStr(U + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('ОТК').AsString;

      Inc(U);
      ADOQuery4.Next;
    end;
    //
    Rang := Sheet2.Range['A1', 'S' + IntToStr(U + 2)];
    Rang.Borders.LineStyle := 1;

    Rang := Sheet2.Range['B1', 'S' + IntToStr(U + 2)];
    Rang.EntireColumn.AutoFit;

    Rang := Sheet2.Range['E' + IntToStr(U + 3), emptyparam];
    Rang.value := '=SUM(E2:E' + IntToStr(U + 2) + ')';

    Rang := Sheet2.Range['G' + IntToStr(U + 3), emptyparam];
    Rang.value := '=SUM(G2:G' + IntToStr(U + 2) + ')';

    Rang := Sheet2.Range['I' + IntToStr(U + 3), emptyparam];
    Rang.value := '=SUM(I2:I' + IntToStr(U + 2) + ')';

    Rang := Sheet2.Range['K' + IntToStr(U + 3), emptyparam];
    Rang.value := '=SUM(K2:K' + IntToStr(U + 2) + ')';

    Rang := Sheet2.Range['M' + IntToStr(U + 3), emptyparam];
    Rang.value := '=SUM(M2:M' + IntToStr(U + 2) + ')';

    Rang := Sheet2.Range['O' + IntToStr(U + 3), emptyparam];
    Rang.value := '=SUM(O2:O' + IntToStr(U + 2) + ')';

    Rang := Sheet2.Range['P' + IntToStr(U + 3), emptyparam];
    Rang.value := '=SUM(P2:P' + IntToStr(U + 2) + ')';

    Rang := Sheet2.Range['Q' + IntToStr(U + 3), emptyparam];
    Rang.value := '=SUM(Q2:Q' + IntToStr(U + 2) + ')';

    Rang := Sheet2.Range['R' + IntToStr(U + 3), emptyparam];
    Rang.value := '=SUM(R2:R' + IntToStr(U + 2) + ')';

    Rang := Sheet2.Range['A' + IntToStr(1), 'S2'];
    Rang.Font.Bold := True;

    Rang := Sheet2.Range['A' + IntToStr(2), emptyparam];
    Rang.value := 'Номер';
    Rang := Sheet2.Range['B' + IntToStr(2), emptyparam];
    Rang.value := 'Дата';
    Rang := Sheet2.Range['C' + IntToStr(2), emptyparam];
    Rang.value := 'Заказ';
    Rang := Sheet2.Range['D' + IntToStr(2), emptyparam];
    Rang.value := 'Изделие';
    Rang := Sheet2.Range['E' + IntToStr(2), emptyparam];
    Rang.value := 'Кол во';
    Rang := Sheet2.Range['F' + IntToStr(2), emptyparam];
    Rang.value := 'Сборка Готовность';

    Rang := Sheet2.Range['G' + IntToStr(2), emptyparam];
    Rang.value := '1я сборка';
    Rang := Sheet2.Range['H' + IntToStr(2), emptyparam];
    Rang.value := 'Подсборка1';

    Rang := Sheet2.Range['I' + IntToStr(2), emptyparam];
    Rang.value := '2я сборка';
    Rang := Sheet2.Range['J' + IntToStr(2), emptyparam];
    Rang.value := 'Сборщик';

    Rang := Sheet2.Range['K' + IntToStr(2), emptyparam];
    Rang.value := 'Сборка тяг';
    Rang := Sheet2.Range['L' + IntToStr(2), emptyparam];
    Rang.value := 'СборТяга';

    Rang := Sheet2.Range['M' + IntToStr(2), emptyparam];
    Rang.value := 'Сборка лопаток';
    Rang := Sheet2.Range['N' + IntToStr(2), emptyparam];
    Rang.value := 'СборЛопатка';

    Rang := Sheet2.Range['O' + IntToStr(2), emptyparam];
    Rang.value := 'СборкаРеш';
    Rang := Sheet2.Range['P' + IntToStr(2), emptyparam];
    Rang.value := 'Расключение';

    Rang := Sheet2.Range['Q' + IntToStr(2), emptyparam];
    Rang.value := 'Обварка\Сборка засова';
    Rang := Sheet2.Range['R' + IntToStr(2), emptyparam];
    Rang.value := 'Электро';




    Rang := Sheet2.Range['S' + IntToStr(2), emptyparam];
    Rang.value := 'ОТК';
    TempTableQ.Next;
  end;
  XL2.Visible := True;
  XL2 := UnAssigned;
  if U <> 0 then
  begin
    Label2.Caption := 'АХРЕНЕТЬ';
    ADOQuery1.DataSource
  end;
end;

procedure TForm1.Button62Click(Sender: TObject);
var
  S, X1, Zak: string;
  I, C, U, Y, R, X: Integer;
  StrDat1, StrDat2, Sbor1, Bet1, God, mes, Dir, kol, bz, Izd, Stan, inj, progr: string;
  XL2, Sheet1, Sheet2, Rang: Variant;
begin
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
                                   //      ,SUM(КолКлап) AS kk
  X1 := ' WHERE   (Заказ Like ' + #39 + '%ГОЗ' + #39 + ') ';
  Bet1 := '  AND ([Заготовка]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ')';
  if not mkQuerySelect(ADOQuery2, 'Select Заказ,Изделие from %s %s ' + Bet1 + '  Group by Заказ,Изделие', ['Заготовка', X1]) then
    exit;
     { if not mkQuerySelect(ADOQuery2, 'Select Сборщик from %s  ' + X +  Bet1+'  Group by Сборщик' ,['Запуск']) then
      exit; if not mkQuerySelect(ADOQuery2, 'SELECT Заказ,Станок, SUM(НЧ) AS k,Заготовка,Изделие,БЗ from %s WHERE  (Заказ = '+#39+Zak+#39+')'+
        ' AND ((Станок='+#39+'Гибка'+#39+'))'+ Bet1+
        ' Group by Заказ,Станок, Заготовка,Изделие,БЗ' ,['Заготовка']) then
      exit; }
  C := ADOQuery2.RecordCount;
  Clear_StringGrid(SG211);
  Clear_StringGrid(SG212);
  SG211.RowCount := ADOQuery2.RecordCount + 1;
  for I := 0 to ADOQuery2.RecordCount - 1 do
  begin
    SG211.Cells[0, I] := ADOQuery2.FieldByName('Заказ').AsString;
    SG211.Cells[1, I] := ADOQuery2.FieldByName('Изделие').AsString;
        //SG211.Cells[2,I] :=ADOQuery2.FieldByName('kk').AsString ;
    ADOQuery2.Next;
  end;
      //

  for I := 1 to SG211.RowCount do
  begin
    Zak := SG211.Cells[0, I];   // OR (Станок='Trumph') OR (Станок='SalvРубка') OR (Станок LIKE '%Пила%') OR (Станок='Сварка') OR (Станок='Покраска'

    Izd := SG211.Cells[1, I];
    if not mkQuerySelect66(ADOQuery4, 'SELECT КолКлап from %s WHERE  (Заказ = ' + #39 + Zak + #39 + ') AND (Изделие = ' + #39 + Izd + #39 + ')', ['Заготовка']) then
      exit;

    SG211.Cells[2, I] := ADOQuery4.FieldByName('КолКлап').AsString;
  end;
  God := FormatDateTime('yyyy', Now);
  mes := FormatDateTime('mmmm', DateTimePicker1.Date);
  Dir := Form1.Put_KTO + '\CKlapana\Выработка\';
  CreateDir(Dir);

  Dir := Form1.Put_KTO + '\CKlapana\Выработка\' + God;
  CreateDir(Dir);
  XL2 := CreateOleObject('Excel.Application');
  CopyFile(PWideChar(Form1.Put_KTO + '\CKlapana2\2013\Гоз_Обр.xlsx'), PWideChar(Dir + '\' + mes + '.xlsx'), False);
  XL2.Workbooks.Open(Dir + '\' + mes + '.xlsx');
  XL2.Application.EnableEvents := false;
  Sheet2 := XL2.ActiveWorkBook.WorkSheets[1]; //XL2.WorkSheets.Add;
  Sheet2.Activate;
  SG212.ColCount := 35;
  X1 := ' OR (Станок LIKE ' + #39 + '%Пила%' + #39 + ')';
  for I := 1 to SG211.RowCount do
  begin
    Zak := SG211.Cells[0, I];   // OR (Станок='Trumph') OR (Станок='SalvРубка') OR (Станок LIKE '%Пила%') OR (Станок='Сварка') OR (Станок='Покраска'
    kol := SG211.Cells[2, I];
    Izd := SG211.Cells[1, I];

    Sheet2.Range['A' + IntToStr(3), 'AB' + IntToStr(I + 2)].Borders.LineStyle := 1;
    Sheet2.Range['A' + IntToStr(3), 'AB' + IntToStr(I + 2)].HorizontalAlignment := 3;
    if not mkQuerySelect66(ADOQuery4, 'SELECT Заказ,Станок, SUM(НЧ) AS k,Заготовка,Изделие,БЗ from %s WHERE  (Заказ = ' + #39 + Zak + #39 + ') AND (Изделие = ' + #39 + Izd + #39 + ')' + ' AND ((Станок=' + #39 + 'Гибка' + #39 + ') OR (Станок=' + #39 + 'Trumph' + #39 + ') OR ' + ' (Станок=' + #39 + 'SalvРубка' + #39 + ')%s OR' + ' (Станок=' + #39 + 'Сварка' + #39 + ') OR (Станок=' + #39 + 'Покраска' + #39 + '))' + ' Group by Заказ,Станок, Заготовка,Изделие,БЗ', ['Заготовка', X1]) then
      exit;
    SG212.RowCount := SG212.RowCount + ADOQuery4.RecordCount + 1;
    SG212.Cells[1, I] := Zak;
    SG212.Cells[3, I] := Izd;
    SG212.Cells[4, I] := kol;
    Rang := Sheet2.Range['A' + IntToStr(I + 2), emptyparam];
    Rang.value := Zak;

    Rang := Sheet2.Range['C' + IntToStr(I + 2), emptyparam];
    Rang.value := Izd;

    Rang := Sheet2.Range['D' + IntToStr(I + 2), emptyparam];
    Rang.value := kol;

    for U := 0 to ADOQuery4.RecordCount - 1 do
    begin

      SG212.Cells[2, I] := ADOQuery4.FieldByName('БЗ').AsString;
      Rang := Sheet2.Range['B' + IntToStr(I + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('БЗ').AsString;
      Stan := ADOQuery4.FieldByName('Станок').AsString;
      R := Pos('SalvРубка', Stan);
      if R <> 0 then
      begin
        SG212.Cells[12, I] := ADOQuery4.FieldByName('k').AsString;
        SG212.Cells[13, I] := ADOQuery4.FieldByName('Заготовка').AsString;
        Rang := Sheet2.Range['L' + IntToStr(I + 2), emptyparam];
        Rang.value := ADOQuery4.FieldByName('k').AsString;
        Rang := Sheet2.Range['M' + IntToStr(I + 2), emptyparam];
        Rang.value := ADOQuery4.FieldByName('Заготовка').AsString;
      end;
            //
      R := Pos('Trumph', Stan);
      if R <> 0 then
      begin
        SG212.Cells[15, I] := ADOQuery4.FieldByName('k').AsString;
        SG212.Cells[16, I] := ADOQuery4.FieldByName('Заготовка').AsString;
        Rang := Sheet2.Range['O' + IntToStr(I + 2), emptyparam];
        Rang.value := ADOQuery4.FieldByName('k').AsString;
        Rang := Sheet2.Range['P' + IntToStr(I + 2), emptyparam];
        Rang.value := ADOQuery4.FieldByName('Заготовка').AsString;
      end;
            //
      R := Pos('Гибка', Stan);
      if R <> 0 then
      begin
        SG212.Cells[18, I] := ADOQuery4.FieldByName('k').AsString;
        SG212.Cells[19, I] := ADOQuery4.FieldByName('Заготовка').AsString;
        Rang := Sheet2.Range['R' + IntToStr(I + 2), emptyparam];
        Rang.value := ADOQuery4.FieldByName('k').AsString;
        Rang := Sheet2.Range['S' + IntToStr(I + 2), emptyparam];
        Rang.value := ADOQuery4.FieldByName('Заготовка').AsString;
      end;
            //
      R := Pos('Пила', Stan);
      if R <> 0 then
      begin
        SG212.Cells[21, I] := ADOQuery4.FieldByName('k').AsString;
        SG212.Cells[22, I] := ADOQuery4.FieldByName('Заготовка').AsString;
        Rang := Sheet2.Range['U' + IntToStr(I + 2), emptyparam];
        Rang.value := ADOQuery4.FieldByName('k').AsString;
        Rang := Sheet2.Range['V' + IntToStr(I + 2), emptyparam];
        Rang.value := ADOQuery4.FieldByName('Заготовка').AsString;
      end;
            //
      R := Pos('Сварка', Stan);
      if R <> 0 then
      begin
        SG212.Cells[24, I] := ADOQuery4.FieldByName('k').AsString;
        SG212.Cells[25, I] := ADOQuery4.FieldByName('Заготовка').AsString;
        Rang := Sheet2.Range['X' + IntToStr(I + 2), emptyparam];
        Rang.value := ADOQuery4.FieldByName('k').AsString;
        Rang := Sheet2.Range['Y' + IntToStr(I + 2), emptyparam];
        Rang.value := ADOQuery4.FieldByName('Заготовка').AsString;
      end;
            //
      R := Pos('Покраска', Stan);
      if R <> 0 then
      begin
        SG212.Cells[27, I] := ADOQuery4.FieldByName('k').AsString;
        SG212.Cells[28, I] := ADOQuery4.FieldByName('Заготовка').AsString;
        Rang := Sheet2.Range['AA' + IntToStr(I + 2), emptyparam];
        Rang.value := ADOQuery4.FieldByName('k').AsString;
        Rang := Sheet2.Range['AB' + IntToStr(I + 2), emptyparam];
        Rang.value := ADOQuery4.FieldByName('Заготовка').AsString;
              //Sheet2.Cells[IntToStr(I+2),27]:=ADOQuery4.FieldByName('k').AsString;
              //Sheet2.Cells[IntToStr(I+2),28]:=ADOQuery4.FieldByName('Заготовка').AsString;
      end;
      ADOQuery4.Next;
    end;
  end;
  Rang := Sheet2.Range['D' + IntToStr(I + 2), emptyparam];
  Rang.value := '=SUM(D3:D' + IntToStr(I + 1) + ')';

  Rang := Sheet2.Range['L' + IntToStr(I + 2), emptyparam];
  Rang.value := '=SUM(L3:L' + IntToStr(I + 1) + ')';

  Rang := Sheet2.Range['O' + IntToStr(I + 2), emptyparam];
  Rang.value := '=SUM(O3:O' + IntToStr(I + 1) + ')';

  Rang := Sheet2.Range['R' + IntToStr(I + 2), emptyparam];
  Rang.value := '=SUM(R3:R' + IntToStr(I + 1) + ')';

  Rang := Sheet2.Range['U' + IntToStr(I + 2), emptyparam];
  Rang.value := '=SUM(U3:U' + IntToStr(I + 1) + ')';

  Rang := Sheet2.Range['X' + IntToStr(I + 2), emptyparam];
  Rang.value := '=SUM(X3:X' + IntToStr(I + 1) + ')';

  Rang := Sheet2.Range['AA' + IntToStr(I + 2), emptyparam];
  Rang.value := '=SUM(AA3:AA' + IntToStr(I + 1) + ')';

      //
  X := 1;
  Sheet2 := XL2.ActiveWorkBook.WorkSheets[2]; //XL2.WorkSheets.Add;
  Sheet2.Activate;
  for I := 1 to SG211.RowCount do
  begin
    Zak := SG211.Cells[0, I];   // OR (Станок='Trumph') OR (Станок='SalvРубка') OR (Станок LIKE '%Пила%') OR (Станок='Сварка') OR (Станок='Покраска'
    kol := SG211.Cells[2, I];
    Izd := SG211.Cells[1, I];
    if not mkQuerySelect66(ADOQuery4, 'SELECT * from %s WHERE  (Заказ = ' + #39 + Zak + #39 + ') AND (Изделие = ' + #39 + Izd + #39 + ') AND (not [Сборка Готовность] is NULL)', ['Запуск']) then
      exit;
    for U := 0 to ADOQuery4.RecordCount - 1 do
    begin

      Rang := Sheet2.Range['A' + IntToStr(X + 2), emptyparam];
      Rang.value := Zak;

      Rang := Sheet2.Range['B' + IntToStr(X + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('БЗ').AsString;

      Rang := Sheet2.Range['C' + IntToStr(X + 2), emptyparam];
      Rang.value := Izd;

      Rang := Sheet2.Range['D' + IntToStr(X + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Кол во').AsString;

      Sheet2.Cells[IntToStr(X + 2), 5] := ADOQuery4.FieldByName('Сборщик').AsString;
      Sheet2.Cells[IntToStr(X + 2), 6] := ADOQuery4.FieldByName('Заготовка Готовность').AsString;
      Sheet2.Cells[IntToStr(X + 2), 7] := ADOQuery4.FieldByName('Сборка лопаток').AsString;
      Sheet2.Cells[IntToStr(X + 2), 8] := ADOQuery4.FieldByName('Сборка тяг').AsString;
      Sheet2.Cells[IntToStr(X + 2), 9] := ADOQuery4.FieldByName('Н\ч Сборка Клапана').AsString;
      Sheet2.Cells[IntToStr(X + 2), 10] := ADOQuery4.FieldByName('Н\ч Сварка').AsString;
      Sheet2.Cells[IntToStr(X + 2), 11] := ADOQuery4.FieldByName('ОТК').AsString;
      Sheet2.Cells[IntToStr(X + 2), 12] := ADOQuery4.FieldByName('ОТКФам').AsString;
      Inc(X);
      Sheet2.Range['A' + IntToStr(X - 1), 'L' + IntToStr(X + 2)].Borders.LineStyle := 1;
      Sheet2.Range['A' + IntToStr(X - 1), 'L' + IntToStr(X + 2)].HorizontalAlignment := 3;
      ADOQuery4.Next;
    end;
  end;
  Rang := Sheet2.Range['D' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(D3:D' + IntToStr(X + 1) + ')';

  Rang := Sheet2.Range['G' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(G3:G' + IntToStr(X + 1) + ')';

  Rang := Sheet2.Range['H' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(H3:H' + IntToStr(X + 1) + ')';

  Rang := Sheet2.Range['I' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(I3:I' + IntToStr(X + 1) + ')';

  Rang := Sheet2.Range['J' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(J3:J' + IntToStr(X + 1) + ')';
  Rang := Sheet2.Range['K' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(G' + IntToStr(X + 2) + ':J' + IntToStr(X + 2) + ')';
      //
  X := 1;
  Sheet2 := XL2.ActiveWorkBook.WorkSheets[3]; //XL2.WorkSheets.Add;
  Sheet2.Activate;
  for I := 1 to SG211.RowCount do
  begin
    Zak := SG211.Cells[0, I];   // OR (Станок='Trumph') OR (Станок='SalvРубка') OR (Станок LIKE '%Пила%') OR (Станок='Сварка') OR (Станок='Покраска'
    kol := SG211.Cells[2, I];
    Izd := SG211.Cells[1, I];
    if not mkQuerySelect66(ADOQuery4, 'SELECT * from %s WHERE  (Заказ = ' + #39 + Zak + #39 + ') AND (Изделие = ' + #39 + Izd + #39 + ') AND (not [Сборка Готовность] is NULL)', ['ЗапускВозд']) then
      exit;
    for U := 0 to ADOQuery4.RecordCount - 1 do
    begin

      Rang := Sheet2.Range['A' + IntToStr(X + 2), emptyparam];
      Rang.value := Zak;

      Rang := Sheet2.Range['B' + IntToStr(X + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('БЗ').AsString;

      Rang := Sheet2.Range['C' + IntToStr(X + 2), emptyparam];
      Rang.value := Izd;

      Rang := Sheet2.Range['D' + IntToStr(X + 2), emptyparam];
      Rang.value := ADOQuery4.FieldByName('Кол во').AsString;

      Sheet2.Cells[IntToStr(X + 2), 5] := ADOQuery4.FieldByName('Сборщик').AsString;
      Sheet2.Cells[IntToStr(X + 2), 6] := ADOQuery4.FieldByName('Заготовка Готовность').AsString;
      Sheet2.Cells[IntToStr(X + 2), 7] := ADOQuery4.FieldByName('Сборка лопаток').AsString;
      Sheet2.Cells[IntToStr(X + 2), 8] := ADOQuery4.FieldByName('Сборка тяг').AsString;
      Sheet2.Cells[IntToStr(X + 2), 9] := ADOQuery4.FieldByName('Н\ч Сборка Клапана').AsString;
      Sheet2.Cells[IntToStr(X + 2), 10] := ADOQuery4.FieldByName('Н\ч Сварка').AsString;
      Sheet2.Cells[IntToStr(X + 2), 11] := ADOQuery4.FieldByName('ОТК').AsString;
      Sheet2.Cells[IntToStr(X + 2), 12] := ADOQuery4.FieldByName('ОТКФам').AsString;
      Inc(X);
      Sheet2.Range['A' + IntToStr(X - 1), 'L' + IntToStr(X + 2)].Borders.LineStyle := 1;
      Sheet2.Range['A' + IntToStr(X - 1), 'L' + IntToStr(X + 2)].HorizontalAlignment := 3;

      ADOQuery4.Next;
    end;
  end;
  Rang := Sheet2.Range['D' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(D3:D' + IntToStr(X + 1) + ')';

  Rang := Sheet2.Range['G' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(G3:G' + IntToStr(X + 1) + ')';

  Rang := Sheet2.Range['H' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(H3:H' + IntToStr(X + 1) + ')';

  Rang := Sheet2.Range['I' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(I3:I' + IntToStr(X + 1) + ')';

  Rang := Sheet2.Range['J' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(J3:J' + IntToStr(X + 1) + ')';

  Rang := Sheet2.Range['K' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(G' + IntToStr(X + 2) + ':J' + IntToStr(X + 2) + ')';
      //ADOQuery1.Close;
  X1 := ' AND   (Заказ Like ' + #39 + '%ГОЗ' + #39 + ') ';
  ADOConnection1.Connected := False;
  ADOConnection1.ConnectionString := 'Provider=SQLOLEDB.1;Packet Size = 4096;Password=111;Persist Security Info=True;User Id=testuser;' + 'Initial Catalog=MIASSCEH;Data Source=MSS-APP3;';
  ADOConnection1.Connected := True;
  ADOQuery1.SQL.Clear;
  ADOQuery1.SQL.Add('Select * from КЦ Where ([Отмена]  IS NULL) ' + X1 + ' AND ([Дата изготовления] BETWEEN  ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ')');
  ADOQuery1.Open;
  Sheet2 := XL2.ActiveWorkBook.WorkSheets[4]; //XL2.WorkSheets.Add;
  Sheet2.Activate;
  for I := 0 to ADOQuery1.RecordCount - 1 do
  begin
    Sheet2.Range['A' + IntToStr(I + 2), 'I' + IntToStr(I + 2)].Borders.LineStyle := 1;
    Sheet2.Range['A' + IntToStr(I + 2), 'I' + IntToStr(I + 2)].HorizontalAlignment := 3;

    Sheet2.Cells[IntToStr(I + 2), 1] := ADOQuery1.FieldByName('Заказ').AsString;
    Sheet2.Cells[IntToStr(I + 2), 2] := ADOQuery1.FieldByName('№ бланк заказа').AsString;
    Sheet2.Cells[IntToStr(I + 2), 3] := ADOQuery1.FieldByName('дата задания').AsString;
    Sheet2.Cells[IntToStr(I + 2), 4] := ADOQuery1.FieldByName('Дата изготовления').AsString;
    Sheet2.Cells[IntToStr(I + 2), 5] := ADOQuery1.FieldByName('Сборщик').AsString;
    Sheet2.Cells[IntToStr(I + 2), 6] := '1';
    Sheet2.Cells[IntToStr(I + 2), 7] := ADOQuery1.FieldByName('Трудоемкость').AsString;
    ADOQuery1.Next;
          // S2.Cells[6,I+1]:=ADOQuery1.FieldByName('').AsString;
  end;
  Rang := Sheet2.Range['G' + IntToStr(I + 2), emptyparam];
  Rang.value := '=SUM(G3:G' + IntToStr(I + 1) + ')';
      //ADOQuery1.Close;
  Sheet2 := XL2.ActiveWorkBook.WorkSheets[5]; //XL2.WorkSheets.Add;
  Sheet2.Activate;
  X1 := ' AND   (Заказ Like ' + #39 + '%ГОЗ' + #39 + ') ';
  ADOConnection1.Connected := False;
  ADOConnection1.ConnectionString := 'Provider=SQLOLEDB.1;Packet Size = 4096;Password=111;' + 'Persist Security Info=True;User Id=testuser;Initial Catalog=VezaMiassAvto;Data Source=MSS-APP3;';
  ADOConnection1.Connected := True;
  ADOQuery1.Close;
  ADOQuery1.SQL.Clear;

  ADOQuery1.SQL.Add('Select * From ТехЗадания ' + 'INNER JOIN ТехЗаданияДоп ON ТехЗадания.[№ТехЗадания] = ТехЗаданияДоп.[№ТехЗадания]' + ' WHERE (ТехЗаданияДоп.Отмена=' + #39 + 'False' + #39 + ') AND ([№Счета] Like ' + #39 + '%ГОЗ' + #39 + ')  AND ([FrNShema] BETWEEN  ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ')');
  ADOQuery1.Open;
  X := 0;
  Sheet2.Cells[1, 1] := 'Заказ';
  Sheet2.Cells[1, 2] := 'БЗ';
  Sheet2.Cells[1, 3] := 'дата задания';
  Sheet2.Cells[1, 4] := 'Дата изготовления';
  Sheet2.Cells[1, 5] := 'Кол-во';
  for I := 0 to ADOQuery1.RecordCount - 1 do
  begin
    Sheet2.Range['A' + IntToStr(I + 2), 'I' + IntToStr(I + 2)].Borders.LineStyle := 1;
    Sheet2.Range['A' + IntToStr(I + 2), 'I' + IntToStr(I + 2)].HorizontalAlignment := 3;

    Sheet2.Cells[IntToStr(I + 2), 1] := ADOQuery1.FieldByName('№Счета').AsString;
    Sheet2.Cells[IntToStr(I + 2), 2] := ADOQuery1.FieldByName('№Б/з').AsString;
    Sheet2.Cells[IntToStr(I + 2), 3] := ADOQuery1.FieldByName('Телефон').AsString;
    Sheet2.Cells[IntToStr(I + 2), 4] := ADOQuery1.FieldByName('FrNShema').AsString;
    Sheet2.Cells[IntToStr(I + 2), 5] := '1';
    Inc(X);
    ADOQuery1.Next;
  end;
  Rang := Sheet2.Range['E' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(E3:E' + IntToStr(X + 1) + ')';
  Inc(X);
  Inc(X);
  Sheet2.Cells[IntToStr(X + 2), 1] := 'Заказ';
  Sheet2.Cells[IntToStr(X + 2), 2] := 'БЗ';
  Sheet2.Cells[IntToStr(X + 2), 3] := 'Инженер';
  Sheet2.Cells[IntToStr(X + 2), 4] := 'Дата изготовления';
  Sheet2.Cells[IntToStr(X + 2), 5] := 'НЧ';
  Sheet2.Cells[IntToStr(X + 2), 6] := 'Руб';
  Inc(X);
  ADOQuery1.Close;
  ADOQuery1.SQL.Clear;
  ADOQuery1.SQL.Add('Select * From ТехЗадания ' + 'INNER JOIN ТехЗаданияДоп ON ТехЗадания.[№ТехЗадания] = ТехЗаданияДоп.[№ТехЗадания]' + ' WHERE (ТехЗаданияДоп.Отмена=' + #39 + 'False' + #39 + ') AND ([№Счета] Like ' + #39 + '%ГОЗ' + #39 + ')  AND ([ИнженерКон] BETWEEN  ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ')');
  ADOQuery1.Open;
  for I := 0 to ADOQuery1.RecordCount - 1 do
  begin
    Sheet2.Range['A' + IntToStr(X + 2), 'I' + IntToStr(X + 2)].Borders.LineStyle := 1;
    Sheet2.Range['A' + IntToStr(X + 2), 'I' + IntToStr(X + 2)].HorizontalAlignment := 3;

    Sheet2.Cells[IntToStr(X + 2), 1] := ADOQuery1.FieldByName('№Счета').AsString;
    Sheet2.Cells[IntToStr(X + 2), 2] := ADOQuery1.FieldByName('№Б/з').AsString;

    inj := ADOQuery1.FieldByName('Инженер').AsString;
    ADOConnection3.Connected := False;
    ADOConnection3.ConnectionString := 'Provider=SQLOLEDB.1;Packet Size = 4096;Password=111;' + 'Persist Security Info=True;User Id=testuser;Initial Catalog=VezaMiassAvto;Data Source=MSS-APP3;';
    ADOConnection3.Connected := True;
    ADOQuery4.Connection := ADOConnection3;
    ADOQuery4.SQL.Clear;
    ADOQuery4.SQL.Add('SELECT * from Сотрудники WHERE  (id = ' + #39 + inj + #39 + ')');
    ADOQuery4.Open;
    Sheet2.Cells[IntToStr(X + 2), 3] := ADOQuery4.FieldByName('Сотрудник').AsString;
    Sheet2.Cells[IntToStr(X + 2), 4] := ADOQuery1.FieldByName('ИнженерКон').AsString;
    Sheet2.Cells[IntToStr(X + 2), 5] := ADOQuery1.FieldByName('ИнженерСлож').AsString;
    Sheet2.Cells[IntToStr(X + 2), 6] := '=(15600*2/175)*E' + IntToStr(X + 2) + '*1.15';
    Inc(X);
    ADOQuery1.Next;
  end;
  Rang := Sheet2.Range['F' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(F3:F' + IntToStr(X + 1) + ')';

  Inc(X);
  Inc(X);
  Sheet2.Cells[IntToStr(X + 2), 1] := 'Заказ';
  Sheet2.Cells[IntToStr(X + 2), 2] := 'БЗ';
  Sheet2.Cells[IntToStr(X + 2), 3] := 'Программист';
  Sheet2.Cells[IntToStr(X + 2), 4] := 'Дата изготовления';
  Sheet2.Cells[IntToStr(X + 2), 5] := 'НЧ';
  Sheet2.Cells[IntToStr(X + 2), 6] := 'Руб';
  Inc(X);
  ADOQuery1.Close;
  ADOQuery1.SQL.Clear;
  ADOQuery1.SQL.Add('Select * From ТехЗадания ' + 'INNER JOIN ТехЗаданияДоп ON ТехЗадания.[№ТехЗадания] = ТехЗаданияДоп.[№ТехЗадания]' + ' WHERE (ТехЗаданияДоп.Отмена=' + #39 + 'False' + #39 + ') AND ([№Счета] Like ' + #39 + '%ГОЗ' + #39 + ')  AND ([ПрограмКон] BETWEEN  ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ')');
  ADOQuery1.Open;
  for I := 0 to ADOQuery1.RecordCount - 1 do
  begin
    Sheet2.Range['A' + IntToStr(X + 2), 'I' + IntToStr(X + 2)].Borders.LineStyle := 1;
    Sheet2.Range['A' + IntToStr(X + 2), 'I' + IntToStr(X + 2)].HorizontalAlignment := 3;

    Sheet2.Cells[IntToStr(X + 2), 1] := ADOQuery1.FieldByName('№Счета').AsString;
    Sheet2.Cells[IntToStr(X + 2), 2] := ADOQuery1.FieldByName('№Б/з').AsString;

    progr := ADOQuery1.FieldByName('Программист').AsString;
    ADOConnection3.Connected := False;
    ADOConnection3.ConnectionString := 'Provider=SQLOLEDB.1;Packet Size = 4096;Password=111;' + 'Persist Security Info=True;User Id=testuser;Initial Catalog=VezaMiassAvto;Data Source=MSS-APP3;';
    ADOConnection3.Connected := True;
    ADOQuery4.Connection := ADOConnection3;
    ADOQuery4.SQL.Clear;
    ADOQuery4.SQL.Add('SELECT * from Сотрудники WHERE  (id = ' + #39 + progr + #39 + ')');
    ADOQuery4.Open;
    Sheet2.Cells[IntToStr(X + 2), 3] := ADOQuery4.FieldByName('Сотрудник').AsString;

    Sheet2.Cells[IntToStr(X + 2), 4] := ADOQuery1.FieldByName('ПрограмКон').AsString;
    Sheet2.Cells[IntToStr(X + 2), 5] := ADOQuery1.FieldByName('ПрограмСлож').AsString;
    Sheet2.Cells[IntToStr(X + 2), 6] := '=(21200*2/175)*E' + IntToStr(X + 2) + '*1.15';

    Inc(X);
    ADOQuery1.Next;
  end;
  Rang := Sheet2.Range['F' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(F3:F' + IntToStr(X + 1) + ')';
  Inc(X);
  Inc(X);
  Sheet2.Cells[IntToStr(X + 2), 1] := 'Заказ';
  Sheet2.Cells[IntToStr(X + 2), 2] := 'БЗ';
  Sheet2.Cells[IntToStr(X + 2), 3] := 'Сборщик';
  Sheet2.Cells[IntToStr(X + 2), 4] := 'Дата изготовления';
  Sheet2.Cells[IntToStr(X + 2), 5] := 'НЧ';
  Sheet2.Cells[IntToStr(X + 2), 6] := 'Руб';

  Sheet2.Cells[IntToStr(X + 2), 7] := 'Монтажник';
  Sheet2.Cells[IntToStr(X + 2), 8] := 'Дата изготовления';
  Sheet2.Cells[IntToStr(X + 2), 9] := 'НЧ';
  Sheet2.Cells[IntToStr(X + 2), 10] := 'Руб';

  Inc(X);
  ADOQuery1.Close;
  ADOQuery1.SQL.Clear;
  ADOQuery1.SQL.Add('Select * From ТехЗадания ' + 'INNER JOIN ТехЗаданияДоп ON ТехЗадания.[№ТехЗадания] = ТехЗаданияДоп.[№ТехЗадания]' + ' WHERE (ТехЗаданияДоп.Отмена=' + #39 + 'False' + #39 + ') AND ([№Счета] Like ' + #39 + '%ГОЗ' + #39 + ')  AND ((ТехЗаданияДоп.МесяцСбор=' + #39 + mes + #39 + ') or (ТехЗаданияДоп.Месяц=' + #39 + mes + #39 + '))');
  ADOQuery1.Open;
  for I := 0 to ADOQuery1.RecordCount - 1 do
  begin
    Sheet2.Range['A' + IntToStr(X + 2), 'I' + IntToStr(X + 2)].Borders.LineStyle := 1;
    Sheet2.Range['A' + IntToStr(X + 2), 'I' + IntToStr(X + 2)].HorizontalAlignment := 3;

    Sheet2.Cells[IntToStr(X + 2), 1] := ADOQuery1.FieldByName('№Счета').AsString;
    Sheet2.Cells[IntToStr(X + 2), 2] := ADOQuery1.FieldByName('№Б/з').AsString;

    Sheet2.Cells[IntToStr(X + 2), 3] := ADOQuery1.FieldByName('Сборщик').AsString;
    Sheet2.Cells[IntToStr(X + 2), 4] := ADOQuery1.FieldByName('МесяцСбор').AsString;
    Sheet2.Cells[IntToStr(X + 2), 5] := ADOQuery1.FieldByName('НЧСБОР').AsString;
    Sheet2.Cells[IntToStr(X + 2), 6] := '=E' + IntToStr(X + 2) + '*150.93*1.35*1.15';

    Sheet2.Cells[IntToStr(X + 2), 7] := ADOQuery1.FieldByName('Монтажник').AsString;
    Sheet2.Cells[IntToStr(X + 2), 8] := ADOQuery1.FieldByName('Месяц').AsString;
    Sheet2.Cells[IntToStr(X + 2), 9] := ADOQuery1.FieldByName('НормоЧасы').AsString;
    Sheet2.Cells[IntToStr(X + 2), 10] := '=I' + IntToStr(X + 2) + '*161.25*1.35*1.15';
    Inc(X);
    ADOQuery1.Next;
  end;
  Rang := Sheet2.Range['E' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(E3:E' + IntToStr(X + 1) + ')';

  Rang := Sheet2.Range['F' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(F3:F' + IntToStr(X + 1) + ')';

  Rang := Sheet2.Range['I' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(I3:I' + IntToStr(X + 1) + ')';

  Rang := Sheet2.Range['J' + IntToStr(X + 2), emptyparam];
  Rang.value := '=SUM(J3:J' + IntToStr(X + 1) + ')';

  XL2.Visible := True;
  XL2 := UnAssigned;

end;

procedure TForm1.Button63Click(Sender: TObject);
var
  Sql_Str, Dat, S_Dat, Pl_DAT, RAS_DAT, Dat2: string;
  I: Integer;
  Zak, Nam, BZ, Kol, Prim1, Prim2, God, Mes, Dir: string;
  y, j, R, K1, K2: Integer;
  XL2, rang, Sheet2: Variant;
  pl_D, R_D, N_D: TDate;
begin

  StringGrid1.Cells[0, 0] := 'Изделие';
  StringGrid1.Cells[1, 0] := 'Дата';
  StringGrid1.Cells[2, 0] := 'Кол во';
  StringGrid1.Cells[3, 0] := 'Заказ';
  StringGrid1.Cells[4, 0] := 'БЗ';
  StringGrid1.Cells[5, 0] := 'план Дата';
  StringGrid1.Cells[6, 0] := 'Расчетная дата готовности';
  StringGrid1.Cells[7, 0] := 'Прим1';
  StringGrid1.Cells[8, 0] := 'Прим2';
  y := 1;
  j := 0;
  N_D := Now;
  God := FormatDateTime('yyyy', Now);
  Mes := FormatDateTime('mmmm', Now);
  Dir := Form1.Put_KTO + '\CKlapana\Долги\';
  CreateDir(Dir);

  Dir := Form1.Put_KTO + '\CKlapana\Долги\' + God;
  CreateDir(Dir);
  Dir := Form1.Put_KTO + '\CKlapana\Долги\' + God + '\' + Mes;
  CreateDir(Dir);
  Dat2 := FormatDateTime('dd.mm.YYYY', Now);
  XL2 := CreateOleObject('Excel.Application');
  CopyFile(PWideChar(Form1.Put_KTO + '\CKlapana\2013\Долги.xlsx'), PWideChar(Dir + '\' + Dat2 + '.xlsx'), False);
  XL2.Workbooks.Open(Dir + '\' + Dat2 + '.xlsx');

  XL2.Application.EnableEvents := false;
  XL2.Visible := True;
  XL2.ActiveWorkBook.Sheets.Item[1].Activate;
  Sheet2 := XL2.ActiveWorkBook.WorkSheets.Item[1];
  Dat := FormatDateTime('mm.dd.YYYY', Now); //   ПОЖ
  Sql_Str := ' ([Кол принятых]<[Кол во запущенных]) AND (([план Дата]<' + #39 + Dat + #39 + ') OR ([Расчетная дата готовности]<' + #39 + Dat + #39 + ')) AND (Отмена IS NULL) order by Заказ ';
  if not mkQuerySelect(ADOQuery1, 'Select DISTINCT Изделие,[Кол во запущенных],Дата,Заказ,БЗ,[план Дата],[Расчетная дата готовности]' + ',CAST([Сборка Примечание] AS  NVARCHAR(MAX)),CAST([ОТК Прим] AS  NVARCHAR(MAX)) from %s  WHERE ' + Sql_Str, ['Запуск']) then
    exit;
  StringGrid1.RowCount := StringGrid1.RowCount + Form1.ADOQuery1.RecordCount + 1;
  rang := Sheet2.Range['A' + IntToStr(2), emptyparam];
  rang.value := 'ПОЖАРНЫЕ КЛАПАНА';
  XL2.ActiveWorkBook.WorkSheets[1].Rows[2].Font.Size := 12;
  XL2.ActiveWorkBook.WorkSheets[1].Rows[2].Font.Bold := True;
  for I := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    Nam := Form1.ADOQuery1.FieldByName('Изделие').AsString;
    Kol := Form1.ADOQuery1.FieldByName('Кол во запущенных').AsString;
    S_Dat := Form1.ADOQuery1.FieldByName('Дата').AsString;
    Zak := Form1.ADOQuery1.FieldByName('Заказ').AsString;
    BZ := Form1.ADOQuery1.FieldByName('БЗ').AsString;
    Pl_DAT := Form1.ADOQuery1.FieldByName('план Дата').AsString;
    RAS_DAT := Form1.ADOQuery1.FieldByName('Расчетная дата готовности').AsString;

    Prim1 := Form1.ADOQuery1.FieldByName('column1').AsString;
    Prim2 := Form1.ADOQuery1.FieldByName('column2').AsString;
          //
    rang := Sheet2.Range['A' + IntToStr(y + 2), emptyparam];
    rang.value := Nam;
          //
    rang := Sheet2.Range['B' + IntToStr(y + 2), emptyparam];
    rang.value := S_Dat;
          //
    rang := Sheet2.Range['C' + IntToStr(y + 2), emptyparam];
    rang.value := Kol;
          //
    rang := Sheet2.Range['D' + IntToStr(y + 2), emptyparam];
    rang.value := Zak;
          //
    rang := Sheet2.Range['E' + IntToStr(y + 2), emptyparam];
    rang.value := BZ;
          //
    if Pl_DAT <> '' then
    begin
      pl_D := StrToDate(Pl_DAT);
      if N_D > pl_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['F' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
          //
    if RAS_DAT <> '' then
    begin
      R_D := StrToDate(RAS_DAT);
      if N_D > R_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['G' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
    rang := Sheet2.Range['F' + IntToStr(y + 2), emptyparam];
    rang.value := Pl_DAT;
          //
    rang := Sheet2.Range['G' + IntToStr(y + 2), emptyparam];
    rang.value := RAS_DAT;

          //
    rang := Sheet2.Range['H' + IntToStr(y + 2), emptyparam];
    rang.value := Prim1;
          //
    rang := Sheet2.Range['I' + IntToStr(y + 2), emptyparam];
    rang.value := Prim2;
          //
    StringGrid1.Cells[0, y + 1] := Nam;
    StringGrid1.Cells[1, y + 1] := S_Dat;
    StringGrid1.Cells[2, y + 1] := Kol;
    StringGrid1.Cells[3, y + 1] := Zak;
    StringGrid1.Cells[4, y + 1] := BZ;
    StringGrid1.Cells[5, y + 1] := Pl_DAT;
    StringGrid1.Cells[6, y + 1] := RAS_DAT;
    StringGrid1.Cells[7, y + 1] := Prim1;
    StringGrid1.Cells[8, y + 1] := Prim2;
    Inc(y);
    Form1.ADOQuery1.Next;
  end;
  Inc(y);
  Inc(y);
  j := y;
  rang := Sheet2.Range['C' + IntToStr(2), emptyparam];
  rang.value := '=SUM(C3:C' + IntToStr(y - 1) + ')';

      //       Возд
  Sql_Str := ' ([Кол принятых]<[Кол во запущенных]) AND (([план Дата]<' + #39 + Dat + #39 + ') OR ([Расчетная дата готовности]<' + #39 + Dat + #39 + ')) AND (Отмена IS NULL) order by Заказ ';
  if not mkQuerySelect(ADOQuery1, 'Select DISTINCT Изделие,[Кол во запущенных],Дата,Заказ,БЗ,[план Дата],[Расчетная дата готовности]' + ',CAST([Сборка Примечание] AS  NVARCHAR(MAX)),CAST([ОТК Прим] AS  NVARCHAR(MAX)) from %s  WHERE ' + Sql_Str, ['ЗапускВозд']) then
    exit;
  StringGrid1.RowCount := StringGrid1.RowCount + Form1.ADOQuery1.RecordCount + 1;
  rang := Sheet2.Range['A' + IntToStr(y + 1), emptyparam];
  rang.value := 'ВОЗДУШНЫЕ КЛАПАНА';
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Size := 12;
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Bold := True;
  for I := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    Nam := Form1.ADOQuery1.FieldByName('Изделие').AsString;
    Kol := Form1.ADOQuery1.FieldByName('Кол во запущенных').AsString;
    S_Dat := Form1.ADOQuery1.FieldByName('Дата').AsString;
    Zak := Form1.ADOQuery1.FieldByName('Заказ').AsString;
    BZ := Form1.ADOQuery1.FieldByName('БЗ').AsString;
    Pl_DAT := Form1.ADOQuery1.FieldByName('план Дата').AsString;
    RAS_DAT := Form1.ADOQuery1.FieldByName('Расчетная дата готовности').AsString;
    Prim1 := Form1.ADOQuery1.FieldByName('column1').AsString;
    Prim2 := Form1.ADOQuery1.FieldByName('column2').AsString;
                    //
    rang := Sheet2.Range['A' + IntToStr(y + 2), emptyparam];
    rang.value := Nam;
          //
    rang := Sheet2.Range['B' + IntToStr(y + 2), emptyparam];
    rang.value := S_Dat;
          //
    rang := Sheet2.Range['C' + IntToStr(y + 2), emptyparam];
    rang.value := Kol;
          //
    rang := Sheet2.Range['D' + IntToStr(y + 2), emptyparam];
    rang.value := Zak;
          //
    rang := Sheet2.Range['E' + IntToStr(y + 2), emptyparam];
    rang.value := BZ;
          //
    if Pl_DAT <> '' then
    begin
      pl_D := StrToDate(Pl_DAT);
      if N_D > pl_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['F' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
          //
    if RAS_DAT <> '' then
    begin
      R_D := StrToDate(RAS_DAT);
      if N_D > R_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['G' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
    rang := Sheet2.Range['F' + IntToStr(y + 2), emptyparam];
    rang.value := Pl_DAT;
          //
    rang := Sheet2.Range['G' + IntToStr(y + 2), emptyparam];
    rang.value := RAS_DAT;
          //
    rang := Sheet2.Range['H' + IntToStr(y + 2), emptyparam];
    rang.value := Prim1;
          //
    rang := Sheet2.Range['I' + IntToStr(y + 2), emptyparam];
    rang.value := Prim2;
          //
    Inc(y);
    Form1.ADOQuery1.Next;
  end;
  Inc(y);
  Inc(y);
  rang := Sheet2.Range['C' + IntToStr(j + 1), emptyparam];
  rang.value := '=SUM(C' + IntToStr(j + 2) + ':C' + IntToStr(y - 1) + ')';
  j := y;

      //    ЛЮК

  Sql_Str := ' ([Кол принятых]<[Кол во запущенных]) AND (([план Дата]<' + #39 + Dat + #39 + ') OR ([Расчетная дата готовности]<' + #39 + Dat + #39 + ')) AND (Отмена IS NULL) order by Заказ ';
  if not mkQuerySelect(ADOQuery1, 'Select DISTINCT Изделие,[Кол во запущенных],Дата,Заказ,БЗ,[план Дата],[Расчетная дата готовности]' + ',CAST([Сборка Примечание] AS  NVARCHAR(MAX)),CAST([ОТК Прим] AS  NVARCHAR(MAX)) from %s  WHERE ' + Sql_Str, ['ЗапускЛюк']) then
    exit;
  StringGrid1.RowCount := StringGrid1.RowCount + Form1.ADOQuery1.RecordCount + 1;
  rang := Sheet2.Range['A' + IntToStr(y + 1), emptyparam];
  rang.value := 'ЛЮК ДЫМОУДАЛЕНИЯ';
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Size := 12;
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Bold := True;
  for I := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    Nam := Form1.ADOQuery1.FieldByName('Изделие').AsString;
    Kol := Form1.ADOQuery1.FieldByName('Кол во запущенных').AsString;
    S_Dat := Form1.ADOQuery1.FieldByName('Дата').AsString;
    Zak := Form1.ADOQuery1.FieldByName('Заказ').AsString;
    BZ := Form1.ADOQuery1.FieldByName('БЗ').AsString;
    Pl_DAT := Form1.ADOQuery1.FieldByName('план Дата').AsString;
    RAS_DAT := Form1.ADOQuery1.FieldByName('Расчетная дата готовности').AsString;
    Prim1 := Form1.ADOQuery1.FieldByName('column1').AsString;
    Prim2 := Form1.ADOQuery1.FieldByName('column2').AsString;
                    //
    rang := Sheet2.Range['A' + IntToStr(y + 2), emptyparam];
    rang.value := Nam;
          //
    rang := Sheet2.Range['B' + IntToStr(y + 2), emptyparam];
    rang.value := S_Dat;
          //
    rang := Sheet2.Range['C' + IntToStr(y + 2), emptyparam];
    rang.value := Kol;
          //
    rang := Sheet2.Range['D' + IntToStr(y + 2), emptyparam];
    rang.value := Zak;
          //
    rang := Sheet2.Range['E' + IntToStr(y + 2), emptyparam];
    rang.value := BZ;
          //
    if Pl_DAT <> '' then
    begin
      pl_D := StrToDate(Pl_DAT);
      if N_D > pl_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['F' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
          //
    if RAS_DAT <> '' then
    begin
      R_D := StrToDate(RAS_DAT);
      if N_D > R_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['G' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
    rang := Sheet2.Range['F' + IntToStr(y + 2), emptyparam];
    rang.value := Pl_DAT;
          //
    rang := Sheet2.Range['G' + IntToStr(y + 2), emptyparam];
    rang.value := RAS_DAT;
          //
    rang := Sheet2.Range['H' + IntToStr(y + 2), emptyparam];
    rang.value := Prim1;
          //
    rang := Sheet2.Range['I' + IntToStr(y + 2), emptyparam];
    rang.value := Prim2;

    Inc(y);
    Form1.ADOQuery1.Next;
  end;
  Inc(y);
  Inc(y);
  rang := Sheet2.Range['C' + IntToStr(j + 1), emptyparam];
  rang.value := '=SUM(C' + IntToStr(j + 2) + ':C' + IntToStr(y - 1) + ')';
  j := y;
      //           СТАМ

  Sql_Str := ' ([Кол принятых]<[Кол во запущенных]) AND (([план Дата]<' + #39 + Dat + #39 + ') OR ([Расчетная дата готовности]<' + #39 + Dat + #39 + ')) AND (Отмена IS NULL) order by Заказ ';
  if not mkQuerySelect(ADOQuery1, 'Select DISTINCT Изделие,[Кол во запущенных],Дата,Заказ,БЗ,[план Дата],[Расчетная дата готовности]' + ',CAST([Сборка Примечание] AS  NVARCHAR(MAX)),CAST([ОТК Прим] AS  NVARCHAR(MAX)) from %s  WHERE ' + Sql_Str, ['ЗапускСТАМ']) then
    exit;
  StringGrid1.RowCount := StringGrid1.RowCount + Form1.ADOQuery1.RecordCount + 1;
  rang := Sheet2.Range['A' + IntToStr(y + 1), emptyparam];
  rang.value := 'СТАМ';
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Size := 12;
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Bold := True;
  for I := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    Nam := Form1.ADOQuery1.FieldByName('Изделие').AsString;
    Kol := Form1.ADOQuery1.FieldByName('Кол во запущенных').AsString;
    S_Dat := Form1.ADOQuery1.FieldByName('Дата').AsString;
    Zak := Form1.ADOQuery1.FieldByName('Заказ').AsString;
    BZ := Form1.ADOQuery1.FieldByName('БЗ').AsString;
    Pl_DAT := Form1.ADOQuery1.FieldByName('план Дата').AsString;
    RAS_DAT := Form1.ADOQuery1.FieldByName('Расчетная дата готовности').AsString;
    Prim1 := Form1.ADOQuery1.FieldByName('column1').AsString;
    Prim2 := Form1.ADOQuery1.FieldByName('column2').AsString;
                    //
    rang := Sheet2.Range['A' + IntToStr(y + 2), emptyparam];
    rang.value := Nam;
          //
    rang := Sheet2.Range['B' + IntToStr(y + 2), emptyparam];
    rang.value := S_Dat;
          //
    rang := Sheet2.Range['C' + IntToStr(y + 2), emptyparam];
    rang.value := Kol;
          //
    rang := Sheet2.Range['D' + IntToStr(y + 2), emptyparam];
    rang.value := Zak;
          //
    rang := Sheet2.Range['E' + IntToStr(y + 2), emptyparam];
    rang.value := BZ;
          //
    if Pl_DAT <> '' then
    begin
      pl_D := StrToDate(Pl_DAT);
      if N_D > pl_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['F' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
          //
    if RAS_DAT <> '' then
    begin
      R_D := StrToDate(RAS_DAT);
      if N_D > R_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['G' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
    rang := Sheet2.Range['F' + IntToStr(y + 2), emptyparam];
    rang.value := Pl_DAT;
          //
    rang := Sheet2.Range['G' + IntToStr(y + 2), emptyparam];
    rang.value := RAS_DAT;
          //
    rang := Sheet2.Range['H' + IntToStr(y + 2), emptyparam];
    rang.value := Prim1;
          //
    rang := Sheet2.Range['I' + IntToStr(y + 2), emptyparam];
    rang.value := Prim2;
    Inc(y);
    Form1.ADOQuery1.Next;
  end;
  Inc(y);
  Inc(y);
  rang := Sheet2.Range['C' + IntToStr(j + 1), emptyparam];
  rang.value := '=SUM(C' + IntToStr(j + 2) + ':C' + IntToStr(y - 1) + ')';
  j := y;

      //  АВТО
  ADOConnection1.Connected := False;
  ADOConnection1.ConnectionString := 'Provider=SQLOLEDB.1;Packet Size = 4096;Password=111;' + 'Persist Security Info=True;User Id=testuser;Initial Catalog=VezaMiassAvto;Data Source=MSS-APP3;';
  ADOConnection1.Connected := True;
  ADOQuery1.Close;
  ADOQuery1.SQL.Clear;

  ADOQuery1.SQL.Add('Select * From ТехЗадания ' + 'INNER JOIN ТехЗаданияДоп ON ТехЗадания.[№ТехЗадания] = ТехЗаданияДоп.[№ТехЗадания]' + ' WHERE (ТехЗадания.Телефон>' + #39 + '01.01.2020' + #39 + ') AND (ТехЗаданияДоп.Отмена=' + #39 + 'False' + #39 + ') AND ([Расчетная дата] <' + #39 + Dat + #39 + ') AND (ДатаВыдачи is null) ');
  ADOQuery1.Open;
  StringGrid1.RowCount := StringGrid1.RowCount + Form1.ADOQuery1.RecordCount + 1;
  rang := Sheet2.Range['A' + IntToStr(y + 1), emptyparam];
  rang.value := 'АВТОМАТИКА';
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Size := 12;
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Bold := True;

  for I := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    Nam := Form1.ADOQuery1.FieldByName('Абревиатура').AsString;
    Kol := '1'; //Form1.ADOQuery1.FieldByName('Кол во').AsString;
    S_Dat := Form1.ADOQuery1.FieldByName('Телефон').AsString;
    Zak := Form1.ADOQuery1.FieldByName('№Счета').AsString;
    BZ := Form1.ADOQuery1.FieldByName('№Б/з').AsString;
    Pl_DAT := ''; //Form1.ADOQuery1.FieldByName('план Дата').AsString;
    RAS_DAT := Form1.ADOQuery1.FieldByName('Расчетная дата').AsString;
    Prim1 := Form1.ADOQuery1.FieldByName('Примечания').AsString;
    Prim2 := Form1.ADOQuery1.FieldByName('ПримечанияБЗ').AsString;
                    //
    rang := Sheet2.Range['A' + IntToStr(y + 2), emptyparam];
    rang.value := Nam;
          //
    rang := Sheet2.Range['B' + IntToStr(y + 2), emptyparam];
    rang.value := S_Dat;
          //
    rang := Sheet2.Range['C' + IntToStr(y + 2), emptyparam];
    rang.value := Kol;
          //
    rang := Sheet2.Range['D' + IntToStr(y + 2), emptyparam];
    rang.value := Zak;
          //
    rang := Sheet2.Range['E' + IntToStr(y + 2), emptyparam];
    rang.value := BZ;
          //
    if Pl_DAT <> '' then
    begin
      pl_D := StrToDate(Pl_DAT);
      if N_D > pl_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['F' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
          //
    if RAS_DAT <> '' then
    begin
      R_D := StrToDate(RAS_DAT);
      if N_D > R_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['G' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
    rang := Sheet2.Range['F' + IntToStr(y + 2), emptyparam];
    rang.value := Pl_DAT;
          //
    rang := Sheet2.Range['G' + IntToStr(y + 2), emptyparam];
    rang.value := RAS_DAT;
          //
    rang := Sheet2.Range['H' + IntToStr(y + 2), emptyparam];
    rang.value := Prim1;
          //
    rang := Sheet2.Range['I' + IntToStr(y + 2), emptyparam];
    rang.value := Prim2;
    Inc(y);
    Form1.ADOQuery1.Next;
  end;
  Inc(y);
  Inc(y);
  rang := Sheet2.Range['C' + IntToStr(j + 1), emptyparam];
  rang.value := '=SUM(C' + IntToStr(j + 2) + ':C' + IntToStr(y - 1) + ')';
  j := y;
      //
      // КЦКП
  ADOConnection1.Connected := False;
  ADOConnection1.ConnectionString := 'Provider=SQLOLEDB.1;Packet Size = 4096;Password=111;' + 'Persist Security Info=True;User Id=testuser;Initial Catalog=MIASSCEH;Data Source=MSS-APP3;';
  ADOConnection1.Connected := True;
  ADOQuery1.Close;
  ADOQuery1.SQL.Clear;

  ADOQuery1.SQL.Add('Select * From КЦ ' + ' WHERE (Отмена is NULL) AND (([Расчетная дата] <' + #39 + Dat + #39 + ') or ([Планируемый Срок] <' + #39 + Dat + #39 + ')) AND ([Дата Изготовления] is null) ');
  ADOQuery1.Open;
  StringGrid1.RowCount := StringGrid1.RowCount + Form1.ADOQuery1.RecordCount + 1;
  rang := Sheet2.Range['A' + IntToStr(y + 1), emptyparam];
  rang.value := 'КЦКП';
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Size := 12;
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Bold := True;
  for I := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    Nam := Form1.ADOQuery1.FieldByName('Наименование').AsString;
    Kol := '1'; //Form1.ADOQuery1.FieldByName('Кол во').AsString;
    S_Dat := Form1.ADOQuery1.FieldByName('Дата задания').AsString;
    Zak := Form1.ADOQuery1.FieldByName('Заказ').AsString;
    BZ := Form1.ADOQuery1.FieldByName('№ бланк заказа').AsString;
    Pl_DAT := Form1.ADOQuery1.FieldByName('План Дата').AsString;
    RAS_DAT := Form1.ADOQuery1.FieldByName('Расчетная дата').AsString;
    Prim1 := Form1.ADOQuery1.FieldByName('Примечания').AsString;
    Prim2 := ''; //Form1.ADOQuery1.FieldByName('ПримечанияБЗ').AsString;
                    //
    rang := Sheet2.Range['A' + IntToStr(y + 2), emptyparam];
    rang.value := Nam;
          //
    rang := Sheet2.Range['B' + IntToStr(y + 2), emptyparam];
    rang.value := S_Dat;
          //
    rang := Sheet2.Range['C' + IntToStr(y + 2), emptyparam];
    rang.value := Kol;
          //
    rang := Sheet2.Range['D' + IntToStr(y + 2), emptyparam];
    rang.value := Zak;
          //
    rang := Sheet2.Range['E' + IntToStr(y + 2), emptyparam];
    rang.value := BZ;
          //
    if Pl_DAT <> '' then
    begin
      pl_D := StrToDate(Pl_DAT);
      if N_D > pl_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['F' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
          //
    if RAS_DAT <> '' then
    begin
      R_D := StrToDate(RAS_DAT);
      if N_D > R_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['G' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
    rang := Sheet2.Range['F' + IntToStr(y + 2), emptyparam];
    rang.value := Pl_DAT;
          //
    rang := Sheet2.Range['G' + IntToStr(y + 2), emptyparam];
    rang.value := RAS_DAT;
          //
    rang := Sheet2.Range['H' + IntToStr(y + 2), emptyparam];
    rang.value := Prim1;
          //
    rang := Sheet2.Range['I' + IntToStr(y + 2), emptyparam];
    rang.value := Prim2;

    Inc(y);
    Form1.ADOQuery1.Next;
  end;
  Inc(y);
  Inc(y);
  rang := Sheet2.Range['C' + IntToStr(j + 1), emptyparam];
  rang.value := '=SUM(C' + IntToStr(j + 2) + ':C' + IntToStr(y - 1) + ')';
  j := y + 1;
  Sheet2.Range['A' + IntToStr(2), 'I' + IntToStr(y + 2)].Borders.LineStyle := 1;
  Sheet2.Range['A' + IntToStr(2), 'I' + IntToStr(y + 2)].HorizontalAlignment := 3;
  j := y;

      //
      // ЭКО
  ADOConnection1.Connected := False;
  ADOConnection1.ConnectionString := 'Provider=SQLOLEDB.1;Packet Size = 4096;Password=111;' + 'Persist Security Info=True;User Id=testuser;Initial Catalog=MIASSCEH;Data Source=MSS-APP3;';
  ADOConnection1.Connected := True;
  ADOQuery1.Close;
  ADOQuery1.SQL.Clear;

  ADOQuery1.SQL.Add('Select * From ЕКО ' + ' WHERE (Отмена is NULL) AND (([Расчетная дата] <' + #39 + Dat + #39 + ') or ([План Дата] <' + #39 + Dat + #39 + ')) AND ([Дата Изготовления] is null) ');
  ADOQuery1.Open;
  StringGrid1.RowCount := StringGrid1.RowCount + Form1.ADOQuery1.RecordCount + 1;
  rang := Sheet2.Range['A' + IntToStr(y + 1), emptyparam];
  rang.value := 'ЭКО';
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Size := 12;
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Bold := True;
  for I := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    Nam := Form1.ADOQuery1.FieldByName('Наименование').AsString;
    Kol := '1'; //Form1.ADOQuery1.FieldByName('Кол во').AsString;
    S_Dat := Form1.ADOQuery1.FieldByName('Дата задания').AsString;
    Zak := Form1.ADOQuery1.FieldByName('Заказ').AsString;
    BZ := Form1.ADOQuery1.FieldByName('№ бланк заказа').AsString;
    Pl_DAT := Form1.ADOQuery1.FieldByName('План Дата').AsString;
    RAS_DAT := Form1.ADOQuery1.FieldByName('Расчетная дата').AsString;
    Prim1 := Form1.ADOQuery1.FieldByName('Примечания').AsString;
    Prim2 := ''; //Form1.ADOQuery1.FieldByName('ПримечанияБЗ').AsString;
                    //
    rang := Sheet2.Range['A' + IntToStr(y + 2), emptyparam];
    rang.value := Nam;
          //
    rang := Sheet2.Range['B' + IntToStr(y + 2), emptyparam];
    rang.value := S_Dat;
          //
    rang := Sheet2.Range['C' + IntToStr(y + 2), emptyparam];
    rang.value := Kol;
          //
    rang := Sheet2.Range['D' + IntToStr(y + 2), emptyparam];
    rang.value := Zak;
          //
    rang := Sheet2.Range['E' + IntToStr(y + 2), emptyparam];
    rang.value := BZ;
          //
    if Pl_DAT <> '' then
    begin
      pl_D := StrToDate(Pl_DAT);
      if N_D > pl_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['F' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
          //
    if RAS_DAT <> '' then
    begin
      R_D := StrToDate(RAS_DAT);
      if N_D > R_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['G' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
    rang := Sheet2.Range['F' + IntToStr(y + 2), emptyparam];
    rang.value := Pl_DAT;
          //
    rang := Sheet2.Range['G' + IntToStr(y + 2), emptyparam];
    rang.value := RAS_DAT;
          //
    rang := Sheet2.Range['H' + IntToStr(y + 2), emptyparam];
    rang.value := Prim1;
          //
    rang := Sheet2.Range['I' + IntToStr(y + 2), emptyparam];
    rang.value := Prim2;

    Inc(y);
    Form1.ADOQuery1.Next;
  end;
  Inc(y);
  Inc(y);
  rang := Sheet2.Range['C' + IntToStr(j + 1), emptyparam];
  rang.value := '=SUM(C' + IntToStr(j + 2) + ':C' + IntToStr(y - 1) + ')';
  j := y;

  Sheet2.Range['A' + IntToStr(2), 'I' + IntToStr(y + 2)].Borders.LineStyle := 1;
  Sheet2.Range['A' + IntToStr(2), 'I' + IntToStr(y + 2)].HorizontalAlignment := 3;

        // Завесы
  ADOConnection1.Connected := False;
  ADOConnection1.ConnectionString := 'Provider=SQLOLEDB.1;Packet Size = 4096;Password=111;' + 'Persist Security Info=True;User Id=testuser;Initial Catalog=MIASSCEH;Data Source=MSS-APP3;';
  ADOConnection1.Connected := True;
  ADOQuery1.Close;
  ADOQuery1.SQL.Clear;

  ADOQuery1.SQL.Add('Select * From [Завесы] ' + ' WHERE (ДатаОтмены is NULL) AND (([План Дата] <' + #39 + Dat + #39 + ')) AND ([ОТК] is null) AND ((Пр=' + #39 + 'МИ' + #39 + ') OR (Пр IS NULL))');
  ADOQuery1.Open;
  StringGrid1.RowCount := StringGrid1.RowCount + Form1.ADOQuery1.RecordCount + 1;
  rang := Sheet2.Range['A' + IntToStr(y + 1), emptyparam];
  rang.value := 'Завесы';
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Size := 12;
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Bold := True;
  for I := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    Nam := Form1.ADOQuery1.FieldByName('Изделие').AsString;
    K1 := Form1.ADOQuery1.FieldByName('Кол').AsInteger;
    K2 := Form1.ADOQuery1.FieldByName('Кол принятых').AsInteger;
    Kol := IntToStr(K1 - K2); //Form1.ADOQuery1.FieldByName('Кол во').AsString;
    S_Dat := Form1.ADOQuery1.FieldByName('ДатаЗаказа').AsString;
    Zak := Form1.ADOQuery1.FieldByName('Заказ').AsString;
    BZ := Form1.ADOQuery1.FieldByName('БЗ').AsString;
    Pl_DAT := Form1.ADOQuery1.FieldByName('План Дата').AsString;
    RAS_DAT := ''; //Form1.ADOQuery1.FieldByName('Расчетная дата').AsString;
    Prim1 := Form1.ADOQuery1.FieldByName('Особенности').AsString;
    Prim2 := ''; //Form1.ADOQuery1.FieldByName('ПримечанияБЗ').AsString;
                    //
    rang := Sheet2.Range['A' + IntToStr(y + 2), emptyparam];
    rang.value := Nam;
          //
    rang := Sheet2.Range['B' + IntToStr(y + 2), emptyparam];
    rang.value := S_Dat;
          //
    rang := Sheet2.Range['C' + IntToStr(y + 2), emptyparam];
    rang.value := Kol;
          //
    rang := Sheet2.Range['D' + IntToStr(y + 2), emptyparam];
    rang.value := Zak;
          //
    rang := Sheet2.Range['E' + IntToStr(y + 2), emptyparam];
    rang.value := BZ;
          //
    if Pl_DAT <> '' then
    begin
      pl_D := StrToDate(Pl_DAT);
      if N_D > pl_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['F' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
          //
    if RAS_DAT <> '' then
    begin
      R_D := StrToDate(RAS_DAT);
      if N_D > R_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['G' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
    rang := Sheet2.Range['F' + IntToStr(y + 2), emptyparam];
    rang.value := Pl_DAT;
          //
    rang := Sheet2.Range['G' + IntToStr(y + 2), emptyparam];
    rang.value := RAS_DAT;
          //
    rang := Sheet2.Range['H' + IntToStr(y + 2), emptyparam];
    rang.value := Prim1;
          //
    rang := Sheet2.Range['I' + IntToStr(y + 2), emptyparam];
    rang.value := Prim2;

    Inc(y);
    Form1.ADOQuery1.Next;
  end;
  Inc(y);
  Inc(y);
  rang := Sheet2.Range['C' + IntToStr(j + 1), emptyparam];
  rang.value := '=SUM(C' + IntToStr(j + 2) + ':C' + IntToStr(y) + ')';
  j := y;
  Sheet2.Range['A' + IntToStr(2), 'I' + IntToStr(y + 2)].Borders.LineStyle := 1;
  Sheet2.Range['A' + IntToStr(2), 'I' + IntToStr(y + 2)].HorizontalAlignment := 3;

        // 750 КАНАЛ
  ADOConnection1.Connected := False;
  ADOConnection1.ConnectionString := 'Provider=SQLOLEDB.1;Packet Size = 4096;Password=111;' + 'Persist Security Info=True;User Id=testuser;Initial Catalog=KLAPAN;Data Source=MSS-APP3;';
  ADOConnection1.Connected := True;
  ADOQuery1.Close;
  ADOQuery1.SQL.Clear;

  ADOQuery1.SQL.Add('Select * From [750] ' + ' WHERE (Отмена is NULL) AND (([План Дата] <' + #39 + Dat + #39 + ')) AND ([ОТК] is null) ');
  ADOQuery1.Open;
  StringGrid1.RowCount := StringGrid1.RowCount + Form1.ADOQuery1.RecordCount + 1;
  rang := Sheet2.Range['A' + IntToStr(y + 1), emptyparam];
  rang.value := 'КАНАЛ';
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Size := 12;
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Bold := True;
  for I := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    Nam := Form1.ADOQuery1.FieldByName('Изделие').AsString;
    K1 := Form1.ADOQuery1.FieldByName('Кол во').AsInteger;
    K2 := Form1.ADOQuery1.FieldByName('Кол принятых').AsInteger;
    Kol := IntToStr(K1 - K2); //Form1.ADOQuery1.FieldByName('Кол во').AsString;
    S_Dat := Form1.ADOQuery1.FieldByName('Дата').AsString;
    Zak := Form1.ADOQuery1.FieldByName('Заказ').AsString;
    BZ := Form1.ADOQuery1.FieldByName('БЗ').AsString;
    Pl_DAT := Form1.ADOQuery1.FieldByName('План Дата').AsString;
    RAS_DAT := ''; //Form1.ADOQuery1.FieldByName('Расчетная дата').AsString;
    Prim1 := Form1.ADOQuery1.FieldByName('Примечания').AsString;
    Prim2 := ''; //Form1.ADOQuery1.FieldByName('ПримечанияБЗ').AsString;
                    //
    rang := Sheet2.Range['A' + IntToStr(y + 2), emptyparam];
    rang.value := Nam;
          //
    rang := Sheet2.Range['B' + IntToStr(y + 2), emptyparam];
    rang.value := S_Dat;
          //
    rang := Sheet2.Range['C' + IntToStr(y + 2), emptyparam];
    rang.value := Kol;
          //
    rang := Sheet2.Range['D' + IntToStr(y + 2), emptyparam];
    rang.value := Zak;
          //
    rang := Sheet2.Range['E' + IntToStr(y + 2), emptyparam];
    rang.value := BZ;
          //
    if Pl_DAT <> '' then
    begin
      pl_D := StrToDate(Pl_DAT);
      if N_D > pl_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['F' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
          //
    if RAS_DAT <> '' then
    begin
      R_D := StrToDate(RAS_DAT);
      if N_D > R_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['G' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
    rang := Sheet2.Range['F' + IntToStr(y + 2), emptyparam];
    rang.value := Pl_DAT;
          //
    rang := Sheet2.Range['G' + IntToStr(y + 2), emptyparam];
    rang.value := RAS_DAT;
          //
    rang := Sheet2.Range['H' + IntToStr(y + 2), emptyparam];
    rang.value := Prim1;
          //
    rang := Sheet2.Range['I' + IntToStr(y + 2), emptyparam];
    rang.value := Prim2;

    Inc(y);
    Form1.ADOQuery1.Next;
  end;
  Inc(y);
  Inc(y);
  rang := Sheet2.Range['C' + IntToStr(j + 1), emptyparam];
  rang.value := '=SUM(C' + IntToStr(j + 2) + ':C' + IntToStr(y - 1) + ')';
  j := y;
  Sheet2.Range['A' + IntToStr(2), 'I' + IntToStr(y + 2)].Borders.LineStyle := 1;
  Sheet2.Range['A' + IntToStr(2), 'I' + IntToStr(y + 2)].HorizontalAlignment := 3;

        // 710
  ADOConnection1.Connected := False;
  ADOConnection1.ConnectionString := 'Provider=SQLOLEDB.1;Packet Size = 4096;Password=111;' + 'Persist Security Info=True;User Id=testuser;Initial Catalog=KLAPAN;Data Source=MSS-APP3;';
  ADOConnection1.Connected := True;
  ADOQuery1.Close;
  ADOQuery1.SQL.Clear;

  ADOQuery1.SQL.Add('Select * From [710] ' + ' WHERE (Отмена is NULL) AND (([План Дата] <' + #39 + Dat + #39 + ')) AND ([ОТК] is null) ');
  ADOQuery1.Open;
  StringGrid1.RowCount := StringGrid1.RowCount + Form1.ADOQuery1.RecordCount + 1;
  rang := Sheet2.Range['A' + IntToStr(y + 1), emptyparam];
  rang.value := '710';
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Size := 12;
  XL2.ActiveWorkBook.WorkSheets[1].Rows[y + 1].Font.Bold := True;
  for I := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    Nam := Form1.ADOQuery1.FieldByName('Изделие').AsString;
    K1 := Form1.ADOQuery1.FieldByName('Кол').AsInteger;
    K2 := Form1.ADOQuery1.FieldByName('Кол принятых').AsInteger;
    Kol := IntToStr(K1 - K2); //Form1.ADOQuery1.FieldByName('Кол во').AsString;
    S_Dat := Form1.ADOQuery1.FieldByName('ДатаЗаказа').AsString;
    Zak := Form1.ADOQuery1.FieldByName('Заказ').AsString;
    BZ := Form1.ADOQuery1.FieldByName('БЗ').AsString;
    Pl_DAT := Form1.ADOQuery1.FieldByName('План Дата').AsString;
    RAS_DAT := ''; //Form1.ADOQuery1.FieldByName('Расчетная дата').AsString;
    Prim1 := Form1.ADOQuery1.FieldByName('Примечания').AsString;
    Prim2 := ''; //Form1.ADOQuery1.FieldByName('ПримечанияБЗ').AsString;
                    //
    rang := Sheet2.Range['A' + IntToStr(y + 2), emptyparam];
    rang.value := Nam;
          //
    rang := Sheet2.Range['B' + IntToStr(y + 2), emptyparam];
    rang.value := S_Dat;
          //
    rang := Sheet2.Range['C' + IntToStr(y + 2), emptyparam];
    rang.value := Kol;
          //
    rang := Sheet2.Range['D' + IntToStr(y + 2), emptyparam];
    rang.value := Zak;
          //
    rang := Sheet2.Range['E' + IntToStr(y + 2), emptyparam];
    rang.value := BZ;
          //
    if Pl_DAT <> '' then
    begin
      pl_D := StrToDate(Pl_DAT);
      if N_D > pl_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['F' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
          //
    if RAS_DAT <> '' then
    begin
      R_D := StrToDate(RAS_DAT);
      if N_D > R_D then
        XL2.ActiveWorkBook.WorkSheets[1].Range['G' + IntToStr(y + 2), emptyparam].Interior.Color := 3010538; //
    end;
    rang := Sheet2.Range['F' + IntToStr(y + 2), emptyparam];
    rang.value := Pl_DAT;
          //
    rang := Sheet2.Range['G' + IntToStr(y + 2), emptyparam];
    rang.value := RAS_DAT;
          //
    rang := Sheet2.Range['H' + IntToStr(y + 2), emptyparam];
    rang.value := Prim1;
          //
    rang := Sheet2.Range['I' + IntToStr(y + 2), emptyparam];
    rang.value := Prim2;

    Inc(y);
    Form1.ADOQuery1.Next;
  end;
  Inc(y);
  Inc(y);
  rang := Sheet2.Range['C' + IntToStr(j + 1), emptyparam];
  rang.value := '=SUM(C' + IntToStr(j + 2) + ':C' + IntToStr(y - 1) + ')';
  j := y;
  Sheet2.Range['A' + IntToStr(2), 'I' + IntToStr(y + 2)].Borders.LineStyle := 1;
  Sheet2.Range['A' + IntToStr(2), 'I' + IntToStr(y + 2)].HorizontalAlignment := 3;
        //==================================================
  try
    XL2.Application.ActiveWorkBook.SaveAs(Dir + '\' + Dat2 + '.xlsx');
  except
          // XL2.Visible := True;
    Sheet2 := UnAssigned;
    rang := UnAssigned;
    XL2 := UnAssigned;
    Exit;
  end;
        //XL2.Visible := True;
  Sheet2 := UnAssigned;
  rang := UnAssigned;
  XL2 := UnAssigned;

end;

procedure TForm1.Button64Click(Sender: TObject);
begin
  FV.Label22.Caption := 'Запуск750';
  FV.Label23.Caption := '750';
  FV.Label24.Caption := 'Специф750';
  FV.Label25.Caption := '2';
  FV.Show;
end;

procedure TForm1.Button65Click(Sender: TObject);
var
  God, Mes, I, Y, Kol, Kol_Zap, Kol_Kl, A, B, Kol_Vert, Kol_Gor, Kol_G, Kol_V, Res, Fl, X1, Res_, Kol_Otk, ne_pusto, Flag_Zagot, D1: Integer;
  Zag, Zap, OTK, Sbor, Betwe, Bet1, Dat, Dat1, Sql_Str, X, Sb_s, Sv_s, StrDat1, D, StrDat2, Izdel, Pos1, Pos2, Pos3, Pos4, Pos5, Sbor1, Str_e4, Str1, Str2, Str3: string;
  SB, SV, SB_O, SV_O: Double;
begin
  Clear_StringGrid(zclrstrngrd1);
  zclrstrngrd1.RowCount := 3;
  zclrstrngrd1.FixedRows := 2;
  Kol_Vert := 0;
  zclrstrngrd1.ColCount := 39;
  zclrstrngrd1.Cells[0, 0] := '№';
  zclrstrngrd1.Cells[I_FN_DAT, 0] := FN_DAT;
  zclrstrngrd1.Cells[I_FN_ZAK, 0] := FN_ZAK;

  zclrstrngrd1.Cells[I_FN_NAM, 0] := FN_NAM;
  zclrstrngrd1.Cells[I_FN_KOL, 0] := FN_KOL;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP, 0] := FN_KOL_ZAP;

  zclrstrngrd1.MergeCells.AddRectXY(I_FN_KOL_ZAP + 1, 0, I_FN_KOL_ZAP + 3, 0);
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 1, 0] := 'Заготовка';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 1, 1] := 'Запуск';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 2, 1] := 'Готовность';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 3, 1] := 'Планирование';
  zclrstrngrd1.MergeCells.AddRectXY(I_FN_KOL_ZAP + 4, 0, I_FN_KOL_ZAP + 6, 0);
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 4, 0] := 'Сборка';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 4, 1] := 'Запуск';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 5, 1] := 'Готовность';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 6, 1] := 'Примечание';

  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, 1] := FN_NAM;

  zclrstrngrd1.MergeCells.AddRectXY(I_FN_KOL_ZAP + 8, 0, I_FN_KOL_ZAP + 10, 0);
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 8, 0] := FN_PR_OTK;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 8, 1] := FN_PR_OTK;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 9, 1] := FN_KOL_OTK;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 10, 1] := FN_PR_OTK_PRIM;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 11, 1] := FN_DAT_OTGRUZ;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 12, 1] := 'Сборщик';
 // zclrstrngrd1.Cells[I_FN_KOL_ZAP + 13, 1] := 'X';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 13, 1] := 'Расчетная Дата';
  zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 13] := 70;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 14, 1] := 'id';
  zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 14] := 0;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 15, 1] := 'Отмена';
  zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 15] := 0;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 16, 1] := 'план Дата';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 17, 1] := 'Сборка2';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 18, 1] := 'Сборка1';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 19, 1] := 'ОТКФам';
  zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 19] := 20;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 20, 1] := 'МодПривода';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 21, 1] := 'Кол в наличии';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 22, 1] := 'Заказчик';

  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 23, 1] := 'НачНомер';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 24, 1] := 'КонНомер'; //Заводск номер
  zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 23] := 40;
  zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 24] := 40;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 25, 1] := 'Подсборка';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 26, 1] := 'IdГП';
  zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 26] := 0;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 27, 1] := 'ФлагЗаготовки';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 28, 1] := 'Цвет';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 29, 1] := 'БЗ';
  zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 28] := 0;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 30, 1] := 'Легион';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 31, 1] := 'Срочно';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 32, 1] := 'Н\ч Лопатка';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 33, 1] := 'Н\ч Тяга';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 34, 1] := 'KO';
        //zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 27] := 0;
        //Naimen:= '';
  Sbor1 := '';

  X := ' WHERE ' + Sbor1 + ' (Отмена IS NULL)  AND ([Х] IS NULL) ';
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  D := FormatDateTime('yyyy', Now);
  Delete(D, 1, 3);
  D1 := StrToInt(D);
 // ComboBox9.ItemIndex :=D1;

  if order1 = '' then
    order1 := ' Order By Номер DESC';

  if ((ComboBox42.ItemIndex = 0) or (ComboBox42.ItemIndex = -1) or (ComboBox42.Text = '')) and (ComboBox41.ItemIndex <> 0) and (ComboBox41.ItemIndex <> -1) and (ComboBox41.Text <> '') then
  begin
    God := StrToInt(ComboBox41.Items[ComboBox41.ItemIndex]);
    Dat := '12.31.' + IntToStr(God - 1);
    Dat1 := '12.31.' + IntToStr(God);
    Betwe := ' AND ((Дата >=' + #39 + Dat + #39 + ') AND (Дата<' + #39 + Dat1 + #39 + ')) ';
  end;
  if (ComboBox41.ItemIndex <> 0) and (ComboBox41.ItemIndex <> -1) and (ComboBox41.Text <> '') and (ComboBox42.ItemIndex <> 0) and (ComboBox42.ItemIndex <> -1) and (ComboBox42.Text <> '') then
  begin
    God := StrToInt(ComboBox41.Items[ComboBox41.ItemIndex]);
    Mes := ComboBox42.ItemIndex;
    Dat := IntToStr(Mes) + '.01' + '.' + IntToStr(God);
    if Mes = 12 then
      Dat1 := '01.01.' + IntToStr(God + 1)
    else
    begin
      if (Mes + 1) < 10 then
        Dat1 := '0' + IntToStr(Mes + 1) + '.01.' + IntToStr(God)
      else
        Dat1 := IntToStr(Mes + 1) + '.01.' + IntToStr(God);
    end;
    Betwe := ' AND ((Дата >=' + #39 + Dat + #39 + ') AND (Дата<' + #39 + Dat1 + #39 + ')) ';
  end;

  if (ComboBox39.ItemIndex <> -1) and (ComboBox39.ItemIndex <> 0) then
  begin
    case ComboBox39.ItemIndex of // AND ([Х] IS NULL)
      1:
        Sql_Str := Sql_Str + ' AND ([Заготовка Готовность] IS NULL) AND (Not [Заготовка Запуск] IS NULL) AND (Отмена IS NULL)  ';
      2:
        Sql_Str := Sql_Str + ' AND (Not [Заготовка Готовность] IS NULL) AND( [Сборка Запуск] IS NULL) AND (Отмена IS NULL)  ';
      3:
        Sql_Str := Sql_Str + ' AND (Not [Сборка Запуск] IS NULL) AND( [Сборка Готовность] IS NULL)  ';
      4:                                                                  //([' + FN_KOL_OTK + ']=0)
        Sql_Str := Sql_Str + ' AND (Not [Сборка Готовность] IS NULL) AND  ([Кол принятых]<[Кол во запущенных]) AND (Отмена IS NULL)  ';
      5:
        Sql_Str := Sql_Str + ' AND ([' + FN_KOL_OTK + ']=[' + FN_KOL_ZAP + ']) AND (Отмена IS NULL) ';
      6:
        begin
          X := '';
          Sql_Str := ' WHERE' + Sbor1 + '  (NOT Дата IS NULL)  AND ([Х] IS NULL)  AND ([' + FN_KOL_OTK + ']<[' + FN_KOL_ZAP + ']) AND ([' + FN_KOL_OTK + ']<>0) AND (Отмена IS NULL)  ';
        end;
      7:
        Sql_Str := Sql_Str + ' AND (NOT [' + 'Упаковка' + '] IS NULL) AND (Отмена IS NULL)  ';
      8:
        Sql_Str := Sql_Str + ' AND (Not [Отмена] IS NULL)  ';
      9:
        Sql_Str := Sql_Str + ' AND ([Заготовка Запуск] IS NULL) AND (Отмена IS NULL) ';
      10:
        Sql_Str := Sql_Str + ' AND (([Сборка Готовность] IS NULL) OR ([' + FN_KOL_OTK + ']<[' + FN_KOL_ZAP + ']) AND ([' + FN_KOL_OTK + ']<>0)) AND (Отмена IS NULL)  ';
      12:
        Sql_Str := Sql_Str + ' AND ([Упаковка] IS NULL) AND (Not [ОТК] is null) AND (Отмена IS NULL)  ';

      13:
        Sql_Str := Sql_Str + ' AND (ФлагЗаготовки=' + #39 + 'False' + #39 + ') AND (Отмена IS NULL)  ';
    end;
  end;

  if Flag_Poisk = 0 then
  begin
    if not mkQuerySelect(ADOQuery2, 'Select * from [%s]  ' + X + Sql_Str + Betwe + Bet1 + order1, ['Запуск750']) then
      exit;
  end;
  if Flag_Poisk = 1 then
  begin
    if not mkQuerySelect(ADOQuery2, 'Select * from [%s]  WHERE %s', ['Запуск750', Str_SQL_Poisk]) then
      exit;
  end;

  StatusBar1.Panels[2].Text := IntToStr(ADOQuery2.RecordCount);
  Y := 2;
        //if not mkQuerySelect( ADOQuery2, 'Select * from %s '+Order,['Запуск'] )
        //then exit;
  zclrstrngrd1.RowCount := ADOQuery2.RecordCount + 2;
  StatusBar1.Panels[2].Text := IntToStr(ADOQuery2.RecordCount);
  StringGrid4.RowCount := ADOQuery2.RecordCount + 2;
  if ADOQuery2.RecordCount<>0 Then
  StringGrid4.FixedRows :=2;
  for I := 2 to ADOQuery2.RecordCount + 1 do
  begin
    zclrstrngrd1.Cells[0, I] := ADOQuery2.FieldByName(FN_Nom).AsString;
    zclrstrngrd1.Cells[I_FN_DAT, I] := ADOQuery2.FieldByName(FN_DAT).AsString;
    zclrstrngrd1.Cells[I_FN_ZAK, I] := ADOQuery2.FieldByName(FN_ZAK).AsString;
                //zclrstrngrd1.Cells[I_FN_NAM,I] :=ADOQuery2.FieldByName(FN_NAM).AsString;
    zclrstrngrd1.Cells[I_FN_KOL, I] := ADOQuery2.FieldByName(FN_KOL).AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP, I] := ADOQuery2.FieldByName(FN_KOL_ZAP).AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 1, I] := ADOQuery2.FieldByName('Заготовка Запуск').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 2, I] := ADOQuery2.FieldByName('Заготовка Готовность').AsString;
    Zag := Prim(ADOQuery2.FieldByName('Планирование').AsString);
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 3, I] := Zag;

    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 4, I] := ADOQuery2.FieldByName('Сборка Запуск').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 5, I] := ADOQuery2.FieldByName('Сборка Готовность').AsString;
    Zap := Prim(ADOQuery2.FieldByName('Сборка Примечание').AsString);
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 6, I] := Zap;

    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, I] := ADOQuery2.FieldByName(FN_NAM).AsString;

    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 8, I] := ADOQuery2.FieldByName('ОТК').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 9, I] := ADOQuery2.FieldByName('Кол принятых').AsString;
    OTK := Prim(ADOQuery2.FieldByName('ОТК прим').AsString);
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 10, I] := OTK;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 11, I] := ADOQuery2.FieldByName('Упаковка').AsString;
    Sbor := (ADOQuery2.FieldByName('Сборщик').AsString);
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 12, I] := Sbor;
    //zclrstrngrd1.Cells[I_FN_KOL_ZAP + 13, I] := ADOQuery2.FieldByName('Х').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 13, I] := ADOQuery2.FieldByName('Расчетная дата готовности').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 14, I] := ADOQuery2.FieldByName('ID').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 15, I] := ADOQuery2.FieldByName('Отмена').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 16, I] := ADOQuery2.FieldByName('план Дата').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 17, I] := ADOQuery2.FieldByName('Н\ч Сварка').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 18, I] := ADOQuery2.FieldByName('Н\ч Сборка Клапана').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 19, I] := ADOQuery2.FieldByName('ОТКФам').AsString;
                //----------------------------------------------------------
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 20, I] := ADOQuery2.FieldByName('МодПривода').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 21, I] := ADOQuery2.FieldByName('Привод').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 22, I] := ADOQuery2.FieldByName('Заказчик').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 23, I] := ADOQuery2.FieldByName('НачНомер').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 24, I] := ADOQuery2.FieldByName('КонНомер').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 25, I] := ADOQuery2.FieldByName('Подсборка').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 26, I] := ADOQuery2.FieldByName('IdГП').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 27, I] := ADOQuery2.FieldByName('ФлагЗаготовки').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 28, I] := ADOQuery2.FieldByName('Cvet').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 29, I] := ADOQuery2.FieldByName('БЗ').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 30, I] := ADOQuery2.FieldByName('Легион').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 31, I] := ADOQuery2.FieldByName('Срочно').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 32, I] := ADOQuery2.FieldByName('Сборка лопаток').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 33, I] := ADOQuery2.FieldByName('Сборка тяг').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 34, I] := ADOQuery2.FieldByName('IDКО').AsString;
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    Sb_s := (ADOQuery2.FieldByName(FN_SBOR_KLAP_NC).AsString);
    if Sb_s = '' then
      SB := 0
    else
      SB := StrToFloat(ADOQuery2.FieldByName(FN_SBOR_KLAP_NC).AsString);
    Sv_s := (ADOQuery2.FieldByName(FN_SVARKA_NC).AsString);
    if Sv_s = '' then
      SV := 0
    else
      SV := StrToFloat(ADOQuery2.FieldByName(FN_SVARKA_NC).AsString);
    Kol := StrToInt(ADOQuery2.FieldByName(FN_KOL).AsString);
    Kol_Zap := StrToInt(ADOQuery2.FieldByName(FN_KOL_ZAP).AsString);
    Izdel := ADOQuery2.FieldByName(FN_NAM).AsString;
   { Res := Pos('КПУ', Izdel);
    Fl := Pos('2*ф', Izdel);
    if (Res <> 0) and (Fl <> 0) then
    begin

      Res := Pos(' ', Izdel);
      Delete(Izdel, 1, Res);
                        //======================================== KPU
      Res := Pos('-', Izdel);
      Pos1 := Copy(Izdel, 1, Res - 1);
      Delete(Izdel, 1, Res);
                        //======================================== 1 H
      Res := Pos('-', Izdel);
      Pos2 := Copy(Izdel, 1, 1);
      Pos3 := Copy(Izdel, 2, 1);
      Delete(Izdel, 1, Res);
                        //========================================
                        //Клапан КПУ-1Н-О-Н-600*400-2*ф-MB220-сн-0-0-0-0-0-0
                        //========================================
      Res := Pos('-', Izdel);
      Pos4 := Copy(Izdel, 1, Res - 1);
      Delete(Izdel, 1, Res);
                        //========================================
      Res := Pos('-', Izdel);
      Pos5 := Copy(Izdel, 1, Res - 1);
      Delete(Izdel, 1, Res);
                        //========================================

      Res := Pos('*', Izdel);
      if Res < 5 then
      begin
        A := StrToInt(Copy(Izdel, 1, Res - 1));
        Delete(Izdel, 1, Res);
                                //========================================
        Res := Pos('-', Izdel);
        B := StrToInt(Copy(Izdel, 1, Res - 1));
        Delete(Izdel, 1, Res);
      end;

      if (A >= 150) and (A <= 1000) then
      begin
        Kol_G := 2 * Kol;
        Kol_Gor := Kol_Gor + Kol_G;

      end;
      if (B >= 150) and (B <= 1000) then
      begin
        Kol_V := 2 * Kol;
        Kol_Vert := Kol_Vert + Kol_V;

      end;
    end;
    Kol_Kl := Kol_Kl + (Kol_Zap);
    SV_O := SV_O + SV;
    SB_O := SB_O + SB;     }
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ADOQuery2.Next;
  end;
  Flag_Poisk := 0;
  {Label40.Caption := IntToStr(Kol_Kl);
  Label64.Caption := IntToStr(Kol_Gor);
  Label66.Caption := IntToStr(Kol_Vert);
  Label37.Caption := FloatToStr(RoundTo(SB_O, -2));
  Label39.Caption := FloatToStr(RoundTo(SV_O, -2));}
  zclrstrngrd1.ColWidths[I_FN_KOL] := 0;
  Memo10.Lines.Clear;
  button76.Click;
end;

procedure TForm1.Button68Click(Sender: TObject);
var
  I, Y, Kol, Kol_Zap, Kol_Kl, Res, X, Res_: Integer;
  Zag, Zap, OTK, Sbor, Str_e4, Str, Str1, Str2, Str3, Str4, Str5, Str6, Str7, Str8, Str9, Str10, sb_s, sv_S: string;
  SV, SB, SV_O, SB_o: Double;
begin
  if (Edit37.Text = '') and (Edit38.Text = '') and (Edit40.Text = '') then
    Exit;
  Flag_Poisk := 1;
  if Edit37.Text <> '' then
  begin
    Str := Edit37.Text;
    Str_SQL_Poisk := 'Номер LIKE' + #39 + '%' + Str + '%' + #39;
  end;
  //=========================   S1:=  ' AND ([БЗ] LIKE' + #39 + Edit17.Text+'%' + #39 + ') ';
  if Edit38.Text <> '' then
  begin
    Str := Edit38.Text;
    Str_SQL_Poisk := '(Заказ LIKE ' + #39 + '%' + Str + '%' + #39 + ')';
  end;
  //=========================
  if Edit40.Text <> '' then
  begin
    Str := Edit40.Text;
    Str_SQL_Poisk := 'НачНомер LIKE ' + #39 + '%' + Str + '%' + #39;
  end;
  //=========================
  if ComboBox8.Text <> '' then
  begin
    Str := ComboBox8.Text;
    Str_SQL_Poisk := 'Сборщик LIKE ' + #39 + '%' + Str + '%' + #39;
  end;
  Button65.Click;
end;

procedure TForm1.Button6Click(Sender: TObject);
var
  SQL_Str, S, S1: string;
  I: Integer;
begin

  if (Edit16.Text <> '') then
  begin
    SQL_Str := 'Select * from %s Where (Х IS NULL) ';
    S1 := ' AND ([Заказ] LIKE' + #39 + '%' + Edit16.Text + '%' + #39 + ') '
  end;
  if (Edit17.Text <> '') then
  begin
    S1 := ' AND ([БЗ] LIKE' + #39 + '%' + Edit17.Text + '%' + #39 + ') ';
    SQL_Str := 'Select * from %s Where (Х IS NULL)  %s';

  end;
  if (Edit23.Text <> '') then
  begin
    S1 := ' AND ([Сборка Примечание] LIKE' + #39 + '%' + Edit23.Text + '%' + #39 + ') ';
    SQL_Str := 'Select * from %s Where (Х IS NULL)  %s';

  end;
  if (Edt4.Text <> '') then
  begin
    SQL_Str := 'Select * from %s Where (Х IS NULL) ';
    S1 := ' AND ([Брик_Нед1]=' + #39 + Edt4.Text + #39 + ') '
  end;
  Poisk_Vosd := 1;
  Str_SQL_Poisk := S1;
  Button28.Click;
  Exit;
  SGL.ColCount := 23; //I_FN_POS+2;
  SGL.Cells[0, 0] := '№';
  SGL.ColWidths[0] := 40;
  SGL.Cells[I_FN_DAT, 0] := FN_DAT;
  SGL.Cells[I_FN_ZAK, 0] := FN_ZAK;
  SGL.Cells[I_FN_KOL, 0] := FN_KOL;
  SGL.Cells[I_FN_KOL_ZAP, 0] := 'в пакете';
  SGL.Cells[I_FN_NAM, 0] := FN_NAM;
  SGL.Cells[I_FN_A, 0] := FN_A;
  SGL.Cells[I_FN_B, 0] := FN_B;
  SGL.Cells[I_FN_MOD_PRIVOD, 0] := FN_MOD_PRIVOD;
  SGL.Cells[I_FN_PLAN_DATA, 0] := FN_PLAN_DATA;
  SGL.Cells[I_FN_PLAN_NED, 0] := FN_PLAN_NED;
  SGL.Cells[I_FN_ZAKAZCHIK, 0] := FN_ZAKAZCHIK;
  SGL.Cells[I_FN_PR, 0] := FN_PR;
  SGL.Cells[I_FN_SGP, 0] := FN_SGP;
  SGL.Cells[I_FN_SGP + 1, 0] := 'КТО';
  SGL.Cells[I_FN_SGP + 2, 0] := 'IdГП';
  SGL.Cells[I_FN_SGP + 3, 0] := 'Брикет';
  SGL.Cells[I_FN_SGP + 4, 0] := 'Брик_Нед1';
  SGL.Cells[I_FN_SGP + 5, 0] := 'Брик_Ден1';
  SGL.Cells[I_FN_SGP + 6, 0] := 'Брик_Нед2';
  SGL.Cells[I_FN_SGP + 7, 0] := 'Брик_Ден1';
  SGL.Cells[I_FN_SGP + 8, 0] := 'IdКО';
  SGL.Cells[I_FN_SGP + 9, 0] := 'bz';
  SGL.Cells[I_FN_SGP + 10, 0] := 'СтатусФ';
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++SG6
            //
  StringGrid6.ColCount := 27;
  StringGrid6.Cells[I_FN_NOM, 0] := 'Номер раз';
  StringGrid6.Cells[I_FN_RAS_DATA_GOTOVN, 0] := FN_RAS_DATA_GOTOVN;
  StringGrid6.Cells[I_FN_BRIKET, 0] := 'Кол-во Приводов';
  StringGrid6.Cells[I_FN_TEHNOLOG, 0] := FN_TEHNOLOG;
  StringGrid6.Cells[I_FN_TEHNOLOG_GOTOV, 0] := FN_TEHNOLOG_GOTOV;
  StringGrid6.Cells[I_FN_TEHNOLOG_PRIM, 0] := FN_TEHNOLOG_PRIM;
  StringGrid6.Cells[I_FN_ZAG_ZAP, 0] := FN_ZAG_ZAP;
  StringGrid6.Cells[I_FN_ZAG, 0] := FN_ZAG;
  StringGrid6.Cells[I_FN_SBOR_ZAP, 0] := FN_SBOR_ZAP;
  StringGrid6.Cells[I_FN_SBOR, 0] := FN_SBOR;
  StringGrid6.Cells[I_FN_SBOR_PRIM, 0] := FN_SBOR_PRIM;
  StringGrid6.Cells[I_FN_PR_OTK, 0] := FN_PR_OTK;
  StringGrid6.Cells[I_FN_PR_OTK_PRIM, 0] := FN_PR_OTK_PRIM;
  StringGrid6.Cells[I_FN_DAT_OTGRUZ, 0] := FN_DAT_OTGRUZ;
  StringGrid6.Cells[I_FN_OSOBEN, 0] := FN_OSOBEN;
  StringGrid6.Cells[I_FN_SBOR_KLAP_NC, 0] := FN_SBOR_KLAP_NC;
  StringGrid6.Cells[I_FN_SVARKA_NC, 0] := FN_SVARKA_NC;
  StringGrid6.Cells[I_FN_KOL_RAZ, 0] := FN_KOL_RAZ;
  StringGrid6.Cells[I_FN_NOMER_RAZ, 0] := FN_NOM;

  StringGrid6.Cells[I_FN_FILE, 0] := FN_FILE;
  StringGrid6.Cells[I_FN_OTMENA, 0] := FN_OTMENA;
  StringGrid6.Cells[23, 0] := 'БЗ';
  StringGrid6.Cells[24, 0] := 'Статус';
  StringGrid6.Cells[25, 0] := 'Код';
  StringGrid6.Cells[26, 0] := 'РаскрЛопаток';
  StringGrid6.ColWidths[6] := 0;
  StringGrid6.ColWidths[8] := 0;
  StringGrid6.ColWidths[9] := 0;
  StringGrid6.ColWidths[11] := 0;
  StringGrid6.ColWidths[19] := 0;
  StringGrid6.ColWidths[20] := 0;
  StringGrid6.ColWidths[21] := 0;
  StringGrid6.ColWidths[22] := 0;
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++SG6
       // StringGrid9.RowCount := 1;
  if not mkQuerySelect(ADOQuery1, SQL_Str, ['KlapanaZap', S1]) then
    exit;
  if ADOQuery1.RecordCount = 0 then
  begin
    SGL.RowCount := 1;
    Clear_StringGrid(SGL);

    StringGrid6.RowCount := 1;
    Clear_StringGrid(StringGrid6);
    exit;
  end;

  StatusBar1.Panels[2].Text := IntToStr(ADOQuery1.RecordCount);
  SGL.RowCount := ADOQuery1.RecordCount + 1;
  StringGrid6.RowCount := ADOQuery1.RecordCount + 1;
  SGL.FixedRows := 1;
  StringGrid6.FixedRows := 1;
        // Clear_StringGrid(StringGrid9);
  ADOQuery1.First;
  for I := 0 to ADOQuery1.RecordCount do
  begin
    SGL.Cells[0, I + 1] := IntToStr(I + 1);

    SGL.Cells[I_FN_DAT, I + 1] := ADOQuery1.FieldByName(FN_DAT).AsString;
    SGL.Cells[I_FN_ZAK, I + 1] := ADOQuery1.FieldByName(FN_ZAK).AsString;
    SGL.Cells[I_FN_KOL, I + 1] := ADOQuery1.FieldByName(FN_KOL).AsString;
    SGL.Cells[I_FN_KOL_ZAP, I + 1] := ADOQuery1.FieldByName(FN_KOL_ZAP).AsString;
    SGL.Cells[I_FN_NAM, I + 1] := ADOQuery1.FieldByName(FN_NAM).AsString;
    SGL.Cells[I_FN_A, I + 1] := ADOQuery1.FieldByName(FN_A).AsString;
    SGL.Cells[I_FN_B, I + 1] := ADOQuery1.FieldByName(FN_B).AsString;
    SGL.Cells[I_FN_MOD_PRIVOD, I + 1] := ADOQuery1.FieldByName(FN_MOD_PRIVOD).AsString;
    SGL.Cells[I_FN_PLAN_DATA, I + 1] := ADOQuery1.FieldByName(FN_PLAN_DATA).AsString;
    SGL.Cells[I_FN_PLAN_NED, I + 1] := ADOQuery1.FieldByName(FN_PLAN_NED).AsString;
    SGL.Cells[I_FN_ZAKAZCHIK, I + 1] := ADOQuery1.FieldByName(FN_ZAKAZCHIK).AsString;
    SGL.Cells[I_FN_PR, I + 1] := ADOQuery1.FieldByName(FN_PR).AsString;
    SGL.Cells[I_FN_SGP, I + 1] := ADOQuery1.FieldByName(FN_SGP).AsString;
    SGL.Cells[I_FN_SGP + 1, I + 1] := ADOQuery1.FieldByName('№Поз').AsString;
    SGL.Cells[I_FN_SGP + 2, I + 1] := ADOQuery1.FieldByName('IdГП').AsString;

    SGL.Cells[I_FN_SGP + 3, I + 1] := ADOQuery1.FieldByName('Брикет').AsString;
    SGL.Cells[I_FN_SGP + 4, I + 1] := ADOQuery1.FieldByName('Брик_Нед1').AsString;
    SGL.Cells[I_FN_SGP + 5, I + 1] := ADOQuery1.FieldByName('Брик_Ден1').AsString;
    SGL.Cells[I_FN_SGP + 6, I + 1] := ADOQuery1.FieldByName('Брик_Нед2').AsString;
    SGL.Cells[I_FN_SGP + 7, I + 1] := ADOQuery1.FieldByName('Брик_Ден1').AsString;
    SGL.Cells[I_FN_SGP + 8, I + 1] := ADOQuery1.FieldByName('IdКО').AsString;
    SGL.Cells[I_FN_SGP + 9, I + 1] := ADOQuery1.FieldByName('bz').AsString;
    SGL.Cells[I_FN_SGP + 10, I + 1] := ADOQuery1.FieldByName('СтатусФ').AsString;
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++SG6
    StringGrid6.Cells[I_FN_NOM, I + 1] := ADOQuery1.FieldByName(FN_NOMER_RAZ).AsString;
    StringGrid6.Cells[I_FN_RAS_DATA_GOTOVN, I + 1] := ADOQuery1.FieldByName(FN_RAS_DATA_GOTOVN).AsString;
    StringGrid6.Cells[I_FN_BRIKET, I + 1] := ADOQuery1.FieldByName('Привод').AsString;
    S := ADOQuery1.FieldByName(FN_TEHNOLOG).AsString;
    StringGrid6.Cells[I_FN_TEHNOLOG, I + 1] := ADOQuery1.FieldByName(FN_TEHNOLOG).AsString;
    StringGrid6.Cells[I_FN_TEHNOLOG_GOTOV, I + 1] := ADOQuery1.FieldByName(FN_TEHNOLOG_GOTOV).AsString;
    StringGrid6.Cells[I_FN_TEHNOLOG_PRIM, I + 1] := ADOQuery1.FieldByName(FN_TEHNOLOG_PRIM).AsString;

                {SG6.Cells[I_FN_PLAN  , I + 1] :=
                        ADOQuery1.FieldByName(FN_PLAN).AsString;
                SG6.Cells[I_FN_PLAN_PRIM  , I + 1] :=
                        ADOQuery1.FieldByName(FN_PLAN_PRIM).AsString;  }

    StringGrid6.Cells[I_FN_ZAG_ZAP, I + 1] := ADOQuery1.FieldByName(FN_ZAG_ZAP).AsString;
    StringGrid6.Cells[I_FN_ZAG, I + 1] := ADOQuery1.FieldByName('Запуск').AsString + '/' + ADOQuery1.FieldByName(FN_ZAG).AsString;
    StringGrid6.Cells[I_FN_ZAG_GOT, I + 1] := ADOQuery1.FieldByName(FN_ZAG_GOT).AsString;
    StringGrid6.Cells[I_FN_SBOR_ZAP, I + 1] := ADOQuery1.FieldByName(FN_SBOR_ZAP).AsString;
    StringGrid6.Cells[I_FN_SBOR, I + 1] := ADOQuery1.FieldByName('Запуск1').AsString + '/' + ADOQuery1.FieldByName(FN_SBOR).AsString;
    StringGrid6.Cells[I_FN_SBOR_GOT, I + 1] := ADOQuery1.FieldByName(FN_SBOR_GOT).AsString;
    StringGrid6.Cells[I_FN_SBOR_PRIM, I + 1] := ADOQuery1.FieldByName(FN_SBOR_PRIM).AsString;
    StringGrid6.Cells[I_FN_PR_OTK, I + 1] := ADOQuery1.FieldByName(FN_PR_OTK).AsString;
    StringGrid6.Cells[I_FN_PR_OTK_PRIM, I + 1] := ADOQuery1.FieldByName(FN_PR_OTK_PRIM).AsString;
    StringGrid6.Cells[I_FN_DAT_OTGRUZ, I + 1] := ADOQuery1.FieldByName('Упаковка').AsString;

    StringGrid6.Cells[I_FN_OSOBEN, I + 1] := ADOQuery1.FieldByName(FN_OSOBEN).AsString;
    StringGrid6.Cells[I_FN_SBOR_KLAP_NC, I + 1] := ADOQuery1.FieldByName(FN_SBOR_KLAP_NC).AsString;
    StringGrid6.Cells[I_FN_SVARKA_NC, I + 1] := ADOQuery1.FieldByName(FN_SVARKA_NC).AsString;

    StringGrid6.Cells[I_FN_KOL_RAZ, I + 1] := ADOQuery1.FieldByName(FN_KOL_RAZ).AsString;
    StringGrid6.Cells[I_FN_NOMER_RAZ, I + 1] := ADOQuery1.FieldByName(FN_NOM).AsString;

    StringGrid6.Cells[I_FN_FILE, I + 1] := ADOQuery1.FieldByName(FN_FILE).AsString;

    StringGrid6.Cells[I_FN_OTMENA, I + 1] := ADOQuery1.FieldByName(FN_OTMENA).AsString;
    StringGrid6.Cells[23, I + 1] := ADOQuery1.FieldByName('БЗ').AsString;
    StringGrid6.Cells[24, I + 1] := ADOQuery1.FieldByName('Статус').AsString;
    StringGrid6.Cells[25, I + 1] := ADOQuery1.FieldByName('Код').AsString;
    StringGrid6.Cells[26, I + 1] := ADOQuery1.FieldByName(FN_RASKR_LOP).AsString;
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++SG6
    ADOQuery1.Next;
  end;
  if not mkQuerySelect(ADOQuery2, 'Select * from %s  Where (Технолог=' + #39 + 'False' + #39 + ')', ['ШаблонВоз']) then
    exit;
  Label104.Caption := IntToStr(ADOQuery2.RecordCount);
end;

procedure TForm1.btn24Click(Sender: TObject);
begin
  ExportGridtoExcel2(SGL);
end;

procedure TForm1.btn26Click(Sender: TObject);
var
  I, j, y, XX, YY, LL, RR, g, Res, Kol, Kol_Sbor: Integer;
  Kol_Det: Double;
  Dat1, Dat2, Dat3, Zaka, Nedel, DatGot, Pos11, Pos22, Pos_Isp, A, B, Izdel: string;
  Dat: TDate;
  Nach, Kon, Sbor_Zap, Sbor_Got, Zag_Zap, Zag_Got, OTK, Up, Rasch, Rasch1: string;
  SS, StrDat1, StrDat2, StrDat3, SBor, K_Sbor, Nam, Kol_Zap_S, StrNom, Oboz, Kol_S, Idgp, Izdelie, id, God, Mes, dir, Zak, sss: string;
  XL: Variant;
begin
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  Dat1 := FormatDateTime('dd.mm.YYYY', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  //StrDat3 := FormatDateTime('dd.mm.yyyy', DateTimePicker3.DateTime);
  God := FormatDateTime('yyyy', Now);
  Mes := FormatDateTime('mmmm', Now);

  dir := Put_KTO + '\CKlapana\Стенки\';
  CreateDir(dir);

  dir := Put_KTO + '\CKlapana\Стенки\' + God + '\';
  CreateDir(dir);

  dir := Put_KTO + '\CKlapana\Стенки\' + God + '\' + Mes + '\';
  CreateDir(dir);
  XX := 0;
  YY := 0;
  LL := 1;
  RR := 0;
  SyStem.SysUtils.FormatSettings.DecimalSeparator := ('.');
  if not mkQuerySelect(ADOQuery1, 'Select* from %s Where  (Планирование Between ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ')  ORDER BY Номер,IdГП', ['Запуск']) then
    exit;
  if ADOQuery1.RecordCount > 0 then
  begin
    XL := CreateOleObject('Excel.Application'); //
    XL.Application.EnableEvents := false;
    XL.Workbooks.Open(Put_KTO + '\CKlapana2\2013\Шаблон заданий клапана.xlsx');

  end;

  for j := 0 to ADOQuery1.RecordCount - 1 do
  begin
    Kol_Zap_S := ADOQuery1.FieldByName('Кол во запущенных').AsString;
    Kol := ADOQuery1.FieldByName('Кол во запущенных').AsInteger;
    StrNom := ADOQuery1.FieldByName('Номер').AsString;
    Izdel := ADOQuery1.FieldByName('Изделие').AsString;
    Idgp := ADOQuery1.FieldByName('IdГП').AsString;
    StrDat3 := ADOQuery1.FieldByName('Планирование').AsString;
    Dat := StrToDate(StrDat3);
    Dat3 := FormatDateTime('dd.mm.YYYY', Dat);
    Zak := ADOQuery1.FieldByName('Заказ').AsString;
          //==============================================
    SS := ' AND (Элемент LIKE ' + #39 + 'Лопатка' + '%' + #39 + ') AND (ВидЭлемента=' + #39 + 'Сборочные единицы' + #39 + ')';
    if not mkQuerySelect1(ADOQuery2, 'Select* from %s Where  ( IdГП=' + #39 + Idgp + #39 + ') %s', ['Специф', SS]) then
      exit;
    SBor := '';
    K_Sbor := '';
    if ADOQuery2.RecordCount <> 0 then
    begin
      XL.ActiveWorkBook.Sheets.Item[2].Activate;
              // Выравнивам по центру по вертикали
      XL.ActiveWorkBook.WorkSheets[2].Columns[6].VerticalAlignment := 2;
      XL.ActiveWorkBook.WorkSheets[2].Columns[6].HorizontalAlignment := 3;
              // Шрифт жирный
      XL.ActiveWorkBook.WorkSheets[2].Columns[6].Font.Bold := True;
      XL.ActiveWorkBook.WorkSheets[2].Columns[6].Font.Color := clBlack;
             // XL.ActiveWorkBook.WorkSheets[2].Columns[6].Font.Size := 20;
      XL.ActiveWorkBook.WorkSheets[2].Columns[6].Font.Name := 'Times New Roman';

      XL.ActiveWorkBook.WorkSheets[2].Cells[XX + 2, 1] := '№ заказа';
      XL.ActiveWorkBook.WorkSheets[2].Cells[XX + 2, 2] := Zak;
      XL.ActiveWorkBook.WorkSheets[2].Cells[XX + 2, 4] := '№ ' + StrNom;
      XL.ActiveWorkBook.WorkSheets[2].Cells[XX + 2, 5] := Dat3;
              // Шрифт жирный
      XL.ActiveWorkBook.WorkSheets[2].Rows[XX + 2].Font.Bold := True;
      XL.ActiveWorkBook.WorkSheets[2].Rows[XX + 2].Font.Color := clBlack;
      XL.ActiveWorkBook.WorkSheets[2].Rows[XX + 2].Font.Size := 14;
      XL.ActiveWorkBook.WorkSheets[2].Rows[XX + 2].Font.Name := 'Times New Roman';
              //======================================
      XL.ActiveWorkBook.WorkSheets[2].Cells[XX + 4, 3] := Izdel;
      XL.ActiveWorkBook.WorkSheets[2].Cells[XX + 4, 5] := IntToStr(Kol);
      XL.ActiveWorkBook.WorkSheets[2].Cells[XX + 4, 6] := IntToStr(j + 1);
    end;

    for y := 0 to ADOQuery2.RecordCount - 1 do
    begin
      id := ADOQuery2.FieldByName('Id').AsString;
      Oboz := ADOQuery2.FieldByName('Обозначение').AsString;
      SBor := SBor + '\' + Oboz;

      Kol_Sbor := ADOQuery2.FieldByName('Количество').AsInteger * Kol;
      K_Sbor := K_Sbor + '\' + IntToStr(Kol_Sbor);

      Nam := ADOQuery2.FieldByName('Элемент').AsString;
                  //======================================
      XL.ActiveWorkBook.WorkSheets[2].Cells[XX + 5, 1] := Nam;
      XL.ActiveWorkBook.WorkSheets[2].Cells[XX + 5, 3] := Oboz;
      XL.ActiveWorkBook.WorkSheets[2].Cells[XX + 5, 5] := IntToStr(Kol_Sbor);
                  // Шрифт жирный
      XL.ActiveWorkBook.WorkSheets[2].Rows[XX + 5].Font.Bold := True;
      XL.ActiveWorkBook.WorkSheets[2].Rows[XX + 5].Font.Color := clBlack;
      XL.ActiveWorkBook.WorkSheets[2].Rows[XX + 5].Font.Size := 14;
      XL.ActiveWorkBook.WorkSheets[2].Rows[XX + 5].Font.Name := 'Times New Roman';
      XL.ActiveWorkBook.WorkSheets[2].Range['A' + IntToStr(XX + 5) + ':' + 'E' + IntToStr(XX + 5)].Interior.Color := 11119017;
      Inc(XX);
      ADOQuery2.Next;
    end;
    ADOQuery2.First;
    for y := 0 to ADOQuery2.RecordCount - 1 do
    begin
      id := ADOQuery2.FieldByName('Id').AsString;
      if not mkQuerySelect66(ADOQuery4, 'Select* from %s Where  ( Технолог=' + #39 + id + #39 + ') AND ( IdГП=' + #39 + Idgp + #39 + ') ', ['Специф']) then
        exit;
      for I := 0 to ADOQuery4.RecordCount - 1 do
      begin
        Nam := ADOQuery4.FieldByName('Элемент').AsString;
        Oboz := ADOQuery4.FieldByName('Обозначение').AsString;
        Res := Pos('ЛТУ', Nam);
        if Res <> 0 then
          Delete(Nam, Res, 500);
                    //
        Res := Pos('ТИБ', Nam);
        if Res <> 0 then
          Delete(Nam, Res, 500);
                    //
        Kol_Det := ADOQuery4.FieldByName('Количество').AsFloat * Kol;
        Kol_S := FloatToStr(Kol_Det);
        XL.ActiveWorkBook.WorkSheets[2].Cells[XX + 6, 3] := Nam;
        XL.ActiveWorkBook.WorkSheets[2].Cells[XX + 6, 4] := Oboz;
        XL.ActiveWorkBook.WorkSheets[2].Cells[XX + 6, 5] := Kol_S;
        XL.ActiveWorkBook.WorkSheets[2].Range['C' + IntToStr(XX + 6) + ':' + 'E' + IntToStr(XX + 6)].Borders.LineStyle := 1;
        XL.ActiveWorkBook.WorkSheets[2].Range['C' + IntToStr(XX + 6) + ':' + 'E' + IntToStr(XX + 6)].Borders.Weight := 2;
        XL.ActiveWorkBook.WorkSheets[2].Range['C' + IntToStr(XX + 6) + ':' + 'E' + IntToStr(XX + 6)].Borders.ColorIndex := 1;
        ADOQuery4.Next;
        Inc(XX);
      end;
      ADOQuery2.Next;
    end;
               // Обьединяем ячейки
    XL.ActiveWorkBook.WorkSheets[2].Range['F' + IntToStr(YY + 4) + ':' + 'F' + IntToStr(XX + 5)].Merge;
    XL.ActiveWorkBook.WorkSheets[2].Range['F' + IntToStr(YY + 4) + ':' + 'F' + IntToStr(XX + 5)].Font.Size := 36;
    XL.ActiveWorkBook.WorkSheets[2].Cells[XX + 6, 1] := '--------------------------------------------------------------------------------------------' + '--------------------------------------------------------------------------------------------';
    Inc(XX, 6);
    YY := XX;

    XL.ActiveWorkBook.Sheets.Item[1].Activate;
    XL.ActiveWorkBook.WorkSheets[1].Cells[2, 6] := Dat1;

    try
      XL.ActiveWorkBook.Worksheets[1].Range['A' + IntToStr(j + 6) + ':I' + IntToStr(j + 6)].Select;
      XL.Selection.Copy;
      XL.ActiveWorkBook.Worksheets[1].Range['A' + IntToStr(j + 7)].Select;
      XL.ActiveWorkBook.Worksheets[1].Paste;
    except
      MessageDlg('2!' + IntToStr(j + 7), mtError, [mbOk], 0);
    end;
    XL.ActiveWorkBook.WorkSheets[1].Cells[j + 6, 1] := StrNom;
    XL.ActiveWorkBook.WorkSheets[1].Cells[j + 6, 2] := Dat3;
    XL.ActiveWorkBook.WorkSheets[1].Cells[j + 6, 3] := Zak;
    XL.ActiveWorkBook.WorkSheets[1].Cells[j + 6, 4] := Kol_Zap_S;
    XL.ActiveWorkBook.WorkSheets[1].Cells[j + 6, 5] := Izdel;
    XL.ActiveWorkBook.WorkSheets[1].Cells[j + 6, 6] := SBor;
    XL.ActiveWorkBook.WorkSheets[1].Cells[j + 6, 7] := K_Sbor;
         // XL.ActiveWorkBook.WorkSheets[1].Cells[ j+6, 8] :=Idgp;
    XL.ActiveWorkBook.WorkSheets[1].Cells[j + 6, 9] := IntToStr(j + 1);

    ADOQuery1.Next;
  end;
  if ADOQuery1.RecordCount > 38 then
  begin
    XL.ActiveWorkBook.WorkSheets[1].PageSetup.FitToPagesTall := 2; // 2 Страницы ПО ВЫСОТЕ
    XL.ActiveWorkBook.WorkSheets[1].PageSetup.PrintTitleRows := '$' + IntToStr(1) + ':$' + IntToStr(5); //6 7
  end;

  XL.ActiveWorkBook.Sheets.Item[2].Activate;
  XL.ActiveWindow.View := 2;   //2=xlPageBreakPreview
  YY := XL.ActiveWorkBook.WorkSheets[2].HPageBreaks.Count;
  if YY <> 0 then
  begin
    for I := 1 to YY do
    begin

      XX := XL.ActiveWorkBook.WorkSheets[2].HPageBreaks.Item[I].Location.Row;

      for j := XX downto 1 do
      begin
        sss := XL.ActiveWorkBook.WorkSheets[2].Cells[j, 1];
        Res := Pos('--', sss);
        if Res <> 0 then
        begin

          XL.ActiveWorkBook.WorkSheets[2].HPageBreaks.Item[I].Location := XL.ActiveWorkBook.WorkSheets[2].Range['A' + IntToStr(j + 1) + ':A' + IntToStr(j + 1)];
          Break;
        end;
      end;
    end;
  end;
  XL.ActiveWindow.View := 1;
  Korpus(XL);
  Sborka(XL);
  XL.Application.ActiveWorkBook.SaveAs(dir + '\' + Dat1 + '.xlsx');
  XL.Visible := True;
  XL := UnAssigned;
end;

procedure TForm1.NNN40Click(Sender: TObject);
var
  Str1: string;
begin
  Str1 := StringGrid6.Cells[StringGrid6.Col, StringGrid6.Row];
  Memo11.Lines.Clear;
  Memo11.Lines.Add(Str1);
  Clipboard.AsText := Memo11.Lines.Strings[0];
end;

procedure TForm1.btn27Click(Sender: TObject);
var
  Kol, Kol1, Res, Kol_OTK, Kol_dn, Kol_nal, Kol_Vid, I, J, Flag_Zag, Cvet, Res2: Integer;
  Dat, Dat_Zap, Dat1, Dat_Plan, Planir: TDate;
begin

  for I := 0 to ZSG.RowCount - 1 do
  begin
    if (I > 1) then
    begin
      if ZSG.Cells[I_FN_KOL, I] = '' then
        Kol := 0
      else
        Kol := StrToInt(ZSG.Cells[I_FN_KOL, I]);
      if ZSG.Cells[I_FN_KOL_ZAP, I] = '' then
        Kol1 := 0
      else
        Kol1 := StrToInt(ZSG.Cells[I_FN_KOL_ZAP, I]);
      for J := 0 to ZSG.ColCount - 1 do
        ZSG.CellStyle[J, I].BGColor := clWhite;
                        // Заготовка запуск  Желтый
      if (ZSG.Cells[I_FN_KOL_ZAP + 1, I] <> '') then
      begin
        for J := 0 to ZSG.ColCount - 1 do
          ZSG.CellStyle[J, I].BGColor := RGB(247, 247, 131);
      end;
                        // Заготовка готова Оранж
      if (ZSG.Cells[I_FN_KOL_ZAP + 2, I] <> '') then
      begin
        for J := 0 to ZSG.ColCount - 1 do
          ZSG.CellStyle[J, I].BGColor := RGB(153, 102, 51);
      end;
                        //Сборка запуск Светло зеленый
      if (ZSG.Cells[I_FN_KOL_ZAP + 4, I] <> '') then
      begin
        for J := 0 to ZSG.ColCount - 1 do
          ZSG.CellStyle[J, I].BGColor := RGB(0, 255, 0);

      end;
                        // Сборка готова  Зеленый
      if (ZSG.Cells[I_FN_KOL_ZAP + 5, I] <> '') then
      begin
        for J := 0 to ZSG.ColCount - 1 do
          ZSG.CellStyle[J, I].BGColor := RGB(102, 255, 204);

      end;
      if ZSG.Cells[I_FN_KOL_ZAP + 16, I] <> '' then
      begin
        Dat_Plan := StrToDate(ZSG.Cells[I_FN_KOL_ZAP + 16, I]);
        Kol_dn := (Trunc(Now) - Trunc(Dat_Plan));
      end;
                        // Плановая дата истекла
      if ZSG.Cells[8, I] <> '' then
      begin
        Dat_Zap := StrToDate(ZSG.Cells[8, I]);
        Dat1 := Trunc(Now);
        if ((Trunc(Now) > Trunc(Dat_Zap))) and (ZSG.Cells[9, I] = '') then
        begin

          ZSG.CellStyle[16, I].BGColor := RGB(242, 12, 20); //Красный
          ZSG.CellStyle[16, I].Font.Color := RGB(255, 255, 255); //Белый
        end;

      end;
      if (Kol_dn > 1) and (ZSG.Cells[I_FN_KOL_ZAP + 5, I] = '') and (ZSG.Col = I_FN_KOL_ZAP + 6) then
      begin
        for J := 0 to ZSG.ColCount - 1 do
        begin
          ZSG.CellStyle[J, I].BGColor := RGB(242, 12, 20); //Красный
         // ZSG.CellStyle[J, I].Font.Color := RGB(255, 255, 255); //Белый

        end;
      end;
                        //++++++++++++++++++++++++++++++++++++++++++++++
      if ZSG.Cells[7, I] <> '' then
      begin
        Planir := StrToDate(ZSG.Cells[7, I]);

        if (Dat_Plan < Planir) then
        begin

          ZSG.CellStyle[16, I].BGColor := RGB(242, 12, 20); //Красный
          ZSG.CellStyle[16, I].Font.Color := RGB(255, 255, 255); //Белый
        end;
      end;
                        //++++++++++++++++++++++++++++++++++++++++++++++
      if ZSG.Cells[8, I] <> '' then
      begin
        Dat_Zap := StrToDate(ZSG.Cells[8, I]);

        if (Dat_Plan < Dat_Zap) then
        begin

          ZSG.CellStyle[16, I].BGColor := RGB(242, 12, 20); //Красный
          ZSG.CellStyle[16, I].Font.Color := RGB(255, 255, 255); //Белый
        end;
      end;
                        // OTK  Темно зеленый
      if ZSG.Cells[I_FN_KOL_ZAP + 9, I] = '' then
        Kol_OTK := 0
      else
        Kol_OTK := StrToInt(ZSG.Cells[I_FN_KOL_ZAP + 9, I]);
      if (Kol_OTK = Kol1) then
      begin
        for J := 0 to ZSG.ColCount - 1 do
          ZSG.CellStyle[J, I].BGColor := RGB(0, 100, 0);
                                //ZSG.CellStyle[16, i].BGColor := RGB(0, 100,
                                //        0);

      end;

      if (ZSG.Cells[I_FN_KOL_ZAP + 11, I] <> '') then
                                //Отгрузка синий
      begin
        for J := 0 to ZSG.ColCount - 1 do
          ZSG.CellStyle[J, I].BGColor := RGB(30, 144, 255);

      end;
      if (Kol1 = 0) then
      begin
        for J := 0 to ZSG.ColCount - 1 do
          ZSG.CellStyle[J, I].BGColor := clWindow;
      end;
      if (ZSG.Cells[I_FN_KOL_ZAP + 15, I] <> '') then
                                //Отмена Серый
      begin
        for J := 0 to ZSG.ColCount - 1 do
          ZSG.CellStyle[J, I].BGColor := clGray;
      end;
      if ZSG.Cells[I_FN_KOL_ZAP + 21, I] = '' then
        Kol_nal := 0
      else
        Kol_nal := StrToInt(ZSG.Cells[I_FN_KOL_ZAP + 21, I]);
     { if ZSG.Cells[I_FN_KOL_ZAP + 22, I] = '' then
        Kol_Vid := 0
      else }

      if (ZSG.Col = I_FN_KOL_ZAP + 21) and (Kol_nal = Kol) then
                                //привода В наличии Все синий
      begin
        ZSG.CellStyle[I_FN_KOL_ZAP + 21, I].BGColor := clActiveCaption;
      end;
      Kol_Vid := Pos('ЛЕГИОН', AnsiUpperCase(ZSG.Cells[I_FN_KOL_ZAP + 22, I]));
      if (Kol_Vid <> 0) then//  ЛЕГИОН
      begin
        ZSG.CellStyle[7, I].BGColor := RGB(144, 46, 242);
      end;
                        ///++++++++++++++++++++++++++++
      Flag_Zag := Pos('rue', ZSG.Cells[I_FN_KOL_ZAP + 27, I]);
      if (Flag_Zag = 0) then
                                //Флаг заготовки 0 ( False) ни чего нельзя делать

      begin
        for J := 0 to ZSG.ColCount - 1 do
          ZSG.CellStyle[J, I].BGColor := RGB(153, 153, 255);
      end;
      if (Kol_OTK < Kol1) and (Kol_OTK <> 0) then //Красный
      begin
        for J := 0 to ZSG.ColCount - 1 do
          ZSG.CellStyle[J, I].BGColor := RGB(250, 0, 0);

      end;

     // if   (ZSG.Col=1) then
      ZSG.CellStyle[1, I].BGColor := RGB(255, 255, 255);
      //if   (ZSG.Col=0) then
      ZSG.CellStyle[0, I].BGColor := RGB(255, 255, 255);

      Cvet := StrToInt(ZSG.Cells[I_FN_KOL_ZAP + 28, I]);
      case Cvet of
        0:
          begin
            ZSG.CellStyle[0, I].BGColor := RGB(255, 255, 255); //Белый
          end;
        1:
          begin
            ZSG.CellStyle[0, I].BGColor := RGB(234, 239, 45); //Желтый
          end;
        2:
          begin
            ZSG.CellStyle[0, I].BGColor := RGB(41, 243, 104); //Зеленый
          end;
        3:
          begin
            ZSG.CellStyle[0, I].BGColor := RGB(122, 156, 250); //Голубой
          end;
      end;
      //Голубой если есть фамилия
      if ZSG.Cells[I_FN_KOL_ZAP + 35, I]<>'' then
           ZSG.CellStyle[I_FN_KOL_ZAP + 1, I].BGColor := RGB(0, 255, 255); //К
      if ZSG.Cells[I_FN_KOL_ZAP + 33, I]<>'' then
           ZSG.CellStyle[I_FN_KOL_ZAP + 2, I].BGColor := RGB(0, 255, 255); //К
     if ZSG.Cells[I_FN_KOL_ZAP + 25, I]<>'' then
           ZSG.CellStyle[I_FN_KOL_ZAP + 3, I].BGColor := RGB(0, 255, 255); //К
     //Голубой если есть фамилия

      Res2 := Pos('rue', ZSG.Cells[I_FN_KOL_ZAP + 31, I]);
      if (Res2 <> 0) then
      //Срочно
      begin
        ZSG.CellStyle[2, I].BGColor := RGB(242, 12, 20); //Красный
        ZSG.CellStyle[2, I].Font.Color := RGB(255, 255, 255); //Белый
      end;
    end;
  end;
end;

procedure TForm1.btn28Click(Sender: TObject);
var
  Kol, Kol1, Res, Kol_OTK, Kol_dn, Kol_nal, Kol_Vid, I, J, Flag_Zag, Cvet, Res2: Integer;
  Dat: TDate;
begin

  for I := 0 to ZCV.RowCount - 1 do
  begin
    if I > 1 then
    begin
      if ZCV.Cells[4, I] = '' then
        Kol := 0
      else
        Kol := StrToInt(ZCV.Cells[4, I]);
      if ZCV.Cells[5, I] = '' then
        Kol1 := 0
      else
        Kol1 := StrToInt(ZCV.Cells[5, I]);
      for J := 0 to ZCV.ColCount - 1 do
        ZCV.CellStyle[J, I].BGColor := clWhite;
                // Заготовка запуск  Желтый
      if (ZCV.Cells[6, I] <> '') then
      begin
        for J := 0 to ZCV.ColCount - 1 do
          ZCV.CellStyle[J, I].BGColor := RGB(247, 247, 131);
      end;
                // Заготовка готова Оранж
      if (ZCV.Cells[7, I] <> '') then
      begin
        for J := 0 to ZCV.ColCount - 1 do
          ZCV.CellStyle[J, I].BGColor := RGB(153, 102, 51);
      end;
                //Сборка запуск Светло зеленый
      if (ZCV.Cells[9, I] <> '') then
      begin
        for J := 0 to ZCV.ColCount - 1 do
          ZCV.CellStyle[J, I].BGColor := RGB(0, 255, 0);

      end;
                // Сборка готова  Зеленый
      if (ZCV.Cells[10, I] <> '') then
      begin
        for J := 0 to ZCV.ColCount - 1 do
          ZCV.CellStyle[J, I].BGColor := RGB(102, 255, 204);

      end;
                // OTK  Темно зеленый
      if ZCV.Cells[14, I] = '' then
        Kol_OTK := 0
      else
        Kol_OTK := StrToInt(ZCV.Cells[14, I]);
      if (Kol_OTK = Kol1) then
      begin
        for J := 0 to ZCV.ColCount - 1 do
          ZCV.CellStyle[J, I].BGColor := RGB(0, 100, 0);

      end;
      if (Kol_OTK < Kol1) and (Kol_OTK <> 0) then //Красный
      begin
        for J := 0 to ZCV.ColCount - 1 do
        begin
          ZCV.CellStyle[J, I].BGColor := RGB(250, 0, 0);
          ZCV.CellStyle[J, I].Font.Color := RGB(255, 255, 255); //Белый
        end;

      end;

      if (ZCV.Cells[16, I] <> '') then
                        //Отгрузка синий
      begin
        for J := 0 to ZCV.ColCount - 1 do
          ZCV.CellStyle[J, I].BGColor := RGB(30, 144, 255);

      end;
      if (Kol1 = 0) then
      begin
        for J := 0 to ZCV.ColCount - 1 do
          ZCV.CellStyle[J, I].BGColor := clWindow;
      end;
      if ZCV.Cells[20, I] <> '' then
      begin
        Dat := StrToDate(ZCV.Cells[20, I]);
        Kol_dn := (Trunc(Now) - Trunc(Dat));
                        // Плановая дата истекла
        if (Kol_dn > 1) and (ZCV.Cells[10, I] = '') and (ZCV.Col = 10) then
        begin
          for J := 0 to ZCV.ColCount - 1 do
          begin
            ZCV.CellStyle[J, I].BGColor := RGB(242, 12, 20); //Красный
           // ZCV.CellStyle[J, I].Font.Color := RGB(255, 255, 255); //Белый

          end;
        end;

      end;
      if (ZCV.Cells[19, I] <> '') then
                        //Отмена Серый
      begin
        for J := 0 to ZCV.ColCount - 1 do
          ZCV.CellStyle[J, I].BGColor := clGray;
      end;

      Kol_nal := Pos('ЛЕГИОН', AnsiUpperCase(ZCV.Cells[26, I]));
      if (Kol_nal <> 0) then
        ZCV.CellStyle[12, I].BGColor := RGB(144, 46, 242);
                ///++++++++++++++++++++++++++++
      Flag_Zag := Pos('rue', ZCV.Cells[34, I]);
      if (Flag_Zag = 0) then
      //Флаг заготовки 0 ( False) ни чего нельзя делать
      begin
        for J := 0 to ZCV.ColCount - 1 do
          ZCV.CellStyle[J, I].BGColor := RGB(153, 153, 255);
      end;
      Res2 := Pos('rue', ZCV.Cells[36, I]); //Срочно
      if (Res2 <> 0) then
      begin
        ZCV.CellStyle[2, I].BGColor := RGB(242, 12, 20);
         // ZCV.CellStyle[2, I].Font.Color := RGB(255, 255, 255); //Белый
      end;
      //if ZCV.Col=1 then
      ZCV.CellStyle[1, I].BGColor := RGB(255, 255, 255);

      //if ZCV.Col=0 then
      ZCV.CellStyle[0, I].BGColor := RGB(255, 255, 255);
      Cvet := StrToInt(ZCV.Cells[35, I]);
      case Cvet of
        0:
          begin
            ZCV.CellStyle[0, I].BGColor := RGB(255, 255, 255); //Белый
          end;
        1:
          begin
            ZCV.CellStyle[0, I].BGColor := RGB(234, 239, 45); //Желтый
          end;
        2:
          begin
            ZCV.CellStyle[0, I].BGColor := RGB(41, 243, 104); //Зеленый
          end;
        3:
          begin
            ZCV.CellStyle[0, I].BGColor := RGB(122, 156, 250); //Голубой
          end;
      end;
            //Голубой если есть фамилия
      if ZCV.Cells[45, I]<>'' then
           ZCV.CellStyle[6, I].BGColor := RGB(0, 255, 255); //К
      if ZCV.Cells[44, I]<>'' then
           ZCV.CellStyle[7, I].BGColor := RGB(0, 255, 255); //К
     if ZCV.Cells[43, I]<>'' then
           ZCV.CellStyle[8, I].BGColor := RGB(0, 255, 255); //К
     //Голубой если есть фамилия
    end;
  end;
end;

procedure TForm1.btn29Click(Sender: TObject);
var
  Idgp, Oboz, Os, StrDat1, StrDat2, StrDat3, Vn_Dat, God, Mes, Dir, Kol, Kol_Zap, Err, FileName_Server, Izdel, S, Proc, Str1: string;
  i, J, Res, Kol_I: Integer;
  XL: Variant;
  TempTableQ1: TADOQuery;
begin
        //Clear_StringGrid(ZSG);
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  StrDat3 := FormatDateTime('mm.dd.yyyy', Now);
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Vn_Dat := FormatDateTime('mm.dd.yyyy ', Now);
  God := FormatDateTime('yyyy', Now);
  Mes := FormatDateTime('mmmm', Now);

  Dir := Put_KTO + '\CKlapana\Стенки\';
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\Стенки\' + God + '\';
  CreateDir(Dir);

  Dir := Put_KTO + '\CKlapana\Стенки\' + God + '\' + Mes + '\';
  CreateDir(Dir);

  XL := CreateOleObject('Excel.Application'); //
  XL.Application.EnableEvents := false;
  XL.Workbooks.Open(Put_KTO + '\CKlapana2\2013\СтенкиОбраз.xls');
  XL.ActiveWorkBook.Sheets.Item[2].Activate;
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Proc := #39 + '%Ось%' + #39;
  S := ExtractFileDir(ParamStr(0));

  if ADOConnection = nil then
    ADOConnection := TADOConnection.Create(Self);
  ADOConnection.LoginPrompt := False;
  ADOConnection.Connected := False;
  ADOConnection.ConnectionString := MSSQL_CONN_STR_Glob;
  try
    ADOConnection.Connected := True;

    TempTableQ1 := TADOQuery.Create(nil);
    TempTableQ1.Connection := ADOConnection;
  except
    MessageDlg('Не удалось подключиться к базе данных1!', mtError, [mbOk], 0);
    Close;
  end;
  //Создание временной таблицы
  //  ClientToDBFL1    Для Программистов

  TempTableQ1.SQL.Text := 'CREATE TABLE #ClientToDBFL1 (Kol int,KolZap int,idgp Int,' + 'Klapan nvarchar(250) )';
  try
    TempTableQ1.ExecSQL;
  except
    Err := '1222';
  end;

  for i := 0 to ZSG.RowCount - 1 do
  begin
    if ZSG.Cells[I_FN_KOL_ZAP + 26, i + 2] = '' then
      Continue;
    Idgp := ZSG.Cells[I_FN_KOL_ZAP + 26, i + 2];
    Izdel := ZSG.Cells[I_FN_KOL_ZAP + 7, i + 2];
    Kol := ZSG.Cells[I_FN_KOL, i + 2];
    Kol_Zap := ZSG.Cells[I_FN_KOL_ZAP, i + 2];
    TempTableQ1.SQL.Text := 'INSERT INTO #ClientToDBFL1 ' + '(Kol,KolZap,idgp,Klapan' + ') Values (' + Kol + ',' + Kol_Zap + ',' + Idgp + ',' + #39 + Izdel + #39 + ')';

    try
      TempTableQ1.ExecSQL;
    except
      Err := '1222';
    end;

  end;
  TempTableQ1.SQL.Text := 'SELECT KolZap,COUNT(KolZap) AS A,idgp  FROM #ClientToDBFL1 GROUP BY KolZap,idgp';
        //TempTableQ.LockType:=ltBatchOptimistic;
  TempTableQ1.Open;
        //+++++++++++++++++++++++++++++++++++++++
  TempTableQ1.First;
  for i := 0 to TempTableQ1.RecordCount - 1 do
  begin
    Idgp := TempTableQ1.FieldByName('idgp').AsString;
    Kol_I := TempTableQ1.FieldByName('A').AsInteger;
    ADOQuery2.Close;
    ADOQuery2.SQL.Clear;
    Str1 := 'Select Количество,COUNT(Количество) AS B,idГП,Элемент,Обозначение from Специф Where (Элемент LIKE ' + Proc + ') AND(IdГП=' + #39 + Idgp + #39 + ')  GROUP BY idГП,Количество,Элемент,Обозначение ';
    ADOQuery2.SQL.Text := Str1;
    ADOQuery2.Active := True;

    for J := 0 to ADOQuery2.RecordCount - 1 do
    begin
      Oboz := ADOQuery2.FieldByName('Элемент').AsString;
      Kol := ADOQuery2.FieldByName('Количество').AsString;
      XL.ActiveWorkBook.WorkSheets[2].Rows[J + 9].Select;
      XL.Selection.EntireRow.Insert;
      XL.ActiveWorkBook.WorkSheets[2].Range['C' + IntToStr(J + 9), 'C' + IntToStr(J + 9)] := Oboz;
      XL.ActiveWorkBook.WorkSheets[2].Range['D' + IntToStr(J + 9), 'D' + IntToStr(J + 9)] := IntToStr(Kol_I * StrToInt(Kol));
      XL.ActiveWorkBook.WorkSheets[2].Range['F' + IntToStr(J + 9), 'F' + IntToStr(J + 9)] := ADOQuery2.FieldByName('Обозначение').AsString;
      ;
      ADOQuery2.Next;
    end;
    TempTableQ1.Next;
  end;
  XL.Visible := True;
  XL.Application.ActiveWorkBook.SaveAs(Dir + '\' + StrDat3 + '.xls');

  XL := UnAssigned;
end;

procedure TForm1.btn14Click(Sender: TObject);
begin
  Poisk_Stam := 1;
  btn3.Click;
end;

procedure TForm1.EditKeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = #13) and (Btn14.Enabled) then
    Btn14Click(nil);
end;

procedure TForm1.Button71Click(Sender: TObject);
var
  God, Mes, I, Y, Kol, Kol_Zap, Kol_Kl, A, B, Kol_Vert, Kol_Gor, Kol_G, Kol_V, Res, Fl, X1, Res_, Kol_Otk, ne_pusto, Flag_Zagot, D1: Integer;
  Zag, Zap, OTK, Sbor, Betwe, Bet1, Dat, Dat1, Sql_Str, X, Sb_s, Sv_s, StrDat1, D, StrDat2, Izdel, Pos1, Pos2, Pos3, Pos4, Pos5, Sbor1, Str_e4, Str1, Str2, Str3: string;
  SB, SV, SB_O, SV_O: Double;
begin
  Clear_StringGrid(zclrstrngrd1);
  zclrstrngrd1.RowCount := 3;
  zclrstrngrd1.FixedRows := 2;
  Kol_Vert := 0;
  zclrstrngrd1.ColCount := 39;
  zclrstrngrd1.Cells[0, 0] := '№';
  zclrstrngrd1.Cells[I_FN_DAT, 0] := FN_DAT;
  zclrstrngrd1.Cells[I_FN_ZAK, 0] := FN_ZAK;

  zclrstrngrd1.Cells[I_FN_NAM, 0] := FN_NAM;
  zclrstrngrd1.Cells[I_FN_KOL, 0] := FN_KOL;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP, 0] := FN_KOL_ZAP;

  zclrstrngrd1.MergeCells.AddRectXY(I_FN_KOL_ZAP + 1, 0, I_FN_KOL_ZAP + 3, 0);
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 1, 0] := 'Заготовка';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 1, 1] := 'Запуск';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 2, 1] := 'Готовность';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 3, 1] := 'Планирование';
  zclrstrngrd1.MergeCells.AddRectXY(I_FN_KOL_ZAP + 4, 0, I_FN_KOL_ZAP + 6, 0);
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 4, 0] := 'Сборка';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 4, 1] := 'Запуск';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 5, 1] := 'Готовность';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 6, 1] := 'Примечание';

  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, 1] := FN_NAM;

  zclrstrngrd1.MergeCells.AddRectXY(I_FN_KOL_ZAP + 8, 0, I_FN_KOL_ZAP + 10, 0);
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 8, 0] := FN_PR_OTK;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 8, 1] := FN_PR_OTK;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 9, 1] := FN_KOL_OTK;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 10, 1] := FN_PR_OTK_PRIM;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 11, 1] := FN_DAT_OTGRUZ;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 12, 1] := 'Сборщик';
 // zclrstrngrd1.Cells[I_FN_KOL_ZAP + 13, 1] := 'X';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 13, 1] := 'Расчетная Дата';
  zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 13] := 70;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 14, 1] := 'id';
  zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 14] := 0;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 15, 1] := 'Отмена';
  zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 15] := 0;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 16, 1] := 'план Дата';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 17, 1] := 'Сборка2';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 18, 1] := 'Сборка1';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 19, 1] := 'ОТКФам';
  zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 19] := 20;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 20, 1] := 'МодПривода';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 21, 1] := 'Кол в наличии';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 22, 1] := 'Заказчик';

  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 23, 1] := 'НачНомер';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 24, 1] := 'КонНомер'; //Заводск номер
  zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 23] := 40;
  zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 24] := 40;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 25, 1] := 'Подсборка';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 26, 1] := 'IdГП';
  zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 26] := 0;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 27, 1] := 'ФлагЗаготовки';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 28, 1] := 'Цвет';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 29, 1] := 'БЗ';
  zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 28] := 0;
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 30, 1] := 'Легион';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 31, 1] := 'Срочно';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 32, 1] := 'Н\ч Лопатка';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 33, 1] := 'Н\ч Тяга';
  zclrstrngrd1.Cells[I_FN_KOL_ZAP + 34, 1] := 'IdКО';
        //zclrstrngrd1.ColWidths[I_FN_KOL_ZAP + 27] := 0;
        //Naimen:= '';
  Sbor1 := '';
  if Edit37.Text <> '' then
    Str_e4 := Edit37.Text;
  if Edit37.Text <> '' then
  begin

    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := ' (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X1 := 1;
    end;
    if X1 = 1 then
      Str1 := Str1 + ' OR (Номер=' + #39 + Str_e4 + #39 + ')'
    else
      Str1 := ' (Номер=' + #39 + Str_e4 + #39 + ')';
    Res_ := Pos('-', Str_e4);
    if Res_ <> 0 then
    begin
      Str2 := Copy(Str_e4, 1, Res_ - 1);
      Delete(Str_e4, 1, Res_);
      Str3 := Str_e4;
      Sbor1 := '  ((Номер>=' + #39 + Str2 + #39 + ') AND (Номер<=' + #39 + Str3 + #39 + ')) AND ';
    end
    else
    begin
      Sbor1 := '(' + Str1 + ') AND ';
    end;
  end;
  X := ' WHERE ' + Sbor1 + ' (Отмена IS NULL)  AND ([Х] IS NULL) ';
  StrDat1 := FormatDateTime('mm.dd.yyyy', Dtp10.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', Dtp11.Date);
  D := FormatDateTime('yyyy', Now);
  Delete(D, 1, 3);
  D1 := StrToInt(D);
 // ComboBox9.ItemIndex :=D1;

  if order1 = '' then
    order1 := ' Order By Номер DESC';
  if ((ComboBox42.ItemIndex = 0) or (ComboBox42.ItemIndex = -1) or (ComboBox42.Text = '')) and (ComboBox41.ItemIndex <> 0) and (ComboBox41.ItemIndex <> -1) and (ComboBox41.Text <> '') then
  begin
    God := StrToInt(ComboBox41.Items[ComboBox41.ItemIndex]);
    Dat := '12.31.' + IntToStr(God - 1);
    Dat1 := '12.31.' + IntToStr(God);
    Betwe := ' AND ((Дата >=' + #39 + Dat + #39 + ') AND (Дата<' + #39 + Dat1 + #39 + ')) ';
  end;
  if (ComboBox41.ItemIndex <> 0) and (ComboBox41.ItemIndex <> -1) and (ComboBox41.Text <> '') and (ComboBox42.ItemIndex <> 0) and (ComboBox42.ItemIndex <> -1) and (ComboBox42.Text <> '') then
  begin
    God := StrToInt(ComboBox41.Items[ComboBox41.ItemIndex]);
    Mes := ComboBox42.ItemIndex;
    Dat := IntToStr(Mes) + '.01' + '.' + IntToStr(God);
    if Mes = 12 then
      Dat1 := '01.01.' + IntToStr(God + 1)
    else
    begin
      if (Mes + 1) < 10 then
        Dat1 := '0' + IntToStr(Mes + 1) + '.01.' + IntToStr(God)
      else
        Dat1 := IntToStr(Mes + 1) + '.01.' + IntToStr(God);
    end;
    Betwe := ' AND ((Дата >=' + #39 + Dat + #39 + ') AND (Дата<' + #39 + Dat1 + #39 + ')) ';
  end;

  if ComboBox43.ItemIndex = 3 then
  begin                                                                         //  AND ([Сборка Готовность] IS NULL)
    X := ' WHERE ' + Sbor1 + ' (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL) ';
    Bet1 := '  AND ([' + ComboBox43.Text + ']  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';

  end;
  if ComboBox43.ItemIndex = 7 then //Упаковка
  begin                                                                         //  AND ([Сборка Готовность] IS NULL)
    X := ' WHERE ' + Sbor1 + ' (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL)  AND (Упаковка IS NULL)';
    Bet1 := '  AND ([ОТК]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';

  end;
  if ComboBox43.ItemIndex = 9 then //Отмена
  begin                                                                         //  AND ([Сборка Готовность] IS NULL)
    X := ' WHERE ' + Sbor1 + ' (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (NOT Отмена IS NULL) ';
    Bet1 := '  AND ([ОТК]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';

  end;
  if (ComboBox43.Text <> '') and (ComboBox43.ItemIndex <> 3) and (ComboBox43.ItemIndex <> 7) and (ComboBox43.ItemIndex <> 9) then
  begin
    X := ' WHERE' + Sbor1 + '  (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL) ';
    Bet1 := ' AND ([' + ComboBox43.Text + ']  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';

  end;

  if ComboBox43.ItemIndex = 8 then //Упаковка
  begin                                                                         //  AND ([Сборка Готовность] IS NULL)
    X := ' WHERE ' + Sbor1 + ' (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL)  AND (Not Упаковка IS NULL)';
    Bet1 := '  AND ([Упаковка]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ' ) ';
    Sql_Str := '';
  end;

  if (ComboBox39.ItemIndex <> -1) and (ComboBox39.ItemIndex <> 0) then
  begin
    case ComboBox39.ItemIndex of // AND ([Х] IS NULL)
      1:
        Sql_Str := Sql_Str + ' AND ([Заготовка Готовность] IS NULL) AND (Not [Заготовка Запуск] IS NULL) AND (Отмена IS NULL)  ';
      2:
        Sql_Str := Sql_Str + ' AND (Not [Заготовка Готовность] IS NULL) AND( [Сборка Запуск] IS NULL) AND (Отмена IS NULL)  ';
      3:
        Sql_Str := Sql_Str + ' AND (Not [Сборка Запуск] IS NULL) AND( [Сборка Готовность] IS NULL)  ';
      4:                                                                  //([' + FN_KOL_OTK + ']=0)
        Sql_Str := Sql_Str + ' AND (Not [Сборка Готовность] IS NULL) AND  ([Кол принятых]<[Кол во запущенных]) AND (Отмена IS NULL)  ';
      5:
        Sql_Str := Sql_Str + ' AND ([' + FN_KOL_OTK + ']=[' + FN_KOL_ZAP + ']) AND (Отмена IS NULL) ';
      6:
        begin
          X := '';
          Sql_Str := ' WHERE' + Sbor1 + '  (NOT Дата IS NULL)  AND ([Х] IS NULL)  AND ([' + FN_KOL_OTK + ']<[' + FN_KOL_ZAP + ']) AND ([' + FN_KOL_OTK + ']<>0) AND (Отмена IS NULL)  ';
        end;
      7:
        Sql_Str := Sql_Str + ' AND (NOT [' + 'Упаковка' + '] IS NULL) AND (Отмена IS NULL)  ';
      8:
        Sql_Str := Sql_Str + ' AND (Not [Отмена] IS NULL)  ';
      9:
        Sql_Str := Sql_Str + ' AND ([Заготовка Запуск] IS NULL) AND (Отмена IS NULL) ';
      10:
        Sql_Str := Sql_Str + ' AND (([Сборка Готовность] IS NULL) OR ([' + FN_KOL_OTK + ']<[' + FN_KOL_ZAP + ']) AND ([' + FN_KOL_OTK + ']<>0)) AND (Отмена IS NULL)  ';
      12:
        Sql_Str := Sql_Str + ' AND ([Упаковка] IS NULL) AND (Not [ОТК] is null) AND (Отмена IS NULL)  ';

      13:
        Sql_Str := Sql_Str + ' AND (ФлагЗаготовки=' + #39 + 'False' + #39 + ') AND (Отмена IS NULL)  ';
    end;
  end;

  if Flag_Poisk = 0 then
  begin
    if not mkQuerySelect(ADOQuery2, 'Select * from [%s]  ' + X + Sql_Str + Betwe + Bet1 + order1, ['Запуск750']) then
      exit;
  end;
  if Flag_Poisk = 1 then
  begin
    if not mkQuerySelect(ADOQuery2, 'Select * from [%s]  WHERE %s', ['Запуск750', Str_SQL_Poisk]) then
      exit;
  end;

  StatusBar1.Panels[2].Text := IntToStr(ADOQuery2.RecordCount);
  Y := 2;
        //if not mkQuerySelect( ADOQuery2, 'Select * from %s '+Order,['Запуск'] )
        //then exit;
  zclrstrngrd1.RowCount := ADOQuery2.RecordCount + 2;
  StatusBar1.Panels[2].Text := IntToStr(ADOQuery2.RecordCount);
  StringGrid4.RowCount := ADOQuery2.RecordCount + 2;
  if ADOQuery2.RecordCount<>0 Then
  StringGrid4.FixedRows :=2;
  for I := 2 to ADOQuery2.RecordCount + 1 do
  begin
    zclrstrngrd1.Cells[0, I] := ADOQuery2.FieldByName(FN_Nom).AsString;
    zclrstrngrd1.Cells[I_FN_DAT, I] := ADOQuery2.FieldByName(FN_DAT).AsString;
    zclrstrngrd1.Cells[I_FN_ZAK, I] := ADOQuery2.FieldByName(FN_ZAK).AsString;
                //zclrstrngrd1.Cells[I_FN_NAM,I] :=ADOQuery2.FieldByName(FN_NAM).AsString;
    zclrstrngrd1.Cells[I_FN_KOL, I] := ADOQuery2.FieldByName(FN_KOL).AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP, I] := ADOQuery2.FieldByName(FN_KOL_ZAP).AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 1, I] := ADOQuery2.FieldByName('Заготовка Запуск').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 2, I] := ADOQuery2.FieldByName('Заготовка Готовность').AsString;
    Zag := Prim(ADOQuery2.FieldByName('Планирование').AsString);
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 3, I] := Zag;

    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 4, I] := ADOQuery2.FieldByName('Сборка Запуск').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 5, I] := ADOQuery2.FieldByName('Сборка Готовность').AsString;
    Zap := Prim(ADOQuery2.FieldByName('Сборка Примечание').AsString);
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 6, I] := Zap;

    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 7, I] := ADOQuery2.FieldByName(FN_NAM).AsString;

    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 8, I] := ADOQuery2.FieldByName('ОТК').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 9, I] := ADOQuery2.FieldByName('Кол принятых').AsString;
    OTK := Prim(ADOQuery2.FieldByName('ОТК прим').AsString);
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 10, I] := OTK;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 11, I] := ADOQuery2.FieldByName('Упаковка').AsString;
    Sbor := (ADOQuery2.FieldByName('Сборщик').AsString);
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 12, I] := Sbor;
    //zclrstrngrd1.Cells[I_FN_KOL_ZAP + 13, I] := ADOQuery2.FieldByName('Х').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 13, I] := ADOQuery2.FieldByName('Расчетная дата готовности').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 14, I] := ADOQuery2.FieldByName('ID').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 15, I] := ADOQuery2.FieldByName('Отмена').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 16, I] := ADOQuery2.FieldByName('план Дата').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 17, I] := ADOQuery2.FieldByName('Н\ч Сварка').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 18, I] := ADOQuery2.FieldByName('Н\ч Сборка Клапана').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 19, I] := ADOQuery2.FieldByName('ОТКФам').AsString;
                //----------------------------------------------------------
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 20, I] := ADOQuery2.FieldByName('МодПривода').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 21, I] := ADOQuery2.FieldByName('Привод').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 22, I] := ADOQuery2.FieldByName('Заказчик').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 23, I] := ADOQuery2.FieldByName('НачНомер').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 24, I] := ADOQuery2.FieldByName('КонНомер').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 25, I] := ADOQuery2.FieldByName('Подсборка').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 26, I] := ADOQuery2.FieldByName('IdГП').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 27, I] := ADOQuery2.FieldByName('ФлагЗаготовки').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 28, I] := ADOQuery2.FieldByName('Cvet').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 29, I] := ADOQuery2.FieldByName('БЗ').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 30, I] := ADOQuery2.FieldByName('Легион').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 31, I] := ADOQuery2.FieldByName('Срочно').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 32, I] := ADOQuery2.FieldByName('Сборка лопаток').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 33, I] := ADOQuery2.FieldByName('Сборка тяг').AsString;
    zclrstrngrd1.Cells[I_FN_KOL_ZAP + 34, I] := ADOQuery2.FieldByName('IdКО').AsString;
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    Sb_s := (ADOQuery2.FieldByName(FN_SBOR_KLAP_NC).AsString);
    if Sb_s = '' then
      SB := 0
    else
      SB := StrToFloat(ADOQuery2.FieldByName(FN_SBOR_KLAP_NC).AsString);
    Sv_s := (ADOQuery2.FieldByName(FN_SVARKA_NC).AsString);
    if Sv_s = '' then
      SV := 0
    else
      SV := StrToFloat(ADOQuery2.FieldByName(FN_SVARKA_NC).AsString);
    Kol := StrToInt(ADOQuery2.FieldByName(FN_KOL).AsString);
    Kol_Zap := StrToInt(ADOQuery2.FieldByName(FN_KOL_ZAP).AsString);
    Izdel := ADOQuery2.FieldByName(FN_NAM).AsString;
    Res := Pos('КПУ', Izdel);
    Fl := Pos('2*ф', Izdel);
    if (Res <> 0) and (Fl <> 0) then
    begin

      Res := Pos(' ', Izdel);
      Delete(Izdel, 1, Res);
                        //======================================== KPU
      Res := Pos('-', Izdel);
      Pos1 := Copy(Izdel, 1, Res - 1);
      Delete(Izdel, 1, Res);
                        //======================================== 1 H
      Res := Pos('-', Izdel);
      Pos2 := Copy(Izdel, 1, 1);
      Pos3 := Copy(Izdel, 2, 1);
      Delete(Izdel, 1, Res);
                        //========================================
                        //Клапан КПУ-1Н-О-Н-600*400-2*ф-MB220-сн-0-0-0-0-0-0
                        //========================================
      Res := Pos('-', Izdel);
      Pos4 := Copy(Izdel, 1, Res - 1);
      Delete(Izdel, 1, Res);
                        //========================================
      Res := Pos('-', Izdel);
      Pos5 := Copy(Izdel, 1, Res - 1);
      Delete(Izdel, 1, Res);
                        //========================================

      Res := Pos('*', Izdel);
      if Res < 5 then
      begin
        A := StrToInt(Copy(Izdel, 1, Res - 1));
        Delete(Izdel, 1, Res);
                                //========================================
        Res := Pos('-', Izdel);
        B := StrToInt(Copy(Izdel, 1, Res - 1));
        Delete(Izdel, 1, Res);
      end;

      if (A >= 150) and (A <= 1000) then
      begin
        Kol_G := 2 * Kol;
        Kol_Gor := Kol_Gor + Kol_G;

      end;
      if (B >= 150) and (B <= 1000) then
      begin
        Kol_V := 2 * Kol;
        Kol_Vert := Kol_Vert + Kol_V;

      end;
    end;
    Kol_Kl := Kol_Kl + (Kol_Zap);
    SV_O := SV_O + SV;
    SB_O := SB_O + SB;
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ADOQuery2.Next;
  end;
  Flag_Poisk := 0;
  Label40.Caption := IntToStr(Kol_Kl);
  Label64.Caption := IntToStr(Kol_Gor);
  Label66.Caption := IntToStr(Kol_Vert);
  Label37.Caption := FloatToStr(RoundTo(SB_O, -2));
  Label39.Caption := FloatToStr(RoundTo(SV_O, -2));
  zclrstrngrd1.ColWidths[I_FN_KOL] := 0;
  Memo10.Lines.Clear;
  button76.Click;
end;

procedure TForm1.Button73Click(Sender: TObject);
var
  I, K: Integer;
  StrDat1, StrDat2, Betwe, S, GP, KO, Tab, Kol: string;
begin
    { StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
     StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
     Betwe := 'AND ( ОТК BETWEEN ' + #39 + StrDat1 + #39 + ' AND ' +
                        #39 + StrDat2 + #39 + ') ';
     if not Form1.mkQuerySelect(Form1.ADOQuery2,
     'Select * from %s Where (Отмена IS NULL) '+ Betwe
     , ['Запуск']) then
     exit;  }
  pb3.Position := 0;
  pb3.Max := ZSG.RowCount - 1;
  for I := 0 to ZSG.RowCount - 1 do
  begin
    GP := ZSG.Cells[I_FN_KOL_ZAP + 26, I + 2];
    if GP = '' then
      Continue;
    KO := ZSG.Cells[I_FN_KOL_ZAP + 36, I + 2];
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select SUM([Кол принятых]) AS S from %s Where (IdГП=' + #39 + GP + #39 + ') AND (IdКО=' + #39 + KO + #39 + ') ', ['Запуск']) then
      exit;
    Kol := ADOQuery2.FieldByName('S').AsString;
    K := StrToInt(KO);
    if K = 0 then
      S := 'update server08.VezaDB.dbo.[Заказы] set' + ' [Изготовлено] =' + #39 + Kol + #39 + ' WHERE ID=' + #39 + GP + #39
    else
      S := 'update server08.VezaDB.dbo.[ЗаказыКооп] set' + ' [Изготовлено] =' + #39 + Kol + #39 + ' WHERE (IDЗаказа=' + #39 + GP + #39 + ') AND (ID=' + #39 + KO + #39 + ')';
    ADOQuery1.Close;
    ADOQuery1.SQL.Clear;
    Memo2.Lines.Add(S);
    ADOQuery1.SQL.Add(S);
    ADOQuery1.ExecSQL;
    pb3.Position := I - 1;
    Form1.Update;
  end;
  pb3.Position := 0;
  MessageDlg('Синхронизировано!', mtInformation, [mbOk], 1);
end;

procedure TForm1.Button74Click(Sender: TObject);
var
  I, K: Integer;
  StrDat1, StrDat2, Betwe, S, GP, KO, Tab, Kol: string;
begin
     {StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
     StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
     Betwe := 'AND ( ОТК BETWEEN ' + #39 + StrDat1 + #39 + ' AND ' +
                        #39 + StrDat2 + #39 + ') ';
     if not Form1.mkQuerySelect(Form1.ADOQuery2,
     'Select * from %s Where (Отмена IS NULL) '+ Betwe
     , ['ЗапускВозд']) then
     exit;      ZCV.Cells[30, I] := ADOQuery2.FieldByName('IdГП').AsString;
    ZCV.Cells[31, I] := ADOQuery2.FieldByName('IdКО').AsString;}
  pb4.Position := 0;
  pb4.Max := ZCV.RowCount - 1;
  for I := 0 to ZCV.RowCount - 1 do
  begin
    GP := ZCV.Cells[30, I + 2];
    if GP = '' then
      Continue;
    KO := ZCV.Cells[31, I + 2];
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select SUM([Кол принятых]) AS S from %s Where (IdГП=' + #39 + GP + #39 + ') AND (IdКО=' + #39 + KO + #39 + ') ', ['ЗапускВозд']) then
      exit;
    Kol := ADOQuery2.FieldByName('S').AsString;
    K := StrToInt(KO);
    if K = 0 then
      S := 'update server08.VezaDB.dbo.[Заказы] set' + ' [Изготовлено] =' + #39 + Kol + #39 + ' WHERE ID=' + #39 + GP + #39
    else
      S := 'update server08.VezaDB.dbo.[ЗаказыКооп] set' + ' [Изготовлено] =' + #39 + Kol + #39 + ', [Статус] =' + #39 + 'готов' + #39 + ' WHERE (IDЗаказа=' + #39 + GP + #39 + ') AND (ID=' + #39 + KO + #39 + ')';
    ADOQuery1.Close;
    ADOQuery1.SQL.Clear;
    Memo2.Lines.Add(S);
    ADOQuery1.SQL.Add(S);
    ADOQuery1.ExecSQL;
    pb4.Position := I - 1;
    Form1.Update;
  end;
  pb4.Position := 0;
  MessageDlg('Синхронизировано!', mtInformation, [mbOk], 1);
end;

procedure TForm1.Button75Click(Sender: TObject);
var
  I, K: Integer;
  StrDat1, StrDat2, Betwe, S, GP, KO, Tab, Kol: string;
begin
  pb5.Position := 0;
  pb5.Max := SG215.RowCount - 1;
  for I := 1 to SG215.RowCount do
  begin
    GP := SG215.Cells[21, I];
    if GP = '' then
      Continue;
    KO := SG215.Cells[30, I];
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select SUM([Кол принятых]) AS S from %s Where (IdГП=' + #39 + GP + #39 + ') AND (IdКО=' + #39 + KO + #39 + ') ', ['ЗапускСТАМ']) then
      exit;
    Kol := ADOQuery2.FieldByName('S').AsString;
    K := StrToInt(KO);
    if K = 0 then
      S := 'update server08.VezaDB.dbo.[Заказы] set' + ' [Изготовлено] =' + #39 + Kol + #39 + ' WHERE ID=' + #39 + GP + #39
    else
      S := 'update server08.VezaDB.dbo.[ЗаказыКооп] set' + ' [Изготовлено] =' + #39 + Kol + #39 + ' WHERE (IDЗаказа=' + #39 + GP + #39 + ') AND (ID=' + #39 + KO + #39 + ')';
    ADOQuery1.Close;
    ADOQuery1.SQL.Clear;
    Memo2.Lines.Add(S);
    ADOQuery1.SQL.Add(S);
    ADOQuery1.ExecSQL;
    pb5.Position := I - 1;
    Form1.Update;
  end;
  pb5.Position := 0;
  MessageDlg('Синхронизировано!', mtInformation, [mbOk], 1);
end;

procedure TForm1.Button76Click(Sender: TObject);
var
  Kol, Kol1, Res, Kol_OTK, Kol_dn, Kol_nal, Kol_Vid, I, J, Flag_Zag, Cvet, Res2: Integer;
  Dat, Dat_Zap, Dat1, Dat_Plan, Planir: TDate;
begin

  for I := 0 to zclrstrngrd1.RowCount - 1 do
  begin
    if (I > 1) then
    begin
      if zclrstrngrd1.Cells[I_FN_KOL, I] = '' then
        Kol := 0
      else
        Kol := StrToInt(zclrstrngrd1.Cells[I_FN_KOL, I]);
      if zclrstrngrd1.Cells[I_FN_KOL_ZAP, I] = '' then
        Kol1 := 0
      else
        Kol1 := StrToInt(zclrstrngrd1.Cells[I_FN_KOL_ZAP, I]);
      for J := 0 to zclrstrngrd1.ColCount - 1 do
        zclrstrngrd1.CellStyle[J, I].BGColor := clWhite;
                        // Заготовка запуск  Желтый
      if (zclrstrngrd1.Cells[I_FN_KOL_ZAP + 1, I] <> '') then
      begin
        for J := 0 to zclrstrngrd1.ColCount - 1 do
          zclrstrngrd1.CellStyle[J, I].BGColor := RGB(247, 247, 131);
      end;
                        // Заготовка готова Оранж
      if (zclrstrngrd1.Cells[I_FN_KOL_ZAP + 2, I] <> '') then
      begin
        for J := 0 to zclrstrngrd1.ColCount - 1 do
          zclrstrngrd1.CellStyle[J, I].BGColor := RGB(153, 102, 51);
      end;
                        //Сборка запуск Светло зеленый
      if (zclrstrngrd1.Cells[I_FN_KOL_ZAP + 4, I] <> '') then
      begin
        for J := 0 to zclrstrngrd1.ColCount - 1 do
          zclrstrngrd1.CellStyle[J, I].BGColor := RGB(0, 255, 0);

      end;
                        // Сборка готова  Зеленый
      if (zclrstrngrd1.Cells[I_FN_KOL_ZAP + 5, I] <> '') then
      begin
        for J := 0 to zclrstrngrd1.ColCount - 1 do
          zclrstrngrd1.CellStyle[J, I].BGColor := RGB(102, 255, 204);

      end;
      if zclrstrngrd1.Cells[I_FN_KOL_ZAP + 16, I] <> '' then
      begin
        Dat_Plan := StrToDate(zclrstrngrd1.Cells[I_FN_KOL_ZAP + 16, I]);
        Kol_dn := (Trunc(Now) - Trunc(Dat_Plan));
      end;
                        // Плановая дата истекла
      if zclrstrngrd1.Cells[8, I] <> '' then
      begin
        Dat_Zap := StrToDate(zclrstrngrd1.Cells[8, I]);
        Dat1 := Trunc(Now);
        if ((Trunc(Now) > Trunc(Dat_Zap))) and (zclrstrngrd1.Cells[9, I] = '') then
        begin

          zclrstrngrd1.CellStyle[16, I].BGColor := RGB(242, 12, 20); //Красный
        end;

      end;
      if (Kol_dn > 1) and (zclrstrngrd1.Cells[I_FN_KOL_ZAP + 5, I] = '') and (zclrstrngrd1.Col = I_FN_KOL_ZAP + 6) then
      begin
        for J := 0 to zclrstrngrd1.ColCount - 1 do
          zclrstrngrd1.CellStyle[J, I].BGColor := RGB(242, 12, 20); //Красный
      end;
                        //++++++++++++++++++++++++++++++++++++++++++++++
      if zclrstrngrd1.Cells[7, I] <> '' then
      begin
        Planir := StrToDate(zclrstrngrd1.Cells[7, I]);

        if (Dat_Plan < Planir) then
        begin

          zclrstrngrd1.CellStyle[16, I].BGColor := RGB(242, 12, 20); //Красный
        end;
      end;
                        //++++++++++++++++++++++++++++++++++++++++++++++
      if zclrstrngrd1.Cells[8, I] <> '' then
      begin
        Dat_Zap := StrToDate(zclrstrngrd1.Cells[8, I]);

        if (Dat_Plan < Dat_Zap) then
        begin

          zclrstrngrd1.CellStyle[16, I].BGColor := RGB(242, 12, 20); //Красный
        end;
      end;
                        // OTK  Темно зеленый
      if zclrstrngrd1.Cells[I_FN_KOL_ZAP + 9, I] = '' then
        Kol_OTK := 0
      else
        Kol_OTK := StrToInt(zclrstrngrd1.Cells[I_FN_KOL_ZAP + 9, I]);
      if (Kol_OTK = Kol1) then
      begin
        for J := 0 to zclrstrngrd1.ColCount - 1 do
          zclrstrngrd1.CellStyle[J, I].BGColor := RGB(0, 100, 0);
                                //zclrstrngrd1.CellStyle[16, i].BGColor := RGB(0, 100,
                                //        0);

      end;

      if (zclrstrngrd1.Cells[I_FN_KOL_ZAP + 11, I] <> '') then
                                //Отгрузка синий
      begin
        for J := 0 to zclrstrngrd1.ColCount - 1 do
          zclrstrngrd1.CellStyle[J, I].BGColor := RGB(30, 144, 255);

      end;
      if (Kol1 = 0) then
      begin
        for J := 0 to zclrstrngrd1.ColCount - 1 do
          zclrstrngrd1.CellStyle[J, I].BGColor := clWindow;
      end;
      if (zclrstrngrd1.Cells[I_FN_KOL_ZAP + 15, I] <> '') then
                                //Отмена Серый
      begin
        for J := 0 to zclrstrngrd1.ColCount - 1 do
          zclrstrngrd1.CellStyle[J, I].BGColor := clGray;
      end;
      if zclrstrngrd1.Cells[I_FN_KOL_ZAP + 21, I] = '' then
        Kol_nal := 0
      else
        Kol_nal := StrToInt(zclrstrngrd1.Cells[I_FN_KOL_ZAP + 21, I]);
     { if zclrstrngrd1.Cells[I_FN_KOL_ZAP + 22, I] = '' then
        Kol_Vid := 0
      else }

      if (zclrstrngrd1.Col = I_FN_KOL_ZAP + 21) and (Kol_nal = Kol) then
                                //привода В наличии Все синий
      begin
        zclrstrngrd1.CellStyle[I_FN_KOL_ZAP + 21, I].BGColor := clActiveCaption;
      end;
      Kol_Vid := Pos('ЛЕГИОН', AnsiUpperCase(zclrstrngrd1.Cells[I_FN_KOL_ZAP + 22, I]));
      if (Kol_Vid <> 0) then//  ЛЕГИОН
      begin
        zclrstrngrd1.CellStyle[7, I].BGColor := RGB(144, 46, 242);
      end;
                        ///++++++++++++++++++++++++++++
      Flag_Zag := Pos('rue', zclrstrngrd1.Cells[I_FN_KOL_ZAP + 27, I]);
      if (Flag_Zag = 0) then
                                //Флаг заготовки 0 ( False) ни чего нельзя делать

      begin
        for J := 0 to zclrstrngrd1.ColCount - 1 do
          zclrstrngrd1.CellStyle[J, I].BGColor := RGB(153, 153, 255);
      end;
      if (Kol_OTK < Kol1) and (Kol_OTK <> 0) then //Красный
      begin
        for J := 0 to zclrstrngrd1.ColCount - 1 do
          zclrstrngrd1.CellStyle[J, I].BGColor := RGB(250, 0, 0);

      end;

     // if   (zclrstrngrd1.Col=1) then
      zclrstrngrd1.CellStyle[1, I].BGColor := RGB(255, 255, 255);
      //if   (zclrstrngrd1.Col=0) then
      zclrstrngrd1.CellStyle[0, I].BGColor := RGB(255, 255, 255);

      Cvet := StrToInt(zclrstrngrd1.Cells[I_FN_KOL_ZAP + 28, I]);
      case Cvet of
        0:
          begin
            zclrstrngrd1.CellStyle[0, I].BGColor := RGB(255, 255, 255); //Белый
          end;
        1:
          begin
            zclrstrngrd1.CellStyle[0, I].BGColor := RGB(234, 239, 45); //Желтый
          end;
        2:
          begin
            zclrstrngrd1.CellStyle[0, I].BGColor := RGB(41, 243, 104); //Зеленый
          end;
        3:
          begin
            zclrstrngrd1.CellStyle[0, I].BGColor := RGB(122, 156, 250); //Голубой
          end;
      end;
      Res2 := Pos('rue', zclrstrngrd1.Cells[I_FN_KOL_ZAP + 31, I]);
      if (Res2 <> 0) then
      //Срочно
      begin
        zclrstrngrd1.CellStyle[2, I].BGColor := RGB(242, 12, 20); //Красный
      end;
    end;
  end;
end;

procedure TForm1.Button77Click(Sender: TObject);
var
  I, K: Integer;
  StrDat1, StrDat2, Betwe, S, GP, KO, Tab, Kol: string;
begin
  pb6.Position := 0;
  pb6.Max := SG5.RowCount;
  for I := 0 to SG5.RowCount - 1 do
  begin
    GP := SG5.Cells[21, I + 1];
    if GP = '' then
      Continue;
    KO := SG5.Cells[27, I + 1];
    if KO = '' then
      KO := '0';
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select SUM([Кол принятых]) AS S from %s Where (IdГП=' + #39 + GP + #39 + ') AND (IdКО=' + #39 + KO + #39 + ') ', ['ЗапускЛЮК']) then
      exit;
    Kol := ADOQuery2.FieldByName('S').AsString;
    K := StrToInt(KO);
    if K = 0 then
      S := 'update server08.VezaDB.dbo.[Заказы] set' + ' [Изготовлено] =' + #39 + Kol + #39 + ' WHERE ID=' + #39 + GP + #39
    else
      S := 'update server08.VezaDB.dbo.[ЗаказыКооп] set' + ' [Изготовлено] =' + #39 + Kol + #39 + ' WHERE (IDЗаказа=' + #39 + GP + #39 + ') AND (ID=' + #39 + KO + #39 + ')';
    ADOQuery1.Close;
    ADOQuery1.SQL.Clear;
    Memo2.Lines.Add(S);
    ADOQuery1.SQL.Add(S);
    ADOQuery1.ExecSQL;
    pb6.Position := I;
    Form1.Update;
  end;
  pb6.Position := 0;
  MessageDlg('Синхронизировано!', mtInformation, [mbOk], 1);
end;

procedure TForm1.Button78Click(Sender: TObject);
var
  Vn_Dat, fileName, Dat, KO: string;
  I, Y, A, C: Integer;
begin
  UOsnova_Main := Osnova_Main.Create();
  Conn_Klap := Connect_Miass_Klap.Create();
  Conn_Ceh := Connect_Miass_Ceh.Create();

  fileName :='';// ExtractFileDir(ParamStr(0)); //+'\Klapan.EXE';
  Vn_Dat := FormatDateTime('dd.mm.yyyy', DateTimePicker1.Date);
  for I := 0 to zclrstrngrd1.RowCount - 1 do
  begin
    if StringGrid4.Cells[0, I] <> '' then
    begin
      Vn_Dat := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 3, I];
      C := StrToInt(zclrstrngrd1.Cells[I_FN_KOL_ZAP + 28, I]);
      UOsnova_Main.Flag_Error := 0;
      if not UOsnova_Main.Osnova(Vn_Dat, '[Запуск750]', '[Специф750]', #39 + zclrstrngrd1.Cells[0, I] + #39, fileName, 1, C) then
        Exit;
    end;
  end;
end;

procedure TForm1.Button79Click(Sender: TObject);
var
  I, K: Integer;
  StrDat1, StrDat2, Betwe, S, GP, KO, Tab, Kol: string;
begin
  pb7.Position := 0;
  pb7.Max := SG2.RowCount - 1;
  for I := 0 to SG2.RowCount - 1 do
  begin
    GP := SG2.Cells[25, I + 1];
    if GP = '' then
      Continue;
    KO := SG2.Cells[28, I + 1];
    if KO = '' then
      KO := '0';
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select SUM([Кол принятых]) AS S from %s Where (IdГП=' + #39 + GP + #39 + ') AND (IdКО=' + #39 + KO + #39 + ') ', ['[710]']) then
      exit;
    Kol := ADOQuery2.FieldByName('S').AsString;
    if KO = '' then
      KO := '0';
    K := StrToInt(KO);
    if K = 0 then
      S := 'update server08.VezaDB.dbo.[Заказы] set' + ' [Изготовлено] =' + #39 + Kol + #39 + ' WHERE ID=' + #39 + GP + #39
    else
      S := 'update server08.VezaDB.dbo.[ЗаказыКооп] set' + ' [Изготовлено] =' + #39 + Kol + #39 + ' WHERE (IDЗаказа=' + #39 + GP + #39 + ') AND (ID=' + #39 + KO + #39 + ')';
    ADOQuery1.Close;
    ADOQuery1.SQL.Clear;
    Memo2.Lines.Add(S);
    ADOQuery1.SQL.Add(S);
    ADOQuery1.ExecSQL;
    pb7.Position := I - 1;
    Form1.Update;
  end;
  pb7.Position := 0;
  MessageDlg('Синхронизировано!', mtInformation, [mbOk], 1);
end;

procedure TForm1.Button7Click(Sender: TObject);
var
  I, res, Res1, Res2, god, mes,Kol_Pr,Kol: Integer;
  Bet, Ned1, Ned2, Str, Betwe1, Dat1, dat: string;
begin
  Clear_StringGrid(SG2);
  SG2.ColCount := 29;
  SG2.Cells[0, 0] := 'Номер';
  SG2.Cells[1, 0] := 'ДатаЗаказа';
  SG2.Cells[2, 0] := 'Заказ';
  SG2.Cells[3, 0] := 'Изделие';
  SG2.Cells[4, 0] := 'Кол';
  SG2.Cells[5, 0] := 'Технолог';
  SG2.Cells[6, 0] := 'Расчетная дата';
  SG2.Cells[7, 0] := 'ПланНеделя';
  SG2.Cells[8, 0] := 'Примечания';
  SG2.Cells[9, 0] := 'ПР';
  SG2.Cells[11, 0] := 'Дата запуска в работу';
  SG2.Cells[12, 0] := 'НачНомер';
  SG2.Cells[13, 0] := 'КонНомер';
        //SG2.Cells[16,0]:='Готовность на сборку';
  SG2.Cells[17, 0] := 'ДатаГотОфис';
  SG2.Cells[18, 0] := 'Готовность Заготовки';
  SG2.Cells[21, 0] := 'Сборка';
  SG2.Cells[20, 0] := 'Покраска';

  SG2.Cells[22, 0] := 'ОТК';
  SG2.Cells[23, 0] := 'Кол принятых';
  SG2.Cells[24, 0] := 'Упаковка';

  SG2.Cells[25, 0] := 'IdГП';
  SG2.Cells[26, 0] := 'Статус';
  SG2.Cells[27, 0] := 'ОТКФам';
  SG2.Cells[28, 0] := 'IdКО';
        //SG218.SortByColumn(1);
  //SG2.ColWidths[3] := 200;
  SG2.ColWidths[5] := 70;
  SG2.ColWidths[7] := 0;

  SG2.ColWidths[10] := 0;
  SG2.ColWidths[12] := 0;
  SG2.ColWidths[13] := 0;
  SG2.ColWidths[14] := 0;
  SG2.ColWidths[15] := 0;
  SG2.ColWidths[16] := 0;

  SG2.ColWidths[19] := 0;
  //SG2.ColWidths[13] := 70;
          //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  if ((ComboBox25.ItemIndex = 0) or (ComboBox25.ItemIndex = -1) or (ComboBox25.Text = '')) and (ComboBox1.ItemIndex <> 0) and (ComboBox1.Text <> '') then
  begin
    if ComboBox1.ItemIndex = -1 then
      god := StrToInt(ComboBox1.Text)
    else
      god := StrToInt(ComboBox1.Items[ComboBox1.ItemIndex]);
    dat := '12.31.' + IntToStr(god - 1);
    Dat1 := '12.31.' + IntToStr(god);
    Betwe1 := ' AND (ДатаЗаказа BETWEEN ' + #39 + dat + #39 + ' AND ' + #39 + Dat1 + #39 + ') ';
  end;
  if (ComboBox1.ItemIndex <> 0) and (ComboBox1.Text <> '') and (ComboBox25.ItemIndex <> 0) and (ComboBox25.ItemIndex <> -1) and (ComboBox25.Text <> '') then
  begin
    if ComboBox1.ItemIndex = -1 then
      god := StrToInt(ComboBox1.Text)
    else
      god := StrToInt(ComboBox1.Items[ComboBox1.ItemIndex]);
    mes := ComboBox25.ItemIndex;
    dat := IntToStr(mes) + '.01' + '.' + IntToStr(god);
    if mes = 12 then
      Dat1 := '01.01.' + IntToStr(god + 1)
    else
    begin
      if (mes + 1) < 10 then
        Dat1 := '0' + IntToStr(mes + 1) + '.01.' + IntToStr(god)
      else
        Dat1 := IntToStr(mes + 1) + '.01.' + IntToStr(god);
    end;
    Betwe1 := ' AND (ДатаЗаказа>= ' + #39 + dat + #39 + ' AND ДатаЗаказа<' + #39 + Dat1 + #39 + ') ';
  end;
//Просроченные
  if Poisk = 1 then
  begin
    Bet := '  AND ((Заказ=' + #39 + Edit11.Text + #39 + ') )';
  end;
  if Poisk = 0 then
  begin

    if (ComboBox26.ItemIndex = 6) then //ОТК
      Bet := ' AND (NOT ОТК IS NULL) ';

    if (ComboBox26.ItemIndex = 7) then // Отмененые
      Bet := ' AND (NOT Отмена IS NULL) ';

    if (ComboBox26.ItemIndex = 9) then //Просрочен
    begin
      res := (WeekNum(Date));
      Bet := ' AND  ([Планнеделя]<' + #39 + IntToStr(res) + #39 + ' ) AND ((ОТК IS NULL)) ';
    end;

    if (ComboBox26.ItemIndex = 10) then //Готовые
      Bet := '  AND (NOT ОТК IS NULL) ';

   //    Kol:=StrToInt(SG2.Cells[4,ARow]);
   // Kol_Pr:=StrToInt(SG2.Cells[23,ARow]);

    if (ComboBox26.ItemIndex = 11) or (ComboBox26.ItemIndex = -1) then //НЕ Готовые
      Bet := '  AND ((ОТК IS NULL) or  (Кол>[Кол принятых]) and ([Кол принятых]<>0) ) ';

  end;

  if not Form1.mkQuerySelect(Form1.ADOQuery1, 'Select * from %s Where ([Отмена] IS NULL) AND (ПР=' + #39 + 'МИ' + #39 + ') ' + Bet + Order8 + Betwe1 + Betwe710, ['[710]']) then
    exit;
  if Form1.ADOQuery1.RecordCount <> 0 then
    FF710 := 1
  else
    FF710 := 0;
  SG2.RowCount := Form1.ADOQuery1.RecordCount + 2;

  StatusBar1.Panels[2].Text := IntToStr(ADOQuery1.RecordCount);
  for I := 0 to Form1.ADOQuery1.RecordCount - 1 do
  begin
    SG2.Cells[0, I + 1] := IntToStr(I + 1);
    SG2.Cells[1, I + 1] := Form1.ADOQuery1.FieldByName('ДатаЗаказа').AsString;
    SG2.Cells[2, I + 1] := Form1.ADOQuery1.FieldByName('Заказ').AsString;
    SG2.Cells[3, I + 1] := Form1.ADOQuery1.FieldByName('Изделие').AsString;
    SG2.Cells[4, I + 1] := Form1.ADOQuery1.FieldByName('Кол').AsString;
    SG2.Cells[5, I + 1] := Form1.ADOQuery1.FieldByName('Технолог').AsString;
    SG2.Cells[6, I + 1] := Form1.ADOQuery1.FieldByName('Расчетная дата').AsString;
    SG2.Cells[7, I + 1] := Form1.ADOQuery1.FieldByName('ПланНеделя').AsString;
    SG2.Cells[8, I + 1] := Form1.ADOQuery1.FieldByName('Примечания').AsString;
    SG2.Cells[9, I + 1] := Form1.ADOQuery1.FieldByName('Пр').AsString;
    SG2.Cells[11, I + 1] := Form1.ADOQuery1.FieldByName('Дата запуска в работу').AsString;
    SG2.Cells[12, I + 1] := Form1.ADOQuery1.FieldByName('НачНомер').AsString;
    SG2.Cells[13, I + 1] := Form1.ADOQuery1.FieldByName('КонНомер').AsString;
    SG2.Cells[17, I + 1] := Form1.ADOQuery1.FieldByName('ДатаГотОфис').AsString;
    SG2.Cells[18, I + 1] := Form1.ADOQuery1.FieldByName('Готовность Заготовки').AsString;
    SG2.Cells[19, I + 1] := Form1.ADOQuery1.FieldByName('Заводской Номер').AsString;

    SG2.Cells[21, I + 1] := Form1.ADOQuery1.FieldByName('Сборка').AsString;
    SG2.Cells[20, I + 1] := Form1.ADOQuery1.FieldByName('Покраска').AsString;

    SG2.Cells[22, I + 1] := Form1.ADOQuery1.FieldByName('ОТК').AsString;
    SG2.Cells[23, I + 1] := Form1.ADOQuery1.FieldByName('Кол принятых').AsString;
    SG2.Cells[24, I + 1] := Form1.ADOQuery1.FieldByName('Упаковка').AsString;

    SG2.Cells[25, I + 1] := Form1.ADOQuery1.FieldByName('IdГП').AsString;
    SG2.Cells[26, I + 1] := ADOQuery1.FieldByName('Статус').AsString;
    SG2.Cells[27, I + 1] := ADOQuery1.FieldByName('ОТКФам').AsString;
    SG2.Cells[28, I + 1] := ADOQuery1.FieldByName('IdКО').AsString;
    Form1.ADOQuery1.Next;
  end;
  SG2.RowHeights[0] := 60;
  Poisk := 0;
end;

procedure TForm1.Button80Click(Sender: TObject);
var
  I, K: Integer;
  StrDat1, StrDat2, Betwe, S, GP, KO, Tab, Kol: string;
begin
  pb8.Position := 0;
  pb8.Max := zclrstrngrd1.RowCount;
  for I := 0 to zclrstrngrd1.RowCount - 1 do
  begin
    GP := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 26, I + 2];
    if GP = '' then
      Continue;
    KO := zclrstrngrd1.Cells[I_FN_KOL_ZAP + 34, I + 2];
    if KO = '' then
      KO := '0';
    if not Form1.mkQuerySelect(Form1.ADOQuery2, 'Select SUM([Кол принятых]) AS S from %s Where (IdГП=' + #39 + GP + #39 + ') AND (IdКО=' + #39 + KO + #39 + ') ', ['[Запуск750]']) then
      exit;
    Kol := ADOQuery2.FieldByName('S').AsString;
    K := StrToInt(KO);
    if K = 0 then
      S := 'update server08.VezaDB.dbo.[Заказы] set' + ' [Изготовлено] =' + #39 + Kol + #39 + ' WHERE ID=' + #39 + GP + #39
    else
      S := 'update server08.VezaDB.dbo.[ЗаказыКооп] set' + ' [Изготовлено] =' + #39 + Kol + #39 + ' WHERE (IDЗаказа=' + #39 + GP + #39 + ') AND (ID=' + #39 + KO + #39 + ')';
    ADOQuery1.Close;
    ADOQuery1.SQL.Clear;
    Memo2.Lines.Add(S);
    ADOQuery1.SQL.Add(S);
    ADOQuery1.ExecSQL;
    pb8.Position := I + 1;
    Form1.Update;
  end;
  pb8.Position := 0;
  MessageDlg('Синхронизировано!', mtInformation, [mbOk], 1);
end;

function TForm1.EJZ(Upak, Dat1, dat2, Tab1, KolPr: string; AGrid: TStringGrid): string;
var
  I, K, E: Integer;
  StrDat1, StrDat2, Betwe, S, GP, KO, Tab, Kol: string;
begin
  StrDat1 := Dat1;
  StrDat2 := dat2;
  Betwe := 'AND ( [' + Upak + '] BETWEEN ' + #39 + StrDat1 + #39 + ' AND ' + #39 + StrDat2 + #39 + ') ';
  if not Form1.mkQuerySelect66(Form1.ADOQuery4, 'Select * from %s Where (Отмена IS NULL) ' + Betwe, [Tab1]) then
    exit;
    //
  StringGrid1.Cells[1, 0] := 'Изделие';
  StringGrid1.Cells[2, 0] := 'НомерЗаказа';
  StringGrid1.Cells[3, 0] := 'Заказано';
  StringGrid1.Cells[4, 0] := 'Изготовлено';
  StringGrid1.Cells[5, 0] := 'ГотовоФакт';
  StringGrid1.Cells[6, 0] := 'ГотКОтгр';
  StringGrid1.Cells[7, 0] := 'Отгружено';
  for I := 0 to StringGrid1.rowCount - 1 do
  begin
    if StringGrid1.Cells[1, I + 1] = '' then
    begin
      E := I + 1;
      Break;
    end;
  end;
    // E:=0;
  pb3.Position := 0;
  pb3.Max := ZSG.RowCount - 1;
  StringGrid1.ColCount := 8;

  for I := 0 to ADOQuery4.RecordCount - 1 do
  begin
    GP := ADOQuery4.FieldByName('IdГП').AsString;
    if GP = '' then
      Continue;
    KO := ADOQuery4.FieldByName('IdКО').AsString;

    K := StrToInt(KO);
    if K = 0 then
      S := 'Select * From server08.VezaDB.dbo.[Заказы] ' + '  WHERE (ID=' + #39 + GP + #39 + ') AND (([ГотКОтгр] <>ГотовоФакт) )'
    else
      S := 'Select * From server08.VezaDB.dbo.[ЗаказыКооп] ' + ' WHERE (IDЗаказа=' + #39 + GP + #39 + ') AND (ID=' + #39 + KO + #39 + ') AND (([ГотКОтгр] <>ГотовоФакт))';
    ADOQuery1.Close;
    ADOQuery1.SQL.Clear;
    Memo2.Lines.Add(S);
    ADOQuery1.SQL.Add(S);
    ADOQuery1.Open;
    pb3.Position := I - 1;
    Form1.Update;
    if ADOQuery1.RecordCount <> 0 then
    begin
      StringGrid1.Cells[0, E] := IntToStr(E);
      StringGrid1.Cells[1, E] := ADOQuery1.FieldByName('Изделие').AsString;
      StringGrid1.Cells[2, E] := ADOQuery1.FieldByName('НомерЗаказа').AsString;
      StringGrid1.Cells[3, E] := ADOQuery1.FieldByName('Заказано').AsString;
      StringGrid1.Cells[4, E] := ADOQuery1.FieldByName('Изготовлено').AsString;
      StringGrid1.Cells[5, E] := ADOQuery1.FieldByName('ГотовоФакт').AsString;
      StringGrid1.Cells[6, E] := ADOQuery1.FieldByName('ГотКОтгр').AsString;
      StringGrid1.Cells[7, E] := ADOQuery1.FieldByName('Отгружено').AsString;
      StringGrid1.RowCount := StringGrid1.RowCount + 1;
      Inc(E);
    end;
    ADOQuery4.Next;
  end;
  pb3.Position := 0;
    // MessageDlg( 'Синхронизировано!', mtInformation, [ mbOk ], 1 );
end;

procedure TForm1.Button81Click(Sender: TObject);
var
  I, K, E: Integer;
  StrDat1, StrDat2, Betwe, S, GP, KO, Tab, Kol: string;
begin
  Clear_StringGrid(StringGrid1);
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  EJZ('Упаковка', StrDat1, StrDat2, 'Запуск', 'Кол принятых', StringGrid1);
  EJZ('Упаковка', StrDat1, StrDat2, 'ЗапускВозд', 'Кол принятых', StringGrid1);
  EJZ('Упаковка', StrDat1, StrDat2, 'Запуск750', 'Кол принятых', StringGrid1);

  EJZ('Упаковка', StrDat1, StrDat2, 'ЗапускЛЮК', 'Кол принятых', StringGrid1);
  EJZ('Упаковка', StrDat1, StrDat2, 'ЗапускСТАМ', 'Кол принятых', StringGrid1);
     // EJZ('Упаковка',StrDat1,StrDat2,'','Кол принятых',StringGrid1);
  ExportGridtoExcel1(StringGrid1);
end;

procedure TForm1.Button82Click(Sender: TObject);
var
BZ,Nam:string;
  I, Res,B: Integer;
begin    //Клапан Канал-КОЛ-К-200  procedure TForm1.Specif_Klap_KOL_K(Izdel,GP,KO,Zak,BZ,Dat,Tab,Tab2: String;AA:Integer);
         {  SGL.Cells[I_FN_DAT, 0] := FN_DAT;
  SGL.Cells[I_FN_ZAK, 0] := FN_ZAK;
  SGL.Cells[I_FN_KOL, 0] := FN_KOL;
  SGL.Cells[I_FN_KOL_ZAP, 0] := 'в пакете';
  SGL.Cells[I_FN_NAM, 0] := FN_NAM;
  SGL.Cells[I_FN_A, 0] := FN_A;
  SGL.Cells[I_FN_B, 0] := FN_B;
  SGL.Cells[I_FN_MOD_PRIVOD, 0] := FN_MOD_PRIVOD;
  SGL.Cells[I_FN_PLAN_DATA, 0] := FN_PLAN_DATA;
  SGL.Cells[I_FN_PLAN_NED, 0] := FN_PLAN_NED;
  SGL.Cells[I_FN_ZAKAZCHIK, 0] := FN_ZAKAZCHIK;
  SGL.Cells[I_FN_PR, 0] := FN_PR;
  SGL.Cells[I_FN_SGP, 0] := FN_SGP;
  SGL.Cells[I_FN_SGP + 1, 0] := 'КТО';
  SGL.Cells[I_FN_SGP + 2, 0] := 'IdГП';
  SGL.Cells[I_FN_SGP + 3, 0] := 'Брикет';
  SGL.Cells[I_FN_SGP + 4, 0] := 'Брик_Нед1';
  SGL.Cells[I_FN_SGP + 5, 0] := 'Брик_Ден1';
  SGL.Cells[I_FN_SGP + 6, 0] := 'Брик_Нед2';
  SGL.Cells[I_FN_SGP + 7, 0] := 'Брик_Ден1';
  SGL.Cells[I_FN_SGP + 8, 0] := 'IdКО';
  SGL.Cells[I_FN_SGP + 9, 0] := 'bz';
  SGL.Cells[I_FN_SGP + 10, 0] := 'СтатусФ';
      StringGrid6.Cells[23, I + 1] := ADOQuery1.FieldByName('БЗ').AsString;
    StringGrid6.Cells[24, I + 1] := ADOQuery1.FieldByName('Статус').AsString;
    StringGrid6.Cells[25, I + 1] := ADOQuery1.FieldByName('Код').AsString;
    SGL.Cells[I_FN_SGP + 9, 0] := 'bz';}
  for I := 0 to SGL.RowCount - 1 do
  begin
    Res := Pos('0', StringGrid6.Cells[24, I + 1]);
    if (Res <> 0) or (StringGrid6.Cells[24, I + 1]='') then
    begin
      Res := Pos('Клапан Канал-КОЛ-К-', SGL.Cells[I_FN_NAM, I + 1]);
      if Res <> 0 then
      begin
          //Клапан Канал-КОЛ-К-200  Клапан Канал-КОЛ-К-250_226200001-01-СПБ
          Nam:=SGL.Cells[I_FN_NAM, I + 1];
          BZ:= SGL.Cells[I_FN_SGP + 9, I + 1];
          B:=Pos('rue',BZ);
          if B<>0 then
          begin
               Res:=Pos('_',Nam);
               if Res<>0 then
               begin
                   Delete(Nam, Res, 200);
               end;
          end;
        Specif_Klap_KOL_K(Nam, SGL.Cells[I_FN_SGP + 2, I + 1], SGL.Cells[I_FN_SGP + 8, I + 1], SGL.Cells[I_FN_ZAK, I + 1], StringGrid6.Cells[23, I + 1], SGL.Cells[I_FN_DAT, I + 1], 'СпецифВозд', 'KlapanaZap', StrToInt(StringGrid6.Cells[25, I + 1]));
      end;
    end;
  end;
end;

procedure TForm1.Button83Click(Sender: TObject);
var
  Dat1, Dat2, Str, Tab1, Tab2: string;
  I: Integer;
  XL: Variant;
begin
  XL := CreateOleObject('Excel.Application');
  XL.Application.EnableEvents := false;
  XL.WorkBooks.Add;
  DIP := 0;

  XL.ActiveWorkBook.WorkSheets[1].Cells[DIP + 1, 1] := 'Мат';
  XL.ActiveWorkBook.WorkSheets[1].Cells[DIP + 1, 2] := 'Масса';
   //  XL.ActiveWorkBook.WorkSheets[1].Cells[DIP + 1,3] := 'Кол-во';
  Inc(DIP);
  Tab1 := 'Klapana';
  Tab2 := 'Специф';
  METALL('Пож', Dat2, Str, Tab1, Tab2, XL);

  Tab1 := 'KlapanaZap';
  Tab2 := 'СпецифВозд';
  METALL('Возд', Dat2, Str, Tab1, Tab2, XL);

  Tab1 := 'СТАМ';
  Tab2 := 'СпецифСТАМ';
  METALL('СТАМ', Dat2, Str, Tab1, Tab2, XL);

  Tab1 := 'ЛЮК';
  Tab2 := 'СпецифЛЮК';
  METALL('ЛЮК', Dat2, Str, Tab1, Tab2, XL);

  Tab1 := '[750]';
  Tab2 := '[Специф750]';
  METALL('750', Dat2, Str, Tab1, Tab2, XL);

  XL.Visible := True;
  XL := UnAssigned;
end;

procedure TForm1.Button84Click(Sender: TObject);
var
  S, Sql: string;
begin
  S := 'НомерЗаказа';
  Sql := 'Заказы';
  if not mkQuerySelect(ADOQuery1, 'EXEC [dbo].[Server1]  @Name = ' + #39 + '%s' + ' Where (' + S + '=''''''' + #39 + Edit3.Text + #39 + ''''''') AND (Производитель=''''''' + #39 + '05' + #39 + ''''''') ' + #39, [Sql]) then//,'+ComboBox1.Text+' Where ('+Edit3.Text+
                //'=' + Edit4.Text+')' , [])then
    exit;
  S := ADOQuery1.FieldByName('Менеджер').AsString;
  Edit41.Text := ADOQuery1.FieldByName('Менеджер').AsString;

end;

procedure TForm1.Button85Click(Sender: TObject);
Begin
     CC1('','','','Klapana','',0);
end;

procedure TForm1.Button86Click(Sender: TObject);
begin
CC1('','','','KlapanaZap','1',1);
end;

procedure TForm1.Button87Click(Sender: TObject);
begin
CC_STAM('','','','СТАМ','');
end;

procedure TForm1.Button88Click(Sender: TObject);
begin
CC_STAM('','','','ЛЮК','');
end;

procedure TForm1.Button89Click(Sender: TObject);
var I:Integer;
gp,KO,Zak,NAM,BZ:string;
begin
    for I := 2 to ZCV.RowCount-1 do
    begin
          GP:= ZCV.Cells[30,I];
          KO:= ZCV.Cells[31,I];
          Zak:= ZCV.Cells[2,I];
          BZ:=  ZCV.Cells[3,I];
          NAM:=  ZCV.Cells[12,I];
          if not Form1.mkQueryUpdate(Form1.ADOQuery1,
                'UPDATE %s SET [Н\ч Сборка Клапана]=' + #39 + '0' + #39 +
                ' WHERE ([Заказ]=' + #39 + Zak + #39 + ') AND ([Изделие]='
                + #39 + Nam + #39 + ') AND (БЗ='+#39+BZ+#39+')', ['KlapanaZap']) then
                Exit;
    end;
end;

procedure TForm1.CC_STAM(Dat1, Dat2, Str, Tab1, Tab2: string);
var
   // x,sh,r: Variant;
    x: TXLSFile;
    sh: TSheet;
    r: TRange;
    i, j,n,Y,Q,Res : integer;
   Str2,Str1,Name,Kol,Path:string;
   // Reg: TRegistry;
    st,ST1,Tek: string;
   // XL:Variant;
    Buffer: array[0..5000,0..4] of string;
    N1,N2,n3,N4,n5,N6,N7:Double;
begin
N1:=0;
N2:=0;n3:=0;N4:=0;n5:=0;N6:=0;N7:=0;

    Dat1:=FormatDateTime('dd.mm.YYYY',Now);
    //Dat2:=FormatDateTime('dd.mm.YYYY',DateTimePicker2.DateTime);
    path:= PWideChar(ExtractFileDir(ParamStr(0)));//ShellExecute(0,nil,PWideChar(Dat1),nil,nil, SW_SHOWNORMAL);;

    Memo29.Lines.Clear;
    Memo30.Lines.Clear;
    Memo31.Lines.Clear;

    x := TXLSFile.Create;
    n := 1;
    x.Workbook.Sheets.Clear;
    x.Workbook.Sheets.Add(IntToStr(n));
    sh := x.Workbook.SheetByName(IntToStr(n));
          sh.Cells[0, 0].Value := 'Период';
          sh.Cells[0, 0].HAlign := xlHAlignCenter;
          sh.Cells[0, 1].Value := 'Объект нормы';
          sh.Cells[0, 1].HAlign := xlHAlignCenter;
          sh.Cells[0, 2].Value := 'Подразделение';
          sh.Cells[0, 2].HAlign := xlHAlignCenter;
          sh.Cells[0, 3].Value := 'Номенклатура';
          sh.Cells[0, 3].HAlign := xlHAlignCenter;
          sh.Cells[0, 4].Value := 'Норма времени изготовления';
          sh.Cells[0, 4].HAlign := xlHAlignCenter;


          sh.Columns[0].WidthPx := 100;
          sh.Columns[1].WidthPx := 250;
          sh.Columns[2].WidthPx := 100;
          sh.Columns[3].WidthPx := 100;
          sh.Columns[4].WidthPx := 100;
          r := sh.Ranges.Add;
          r.AddRect(0, 0, 0, 1);
          r.FontHeight := 12;
          r.FontBold := True;
          r.FontColorIndex := xlColorBlack;
          r.FillPatternBGColorIndex := xlColorLightYellow;
          r.FillPattern := xlPatternSolid;
          r.BordersOutline(xlColorBlack, bsThick);
          if not mkQuerySelect(ADOQuery1,                                    //  AND [Н\ч Сборка Клапана]<>'+#39+'0'+#39 DISTINCT(Изделие),[Н\ч Сборка Клапана],[Н\ч Сварка],[Сборка лопаток],[Сборка тяг],[СборкаРеш],[Сборка Засова]
          ' Select DISTINCT(Изделие),[Н\ч Сборка] from %s Where (Отмена IS NULL)  AND (пр='
          +#39+'МИ'+#39+') AND (Дата>'+#39+'01.01.2022'+#39+') AND [Н\ч Сборка]<>'+#39+'0'+#39 , [Tab1]) then
          exit;
          I:=1;
    for j := 0 to ADOQuery1.RecordCount - 1 do
    begin
            N1 :=ADOQuery1.FieldByName('Н\ч Сборка').AsFloat;//;
            St:= FloatToStr(N1);
            St1:=StringReplace(St, '.', ',', [rfReplaceAll]);
            sh.Cells[i, 4].Value :=St1;
            sh.Cells[i, 4].HAlign := xlHAlignRight;

            sh.Cells[i, 1].Value :=ADOQuery1.FieldByName('Изделие').AsString;//
            sh.Cells[i, 1].HAlign := xlHAlignCenter;

            r := sh.Ranges.Add;
            r.AddRect(i, i, 0, 1);
            r.BordersOutline(xlColorBlack, bsThin);
            Inc(i);
            ADOQuery1.Next;
    end;

              x.SaveAs(path + '\' + FormatDateTime('yyyymmdd', DateTimePicker1.Date) + ' СТАМ.xls');
              ShellExecute( 0, 'open', PChar( path + '\' + FormatDateTime('yyyymmdd', DateTimePicker1.Date) + ' СТАМ.xls' ), nil, nil, SW_SHOWNORMAL );

          x.Free;
end;

procedure TForm1.CC1(Dat1, Dat2, Str, Tab1, Tab2: string;P:integer);
var
   // x,sh,r: Variant;
    x: TXLSFile;
    sh: TSheet;
    r: TRange;
    i, j,n,Y,Q,Res : integer;
   Str2,Str1,Name,Kol,Path:string;
   // Reg: TRegistry;
    st,ST1,Tek: string;
   // XL:Variant;
    Buffer: array[0..5000,0..4] of string;
    N1,N2,n3,N4,n5,N6,N7,N8,N9:Double;
begin
N1:=0;
N2:=0;n3:=0;N4:=0;n5:=0;N6:=0;N7:=0;N8:=0;  N9:=0;

    Dat1:=FormatDateTime('dd.mm.YYYY',Now);
    //Dat2:=FormatDateTime('dd.mm.YYYY',DateTimePicker2.DateTime);
    path:= PWideChar(ExtractFileDir(ParamStr(0)));//ShellExecute(0,nil,PWideChar(Dat1),nil,nil, SW_SHOWNORMAL);;

    Memo29.Lines.Clear;
    Memo30.Lines.Clear;
    Memo31.Lines.Clear;

    x := TXLSFile.Create;
    n := 1;
    x.Workbook.Sheets.Clear;
    x.Workbook.Sheets.Add(IntToStr(n));
    sh := x.Workbook.SheetByName(IntToStr(n));
          sh.Cells[0, 0].Value := 'Период';
          sh.Cells[0, 0].HAlign := xlHAlignCenter;
          sh.Cells[0, 1].Value := 'Объект нормы';
          sh.Cells[0, 1].HAlign := xlHAlignCenter;
          sh.Cells[0, 2].Value := 'Подразделение';
          sh.Cells[0, 2].HAlign := xlHAlignCenter;
          sh.Cells[0, 3].Value := 'Номенклатура';
          sh.Cells[0, 3].HAlign := xlHAlignCenter;
          sh.Cells[0, 4].Value := 'Норма времени изготовления';
          sh.Cells[0, 4].HAlign := xlHAlignCenter;


          sh.Columns[0].WidthPx := 100;
          sh.Columns[1].WidthPx := 250;
          sh.Columns[2].WidthPx := 100;
          sh.Columns[3].WidthPx := 100;
          sh.Columns[4].WidthPx := 100;
          r := sh.Ranges.Add;
          r.AddRect(0, 0, 0, 1);
          r.FontHeight := 12;
          r.FontBold := True;
          r.FontColorIndex := xlColorBlack;
          r.FillPatternBGColorIndex := xlColorLightYellow;
          r.FillPattern := xlPatternSolid;
          r.BordersOutline(xlColorBlack, bsThick);
          if P=0 then  //Пож
          Begin
          if not mkQuerySelect(ADOQuery1,                                    //  AND [Н\ч Сборка Клапана]<>'+#39+'0'+#39 DISTINCT(Изделие),[Н\ч Сборка Клапана],[Н\ч Сварка],[Сборка лопаток],[Сборка тяг],[СборкаРеш],[Сборка Засова]
          ' Select DISTINCT(Изделие),[Н\ч Сборка Клапана],[Н\ч Сварка],[Сборка лопаток],[Сборка тяг],[СборкаРеш],[Сборка Засова],Электро from %s Where (Отмена IS NULL)  AND (пр='
          +#39+'МИ'+#39+') AND (Дата>'+#39+'11.18.2022'+#39+') AND [Н\ч Сборка Клапана]<>'+#39+'0'+#39 , [Tab1]) then
          exit;
          End;
          if P=1 then  //Возд
          Begin
          if not mkQuerySelect(ADOQuery1,                                    //  AND [Н\ч Сборка Клапана]<>'+#39+'0'+#39 DISTINCT(Изделие),[Н\ч Сборка Клапана],[Н\ч Сварка],[Сборка лопаток],[Сборка тяг],[СборкаРеш],[Сборка Засова]
          ' Select DISTINCT(Изделие),[Н\ч Сборка Клапана],[Н\ч Сварка],[Сборка лопаток],'+
          '[Сборка тяг],[СборкаРеш],[Сборка Засова],[Расключение],Обварка,Электро from %s Where (Отмена IS NULL)  AND (пр='
          +#39+'МИ'+#39+') AND (Дата>'+#39+'11.01.2022'+#39+') AND [Н\ч Сборка Клапана]<>'+#39+'0'+#39 , [Tab1]) then
          exit;
          End;
          I:=1;
    for j := 0 to ADOQuery1.RecordCount - 1 do
    begin
            N1 :=ADOQuery1.FieldByName('Н\ч Сборка Клапана').AsFloat;//;
            N2 :=ADOQuery1.FieldByName('Н\ч Сварка').AsFloat;
            N3 :=ADOQuery1.FieldByName('Сборка лопаток').AsFloat;
            N4 :=ADOQuery1.FieldByName('Сборка тяг').AsFloat;
            N5 :=ADOQuery1.FieldByName('СборкаРеш').AsFloat;
            if P=0 then
          Begin
            N7 :=ADOQuery1.FieldByName('Сборка Засова').AsFloat;
          End;
            if P=1 then
          Begin
            N7 :=ADOQuery1.FieldByName('Расключение').AsFloat;
            N8 :=ADOQuery1.FieldByName('Обварка').AsFloat;
          End;
          N9 :=ADOQuery1.FieldByName('Электро').AsFloat;
            N6:=SimpleRoundTo(N1+N2+N3+N4+N5+N7+N8+N9, -2);
            sh.Cells[i, 4].Value :=FloatToStr(N6);
            sh.Cells[i, 4].HAlign := xlHAlignRight;

            sh.Cells[i, 1].Value :=ADOQuery1.FieldByName('Изделие').AsString;//
            sh.Cells[i, 1].HAlign := xlHAlignCenter;

            r := sh.Ranges.Add;
            r.AddRect(i, i, 0, 1);
            r.BordersOutline(xlColorBlack, bsThin);
            Inc(i);
            ADOQuery1.Next;
    end;
          if Tab2<>'' then
          Begin
              x.SaveAs(path + '\' + FormatDateTime('yyyymmdd', DateTimePicker1.Date) + ' Возд1.xls');
              ShellExecute( 0, 'open', PChar( path + '\' + FormatDateTime('yyyymmdd', DateTimePicker1.Date) + ' Возд1.xls' ), nil, nil, SW_SHOWNORMAL );
          End
          else
          Begin
            x.SaveAs(path + '\' + FormatDateTime('yyyymmdd', DateTimePicker1.Date) + ' Пож1.xls');
            ShellExecute( 0, 'open', PChar( path + '\' + FormatDateTime('yyyymmdd', DateTimePicker1.Date) + ' Пож1.xls' ), nil, nil, SW_SHOWNORMAL );
          End;
          x.Free;
end;

procedure TForm1.METALL(Dat1, Dat2, Str, Tab1, Tab2: string; XL: Variant);
var
  Sql_Str, Mat: string;
  I, A: Integer;
  Dl, sh, Kol, Pl, List: Double;
begin
  Sql_Str := ' ([Номер Раз]='') AND (Отмена IS NULL) order by Заказ ';
     //Sum(CAST ('+Tab2+'.ДлинаРазв AS Float)) As D  ,Sum(CAST ('                                                                         //Sum((CAST (' + Tab2 + '.Масса AS Float)*' + Tab2 + '.Количество)*' + Tab1 + '.[кол во]) As M ,' + Tab2 + '.Материал' + '  AND (' + Tab2 + '.Материал= ' + #39 + 'Лента Оц 1,5x238 Zn 140' + #39 + ')
     //   +Tab2+'.ШиринаРазв AS Float)) As Sh
  if not mkQuerySelect(ADOQuery1, ('Select *  FROM ' + Tab2 + ' INNER JOIN ' + Tab1 + ' ON ' + Tab2 + '.IdГП = ' + Tab1 +                                                   //Group by ' + Tab2 + '.Материал
    '.IdГП  Where   ( ' + Tab1 + '.[Кол во запущенных]<>0' + ') AND (' + Tab2 + '.Дата> ' + #39 + '01.01.2021' + #39 + ') AND  (' + Tab1 + '.Упаковка is NULL) AND (Отмена Is NULL) AND (' + Tab2 + '.ДлинаРазв> ' + #39 + '0' + #39 + ') AND (' + Tab2 + '.ВидЭлемента= ' + #39 + 'Детали' + #39 + ') '), []) then
          // , ( '
      //  +Tab2+'.Количество*'+Tab1+'.[кол во] )'+Tab2+'.ДлинаРазв ,'+Tab2+'.ШиринаРазв,AND (CAST ('+Tab2+'.ДлинаРазв AS Float)>0 )) (KlapanaZap.[IdГП] ='+#39+'1399337'+#39+')
    exit;
  XL.ActiveWorkBook.WorkSheets[1].Cells[DIP + 1, 1] := Dat1;
  Inc(DIP);
  for A := 0 to ADOQuery1.RecordCount - 1 do
  begin
   // Dl := ADOQuery1.FieldByName('M').AsFloat;
    Kol := ADOQuery1.FieldByName('Масса').AsFloat;
    Mat := ADOQuery1.FieldByName('Материал').AsString;
    Pl := Kol * Dl;

    XL.ActiveWorkBook.WorkSheets[1].Cells[DIP + 1, 1] := Mat;
    XL.ActiveWorkBook.WorkSheets[1].Cells[DIP + 1, 3] := ADOQuery1.FieldByName('Элемент').AsString;
    XL.ActiveWorkBook.WorkSheets[1].Cells[DIP + 1, 4] := ADOQuery1.FieldByName('Обозначение').AsString;
   // XL.ActiveWorkBook.WorkSheets[1].Cells[DIP + 1, 2] := FloatToStr(Dl);
    XL.ActiveWorkBook.WorkSheets[1].Cells[DIP + 1, 2] := FloatToStr(Kol);
          // XL.ActiveWorkBook.WorkSheets[1].Cells[I + 1,3] := FloatToStr(Sh);
           //XL.ActiveWorkBook.WorkSheets[1].Cells[DIP + 1,3] := FloatToStr(Kol);
          // XL.ActiveWorkBook.WorkSheets[1].Cells[DIP + 1,4] := FloatToStr(PL);
    Inc(DIP);
    ADOQuery1.Next;
  end;
  Inc(DIP);

end;

procedure TForm1.Button90Click(Sender: TObject);
var
  S, X: string;
  I, C, U, Y: Integer;
  StrDat1, StrDat2,StrDat3, StrDat4, Sbor1, Bet1, God, mes, Dir: string;
  XL2, Sheet1, Sheet2, Rang: Variant;
  TempTableQ: TADOQuery;
begin
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker2.Date);
  StrDat3 := FormatDateTime('dd.mm.yyyy', DateTimePicker1.Date);
  StrDat4 := FormatDateTime('dd.mm.yyyy', DateTimePicker2.Date);
  FRabota.Label2.Caption:=StrDat3;
  FRabota.Label3.Caption:=StrDat4;
  Clear_StringGrid(FRabota.SG);
  //ComboBox8.Text:='Суфиянов Руслан ';
  FRabota.Vozd:=0;
  FRabota.Caption:=ComboBox8.Text;//
  FRabota.SG.ColCount:=22;
  FRabota.SG.Cells[0,0]:= 'н\п';
  FRabota.SG.Cells[1,0]:= 'Номер';
  FRabota.SG.Cells[2,0]:= 'Дата';
  FRabota.SG.Cells[3,0]:= 'Заказ';
  FRabota.SG.Cells[4,0]:= 'Изделие';
  FRabota.SG.Cells[5,0]:= 'Кол во запущенных';

  FRabota.SG.Cells[6,0]:= 'Сборка Готовность';
  FRabota.SG.Cells[7,0]:= 'Сборка2';
  FRabota.SG.Cells[8,0]:= 'Н\ч Сборка Клапана';

  FRabota.SG.Cells[9,0]:= 'Подсборка';
  FRabota.SG.Cells[10,0]:= 'Сборщик';
  FRabota.SG.Cells[11,0]:= 'Сборка1';

  FRabota.SG.Cells[12,0]:= 'КорпусДат';
  FRabota.SG.Cells[13,0]:= 'СборТяга';
  FRabota.SG.Cells[14,0]:= 'Сборка тяг';

  FRabota.SG.Cells[15,0]:= 'ЛопаткаДат';
  FRabota.SG.Cells[16,0]:= 'СборЛопатка';
  FRabota.SG.Cells[17,0]:= 'Сборка лопаток';
  FRabota.SG.Cells[18,0]:= 'СборРеш';
  FRabota.SG.Cells[19,0]:= 'СборкаРеш';
  FRabota.SG.Cells[20,0]:= 'Сборка засова';
  FRabota.SG.Cells[21,0]:= 'Электро';
  //FRabota.SG.Cells[22,0]:= '';
  FRabota.SG.Cells[22,0]:= 'ОТК';


     X := ' WHERE  (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL) ';
  //Bet1 := '  AND (([Сборка Готовность]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ') AND ( [Подсборка1]='+#39+ComboBox8.Text+#39+'))'+
  if not mkQuerySelect(ADOQuery2, 'Select * from %s  ' + X+
  '  AND (([Сборка Готовность]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ') AND ( [Сборщик]='+#39+ComboBox8.Text+#39+'))'+
  ' OR (([Подсборка]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ') AND (Подсборка1='+#39+ComboBox8.Text+#39+')) OR '+
  '  (([КорпусДат]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ') AND (СборТяга='+#39+ComboBox8.Text+#39+')) OR '+
  ' (([ЛопаткаДат]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ') AND (СборЛопатка='+#39+ComboBox8.Text+#39+'))'
  , ['Запуск']) then
    exit;
  C := ADOQuery2.RecordCount;
  FRabota.SG.RowCount:=C+3;
  for I := 0 to ADOQuery2.RecordCount - 1 do
  begin
    Sbor1 := ADOQuery2.FieldByName('Сборщик').AsString;
    FRabota.SG.Cells[0,I+1]:=IntToStr(I+1);
    FRabota.SG.Cells[1,I+1]:= ADOQuery2.FieldByName('Номер').AsString;
    FRabota.SG.Cells[2,I+1]:= ADOQuery2.FieldByName('Дата').AsString;
    FRabota.SG.Cells[3,I+1]:= ADOQuery2.FieldByName('Заказ').AsString;
    FRabota.SG.Cells[4,I+1]:= ADOQuery2.FieldByName('Изделие').AsString;
    FRabota.SG.Cells[5,I+1]:= ADOQuery2.FieldByName('Кол во запущенных').AsString;

    FRabota.SG.Cells[6,I+1]:= ADOQuery2.FieldByName('Сборка Готовность').AsString;
    FRabota.SG.Cells[7,I+1]:= ADOQuery2.FieldByName('Сборщик').AsString;
    FRabota.SG.Cells[8,I+1]:= ADOQuery2.FieldByName('Н\ч Сварка').AsString;

    FRabota.SG.Cells[9,I+1]:= ADOQuery2.FieldByName('Подсборка').AsString;
    FRabota.SG.Cells[10,I+1]:= ADOQuery2.FieldByName('Подсборка1').AsString;
    FRabota.SG.Cells[11,I+1]:= ADOQuery2.FieldByName('Н\ч Сборка Клапана').AsString;

    FRabota.SG.Cells[12,I+1]:= ADOQuery2.FieldByName('КорпусДат').AsString;
    FRabota.SG.Cells[13,I+1]:= ADOQuery2.FieldByName('СборТяга').AsString;
    FRabota.SG.Cells[14,I+1]:= ADOQuery2.FieldByName('Сборка тяг').AsString;

    FRabota.SG.Cells[15,I+1]:= ADOQuery2.FieldByName('ЛопаткаДат').AsString;
    FRabota.SG.Cells[16,I+1]:= ADOQuery2.FieldByName('СборЛопатка').AsString;
    FRabota.SG.Cells[17,I+1]:= ADOQuery2.FieldByName('Сборка лопаток').AsString;

    FRabota.SG.Cells[18,I+1]:= ADOQuery2.FieldByName('Сборка Готовность').AsString;//ADOQuery2.FieldByName('СборРеш').AsString;
    FRabota.SG.Cells[19,I+1]:= ADOQuery2.FieldByName('СборкаРеш').AsString;

    FRabota.SG.Cells[20,I+1]:= ADOQuery2.FieldByName('Сборка засова').AsString;
    FRabota.SG.Cells[21,I+1]:= ADOQuery2.FieldByName('Электро').AsString;
   //  FRabota.SG.Cells[22,I+1]:= '0';

    FRabota.SG.Cells[22,I+1]:= ADOQuery2.FieldByName('ОТК').AsString;

    ADOQuery2.Next;
  end;
  FRabota.ShowModal;
end;

procedure TForm1.Button91Click(Sender: TObject);
var
  S, X: string;
  I, C, U, Y: Integer;
  StrDat1, StrDat2,StrDat3,StrDat4, Sbor1, Bet1, God, mes, Dir: string;
  XL2, Sheet1, Sheet2, Rang: Variant;
  TempTableQ: TADOQuery;
begin
  StrDat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker4.Date);
  StrDat2 := FormatDateTime('mm.dd.yyyy', DateTimePicker5.Date);
  StrDat3 := FormatDateTime('dd.mm.yyyy', DateTimePicker4.Date);
  StrDat4 := FormatDateTime('dd.mm.yyyy', DateTimePicker5.Date);
  FRabota.Vozd:=1;
  FRabota.Label2.Caption:=StrDat3;
  FRabota.Label3.Caption:=StrDat4;
  FRabota.Memo1.Lines.Clear;
  FRabota.Memo2.Lines.Clear;
  Clear_StringGrid(FRabota.SG);
 // ComboBox8.Text:='Суфиянов Руслан ';
  FRabota.Caption:=ComboBox19.Text;//
  FRabota.SG.ColCount:=22;
  FRabota.SG.Cells[0,0]:= 'н\п';
  FRabota.SG.Cells[1,0]:= 'Номер';
  FRabota.SG.Cells[2,0]:= 'Дата';
  FRabota.SG.Cells[3,0]:= 'Заказ';
  FRabota.SG.Cells[4,0]:= 'Изделие';
  FRabota.SG.Cells[5,0]:= 'Кол во запущенных';

  FRabota.SG.Cells[6,0]:= 'Подсборка';
  FRabota.SG.Cells[7,0]:= 'Подсборка1';
  FRabota.SG.Cells[8,0]:= 'Н\ч Сборка Клапана';

  FRabota.SG.Cells[9,0]:= 'Сборка Готовность';
  FRabota.SG.Cells[10,0]:= 'Сборщик';
  FRabota.SG.Cells[11,0]:= 'Н\ч Сварка';

  FRabota.SG.Cells[13,0]:= 'СборТяга';
  FRabota.SG.Cells[14,0]:= 'Сборка тяг';

  FRabota.SG.Cells[15,0]:= 'Подсборка';
  FRabota.SG.Cells[16,0]:= 'СборЛопатка';
  FRabota.SG.Cells[17,0]:= 'Сборка лопаток';
  FRabota.SG.Cells[18,0]:= 'СборРеш';
  FRabota.SG.Cells[19,0]:= 'СборкаРеш';
  FRabota.SG.Cells[20,0]:= 'Сборка засова';
  FRabota.SG.Cells[21,0]:= 'Электро';
  //FRabota.SG.Cells[22,0]:= 'Обварка';
  FRabota.SG.Cells[22,0]:= 'ОТК';

     X := ' WHERE  (NOT Дата IS NULL)  AND ([Х] IS NULL) AND (Отмена IS NULL) ';
 { Bet1 := '  AND ([Сборка Готовность]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ')';
  if not mkQuerySelect(ADOQuery2, 'Select * from %s  ' + X+
  ' AND (Сборщик='+#39+ComboBox19.Text+#39+' OR [Подсборка1]='+#39+ComboBox19.Text+#39+
  ' OR СборЛопатка='+#39+ComboBox19.Text+#39+' OR СборТяга='+#39+ComboBox19.Text+#39+')' + Bet1
  , ['ЗапускВозд']) then
    exit;   }

    if not mkQuerySelect(ADOQuery2, 'Select * from %s  ' + X+
  '  AND (([Сборка Готовность]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ') AND ( [Сборщик]='+#39+ComboBox19.Text+#39+'))'+
  ' OR (([Подсборка]  BETWEEN ' + #39 + StrDat1 + #39 + ' And ' + #39 + StrDat2 + #39 + ') AND (Подсборка1='+#39+ComboBox19.Text+#39+')) '
  , ['ЗапускВозд']) then
    exit;
  C := ADOQuery2.RecordCount;
  FRabota.SG.RowCount:=C+3;
  for I := 0 to ADOQuery2.RecordCount - 1 do
  begin
    Sbor1 := ADOQuery2.FieldByName('Сборщик').AsString;
    FRabota.SG.Cells[0,I+1]:=IntToStr(I+1);
    FRabota.SG.Cells[1,I+1]:= ADOQuery2.FieldByName('Номер').AsString;
    FRabota.SG.Cells[2,I+1]:= ADOQuery2.FieldByName('Дата').AsString;
    FRabota.SG.Cells[3,I+1]:= ADOQuery2.FieldByName('Заказ').AsString;
    FRabota.SG.Cells[4,I+1]:= ADOQuery2.FieldByName('Изделие').AsString;
    FRabota.SG.Cells[5,I+1]:= ADOQuery2.FieldByName('Кол во запущенных').AsString;

    FRabota.SG.Cells[6,I+1]:= ADOQuery2.FieldByName('Подсборка').AsString;
    FRabota.SG.Cells[7,I+1]:= ADOQuery2.FieldByName('Подсборка1').AsString;
    FRabota.SG.Cells[8,I+1]:= ADOQuery2.FieldByName('Н\ч Сборка Клапана').AsString;

    FRabota.SG.Cells[9,I+1]:= ADOQuery2.FieldByName('Сборка Готовность').AsString;
    FRabota.SG.Cells[10,I+1]:= ADOQuery2.FieldByName('Сборщик').AsString;
    FRabota.SG.Cells[11,I+1]:= ADOQuery2.FieldByName('Н\ч Сварка').AsString;

    FRabota.SG.Cells[12,I+1]:= ADOQuery2.FieldByName('Сборка Готовность').AsString;
    FRabota.SG.Cells[13,I+1]:= ADOQuery2.FieldByName('СборТяга').AsString;
    FRabota.SG.Cells[14,I+1]:= ADOQuery2.FieldByName('Расключение').AsString;

    FRabota.SG.Cells[15,I+1]:= ADOQuery2.FieldByName('Подсборка').AsString;
    FRabota.SG.Cells[16,I+1]:= ADOQuery2.FieldByName('СборЛопатка').AsString;
    FRabota.SG.Cells[17,I+1]:= ADOQuery2.FieldByName('Сборка лопаток').AsString;

   // FRabota.SG.Cells[15,I+1]:= ADOQuery2.FieldByName('СборРеш').AsString;
    FRabota.SG.Cells[19,I+1]:= ADOQuery2.FieldByName('СборкаРеш').AsString;

    FRabota.SG.Cells[20,I+1]:= ADOQuery2.FieldByName('Обварка').AsString;
    FRabota.SG.Cells[21,I+1]:= ADOQuery2.FieldByName('Электро').AsString;
    //FRabota.SG.Cells[22,I+1]:= ADOQuery2.FieldByName('Обварка').AsString;
    FRabota.SG.Cells[22,I+1]:= ADOQuery2.FieldByName('ОТК').AsString;
    FRabota.memo1.Lines.Add(ADOQuery2.FieldByName('Расключение').AsString);
    FRabota.memo2.Lines.Add(ADOQuery2.FieldByName('Обварка').AsString);
    ADOQuery2.Next;
  end;
  FRabota.ShowModal;
end;

procedure TForm1.Button9Click(Sender: TObject);
var
  Dat1, Dat, br: string;
begin
  Dat := FormatDateTime('mm.dd.yyyy', DateTimePicker9.DateTime);
  Dat1 := FormatDateTime('mm.dd.yyyy', DateTimePicker10.DateTime);
  if Label163.Caption = '0' then
    br := 'ДатаЗаказа'
  else
    br := Label163.Caption;
  Betwe710 := ' AND ([' + br + '] BETWEEN ' + #39 + Dat + #39 + ' AND ' + #39 + Dat1 + #39 + ') ';
  Button7.Click;
end;

procedure TForm1.cbb4Change(Sender: TObject);
begin
  Form1.Btn3.Click;
end;

procedure TForm1.ts3Show(Sender: TObject);
begin
  Button7.Click;
end;

procedure TForm1.SG2DblClick(Sender: TObject);
var
  Pos1: Integer;
begin
  if (SG2.Col = 3) then
  begin
    Spec := 4;
    FSpec.Label1.Caption := '';
    FSpec.Caption := SG2.Cells[3, SG2.Row];
    FSpec.Label1.Caption := SG2.Cells[25, SG2.Row];
    FSpec.Lbl1.Caption := SG2.Cells[28, SG2.Row];
    Pos1 := AnsiCompareStr('0', SG2.Cells[25, SG2.Row]);
    FSpec.Label2.Caption := '4';
    if Pos1 <> 0 then
      FSpec.ShowModal;
  end;
  if (SG2.Col = 11) or (SG2.Col = 18) or (SG2.Col = 20) or (SG2.Col = 21) or (SG2.Col = 22) or (SG2.Col = 24) or (SG2.Col = 8) or (SG2.Col = 5) then  //and ((FlagDolg = 1) or (FlagDolg = 7))
  begin   // TRUMPF
    F710.Caption := SG2.Cells[SG2.Col, 0];
    F710.Label2.Caption := SG2.Cells[25, SG2.Row]; //idGP
    F710.dtp1.Date := Now;
    F710.Memo1.Text := SG2.Cells[8, SG2.Row];
    F710.rg1.Visible := False;
    F7 := 0;
    if (SG2.Col = 22) or (SG2.Col = 8) then
      F710.rg1.Visible := True;
    F710.ShowModal;
  end;
 { if (SG2.Col = 3) then
  begin
    Spec := 0;
    FSpec.Label1.Caption := '';
    FSpec.Caption := SG2.Cells[3, SG2.Row];
    FSpec.Label1.Caption := SG2.Cells[25, SG2.Row]; //idGP
    Pos1 := AnsiCompareStr('0', SG2.Cells[26, SG2.Row]);
    FSpec.Label2.Caption := '3'; //специф710
    if Pos1 <> 0 then
      FSpec.ShowModal;
  end; }
end;

procedure TForm1.SG2DrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect; State: TGridDrawState);
var
  Kol, Kol_Pr, Stat: Integer;
begin
        //and (ACol>7)
  if (ARow <> 0) then //Zag Zapusk
  begin
    if SG2.Cells[11, ARow] <> '' then
    begin
      SG2.Canvas.Brush.Color := clYellow;
      SG2.Canvas.FillRect(Rect);
      SG2.Canvas.TextOut(Rect.Left, Rect.Top, SG2.Cells[ACol, ARow]);
    end;
    if SG2.Cells[18, ARow] <> '' then   //Zag Gotov
    begin
      SG2.Canvas.Brush.Color := clOlive;
      SG2.Canvas.FillRect(Rect);
      SG2.Canvas.TextOut(Rect.Left, Rect.Top, SG2.Cells[ACol, ARow]);
    end;
    if SG2.Cells[20, ARow] <> '' then   //Покраска
    begin
      SG2.Canvas.Brush.Color := clAqua;
      SG2.Canvas.FillRect(Rect);
      SG2.Canvas.TextOut(Rect.Left, Rect.Top, SG2.Cells[ACol, ARow]);
    end;
    if SG2.Cells[21, ARow] <> '' then   //Zbor zap
    begin
      SG2.Canvas.Brush.Color := clLime;
      SG2.Canvas.FillRect(Rect);
      SG2.Canvas.TextOut(Rect.Left, Rect.Top, SG2.Cells[ACol, ARow]);
    end;
    if SG2.Cells[22, ARow] <> '' then   //OTK
    begin
      SG2.Canvas.Brush.Color := clGreen;
      SG2.Canvas.FillRect(Rect);
      SG2.Canvas.TextOut(Rect.Left, Rect.Top, SG2.Cells[ACol, ARow]);
    end;

    if SG2.Cells[24, ARow] <> '' then   //Упаковка
    begin
      SG2.Canvas.Brush.Color := clMenuHighlight;
      SG2.Canvas.FillRect(Rect);
      SG2.Canvas.TextOut(Rect.Left, Rect.Top, SG2.Cells[ACol, ARow]);
    end;
    if SG2.Cells[4,ARow]='' then
       Exit;
    if SG2.Cells[23,ARow]='' then
       Exit;
    Kol:=StrToInt(SG2.Cells[4,ARow]);
    Kol_Pr:=StrToInt(SG2.Cells[23,ARow]);
    if (Kol>Kol_Pr) and (Kol_Pr<>0) then
    begin
      SG2.Canvas.Brush.Color := clRed;
      SG2.Canvas.FillRect(Rect);
      SG2.Canvas.TextOut(Rect.Left, Rect.Top, SG2.Cells[ACol, ARow]);
    end;
    if (SG2.Cells[26, ARow] = '') and (ARow > 0) then
      Stat := 0
    else if (ARow > 0) then
      Stat := StrToInt(SG2.Cells[26, ARow]);
    if (Stat = 1) then
    begin
                        //StringGrid10.canvas.brush.Color := RGB(128, 128, 128);
                        //Серый
      SG2.Canvas.Font.Style := [fsBold];
      SG2.Canvas.FillRect(Rect);
      SG2.Canvas.TextOut(Rect.Left, Rect.Top, SG2.Cells[ACol, ARow]);
    end;
  end;
end;

procedure TForm1.SG2MouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
// Эмуляция нажатия мыши
  if Button = mbRight then
    mouse_event(MOUSEEVENTF_LEFTDOWN or MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
end;

procedure TForm1.SG2MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  Sum: Double;
  i, j: Integer;
  myrect: TGridRect;
begin
  if (SG2.Col = 4) then
  begin
    Sum := 0;
    myrect := SG2.Selection;
    for i := myrect.Left to myrect.Right do
      for j := myrect.Top to myrect.Bottom do
      begin
        try
          Sum := Sum + StrToFloat(SG2.Cells[i, j]);
        except
          Break;
        end;
      end;
    StatusBar2.Panels[2].Text := FloattOsTR(Sum);

  end;
end;

procedure TForm1.SG2SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
begin
  Label163.Caption := SG2.Cells[ACol, 0];
end;

procedure TForm1.NNN41Click(Sender: TObject);
begin
  Clipboard.AsText := SG2.Cells[SG2.Col, SG2.Row];
end;

procedure TForm1.NNN42Click(Sender: TObject);
begin
  if MessageDlg('Подумай! Удалить?', mtConfirmation, [mbYes, mbNo], 0) = mrNo then
    Exit
  else
  begin
    if not Form1.mkQueryDelete(Form1.ADOQuery1, 'DELETE FROM %s Where (IdГП= ' + #39 + SGL.Cells[I_FN_SGP + 2, SGL.Row] + #39 + ') AND (IdКО= ' + #39 + SGL.Cells[I_FN_SGP + 8, SGL.Row] + #39 + ')', ['СпецифВозд']) then
      Exit;
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [Статус]=' + #39 + '0' + #39 + ',[СтатусФ]=' + #39 + '0' + #39 + ',[СПисокФ]=' + #39 + '' + #39 + ',[РаскрЛопаток]=' + #39 + '0' + #39 + ' WHERE ([IdГП]=' + #39 + SGL.Cells[I_FN_SGP + 2, SGL.Row] + #39 + ') AND (IdКО= ' + #39 + SGL.Cells[I_FN_SGP + 8, SGL.Row] + #39 + ')', ['KlapanaZap']) then
      Exit;

  end;
end;

procedure TForm1.NNNTVClick(Sender: TObject);
var
  S, Str1, Str2, Dir, Detal, Oboz, Izdel: string;
  Res, I, U, Y, J, Res1, Res2: Integer;
  Och, Dl: Double;
begin
  Conn_Ceh := Connect_Miass_Ceh.Create();
  Conn_Klap := Connect_Miass_Klap.Create();
  FSpecOb.SpecGrid.ClearAll;
  FSpecOb.SpecGrid.Clear;
  FSpecOb.SpecGrid.RowCount := 2;
  Y := 1;
        //Clear_StringGrid(SG5);
  if not Conn_Klap.mkQuerySelect('SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME =' + #39 + 'СпецифОбщая' + #39, []) then
    exit;
  FSpecOb.SpecGrid.ColCount := Conn_Klap.AQuery.RecordCount + 1;

  for I := 0 to Conn_Klap.AQuery.RecordCount - 1 do
  begin
    Str1 := Conn_Klap.AQuery.FieldByName('COLUMN_NAME').AsString;
    Str2 := Conn_Klap.AQuery.FieldByName('COLUMN_NAME').AsString;
    Column_ALL[I, 0] := Str2;
    FSpecOb.SpecGrid.Cells[I + 1, 0] := Str1;
    Res := Pos('Н\ч', Str2);
    if Res <> 0 then
    begin
      if Y = 0 then
      begin
        FSpecOb.SpecGrid.ColWidths[I + 1] := 130;
        FSpecOb.SpecGrid.ColWidths[I] := 0;
        FSpecOb.SpecGrid.ColWidths[I + 3] := 0;

      end
      else
        FSpecOb.SpecGrid.ColWidths[I + 1] := 0;
      Delete(Str2, 1, 3);
    end;
    Conn_Klap.AQuery.Next;
  end;
  FSpecOb.SpecGrid.ColWidths[1] := 0;
  FSpecOb.SpecGrid.ColWidths[3] := 0;
  FSpecOb.SpecGrid.ColWidths[4] := 0;
  FSpecOb.SpecGrid.ColWidths[6] := 0;
  FSpecOb.SpecGrid.ColWidths[8] := 0;

  FSpecOb.SpecGrid.ColWidths[10] := 0;
  FSpecOb.SpecGrid.ColWidths[11] := 0;
  FSpecOb.SpecGrid.ColWidths[12] := 0;
  FSpecOb.SpecGrid.ColWidths[13] := 0;
  FSpecOb.SpecGrid.ColWidths[14] := 0;

  FSpecOb.SpecGrid.ColWidths[15] := 0;
  FSpecOb.SpecGrid.ColWidths[16] := 0;
  FSpecOb.SpecGrid.ColWidths[17] := 0;
  FSpecOb.SpecGrid.ColWidths[18] := 0;
  FSpecOb.SpecGrid.ColWidths[19] := 0;
  FSpecOb.SpecGrid.ColWidths[20] := 0;
  FSpecOb.SpecGrid.ColWidths[21] := 0;
  FSpecOb.SpecGrid.ColWidths[23] := 0;
  FSpecOb.SpecGrid.ColWidths[24] := 0;
  FSpecOb.SpecGrid.ColWidths[25] := 0;
  FSpecOb.SpecGrid.ColWidths[26] := 0;
  FSpecOb.SpecGrid.ColWidths[27] := 0;
  FSpecOb.SpecGrid.ColWidths[28] := 0;
  if FSpecOb.SpecGrid.RowCount = 1 then
  begin
    FSpecOb.SpecGrid.RowCount := 2;
    FSpecOb.SpecGrid.FixedRows := 1;
  end;
  S := ExtractFileDir(ParamStr(0));
  Dir := (S);
        {SGL.Cells[I_FN_SGP + 2, I + 1] :=
                        ADOQuery1.FieldByName('IdГП').AsString;}
  if not Conn_Klap.mkQuerySelect3('Select * From %s Where (IdГП=' + #39 + '%s' + #39 + ') AND (ВидЭлемента=' + #39 + 'Детали' + #39 + ') AND (IdКО=' + #39 + SGL.Cells[I_FN_SGP + 8, SGL.Row] + #39 + ')', ['СпецифВозд', SGL.Cells[I_FN_SGP + 2, SGL.Row]]) then //
    exit;
  if Conn_Klap.AQuery3.RecordCount = 0 then
  begin
    MessageDlg('Пусто!', mtError, [mbOk], 0);
    exit;
  end;

  for U := 0 to Conn_Klap.AQuery3.RecordCount - 1 do
  begin
    Detal := Conn_Klap.AQuery3.FieldByName('Элемент').AsString;
    Oboz := Conn_Klap.AQuery3.FieldByName('Обозначение').AsString;
    Izdel := Conn_Klap.AQuery3.FieldByName('Изделие').AsString;
        //Oboz:=Conn_Klap.AQuery3.FieldByName('Обозначение').AsString;
        //AND (Станок<>'+#39+'Канбан'+#39+')
    if not Conn_Klap.mkQuerySelect2('Select *  From %s Where (Обозначение=' + #39 + '%s' + #39 + ')  ', ['СпецифОбщая', Oboz]) then //Заготовка
      exit;

    FSpecOb.SpecGrid.RowCount := FSpecOb.SpecGrid.RowCount + Conn_Klap.AQuery_Del.RecordCount + 1;
    Conn_Klap.AQuery_Del.First;
    FSpecOb.Label1.Caption := IntToStr(Conn_Klap.AQuery_Del.RecordCount);
    for J := 0 to Conn_Klap.AQuery_Del.RecordCount - 1 do
    begin
      FSpecOb.SpecGrid.Cells[0, U + 1] := IntToStr(U + 1);
      for I := 0 to High(Column_ALL) do
      begin
        if Column_ALL[I, 0] <> '' then
        begin
          Str1 := Column_ALL[I, 0];
          Res2 := AnsiCompareStr('БЗ', Str1);
                        {if Res2=0 Then }
          if ((I < 28) and (I <> 1)) and (Res2 <> 0) then
            FSpecOb.SpecGrid.Cells[I + 1, U + 1] := Conn_Klap.AQuery3.FieldByName(Str1).AsString
          else
            FSpecOb.SpecGrid.Cells[I + 1, U + 1] := Conn_Klap.AQuery_Del.FieldByName(Str1).AsString;
          Res1 := Pos('rue', FSpecOb.SpecGrid.Cells[I + 1, U + 1]);
          if Res1 <> 0 then
          begin
            FSpecOb.SpecGrid.Colors[I + 1, U + 1] := RGB(204, 255, 204);
            FSpecOb.SpecGrid.FontColors[I + 1, U + 1] := clWindowText;

            if (I > 28) and (FSpecOb.SpecGrid.Cells[I + 3, U + 1] <> '') and (FSpecOb.SpecGrid.Cells[I + 4, U + 1] <> '') then
            begin
              Och := StrToFloat(FSpecOb.SpecGrid.Cells[I + 3, U + 1]);
              Dl := StrToFloat(FSpecOb.SpecGrid.Cells[I + 4, U + 1]);

              if (I > 28) and ((Och = 0) or (Dl = 0)) then
              begin
                FSpecOb.SpecGrid.Colors[I + 1, U + 1] := RGB(255, 0, 0);
                FSpecOb.SpecGrid.FontColors[I + 1, U + 1] := clWindowText;
              end;
            end;
          end;
        end;

      end;

      Conn_Klap.AQuery_Del.Next;
    end;
    Conn_Klap.AQuery3.Next;
  end;

  FSpecOb.Memo4.Lines.Clear;
  for I := 0 to FSpecOb.SpecGrid.RowCount - 1 do
  begin
    if FSpecOb.SpecGrid.Cells[9, I] <> '' then
    begin
      if not Conn_Klap.mkQuerySelect2('Select *  From %s Where (Обозначение=' + #39 + '%s' + #39 + ')  ', ['СпецифОбщая', FSpecOb.SpecGrid.Cells[9, I]]) then //Заготовка
        exit;
      FSpecOb.Memo4.Lines.Add(Conn_Klap.AQuery_Del.FieldByName('Обозначение').AsString + ' - ' + Conn_Klap.AQuery_Del.FieldByName('ЕИ').AsString);
    end;
  end;
  FSpecOb.ShowModal;
end;

procedure TForm1.NNN477Click(Sender: TObject);
begin

  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [' + FN_SGP + ']=' + #39 + 'V' + #39 + ',[' + FN_ZAKAZCHIK + ']=' + #39 + 'V' + #39 + ' WHERE ([IdГП]=' + #39 + SGL.Cells[I_FN_SGP + 2, SGL.Row] + #39 + ') AND ([IdКО]=' + #39 + SGL.Cells[I_FN_SGP + 8, SGL.Row] + #39 + ')', ['KlapanaZap']) then
    Exit;
  SGL.Cells[I_FN_ZAKAZCHIK, SGL.Row] := 'V';
  SGL.Cells[I_FN_SGP, SGL.Row] := 'V';

        //end;
end;

procedure TForm1.NNN45Click(Sender: TObject);
var
  Vn_Dat, Nom, fileName: string;
  C: Integer;
begin
  Nom := ZSG.Cells[0, ZSG.Row];
  UOsnova_Main := Osnova_Main.Create();
  fileName :='';// ExtractFileDir(ParamStr(0)); //+'\Klapan.EXE';
  Vn_Dat := (ZSG.Cells[I_FN_KOL_ZAP + 3, ZSG.Row]);
  C := StrToInt(ZSG.Cells[I_FN_KOL_ZAP + 28, ZSG.Row]);
  UOsnova_Main.Flag_Error := 0;
  UOsnova_Main.Flag_Polzov := 0; //Технолог
  UOsnova_Main.Osnova(Vn_Dat, 'Запуск', 'Специф', #39 + Nom + #39, fileName, 0, C);
        //++++++++++++++++++++++++++++++++++++++++++++++++++
  if UOsnova_Main.Flag_Error = 2 then //ДЕТАЛИ НЕ ВСЕ
                //ЗАНЕСТИ В ЗАПУСК И Поставить флаг ФлагЗаготовки
  begin
                //++++++++++++++++++++++++++++++++++++++++++++++++++++
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [ФлагЗаготовки]=' + #39 + '0' + #39 + ',Планирование=NULL WHERE [Номер]=' + #39 + (Nom) + #39, ['Запуск']) then
      Exit;
    Form1.Memo2.Lines.Add('UOsnova_Main.Osnova( ДЕТАЛИ НЕ ВСЕ,Запуск,Специф,' + Nom + ',' + fileName + ' )UOsnova_Main.Flag_Error =1');
  end;
  if UOsnova_Main.Flag_Error = 0 then //ВСЕ нормально
                                                //И UPDATE КЛАПАНА НЕ ДЕЛАТЬ
  begin
    MessageDlg('Все детали обработаны', mtInformation, [mbOk], 0);
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [ФлагЗаготовки]=' + #39 + '1' + #39 + ' WHERE [Номер]=' + #39 + (Nom) + #39, ['Запуск']) then
      Exit;
  end;
end;

procedure TForm1.NNN46Click(Sender: TObject);
var
  Vn_Dat, Nom, fileName: string;
  C: Integer;
begin
  Nom := ZCV.Cells[0, ZCV.Row];

  UOsnova_Main := Osnova_Main.Create();
  fileName := '';//ExtractFileDir(ParamStr(0)); //+'\Klapan.EXE'; ConvertDat1                           1
  Vn_Dat := (ZCV.Cells[8, ZCV.Row]);
  C := StrToInt(ZCV.Cells[35, ZCV.Row]);
  UOsnova_Main.Flag_Error := 0;
  UOsnova_Main.Osnova(Vn_Dat, 'ЗапускВозд', 'СпецифВозд', #39 + Nom + #39, fileName, 0, C);
        //++++++++++++++++++++++++++++++++++++++++++++++++++

  if UOsnova_Main.Flag_Error = 2 then //ДЕТАЛИ НЕ ВСЕ
                //ЗАНЕСТИ В ЗАПУСК И Поставить флаг ФлагЗаготовки
  begin
                //++++++++++++++++++++++++++++++++++++++++++++++++++++
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [ФлагЗаготовки]=' + #39 + '0' + #39 + ' WHERE [Номер]=' + #39 + (Nom) + #39, ['ЗапускВозд']) then
      Exit;
    Form1.Memo2.Lines.Add('UOsnova_Main.Osnova( ДЕТАЛИ НЕ ВСЕ,ЗапускВозд,СпецифВозд,' + Nom + ',' + fileName + ' )UOsnova_Main.Flag_Error =1');
  end;
  if UOsnova_Main.Flag_Error = 1 then //ДАТА ЛЕВАЯ УДАЛИТЬ Из ЗАПУСКА
                                                //И UPDATE КЛАПАНА НЕ ДЕЛАТЬ
  begin

    MessageDlg('ДатаПланирования! Заготовка не успеет.', mtError, [mbOk], 0);
    Form1.Memo2.Lines.Add('UOsnova_Main.Osnova( ДАТА НЕ ТА - ' + Vn_Dat + ',ЗапускВозд,СпецифВозд,' + Nom + ',' + fileName + ' )UOsnova_Main.Flag_Error =1');
  end;
        //++++++++++++++++++++++++++++++++++++++++++++++++++
  if UOsnova_Main.Flag_Error = 0 then //ВСЕ нормально
                                                //И UPDATE КЛАПАНА НЕ ДЕЛАТЬ
  begin
    MessageDlg('Все детали обработаны', mtInformation, [mbOk], 0);
    if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [ФлагЗаготовки]=' + #39 + '1' + #39 + ' WHERE [Номер]=' + #39 + (Nom) + #39, ['ЗапускВозд']) then
      Exit;
  end;
end;

procedure TForm1.NNN210Click(Sender: TObject);
var
  S, Str1, Str2, Dir, Detal, Oboz, Izdel, Kol: string;
  Res, I, U, Y, J, Res1, Res2: Integer;
  Och, Dl: Double;
begin
  Conn_Ceh := Connect_Miass_Ceh.Create();
  Conn_Klap := Connect_Miass_Klap.Create();
  Y := 1;
  FSpecOb.SpecGrid.ClearAll;
  FSpecOb.SpecGrid.Clear;
  FSpecOb.SpecGrid.RowCount := 2;
        //Clear_StringGrid(SG5);
  if not Conn_Klap.mkQuerySelect('SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME =' + #39 + 'СпецифОбщая' + #39, []) then
    exit;
  FSpecOb.SpecGrid.ColCount := Conn_Klap.AQuery.RecordCount + 1;

  for I := 0 to Conn_Klap.AQuery.RecordCount - 1 do
  begin
    Str1 := Conn_Klap.AQuery.FieldByName('COLUMN_NAME').AsString;
    Str2 := Conn_Klap.AQuery.FieldByName('COLUMN_NAME').AsString;
    Column_ALL[I, 0] := Str2;
    FSpecOb.SpecGrid.Cells[I + 1, 0] := Str1;
    Res := Pos('Н\ч', Str2);
    if Res <> 0 then
    begin
      if Y = 0 then
      begin
        FSpecOb.SpecGrid.ColWidths[I + 1] := 130;
        FSpecOb.SpecGrid.ColWidths[I] := 0;
        FSpecOb.SpecGrid.ColWidths[I + 3] := 0;

      end
      else
        FSpecOb.SpecGrid.ColWidths[I + 1] := 0;
      Delete(Str2, 1, 3);
    end;
    Conn_Klap.AQuery.Next;
  end;
  FSpecOb.SpecGrid.ColWidths[1] := 0;
  FSpecOb.SpecGrid.ColWidths[3] := 0;
  FSpecOb.SpecGrid.ColWidths[4] := 0;
  FSpecOb.SpecGrid.ColWidths[6] := 0;
  FSpecOb.SpecGrid.ColWidths[8] := 0;

  FSpecOb.SpecGrid.ColWidths[10] := 0;
  FSpecOb.SpecGrid.ColWidths[11] := 0;
  FSpecOb.SpecGrid.ColWidths[12] := 0;
  FSpecOb.SpecGrid.ColWidths[13] := 0;
  FSpecOb.SpecGrid.ColWidths[14] := 0;

  FSpecOb.SpecGrid.ColWidths[15] := 30;
  FSpecOb.SpecGrid.ColWidths[16] := 30;
  FSpecOb.SpecGrid.ColWidths[17] := 30;
  FSpecOb.SpecGrid.ColWidths[18] := 30;
  FSpecOb.SpecGrid.ColWidths[19] := 0;
  FSpecOb.SpecGrid.ColWidths[20] := 0;
  FSpecOb.SpecGrid.ColWidths[21] := 0;
  FSpecOb.SpecGrid.ColWidths[23] := 0;
  FSpecOb.SpecGrid.ColWidths[24] := 0;
  FSpecOb.SpecGrid.ColWidths[25] := 0;
  FSpecOb.SpecGrid.ColWidths[26] := 0;
  FSpecOb.SpecGrid.ColWidths[27] := 0;
  FSpecOb.SpecGrid.ColWidths[28] := 0;
        //FSpecOb.SpecGrid.FixedCols:=24;
  if FSpecOb.SpecGrid.RowCount = 1 then
  begin
    FSpecOb.SpecGrid.RowCount := 2;
    FSpecOb.SpecGrid.FixedRows := 1;
  end;
  S := ExtractFileDir(ParamStr(0));
  Dir := (S);
  if not Conn_Klap.mkQuerySelect3('Select * From %s Where (IdГП=' + #39 + '%s' + #39 + ') AND (IdКО=' + #39 + '%s' + #39 + ') AND (ВидЭлемента=' + #39 + 'Детали' + #39 + ')', ['Специф', StringGrid10.Cells[I_FN_SGP + 2, StringGrid10.Row], StringGrid10.Cells[I_FN_SGP + 3, StringGrid10.Row]]) then //
    exit;
  if Conn_Klap.AQuery3.RecordCount = 0 then
  begin
    MessageDlg('Пусто!', mtError, [mbOk], 0);
    exit;
  end;

  for U := 0 to Conn_Klap.AQuery3.RecordCount - 1 do
  begin
    Detal := Conn_Klap.AQuery3.FieldByName('Элемент').AsString;
    Oboz := Conn_Klap.AQuery3.FieldByName('Обозначение').AsString;
    Izdel := Conn_Klap.AQuery3.FieldByName('Изделие').AsString;
    Kol := Conn_Klap.AQuery3.FieldByName('Количество').AsString;
        //Oboz:=Conn_Klap.AQuery3.FieldByName('Обозначение').AsString;
        //AND (Станок<>'+#39+'Канбан'+#39+')
    if not Conn_Klap.mkQuerySelect2('Select *  From %s Where (Обозначение=' + #39 + '%s' + #39 + ')  ', ['СпецифОбщая', Oboz]) then //Заготовка
      exit;

    FSpecOb.SpecGrid.RowCount := FSpecOb.SpecGrid.RowCount + Conn_Klap.AQuery_Del.RecordCount + 1;
    Conn_Klap.AQuery_Del.First;
    FSpecOb.Label1.Caption := IntToStr(Conn_Klap.AQuery_Del.RecordCount);
    for J := 0 to Conn_Klap.AQuery_Del.RecordCount - 1 do
    begin
      FSpecOb.SpecGrid.Cells[0, U + 1] := IntToStr(U + 1);
      for I := 0 to High(Column_ALL) do
      begin
        if Column_ALL[I, 0] <> '' then
        begin
          Str1 := Column_ALL[I, 0];
          Res2 := AnsiCompareStr('БЗ', Str1);
                        {if Res2=0 Then }
          if ((I < 28) and (I <> 1)) and (Res2 <> 0) then
            FSpecOb.SpecGrid.Cells[I + 1, U + 1] := Conn_Klap.AQuery3.FieldByName(Str1).AsString
          else
            FSpecOb.SpecGrid.Cells[I + 1, U + 1] := Conn_Klap.AQuery_Del.FieldByName(Str1).AsString;
          Res1 := Pos('rue', FSpecOb.SpecGrid.Cells[I + 1, U + 1]);
          if Res1 <> 0 then
          begin
            FSpecOb.SpecGrid.Colors[I + 1, U + 1] := RGB(204, 255, 204);
            FSpecOb.SpecGrid.FontColors[I + 1, U + 1] := clWindowText;
            if (I > 28) and (FSpecOb.SpecGrid.Cells[I + 3, U + 1] <> '') and (FSpecOb.SpecGrid.Cells[I + 4, U + 1] <> '') then
            begin
              Och := StrToFloat(FSpecOb.SpecGrid.Cells[I + 3, U + 1]);
              Dl := StrToFloat(FSpecOb.SpecGrid.Cells[I + 4, U + 1]);

              if (I > 28) and ((Och = 0) or (Dl = 0)) then
              begin
                FSpecOb.SpecGrid.Colors[I + 1, U + 1] := RGB(255, 0, 0);
                FSpecOb.SpecGrid.FontColors[I + 1, U + 1] := clWindowText;
              end;
            end;
          end;
        end;

      end;
                {Res1:=Pos('rue',FSpecOb.SpecGrid.Cells[2, u + 1]);
                if Res1<>0 then
                begin
                       FSpecOb.SpecGrid.Colors[I+1,u + 1]:=RGB(204,255,204);
                       FSpecOb.SpecGrid.FontColors[I+1,u + 1]:=clWindowText;
                End; }
      Conn_Klap.AQuery_Del.Next;
    end;
    Conn_Klap.AQuery3.Next;
  end;
  FSpecOb.Memo4.Lines.Clear;
  for I := 0 to FSpecOb.SpecGrid.RowCount - 1 do
  begin
    if FSpecOb.SpecGrid.Cells[9, I] <> '' then
    begin
      if not Conn_Klap.mkQuerySelect2('Select *  From %s Where (Обозначение=' + #39 + '%s' + #39 + ')  ', ['СпецифОбщая', FSpecOb.SpecGrid.Cells[9, I]]) then //Заготовка
        exit;
      FSpecOb.Memo4.Lines.Add(Conn_Klap.AQuery_Del.FieldByName('Обозначение').AsString + ' - ' + Conn_Klap.AQuery_Del.FieldByName('ЕИ').AsString);
    end;
  end;
  FSpecOb.ShowmODAL;
end;

procedure TForm1.NNN43Click(Sender: TObject);
var
  I: Integer;
begin

  Zapusk2 := 2;
  FNewNakl.Label2.Caption := ZSG.Cells[0, ZSG.Row];
  FNewNakl.Label15.Caption := ZSG.Cells[I_FN_KOL_ZAP + 2, ZSG.Row];
  FNewNakl.ShowModal;
end;

procedure TForm1.btn30Click(Sender: TObject);
begin
  ExportGridATMtoExcel(SG2);
end;

procedure TForm1.btn31Click(Sender: TObject);
var
  Vn_Dat, fileName, Dat, KO: string;
  I, Y, A, C: Integer;
begin
  UOsnova_Main := Osnova_Main.Create();
  Conn_Klap := Connect_Miass_Klap.Create();
  Conn_Ceh := Connect_Miass_Ceh.Create();

  fileName :='';// ExtractFileDir(ParamStr(0)); //+'\Klapan.EXE';
  Vn_Dat := FormatDateTime('dd.mm.yyyy', DateTimePicker1.Date);
  for I := 0 to ZSG.RowCount - 1 do
  begin
    if StringGrid11.Cells[0, I] <> '' then
    begin
      Vn_Dat := ZSG.Cells[I_FN_KOL_ZAP + 3, I];
      C := StrToInt(ZSG.Cells[I_FN_KOL_ZAP + 28, I]);
      UOsnova_Main.Flag_Error := 0;
      if not UOsnova_Main.Osnova(Vn_Dat, '[Запуск]', '[Специф]', #39 + ZSG.Cells[0, I] + #39, fileName, 1, C) then
        Exit;
    end;
  end;
end;

procedure TForm1.btn32Click(Sender: TObject);
var
  Vn_Dat, fileName, Dat: string;
  I, Y, A, C: Integer;
begin
        //Vn_Dat := FormatDateTime('mm.dd.yyyy', DateTimePicker1.Date);
  UOsnova_Main := Osnova_Main.Create();
  Conn_Klap := Connect_Miass_Klap.Create();
  Conn_Ceh := Connect_Miass_Ceh.Create();

  fileName :='';// ExtractFileDir(ParamStr(0)); //+'\Klapan.EXE';
                //Vn_Dat := FormatDateTime('dd.mm.yyyy', DateTimePicker1.Date);
  for I := 0 to ZCV.RowCount - 1 do
  begin
    if SG3.Cells[0, I] <> '' then
    begin                               //ZSG.Cells[I_FN_KOL_ZAP + 3, 1]
      Vn_Dat := (ZCV.Cells[8, I]);
      C := StrToInt(ZCV.Cells[35, I]);
      UOsnova_Main.Flag_Error := 0;                            //  Edit1.Text
      if not UOsnova_Main.Osnova(Vn_Dat, 'ЗапускВозд', 'СпецифВозд', #39 + ZCV.Cells[0, I] + #39, fileName, 1, C) then
        Exit;
    end;
  end;
end;

procedure TForm1.sg3MouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
  i, j: integer;
begin

  SG3.MouseToCell(X, Y, i, j);
  FSelectRow(ZCV, SG3.Row);
end;

procedure TForm1.sg3MouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin
  Handled := true;
  SG3.Perform(WM_VSCROLL, SB_LINEDOWN, 0);
end;

procedure TForm1.sg3MouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin
  Handled := true;
  SG3.Perform(WM_VSCROLL, SB_LINEUP, 0);
end;

procedure TForm1.sg3SelectCell(Sender: TObject; ACol, ARow: Integer; var CanSelect: Boolean);
var
  R: TRect;
  I, Res: Integer;
  Str: string;
begin

  if ((ACol = 0) and (ARow > 1)) then
  begin
    FSelectRow(ZCV, ARow);
    CheckACol9 := ACol;
    CheckARow9 := ARow;
    R := SG3.CellRect(ACol, ARow);
    R.Left := R.Left + SG3.Left;
    R.Right := R.Right + SG3.Left;
    R.Top := R.Top + SG3.Top;
    R.Bottom := R.Bottom + SG3.Top;
    Chk1.Left := R.Left + 1;
    Chk1.Top := R.Top + 1;
    Chk1.Width := (R.Right + 1) - R.Left;
    Chk1.Height := (R.Bottom + 1) - R.Top;
    Chk1.Visible := True;
    if SG3.Cells[ACol, ARow] <> '' then
    begin
      Chk1.Checked := True;

    end
    else
    begin
      Chk1.Checked := False;

    end;
  end;
end;

procedure TForm1.sg3TopLeftChanged(Sender: TObject);
begin
  ZCV.TopRow := SG3.TopRow;
end;

procedure TForm1.ZCVTopLeftChanged(Sender: TObject);
begin
  SG3.TopRow := ZCV.TopRow;
end;

procedure TForm1.chk1Click(Sender: TObject);
begin
  if Chk1.Checked = True then
  begin
    SG3.Cells[0, CheckARow9] := 'V';

  end;
  if Chk1.Checked = False then
    SG3.Cells[0, CheckARow9] := '';
end;

procedure TForm1.chk1Exit(Sender: TObject);
begin
  Chk1.Visible := False;
end;

procedure TForm1.chk2Click(Sender: TObject);
begin
  if chk2.Checked then
  begin
    DateTimePicker7.Enabled := True;
    DateTimePicker8.Enabled := True;
  end
  else
  begin
    DateTimePicker7.Enabled := False;
    DateTimePicker8.Enabled := False;
    Label136.Caption := '0';
  end
end;

procedure TForm1.chk4Click(Sender: TObject);
begin
  if chk4.Checked then
  begin
    dtp4.Enabled := True;
    dtp5.Enabled := True;
  end
  else
  begin
    dtp4.Enabled := False;
    dtp5.Enabled := False;
    Label203.Caption := '0';
  end
end;

procedure TForm1.chk5Click(Sender: TObject);
begin
  if chk5.Checked then
    DEF_CatalogName := 'KlapanArhiv'
  else
    DEF_CatalogName := Memo1.Lines[0]; //Klapan


  if chk5.Checked then
    MSSQL_CONN_STR_Glob := Memo1.Lines[6]
  else
    MSSQL_CONN_STR_Glob := Memo1.Lines[4];
end;

procedure TForm1.chk6Click(Sender: TObject);
begin
  if chk6.Checked then
    DEF_CatalogName := 'KlapanArhiv'
  else
    DEF_CatalogName := Memo1.Lines[0]; //Klapan


  if chk6.Checked then
    MSSQL_CONN_STR_Glob := Memo1.Lines[6]
  else
    MSSQL_CONN_STR_Glob := Memo1.Lines[4];
end;

procedure TForm1.NNN44Click(Sender: TObject);
begin
  if not Form1.mkQueryUpdate(Form1.ADOQuery1, 'UPDATE %s SET [' + FN_ZAKAZCHIK + ']=' + #39 + '' + #39 +                               //  '['+FN_SGP+']='+ #39+''+ #39+
    ',[ПДО]=' + #39 + '' + #39 + ' WHERE ([IdГП]=' + #39 + SGL.Cells[I_FN_SGP + 2, SGL.Row] + #39 + ') AND ([IdКО]=' + #39 + SGL.Cells[I_FN_SGP + 8, SGL.Row] + #39 + ')', ['KlapanaZap']) then
    Exit;
  SGL.Cells[I_FN_ZAKAZCHIK, SGL.Row] := '';
                        //N7.Click;
end;

procedure TForm1.Edit11Click(Sender: TObject);
begin
  Edit19.Text := '';
end;

procedure TForm1.Edit19Click(Sender: TObject);
begin
  Edit11.text := '';
end;

procedure TForm1.Button15Click(Sender: TObject);
var
  Res, X, Res_: Integer;
  Str_e4, Str1, Str2, Str3: string;
begin
  Poisk := 1;
  if Edit11.Text <> '' then
    Order4 := '  AND (Заказ=' + #39 + Edit11.Text + #39 + ')';
  if Edit19.Text <> '' then
  begin
    Str_e4 := Edit19.Text;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := ' (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    Res := Pos('+', Str_e4);
    if Res <> 0 then
    begin
      Str1 := Str1 + ' OR (Номер=' + #39 + Copy(Str_e4, 1, Res - 1) + #39 + ')';
      Delete(Str_e4, 1, Res);
      X := 1;
    end;
    if X = 1 then
      Str1 := Str1 + ' OR (Номер=' + #39 + Str_e4 + #39 + ')'
    else
      Str1 := ' (Номер=' + #39 + Str_e4 + #39 + ')';
    Res_ := Pos('-', Str_e4);
    if Res_ <> 0 then
    begin
      Str2 := Copy(Str_e4, 1, Res_ - 1);
      Delete(Str_e4, 1, Res_);
      Str3 := Str_e4;
      Order4 := '  AND (Номер>=' + #39 + Str2 + #39 + ') AND (Номер<=' + #39 + Str3 + #39 + ')';

    end
    else
    begin

      Order4 := '  AND (' + Str1 + ')';
    end;
                //Order4:='  AND (Номер='+#39+Edit18.Text+#39+')';

  end;
  Button7.Click;
end;
{ MyThread }

procedure MyThread.Execute;
var
  MsgCnt, i, REs1, Res2, Res3, Res4, Res0, y: integer;
  msg: TIdMessage;
  msgFlags: Integer;
 // it:TidAttachment;
  S, Dir, SSS, T: string;
  SSLOpen: TIdSSLIOHandlerSocketOpenSSL;
  SS: TIdSSLVersion;
  A: array[0..10000] of Integer;
begin
//Ввод необходимой информации для соединения с сервером
  S := ExtractFileDir(ParamStr(0));
  Dir := S + '\Почта\';
  CreateDir(Dir);

  msg := TIdMessage.Create(nil);
  msg.CharSet := 'windows-1251';
  msg.ContentType := 'text/plain; charset="windows-1251"';
  REs1 := Pos('@miass.veza', Form1.Mail);
  if REs1 <> 0 then
    Form1.IdIMAP41.Host := 'imap.yandex.ru'
  else
    Form1.IdIMAP41.Host := 'imap.gmail.com';
     // 'mail'
  Form1.IdIMAP41.Port := 143;
  Form1.IdIMAP41.Username := Form1.Mail; //'programm@miass.veza.ru';
  Form1.IdIMAP41.Password := Form1.Pass; //'s0192837465';
  Form1.Memo2.Lines.Add(Form1.Mail);
      //это необходимо использовать для SSL
  SSLOpen := TIdSSLIOHandlerSocketOpenSSL.Create(nil);

  SSLOpen.Destination := Form1.IdIMAP41.Host + ':' + IntToStr(Form1.IdIMAP41.Port);
  SSLOpen.Host := Form1.IdIMAP41.Host;
  SSLOpen.Port := Form1.IdIMAP41.Port;
  SSLOpen.DefaultPort := 0;
  SS := SSLOpen.SSLOptions.Method;
  SSLOpen.SSLOptions.Mode := sslmClient;
  SSLOpen.SSLOptions.Method := sslvSSLv23;
  SSLOpen.SSLOptions.SSLVersions := [sslvSSLv3, sslvTLSv1, sslvTLSv1_1, sslvTLSv1_2];
  Form1.IdIMAP41.IOHandler := SSLOpen;
  Form1.IdIMAP41.UseTLS := utUseExplicitTLS;
  Form1.Memo2.Lines.Add('Connect');
  Form1.IdIMAP41.Connect;
  if Form1.IdIMAP41.Connected then
  begin
    Form1.Memo2.Lines.Add('Connected');
    Regist.Edit2.Visible := False;
    Regist.label1.Visible := False;
    Regist.Button1.Enabled := True;
    Regist.Button3.Visible := False;
  end;
  Form1.IdIMAP41.SelectMailBox('INBOX');
  Form1.IdIMAP41.StatusMailBox('INBOX', Form1.IdIMAP41.MailBox);
  MsgCnt := Form1.IdIMAP41.MailBox.UnseenMsgs;
  msgFlags := Form1.IdIMAP41.MailBox.FirstUnseenMsg;
  MsgCnt := Form1.IdIMAP41.MailBox.TotalMsgs;
  results := MsgCnt;
  Form1.Memo2.Lines.Add(IntToStr(MsgCnt));
  for i := msgFlags to MsgCnt do
  begin
      //Form1.Memo2.Lines.Add(IntToStr(MsgCnt));
    if not Form1.IdIMAP41.CheckMsgSeen(i) then
    begin
      msg.Encoding := mePlainText;
      msg.ContentType := 'text/html; charset="windows-1251"';
      Form1.IdIMAP41.Retrieve(i, msg);
      SSS := msg.Subject;
      Form1.Memo2.Lines.Add(SSS);
        //msg.Headers.Extract('Received',SSS);
      REs1 := Pos('Не соответствие.', SSS);
      Res2 := Pos('Nowie KLAPANA', SSS);
      Res4 := Pos('Развертки', SSS);
      Res3 := Pos('Клапана', SSS);
      if (REs1 <> 0) or (Res2 <> 0) or (Res3 <> 0) then
      begin
        T := FormatDateTime('hh-mm', Now);
        msg.CharSet := 'windows-1251';
        Form1.Zagolov := msg.Subject;
        Form1.Telo := msg.Body.Text;
        if msg.MessageParts.Count = 0 then
          msg.Body.SaveToFile(Dir + msg.Subject + ' ' + T + '.txt')
        else
        begin
          (msg.MessageParts.Items[0] as TidText).Body.SaveToFile(Dir + msg.Subject + ' ' + T + '.txt');
          for y := 0 to msg.MessageParts.Count - 1 do
          begin
            SSS := TIdAttachment(msg.MessageParts.Items[y]).FileName;
            if SSS = '' then
              Continue;
            Res0 := Pos('.txt', SSS);
            if Res0 <> 0 then
              Insert(' ' + T, SSS, Res0);
            TIdAttachment(msg.MessageParts.Items[y]).SaveToFile(Dir + '\' + SSS);
          end;
        end;
        if (REs1 <> 0) or (Res3 <> 0) then
        begin
          Form1.tmr1.Enabled := True;
          Form1.Memo2.Lines.Add('Form1.tmr1.Enabled:=True;');
        end;
        if (Res2 <> 0) or (Res4 <> 0) then
        begin
          Form1.tmr3.Enabled := True;
          Form1.Memo2.Lines.Add('Form1.tmr3.Enabled:=True;');
        end;

        Synchronize(ShowResult);

      end
      else
        Form1.IdIMAP41.StoreFlags(i, sdReplace, msg.Flags - [mfSeen]);
    end;

  end;

  Form1.IdIMAP41.Disconnect;
  Form1.IdIMAP41.IOHandler.Free;
  msg.Free;
end;

procedure MyThread.ShowResult;
var
  S: string;
begin
{S := ExtractFileDir(ParamStr(0));
S:=S+'\flt.wav' ;
sndPlaySound(PWideChar(S), SND_ASYNC + SND_LOOP);  }
//STOP
//sndPlaySound(nil, SND_ASYNC);
       {Form1.Memo5.Lines.Add(IntToStr( results));
       Form1.Memo16.Lines.Add(( Form1.Zagolov));
       Form1.Memo16.Lines.Add(( Form1.Telo));  }
end;

end.

